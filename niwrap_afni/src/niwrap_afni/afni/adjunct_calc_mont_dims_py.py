# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ADJUNCT_CALC_MONT_DIMS_PY_METADATA = Metadata(
    id="65740c5e7b4735fb06713201c897e753dba3424a.boutiques",
    name="adjunct_calc_mont_dims.py",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


AdjunctCalcMontDimsPyParameters = typing.TypedDict('AdjunctCalcMontDimsPyParameters', {
    "@type": typing.NotRequired[typing.Literal["afni/adjunct_calc_mont_dims.py"]],
    "help": bool,
})
AdjunctCalcMontDimsPyParametersTagged = typing.TypedDict('AdjunctCalcMontDimsPyParametersTagged', {
    "@type": typing.Literal["afni/adjunct_calc_mont_dims.py"],
    "help": bool,
})


class AdjunctCalcMontDimsPyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AdjunctCalcMontDimsPyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def adjunct_calc_mont_dims_py_params(
    help_: bool = False,
) -> AdjunctCalcMontDimsPyParametersTagged:
    """
    Build parameters.
    
    Args:
        help_: Display help information.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "afni/adjunct_calc_mont_dims.py",
        "help": help_,
    }
    return params


def adjunct_calc_mont_dims_py_cargs(
    params: AdjunctCalcMontDimsPyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("adjunct_calc_mont_dims.py")
    if params.get("help", False):
        cargs.append("-help")
    return cargs


def adjunct_calc_mont_dims_py_outputs(
    params: AdjunctCalcMontDimsPyParameters,
    execution: Execution,
) -> AdjunctCalcMontDimsPyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AdjunctCalcMontDimsPyOutputs(
        root=execution.output_file("."),
    )
    return ret


def adjunct_calc_mont_dims_py_execute(
    params: AdjunctCalcMontDimsPyParameters,
    runner: Runner | None = None,
) -> AdjunctCalcMontDimsPyOutputs:
    """
    adjunct_calc_mont_dims.py
    
    A helper function for the fat_proc* scripts.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AdjunctCalcMontDimsPyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ADJUNCT_CALC_MONT_DIMS_PY_METADATA)
    params = execution.params(params)
    cargs = adjunct_calc_mont_dims_py_cargs(params, execution)
    ret = adjunct_calc_mont_dims_py_outputs(params, execution)
    execution.run(cargs)
    return ret


def adjunct_calc_mont_dims_py(
    help_: bool = False,
    runner: Runner | None = None,
) -> AdjunctCalcMontDimsPyOutputs:
    """
    adjunct_calc_mont_dims.py
    
    A helper function for the fat_proc* scripts.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        help_: Display help information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AdjunctCalcMontDimsPyOutputs`).
    """
    params = adjunct_calc_mont_dims_py_params(
        help_=help_,
    )
    return adjunct_calc_mont_dims_py_execute(params, runner)


__all__ = [
    "ADJUNCT_CALC_MONT_DIMS_PY_METADATA",
    "AdjunctCalcMontDimsPyOutputs",
    "adjunct_calc_mont_dims_py",
    "adjunct_calc_mont_dims_py_execute",
    "adjunct_calc_mont_dims_py_params",
]
