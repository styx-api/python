# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FAT_PROC_MAP_TO_DTI_METADATA = Metadata(
    id="395822a397ddad40ad7686204af5516f6ff6b62a.boutiques",
    name="fat_proc_map_to_dti",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


FatProcMapToDtiParameters = typing.TypedDict('FatProcMapToDtiParameters', {
    "@type": typing.NotRequired[typing.Literal["afni/fat_proc_map_to_dti"]],
    "source": InputPathType,
    "base": InputPathType,
    "prefix": str,
    "followers_nn": typing.NotRequired[list[InputPathType] | None],
    "followers_wsinc5": typing.NotRequired[list[InputPathType] | None],
    "followers_surf": typing.NotRequired[list[InputPathType] | None],
    "followers_ndset": typing.NotRequired[list[InputPathType] | None],
    "followers_spec": typing.NotRequired[list[InputPathType] | None],
    "matrix": typing.NotRequired[InputPathType | None],
    "workdir": typing.NotRequired[str | None],
    "no_cmd_out": bool,
    "no_clean": bool,
})
FatProcMapToDtiParametersTagged = typing.TypedDict('FatProcMapToDtiParametersTagged', {
    "@type": typing.Literal["afni/fat_proc_map_to_dti"],
    "source": InputPathType,
    "base": InputPathType,
    "prefix": str,
    "followers_nn": typing.NotRequired[list[InputPathType] | None],
    "followers_wsinc5": typing.NotRequired[list[InputPathType] | None],
    "followers_surf": typing.NotRequired[list[InputPathType] | None],
    "followers_ndset": typing.NotRequired[list[InputPathType] | None],
    "followers_spec": typing.NotRequired[list[InputPathType] | None],
    "matrix": typing.NotRequired[InputPathType | None],
    "workdir": typing.NotRequired[str | None],
    "no_cmd_out": bool,
    "no_clean": bool,
})


class FatProcMapToDtiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FatProcMapToDtiParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fat_proc_map_to_dti_params(
    source: InputPathType,
    base: InputPathType,
    prefix: str,
    followers_nn: list[InputPathType] | None = None,
    followers_wsinc5: list[InputPathType] | None = None,
    followers_surf: list[InputPathType] | None = None,
    followers_ndset: list[InputPathType] | None = None,
    followers_spec: list[InputPathType] | None = None,
    matrix: InputPathType | None = None,
    workdir: str | None = None,
    no_cmd_out: bool = False,
    no_clean: bool = False,
) -> FatProcMapToDtiParametersTagged:
    """
    Build parameters.
    
    Args:
        source: T1w volume file (source volume).
        base: DWI reference volume file.
        prefix: Output prefix for files and snapshots.
        followers_nn: Follower data sets with NN interpolation.
        followers_wsinc5: Follower data sets with wsinc5 interpolation.
        followers_surf: Surface follower data sets.
        followers_ndset: NIML follower data sets.
        followers_spec: Spec follower data sets.
        matrix: Pre-made matrix file for transformation.
        workdir: Specify a working directory.
        no_cmd_out: Don't save the command line call of this program.
        no_clean: Do not delete temporary working directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "afni/fat_proc_map_to_dti",
        "source": source,
        "base": base,
        "prefix": prefix,
        "no_cmd_out": no_cmd_out,
        "no_clean": no_clean,
    }
    if followers_nn is not None:
        params["followers_nn"] = followers_nn
    if followers_wsinc5 is not None:
        params["followers_wsinc5"] = followers_wsinc5
    if followers_surf is not None:
        params["followers_surf"] = followers_surf
    if followers_ndset is not None:
        params["followers_ndset"] = followers_ndset
    if followers_spec is not None:
        params["followers_spec"] = followers_spec
    if matrix is not None:
        params["matrix"] = matrix
    if workdir is not None:
        params["workdir"] = workdir
    return params


def fat_proc_map_to_dti_cargs(
    params: FatProcMapToDtiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fat_proc_map_to_dti")
    cargs.extend([
        "-source",
        execution.input_file(params.get("source", None))
    ])
    cargs.extend([
        "-base",
        execution.input_file(params.get("base", None))
    ])
    cargs.extend([
        "-prefix",
        params.get("prefix", None)
    ])
    if params.get("followers_nn", None) is not None:
        cargs.extend([
            "-followers_NN",
            *[execution.input_file(f) for f in params.get("followers_nn", None)]
        ])
    if params.get("followers_wsinc5", None) is not None:
        cargs.extend([
            "-followers_wsinc5",
            *[execution.input_file(f) for f in params.get("followers_wsinc5", None)]
        ])
    if params.get("followers_surf", None) is not None:
        cargs.extend([
            "-followers_surf",
            *[execution.input_file(f) for f in params.get("followers_surf", None)]
        ])
    if params.get("followers_ndset", None) is not None:
        cargs.extend([
            "-followers_ndset",
            *[execution.input_file(f) for f in params.get("followers_ndset", None)]
        ])
    if params.get("followers_spec", None) is not None:
        cargs.extend([
            "-followers_spec",
            *[execution.input_file(f) for f in params.get("followers_spec", None)]
        ])
    if params.get("matrix", None) is not None:
        cargs.extend([
            "-matrix",
            execution.input_file(params.get("matrix", None))
        ])
    if params.get("workdir", None) is not None:
        cargs.extend([
            "-workdir",
            params.get("workdir", None)
        ])
    if params.get("no_cmd_out", False):
        cargs.append("-no_cmd_out")
    if params.get("no_clean", False):
        cargs.append("-no_clean")
    return cargs


def fat_proc_map_to_dti_outputs(
    params: FatProcMapToDtiParameters,
    execution: Execution,
) -> FatProcMapToDtiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FatProcMapToDtiOutputs(
        root=execution.output_file("."),
    )
    return ret


def fat_proc_map_to_dti_execute(
    params: FatProcMapToDtiParameters,
    runner: Runner | None = None,
) -> FatProcMapToDtiOutputs:
    """
    fat_proc_map_to_dti
    
    A program for mapping data sets into DWI space, suitable for aligning
    anatomical ROI maps or EPI data to a DWI reference volume.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FatProcMapToDtiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FAT_PROC_MAP_TO_DTI_METADATA)
    params = execution.params(params)
    cargs = fat_proc_map_to_dti_cargs(params, execution)
    ret = fat_proc_map_to_dti_outputs(params, execution)
    execution.run(cargs)
    return ret


def fat_proc_map_to_dti(
    source: InputPathType,
    base: InputPathType,
    prefix: str,
    followers_nn: list[InputPathType] | None = None,
    followers_wsinc5: list[InputPathType] | None = None,
    followers_surf: list[InputPathType] | None = None,
    followers_ndset: list[InputPathType] | None = None,
    followers_spec: list[InputPathType] | None = None,
    matrix: InputPathType | None = None,
    workdir: str | None = None,
    no_cmd_out: bool = False,
    no_clean: bool = False,
    runner: Runner | None = None,
) -> FatProcMapToDtiOutputs:
    """
    fat_proc_map_to_dti
    
    A program for mapping data sets into DWI space, suitable for aligning
    anatomical ROI maps or EPI data to a DWI reference volume.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        source: T1w volume file (source volume).
        base: DWI reference volume file.
        prefix: Output prefix for files and snapshots.
        followers_nn: Follower data sets with NN interpolation.
        followers_wsinc5: Follower data sets with wsinc5 interpolation.
        followers_surf: Surface follower data sets.
        followers_ndset: NIML follower data sets.
        followers_spec: Spec follower data sets.
        matrix: Pre-made matrix file for transformation.
        workdir: Specify a working directory.
        no_cmd_out: Don't save the command line call of this program.
        no_clean: Do not delete temporary working directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FatProcMapToDtiOutputs`).
    """
    params = fat_proc_map_to_dti_params(
        source=source,
        base=base,
        prefix=prefix,
        followers_nn=followers_nn,
        followers_wsinc5=followers_wsinc5,
        followers_surf=followers_surf,
        followers_ndset=followers_ndset,
        followers_spec=followers_spec,
        matrix=matrix,
        workdir=workdir,
        no_cmd_out=no_cmd_out,
        no_clean=no_clean,
    )
    return fat_proc_map_to_dti_execute(params, runner)


__all__ = [
    "FAT_PROC_MAP_TO_DTI_METADATA",
    "FatProcMapToDtiOutputs",
    "fat_proc_map_to_dti",
    "fat_proc_map_to_dti_execute",
    "fat_proc_map_to_dti_params",
]
