# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

IMREG_METADATA = Metadata(
    id="f9b37911bbee55f16e00b06af7413164ae887501.boutiques",
    name="imreg",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


ImregParameters = typing.TypedDict('ImregParameters', {
    "@type": typing.NotRequired[typing.Literal["afni/imreg"]],
    "base_image": str,
    "image_sequence": list[InputPathType],
    "nowrite": bool,
    "prefix": typing.NotRequired[str | None],
    "suffix": typing.NotRequired[str | None],
    "start": typing.NotRequired[float | None],
    "step": typing.NotRequired[float | None],
    "flim": bool,
    "keepsize": bool,
    "quiet": bool,
    "debug": bool,
    "dprefix": typing.NotRequired[str | None],
    "bilinear": bool,
    "modes": typing.NotRequired[str | None],
    "mlcf": bool,
    "wtim": typing.NotRequired[InputPathType | None],
    "dfspace": bool,
    "cmass": bool,
    "fine": typing.NotRequired[list[float] | None],
    "nofine": bool,
})
ImregParametersTagged = typing.TypedDict('ImregParametersTagged', {
    "@type": typing.Literal["afni/imreg"],
    "base_image": str,
    "image_sequence": list[InputPathType],
    "nowrite": bool,
    "prefix": typing.NotRequired[str | None],
    "suffix": typing.NotRequired[str | None],
    "start": typing.NotRequired[float | None],
    "step": typing.NotRequired[float | None],
    "flim": bool,
    "keepsize": bool,
    "quiet": bool,
    "debug": bool,
    "dprefix": typing.NotRequired[str | None],
    "bilinear": bool,
    "modes": typing.NotRequired[str | None],
    "mlcf": bool,
    "wtim": typing.NotRequired[InputPathType | None],
    "dfspace": bool,
    "cmass": bool,
    "fine": typing.NotRequired[list[float] | None],
    "nofine": bool,
})


class ImregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ImregParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    registered_images: OutputPathType | None
    """Registered images"""
    dx_file: OutputPathType | None
    """Time series dx file"""
    dy_file: OutputPathType | None
    """Time series dy file"""
    phi_file: OutputPathType | None
    """Time series phi file"""


def imreg_params(
    base_image: str,
    image_sequence: list[InputPathType],
    nowrite: bool = False,
    prefix: str | None = None,
    suffix: str | None = None,
    start: float | None = None,
    step: float | None = None,
    flim: bool = False,
    keepsize: bool = False,
    quiet: bool = False,
    debug: bool = False,
    dprefix: str | None = None,
    bilinear: bool = False,
    modes: str | None = None,
    mlcf: bool = False,
    wtim: InputPathType | None = None,
    dfspace: bool = False,
    cmass: bool = False,
    fine: list[float] | None = None,
    nofine: bool = False,
) -> ImregParametersTagged:
    """
    Build parameters.
    
    Args:
        base_image: Base image or method to determine base image ('+AVER' or\
            '+count').
        image_sequence: Sequence of images to be registered.
        nowrite: Don't write outputs, just print progress reports.
        prefix: Prefix for output file names.
        suffix: Suffix for output file names.
        start: Start index for output file names.
        step: Step size for output file indices.
        flim: Write output in mrilib floating point format.
        keepsize: Preserve the original image size on output.
        quiet: Don't write progress report messages.
        debug: Write lots of debugging output.
        dprefix: Prefix for dx, dy, and phi files.
        bilinear: Use bilinear interpolation.
        modes: Interpolation modes during coarse, fine, and registration phases.
        mlcf: Equivalent to '-modes bilinear bicubic Fourier'.
        wtim: Weighting image file.
        dfspace: Use difiterated differential spatial method.
        cmass: Align centers of mass of the images.
        fine: Fine fit parameters: blur, dxy, dphi.
        nofine: Turn off the 'fine' fit algorithm.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "afni/imreg",
        "base_image": base_image,
        "image_sequence": image_sequence,
        "nowrite": nowrite,
        "flim": flim,
        "keepsize": keepsize,
        "quiet": quiet,
        "debug": debug,
        "bilinear": bilinear,
        "mlcf": mlcf,
        "dfspace": dfspace,
        "cmass": cmass,
        "nofine": nofine,
    }
    if prefix is not None:
        params["prefix"] = prefix
    if suffix is not None:
        params["suffix"] = suffix
    if start is not None:
        params["start"] = start
    if step is not None:
        params["step"] = step
    if dprefix is not None:
        params["dprefix"] = dprefix
    if modes is not None:
        params["modes"] = modes
    if wtim is not None:
        params["wtim"] = wtim
    if fine is not None:
        params["fine"] = fine
    return params


def imreg_cargs(
    params: ImregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("imreg")
    cargs.append(params.get("base_image", None))
    cargs.extend([execution.input_file(f) for f in params.get("image_sequence", None)])
    if params.get("nowrite", False):
        cargs.append("-nowrite")
    if params.get("prefix", None) is not None:
        cargs.extend([
            "-prefix",
            params.get("prefix", None)
        ])
    if params.get("suffix", None) is not None:
        cargs.extend([
            "-suffix",
            params.get("suffix", None)
        ])
    if params.get("start", None) is not None:
        cargs.extend([
            "-start",
            str(params.get("start", None))
        ])
    if params.get("step", None) is not None:
        cargs.extend([
            "-step",
            str(params.get("step", None))
        ])
    if params.get("flim", False):
        cargs.append("-flim")
    if params.get("keepsize", False):
        cargs.append("-keepsize")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("dprefix", None) is not None:
        cargs.extend([
            "-dprefix",
            params.get("dprefix", None)
        ])
    if params.get("bilinear", False):
        cargs.append("-bilinear")
    if params.get("modes", None) is not None:
        cargs.extend([
            "-modes",
            params.get("modes", None)
        ])
    if params.get("mlcf", False):
        cargs.append("-mlcF")
    if params.get("wtim", None) is not None:
        cargs.extend([
            "-wtim",
            execution.input_file(params.get("wtim", None))
        ])
    if params.get("dfspace", False):
        cargs.append("-dfspace")
    if params.get("cmass", False):
        cargs.append("-cmass")
    if params.get("fine", None) is not None:
        cargs.extend([
            "-fine",
            *map(str, params.get("fine", None))
        ])
    if params.get("nofine", False):
        cargs.append("-nofine")
    return cargs


def imreg_outputs(
    params: ImregParameters,
    execution: Execution,
) -> ImregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ImregOutputs(
        root=execution.output_file("."),
        registered_images=execution.output_file(params.get("prefix", None) + ".[INDEX]." + params.get("suffix", None)) if (params.get("prefix") is not None and params.get("suffix") is not None) else None,
        dx_file=execution.output_file(params.get("dprefix", None) + ".dx") if (params.get("dprefix") is not None) else None,
        dy_file=execution.output_file(params.get("dprefix", None) + ".dy") if (params.get("dprefix") is not None) else None,
        phi_file=execution.output_file(params.get("dprefix", None) + ".phi") if (params.get("dprefix") is not None) else None,
    )
    return ret


def imreg_execute(
    params: ImregParameters,
    runner: Runner | None = None,
) -> ImregOutputs:
    """
    imreg
    
    Registers each 2D image in 'image_sequence' to 'base_image'.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(IMREG_METADATA)
    params = execution.params(params)
    cargs = imreg_cargs(params, execution)
    ret = imreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def imreg(
    base_image: str,
    image_sequence: list[InputPathType],
    nowrite: bool = False,
    prefix: str | None = None,
    suffix: str | None = None,
    start: float | None = None,
    step: float | None = None,
    flim: bool = False,
    keepsize: bool = False,
    quiet: bool = False,
    debug: bool = False,
    dprefix: str | None = None,
    bilinear: bool = False,
    modes: str | None = None,
    mlcf: bool = False,
    wtim: InputPathType | None = None,
    dfspace: bool = False,
    cmass: bool = False,
    fine: list[float] | None = None,
    nofine: bool = False,
    runner: Runner | None = None,
) -> ImregOutputs:
    """
    imreg
    
    Registers each 2D image in 'image_sequence' to 'base_image'.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        base_image: Base image or method to determine base image ('+AVER' or\
            '+count').
        image_sequence: Sequence of images to be registered.
        nowrite: Don't write outputs, just print progress reports.
        prefix: Prefix for output file names.
        suffix: Suffix for output file names.
        start: Start index for output file names.
        step: Step size for output file indices.
        flim: Write output in mrilib floating point format.
        keepsize: Preserve the original image size on output.
        quiet: Don't write progress report messages.
        debug: Write lots of debugging output.
        dprefix: Prefix for dx, dy, and phi files.
        bilinear: Use bilinear interpolation.
        modes: Interpolation modes during coarse, fine, and registration phases.
        mlcf: Equivalent to '-modes bilinear bicubic Fourier'.
        wtim: Weighting image file.
        dfspace: Use difiterated differential spatial method.
        cmass: Align centers of mass of the images.
        fine: Fine fit parameters: blur, dxy, dphi.
        nofine: Turn off the 'fine' fit algorithm.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImregOutputs`).
    """
    params = imreg_params(
        base_image=base_image,
        image_sequence=image_sequence,
        nowrite=nowrite,
        prefix=prefix,
        suffix=suffix,
        start=start,
        step=step,
        flim=flim,
        keepsize=keepsize,
        quiet=quiet,
        debug=debug,
        dprefix=dprefix,
        bilinear=bilinear,
        modes=modes,
        mlcf=mlcf,
        wtim=wtim,
        dfspace=dfspace,
        cmass=cmass,
        fine=fine,
        nofine=nofine,
    )
    return imreg_execute(params, runner)


__all__ = [
    "IMREG_METADATA",
    "ImregOutputs",
    "imreg",
    "imreg_execute",
    "imreg_params",
]
