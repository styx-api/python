# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V__DJUNCT_4D_SLICES_TO_3D_VOL_METADATA = Metadata(
    id="d33d93b8039f4982d3532e2434ea65801211058f.boutiques",
    name="@djunct_4d_slices_to_3d_vol",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


VDjunct4dSlicesTo3dVolParameters = typing.TypedDict('VDjunct4dSlicesTo3dVolParameters', {
    "@type": typing.NotRequired[typing.Literal["afni/@djunct_4d_slices_to_3d_vol"]],
    "do_something": bool,
})
VDjunct4dSlicesTo3dVolParametersTagged = typing.TypedDict('VDjunct4dSlicesTo3dVolParametersTagged', {
    "@type": typing.Literal["afni/@djunct_4d_slices_to_3d_vol"],
    "do_something": bool,
})


class VDjunct4dSlicesTo3dVolOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VDjunct4dSlicesTo3dVolParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output file generated by the tool"""


def v__djunct_4d_slices_to_3d_vol_params(
    do_something: bool = False,
) -> VDjunct4dSlicesTo3dVolParametersTagged:
    """
    Build parameters.
    
    Args:
        do_something: Do something really useful.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "afni/@djunct_4d_slices_to_3d_vol",
        "do_something": do_something,
    }
    return params


def v__djunct_4d_slices_to_3d_vol_cargs(
    params: VDjunct4dSlicesTo3dVolParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("@djunct_4d_slices_to_3d_vol")
    if params.get("do_something", False):
        cargs.append("-do-something")
    return cargs


def v__djunct_4d_slices_to_3d_vol_outputs(
    params: VDjunct4dSlicesTo3dVolParameters,
    execution: Execution,
) -> VDjunct4dSlicesTo3dVolOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VDjunct4dSlicesTo3dVolOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file("output_file"),
    )
    return ret


def v__djunct_4d_slices_to_3d_vol_execute(
    params: VDjunct4dSlicesTo3dVolParameters,
    runner: Runner | None = None,
) -> VDjunct4dSlicesTo3dVolOutputs:
    """
    @djunct_4d_slices_to_3d_vol
    
    Tool description goes here.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VDjunct4dSlicesTo3dVolOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V__DJUNCT_4D_SLICES_TO_3D_VOL_METADATA)
    params = execution.params(params)
    cargs = v__djunct_4d_slices_to_3d_vol_cargs(params, execution)
    ret = v__djunct_4d_slices_to_3d_vol_outputs(params, execution)
    execution.run(cargs)
    return ret


def v__djunct_4d_slices_to_3d_vol(
    do_something: bool = False,
    runner: Runner | None = None,
) -> VDjunct4dSlicesTo3dVolOutputs:
    """
    @djunct_4d_slices_to_3d_vol
    
    Tool description goes here.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        do_something: Do something really useful.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VDjunct4dSlicesTo3dVolOutputs`).
    """
    params = v__djunct_4d_slices_to_3d_vol_params(
        do_something=do_something,
    )
    return v__djunct_4d_slices_to_3d_vol_execute(params, runner)


__all__ = [
    "VDjunct4dSlicesTo3dVolOutputs",
    "V__DJUNCT_4D_SLICES_TO_3D_VOL_METADATA",
    "v__djunct_4d_slices_to_3d_vol",
    "v__djunct_4d_slices_to_3d_vol_execute",
    "v__djunct_4d_slices_to_3d_vol_params",
]
