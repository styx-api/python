# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANTSUSE_LANDMARK_IMAGES_TO_GET_BSPLINE_DISPLACEMENT_FIELD_METADATA = Metadata(
    id="97a7208c0feb66caac1f85f91d7e5b2be53f6438.boutiques",
    name="ANTSUseLandmarkImagesToGetBSplineDisplacementField",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters = typing.TypedDict('AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/ANTSUseLandmarkImagesToGetBSplineDisplacementField"]],
    "fixed_image_with_labeled_landmarks": InputPathType,
    "moving_image_with_labeled_landmarks": InputPathType,
    "output_displacement_field": str,
    "mesh_size": str,
    "number_of_levels": int,
    "order": typing.NotRequired[int | None],
    "enforce_stationary_boundaries": typing.NotRequired[int | None],
    "landmark_weights": typing.NotRequired[InputPathType | None],
})
AntsuseLandmarkImagesToGetBsplineDisplacementFieldParametersTagged = typing.TypedDict('AntsuseLandmarkImagesToGetBsplineDisplacementFieldParametersTagged', {
    "@type": typing.Literal["ants/ANTSUseLandmarkImagesToGetBSplineDisplacementField"],
    "fixed_image_with_labeled_landmarks": InputPathType,
    "moving_image_with_labeled_landmarks": InputPathType,
    "output_displacement_field": str,
    "mesh_size": str,
    "number_of_levels": int,
    "order": typing.NotRequired[int | None],
    "enforce_stationary_boundaries": typing.NotRequired[int | None],
    "landmark_weights": typing.NotRequired[InputPathType | None],
})


class AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    displacement_field: OutputPathType
    """The resultant displacement field for the registration process."""


def antsuse_landmark_images_to_get_bspline_displacement_field_params(
    fixed_image_with_labeled_landmarks: InputPathType,
    moving_image_with_labeled_landmarks: InputPathType,
    output_displacement_field: str,
    mesh_size: str,
    number_of_levels: int,
    order: int | None = None,
    enforce_stationary_boundaries: int | None = None,
    landmark_weights: InputPathType | None = None,
) -> AntsuseLandmarkImagesToGetBsplineDisplacementFieldParametersTagged:
    """
    Build parameters.
    
    Args:
        fixed_image_with_labeled_landmarks: The fixed image with labeled\
            landmarks.
        moving_image_with_labeled_landmarks: The moving image with labeled\
            landmarks.
        output_displacement_field: The output displacement field file.
        mesh_size: The mesh size specified as meshSize[0]xmeshSize[1]x...
        number_of_levels: The number of levels in the B-spline hierarchy.
        order: The order of the B-spline (default is 3).
        enforce_stationary_boundaries: Whether to enforce stationary boundaries\
            (default is 1).
        landmark_weights: Optional text file containing landmark weights. Each\
            row is either "label,labelWeight" or "labelWeight". If the latter\
            format is used, the weights are assumed to be arranged in ascending\
            order by label.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/ANTSUseLandmarkImagesToGetBSplineDisplacementField",
        "fixed_image_with_labeled_landmarks": fixed_image_with_labeled_landmarks,
        "moving_image_with_labeled_landmarks": moving_image_with_labeled_landmarks,
        "output_displacement_field": output_displacement_field,
        "mesh_size": mesh_size,
        "number_of_levels": number_of_levels,
    }
    if order is not None:
        params["order"] = order
    if enforce_stationary_boundaries is not None:
        params["enforce_stationary_boundaries"] = enforce_stationary_boundaries
    if landmark_weights is not None:
        params["landmark_weights"] = landmark_weights
    return params


def antsuse_landmark_images_to_get_bspline_displacement_field_cargs(
    params: AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ANTSUseLandmarkImagesToGetBSplineDisplacementField")
    cargs.append(execution.input_file(params.get("fixed_image_with_labeled_landmarks", None)))
    cargs.append(execution.input_file(params.get("moving_image_with_labeled_landmarks", None)))
    cargs.append(params.get("output_displacement_field", None))
    cargs.append(params.get("mesh_size", None))
    cargs.append(str(params.get("number_of_levels", None)))
    if params.get("order", None) is not None:
        cargs.append(str(params.get("order", None)))
    if params.get("enforce_stationary_boundaries", None) is not None:
        cargs.append(str(params.get("enforce_stationary_boundaries", None)))
    if params.get("landmark_weights", None) is not None:
        cargs.append(execution.input_file(params.get("landmark_weights", None)))
    return cargs


def antsuse_landmark_images_to_get_bspline_displacement_field_outputs(
    params: AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters,
    execution: Execution,
) -> AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs(
        root=execution.output_file("."),
        displacement_field=execution.output_file(params.get("output_displacement_field", None)),
    )
    return ret


def antsuse_landmark_images_to_get_bspline_displacement_field_execute(
    params: AntsuseLandmarkImagesToGetBsplineDisplacementFieldParameters,
    runner: Runner | None = None,
) -> AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs:
    """
    ANTSUseLandmarkImagesToGetBSplineDisplacementField
    
    We expect the input images to be (1) N-ary (2) in the same physical space as
    the images you want to register and (3) to have the same landmark points
    defined within them. Landmarks will be defined from the center of mass of
    the labels in the input images. You can use ITK-snap to generate the label
    images. The optional landmarks weights are read from a text file where each
    row is either: "label,labelWeight" or "labelWeight". If the latter format is
    used, the label weights are assumed to be arranged in ascending order by
    label.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANTSUSE_LANDMARK_IMAGES_TO_GET_BSPLINE_DISPLACEMENT_FIELD_METADATA)
    params = execution.params(params)
    cargs = antsuse_landmark_images_to_get_bspline_displacement_field_cargs(params, execution)
    ret = antsuse_landmark_images_to_get_bspline_displacement_field_outputs(params, execution)
    execution.run(cargs)
    return ret


def antsuse_landmark_images_to_get_bspline_displacement_field(
    fixed_image_with_labeled_landmarks: InputPathType,
    moving_image_with_labeled_landmarks: InputPathType,
    output_displacement_field: str,
    mesh_size: str,
    number_of_levels: int,
    order: int | None = None,
    enforce_stationary_boundaries: int | None = None,
    landmark_weights: InputPathType | None = None,
    runner: Runner | None = None,
) -> AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs:
    """
    ANTSUseLandmarkImagesToGetBSplineDisplacementField
    
    We expect the input images to be (1) N-ary (2) in the same physical space as
    the images you want to register and (3) to have the same landmark points
    defined within them. Landmarks will be defined from the center of mass of
    the labels in the input images. You can use ITK-snap to generate the label
    images. The optional landmarks weights are read from a text file where each
    row is either: "label,labelWeight" or "labelWeight". If the latter format is
    used, the label weights are assumed to be arranged in ascending order by
    label.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        fixed_image_with_labeled_landmarks: The fixed image with labeled\
            landmarks.
        moving_image_with_labeled_landmarks: The moving image with labeled\
            landmarks.
        output_displacement_field: The output displacement field file.
        mesh_size: The mesh size specified as meshSize[0]xmeshSize[1]x...
        number_of_levels: The number of levels in the B-spline hierarchy.
        order: The order of the B-spline (default is 3).
        enforce_stationary_boundaries: Whether to enforce stationary boundaries\
            (default is 1).
        landmark_weights: Optional text file containing landmark weights. Each\
            row is either "label,labelWeight" or "labelWeight". If the latter\
            format is used, the weights are assumed to be arranged in ascending\
            order by label.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs`).
    """
    params = antsuse_landmark_images_to_get_bspline_displacement_field_params(
        fixed_image_with_labeled_landmarks=fixed_image_with_labeled_landmarks,
        moving_image_with_labeled_landmarks=moving_image_with_labeled_landmarks,
        output_displacement_field=output_displacement_field,
        mesh_size=mesh_size,
        number_of_levels=number_of_levels,
        order=order,
        enforce_stationary_boundaries=enforce_stationary_boundaries,
        landmark_weights=landmark_weights,
    )
    return antsuse_landmark_images_to_get_bspline_displacement_field_execute(params, runner)


__all__ = [
    "ANTSUSE_LANDMARK_IMAGES_TO_GET_BSPLINE_DISPLACEMENT_FIELD_METADATA",
    "AntsuseLandmarkImagesToGetBsplineDisplacementFieldOutputs",
    "antsuse_landmark_images_to_get_bspline_displacement_field",
    "antsuse_landmark_images_to_get_bspline_displacement_field_execute",
    "antsuse_landmark_images_to_get_bspline_displacement_field_params",
]
