# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CONVERT_TO_JPG_METADATA = Metadata(
    id="05ba9d9a81340f45633926fc4c293fdf619a95ab.boutiques",
    name="ConvertToJpg",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


ConvertToJpgParameters = typing.TypedDict('ConvertToJpgParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/ConvertToJpg"]],
    "infile": InputPathType,
    "outfile": str,
})
ConvertToJpgParametersTagged = typing.TypedDict('ConvertToJpgParametersTagged', {
    "@type": typing.Literal["ants/ConvertToJpg"],
    "infile": InputPathType,
    "outfile": str,
})


class ConvertToJpgOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ConvertToJpgParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_jpg: OutputPathType
    """The converted JPG image."""


def convert_to_jpg_params(
    infile: InputPathType,
    outfile: str,
) -> ConvertToJpgParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: The input file in NIfTI format.
        outfile: The output file in JPG format.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/ConvertToJpg",
        "infile": infile,
        "outfile": outfile,
    }
    return params


def convert_to_jpg_cargs(
    params: ConvertToJpgParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ConvertToJpg")
    cargs.append(execution.input_file(params.get("infile", None)))
    cargs.append(params.get("outfile", None))
    return cargs


def convert_to_jpg_outputs(
    params: ConvertToJpgParameters,
    execution: Execution,
) -> ConvertToJpgOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ConvertToJpgOutputs(
        root=execution.output_file("."),
        output_jpg=execution.output_file(params.get("outfile", None)),
    )
    return ret


def convert_to_jpg_execute(
    params: ConvertToJpgParameters,
    runner: Runner | None = None,
) -> ConvertToJpgOutputs:
    """
    ConvertToJpg
    
    A tool to convert NIfTI images to JPG format.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConvertToJpgOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONVERT_TO_JPG_METADATA)
    params = execution.params(params)
    cargs = convert_to_jpg_cargs(params, execution)
    ret = convert_to_jpg_outputs(params, execution)
    execution.run(cargs)
    return ret


def convert_to_jpg(
    infile: InputPathType,
    outfile: str,
    runner: Runner | None = None,
) -> ConvertToJpgOutputs:
    """
    ConvertToJpg
    
    A tool to convert NIfTI images to JPG format.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        infile: The input file in NIfTI format.
        outfile: The output file in JPG format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConvertToJpgOutputs`).
    """
    params = convert_to_jpg_params(
        infile=infile,
        outfile=outfile,
    )
    return convert_to_jpg_execute(params, runner)


__all__ = [
    "CONVERT_TO_JPG_METADATA",
    "ConvertToJpgOutputs",
    "convert_to_jpg",
    "convert_to_jpg_execute",
    "convert_to_jpg_params",
]
