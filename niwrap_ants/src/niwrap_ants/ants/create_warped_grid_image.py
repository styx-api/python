# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CREATE_WARPED_GRID_IMAGE_METADATA = Metadata(
    id="e77b860defec17e64141d0e139550e9625747193.boutiques",
    name="CreateWarpedGridImage",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


CreateWarpedGridImageParameters = typing.TypedDict('CreateWarpedGridImageParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/CreateWarpedGridImage"]],
    "image_dimension": int,
    "deformation_field": InputPathType,
    "output_image": str,
    "directions": typing.NotRequired[str | None],
    "grid_spacing": typing.NotRequired[str | None],
    "grid_sigma": typing.NotRequired[str | None],
})
CreateWarpedGridImageParametersTagged = typing.TypedDict('CreateWarpedGridImageParametersTagged', {
    "@type": typing.Literal["ants/CreateWarpedGridImage"],
    "image_dimension": int,
    "deformation_field": InputPathType,
    "output_image": str,
    "directions": typing.NotRequired[str | None],
    "grid_spacing": typing.NotRequired[str | None],
    "grid_sigma": typing.NotRequired[str | None],
})


class CreateWarpedGridImageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CreateWarpedGridImageParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    warped_grid_image: OutputPathType
    """The resultant warped grid image."""


def create_warped_grid_image_params(
    image_dimension: int,
    deformation_field: InputPathType,
    output_image: str,
    directions: str | None = None,
    grid_spacing: str | None = None,
    grid_sigma: str | None = None,
) -> CreateWarpedGridImageParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: The dimensionality of the input image.
        deformation_field: File containing the deformation field to be applied.
        output_image: The filename of the output warped grid image.
        directions: Directions for the grid warping, e.g., '1x0x0'.
        grid_spacing: Spacing of the grid, e.g., '10x10x10'.
        grid_sigma: Sigma value for the grid smoothing, e.g., '1x1x1'.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/CreateWarpedGridImage",
        "image_dimension": image_dimension,
        "deformation_field": deformation_field,
        "output_image": output_image,
    }
    if directions is not None:
        params["directions"] = directions
    if grid_spacing is not None:
        params["grid_spacing"] = grid_spacing
    if grid_sigma is not None:
        params["grid_sigma"] = grid_sigma
    return params


def create_warped_grid_image_cargs(
    params: CreateWarpedGridImageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("CreateWarpedGridImage")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.append(execution.input_file(params.get("deformation_field", None)))
    cargs.append(params.get("output_image", None))
    if params.get("directions", None) is not None:
        cargs.append(params.get("directions", None))
    if params.get("grid_spacing", None) is not None:
        cargs.append(params.get("grid_spacing", None))
    if params.get("grid_sigma", None) is not None:
        cargs.append(params.get("grid_sigma", None))
    return cargs


def create_warped_grid_image_outputs(
    params: CreateWarpedGridImageParameters,
    execution: Execution,
) -> CreateWarpedGridImageOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CreateWarpedGridImageOutputs(
        root=execution.output_file("."),
        warped_grid_image=execution.output_file(params.get("output_image", None)),
    )
    return ret


def create_warped_grid_image_execute(
    params: CreateWarpedGridImageParameters,
    runner: Runner | None = None,
) -> CreateWarpedGridImageOutputs:
    """
    CreateWarpedGridImage
    
    Create a warped grid image based on the specified deformation field.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateWarpedGridImageOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CREATE_WARPED_GRID_IMAGE_METADATA)
    params = execution.params(params)
    cargs = create_warped_grid_image_cargs(params, execution)
    ret = create_warped_grid_image_outputs(params, execution)
    execution.run(cargs)
    return ret


def create_warped_grid_image(
    image_dimension: int,
    deformation_field: InputPathType,
    output_image: str,
    directions: str | None = None,
    grid_spacing: str | None = None,
    grid_sigma: str | None = None,
    runner: Runner | None = None,
) -> CreateWarpedGridImageOutputs:
    """
    CreateWarpedGridImage
    
    Create a warped grid image based on the specified deformation field.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: The dimensionality of the input image.
        deformation_field: File containing the deformation field to be applied.
        output_image: The filename of the output warped grid image.
        directions: Directions for the grid warping, e.g., '1x0x0'.
        grid_spacing: Spacing of the grid, e.g., '10x10x10'.
        grid_sigma: Sigma value for the grid smoothing, e.g., '1x1x1'.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateWarpedGridImageOutputs`).
    """
    params = create_warped_grid_image_params(
        image_dimension=image_dimension,
        deformation_field=deformation_field,
        output_image=output_image,
        directions=directions,
        grid_spacing=grid_spacing,
        grid_sigma=grid_sigma,
    )
    return create_warped_grid_image_execute(params, runner)


__all__ = [
    "CREATE_WARPED_GRID_IMAGE_METADATA",
    "CreateWarpedGridImageOutputs",
    "create_warped_grid_image",
    "create_warped_grid_image_execute",
    "create_warped_grid_image_params",
]
