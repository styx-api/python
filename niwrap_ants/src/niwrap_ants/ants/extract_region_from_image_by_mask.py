# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA = Metadata(
    id="a771c6b15a68298a66132d0c551dee738e184a1d.boutiques",
    name="ExtractRegionFromImageByMask",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


ExtractRegionFromImageByMaskParameters = typing.TypedDict('ExtractRegionFromImageByMaskParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/ExtractRegionFromImageByMask"]],
    "image_dimension": int,
    "input_image": InputPathType,
    "output_image": InputPathType,
    "label_mask_image": InputPathType,
    "label": typing.NotRequired[int | None],
    "pad_radius": typing.NotRequired[int | None],
})
ExtractRegionFromImageByMaskParametersTagged = typing.TypedDict('ExtractRegionFromImageByMaskParametersTagged', {
    "@type": typing.Literal["ants/ExtractRegionFromImageByMask"],
    "image_dimension": int,
    "input_image": InputPathType,
    "output_image": InputPathType,
    "label_mask_image": InputPathType,
    "label": typing.NotRequired[int | None],
    "pad_radius": typing.NotRequired[int | None],
})


class ExtractRegionFromImageByMaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ExtractRegionFromImageByMaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def extract_region_from_image_by_mask_params(
    image_dimension: int,
    input_image: InputPathType,
    output_image: InputPathType,
    label_mask_image: InputPathType,
    label: int | None = None,
    pad_radius: int | None = None,
) -> ExtractRegionFromImageByMaskParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: Dimension of the input image.
        input_image: The input image from which a region will be extracted.
        output_image: The output image containing the extracted region.
        label_mask_image: The label mask image used to extract the bounding\
            box.
        label: The label value used to extract the sub-region.
        pad_radius: Optional padding radius to be added around the bounding\
            box.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/ExtractRegionFromImageByMask",
        "image_dimension": image_dimension,
        "input_image": input_image,
        "output_image": output_image,
        "label_mask_image": label_mask_image,
    }
    if label is not None:
        params["label"] = label
    if pad_radius is not None:
        params["pad_radius"] = pad_radius
    return params


def extract_region_from_image_by_mask_cargs(
    params: ExtractRegionFromImageByMaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ExtractRegionFromImageByMask")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.append(execution.input_file(params.get("input_image", None)))
    cargs.append(execution.input_file(params.get("output_image", None)))
    cargs.append(execution.input_file(params.get("label_mask_image", None)))
    if params.get("label", None) is not None:
        cargs.append(str(params.get("label", None)))
    if params.get("pad_radius", None) is not None:
        cargs.append(str(params.get("pad_radius", None)))
    return cargs


def extract_region_from_image_by_mask_outputs(
    params: ExtractRegionFromImageByMaskParameters,
    execution: Execution,
) -> ExtractRegionFromImageByMaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ExtractRegionFromImageByMaskOutputs(
        root=execution.output_file("."),
    )
    return ret


def extract_region_from_image_by_mask_execute(
    params: ExtractRegionFromImageByMaskParameters,
    runner: Runner | None = None,
) -> ExtractRegionFromImageByMaskOutputs:
    """
    ExtractRegionFromImageByMask
    
    Extract a sub-region from an image using the bounding box from a label
    image, with an optional padding radius.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ExtractRegionFromImageByMaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA)
    params = execution.params(params)
    cargs = extract_region_from_image_by_mask_cargs(params, execution)
    ret = extract_region_from_image_by_mask_outputs(params, execution)
    execution.run(cargs)
    return ret


def extract_region_from_image_by_mask(
    image_dimension: int,
    input_image: InputPathType,
    output_image: InputPathType,
    label_mask_image: InputPathType,
    label: int | None = None,
    pad_radius: int | None = None,
    runner: Runner | None = None,
) -> ExtractRegionFromImageByMaskOutputs:
    """
    ExtractRegionFromImageByMask
    
    Extract a sub-region from an image using the bounding box from a label
    image, with an optional padding radius.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Dimension of the input image.
        input_image: The input image from which a region will be extracted.
        output_image: The output image containing the extracted region.
        label_mask_image: The label mask image used to extract the bounding\
            box.
        label: The label value used to extract the sub-region.
        pad_radius: Optional padding radius to be added around the bounding\
            box.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ExtractRegionFromImageByMaskOutputs`).
    """
    params = extract_region_from_image_by_mask_params(
        image_dimension=image_dimension,
        input_image=input_image,
        output_image=output_image,
        label_mask_image=label_mask_image,
        label=label,
        pad_radius=pad_radius,
    )
    return extract_region_from_image_by_mask_execute(params, runner)


__all__ = [
    "EXTRACT_REGION_FROM_IMAGE_BY_MASK_METADATA",
    "ExtractRegionFromImageByMaskOutputs",
    "extract_region_from_image_by_mask",
    "extract_region_from_image_by_mask_execute",
    "extract_region_from_image_by_mask_params",
]
