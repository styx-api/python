# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

IMAGE_SET_STATISTICS_METADATA = Metadata(
    id="d02e2ac8fe2bc9079ce6267ba5d5982285e6b1bf.boutiques",
    name="ImageSetStatistics",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


ImageSetStatisticsParameters = typing.TypedDict('ImageSetStatisticsParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/ImageSetStatistics"]],
    "image_dimension": int,
    "controls_list": InputPathType,
    "output_image": str,
    "which_stat": typing.Literal[0, 1, 2, 3, 4, 5, 6, 7],
    "roi": typing.NotRequired[InputPathType | None],
    "imagelist2": typing.NotRequired[InputPathType | None],
})
ImageSetStatisticsParametersTagged = typing.TypedDict('ImageSetStatisticsParametersTagged', {
    "@type": typing.Literal["ants/ImageSetStatistics"],
    "image_dimension": int,
    "controls_list": InputPathType,
    "output_image": str,
    "which_stat": typing.Literal[0, 1, 2, 3, 4, 5, 6, 7],
    "roi": typing.NotRequired[InputPathType | None],
    "imagelist2": typing.NotRequired[InputPathType | None],
})


class ImageSetStatisticsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ImageSetStatisticsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    computed_statistics_image: OutputPathType
    """The output image containing the computed statistics."""


def image_set_statistics_params(
    image_dimension: int,
    controls_list: InputPathType,
    output_image: str,
    which_stat: typing.Literal[0, 1, 2, 3, 4, 5, 6, 7],
    roi: InputPathType | None = None,
    imagelist2: InputPathType | None = None,
) -> ImageSetStatisticsParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: The dimensionality of the images to be processed by\
            ImageSetStatistics.
        controls_list: Text file containing the list of control images.
        output_image: The output image file where the computed statistics are\
            stored.
        which_stat: Choice of statistic to compute: 0 for median, 1 for max\
            probability appearance, 2 for weighted mean appearance, 3 for trimmed\
            mean, 4 for max value, 5 for similarity-weighted (requires imagelist2),\
            6 for best local match label, 7 for max value from ROI.
        roi: Region of interest image file, optional depending on the whichstat\
            option.
        imagelist2: List of similarity images used for similarity-weighted\
            statistics. Required if whichstat equals 5 or 6.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/ImageSetStatistics",
        "image_dimension": image_dimension,
        "controls_list": controls_list,
        "output_image": output_image,
        "which_stat": which_stat,
    }
    if roi is not None:
        params["roi"] = roi
    if imagelist2 is not None:
        params["imagelist2"] = imagelist2
    return params


def image_set_statistics_cargs(
    params: ImageSetStatisticsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ImageSetStatistics")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.extend([
        "[CONTROLS_LIST]",
        execution.input_file(params.get("controls_list", None))
    ])
    cargs.extend([
        "[OUTPUT_IMAGE]",
        params.get("output_image", None)
    ])
    cargs.extend([
        "[WHICH_STAT]",
        str(params.get("which_stat", None))
    ])
    if params.get("roi", None) is not None:
        cargs.extend([
            "[ROI]",
            execution.input_file(params.get("roi", None))
        ])
    if params.get("imagelist2", None) is not None:
        cargs.extend([
            "[IMAGELIST2]",
            execution.input_file(params.get("imagelist2", None))
        ])
    return cargs


def image_set_statistics_outputs(
    params: ImageSetStatisticsParameters,
    execution: Execution,
) -> ImageSetStatisticsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ImageSetStatisticsOutputs(
        root=execution.output_file("."),
        computed_statistics_image=execution.output_file(params.get("output_image", None)),
    )
    return ret


def image_set_statistics_execute(
    params: ImageSetStatisticsParameters,
    runner: Runner | None = None,
) -> ImageSetStatisticsOutputs:
    """
    ImageSetStatistics
    
    ImageSetStatistics computes statistics from a set of images. The whichstat
    option defines the type of statistic to compute, ranging from median to
    similarity-weighted metrics.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImageSetStatisticsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(IMAGE_SET_STATISTICS_METADATA)
    params = execution.params(params)
    cargs = image_set_statistics_cargs(params, execution)
    ret = image_set_statistics_outputs(params, execution)
    execution.run(cargs)
    return ret


def image_set_statistics(
    image_dimension: int,
    controls_list: InputPathType,
    output_image: str,
    which_stat: typing.Literal[0, 1, 2, 3, 4, 5, 6, 7],
    roi: InputPathType | None = None,
    imagelist2: InputPathType | None = None,
    runner: Runner | None = None,
) -> ImageSetStatisticsOutputs:
    """
    ImageSetStatistics
    
    ImageSetStatistics computes statistics from a set of images. The whichstat
    option defines the type of statistic to compute, ranging from median to
    similarity-weighted metrics.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: The dimensionality of the images to be processed by\
            ImageSetStatistics.
        controls_list: Text file containing the list of control images.
        output_image: The output image file where the computed statistics are\
            stored.
        which_stat: Choice of statistic to compute: 0 for median, 1 for max\
            probability appearance, 2 for weighted mean appearance, 3 for trimmed\
            mean, 4 for max value, 5 for similarity-weighted (requires imagelist2),\
            6 for best local match label, 7 for max value from ROI.
        roi: Region of interest image file, optional depending on the whichstat\
            option.
        imagelist2: List of similarity images used for similarity-weighted\
            statistics. Required if whichstat equals 5 or 6.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImageSetStatisticsOutputs`).
    """
    params = image_set_statistics_params(
        image_dimension=image_dimension,
        controls_list=controls_list,
        output_image=output_image,
        which_stat=which_stat,
        roi=roi,
        imagelist2=imagelist2,
    )
    return image_set_statistics_execute(params, runner)


__all__ = [
    "IMAGE_SET_STATISTICS_METADATA",
    "ImageSetStatisticsOutputs",
    "image_set_statistics",
    "image_set_statistics_execute",
    "image_set_statistics_params",
]
