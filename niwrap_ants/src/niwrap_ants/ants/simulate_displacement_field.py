# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SIMULATE_DISPLACEMENT_FIELD_METADATA = Metadata(
    id="62eab1210d3ee9c94268b73a3a247d08a7a705f3.boutiques",
    name="SimulateDisplacementField",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


SimulateDisplacementFieldBsplineOptionsParameters = typing.TypedDict('SimulateDisplacementFieldBsplineOptionsParameters', {
    "@type": typing.NotRequired[typing.Literal["bspline_options"]],
    "number_of_fitting_levels": typing.NotRequired[int | None],
    "number_of_control_points": typing.NotRequired[int | None],
})
SimulateDisplacementFieldBsplineOptionsParametersTagged = typing.TypedDict('SimulateDisplacementFieldBsplineOptionsParametersTagged', {
    "@type": typing.Literal["bspline_options"],
    "number_of_fitting_levels": typing.NotRequired[int | None],
    "number_of_control_points": typing.NotRequired[int | None],
})


SimulateDisplacementFieldExponentialOptionsParameters = typing.TypedDict('SimulateDisplacementFieldExponentialOptionsParameters', {
    "@type": typing.NotRequired[typing.Literal["exponential_options"]],
    "smoothing_standard_deviation": typing.NotRequired[float | None],
})
SimulateDisplacementFieldExponentialOptionsParametersTagged = typing.TypedDict('SimulateDisplacementFieldExponentialOptionsParametersTagged', {
    "@type": typing.Literal["exponential_options"],
    "smoothing_standard_deviation": typing.NotRequired[float | None],
})


SimulateDisplacementFieldParameters = typing.TypedDict('SimulateDisplacementFieldParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/SimulateDisplacementField"]],
    "image_dimension": int,
    "displacement_field_type": typing.Literal["BSpline", "Exponential"],
    "domain_image": InputPathType,
    "output_field": str,
    "number_of_random_points": typing.NotRequired[int | None],
    "standard_deviation_displacement_field": typing.NotRequired[float | None],
    "enforce_stationary_boundary": typing.NotRequired[int | None],
    "displacement_specific_options": typing.NotRequired[typing.Union[SimulateDisplacementFieldBsplineOptionsParametersTagged, SimulateDisplacementFieldExponentialOptionsParametersTagged] | None],
})
SimulateDisplacementFieldParametersTagged = typing.TypedDict('SimulateDisplacementFieldParametersTagged', {
    "@type": typing.Literal["ants/SimulateDisplacementField"],
    "image_dimension": int,
    "displacement_field_type": typing.Literal["BSpline", "Exponential"],
    "domain_image": InputPathType,
    "output_field": str,
    "number_of_random_points": typing.NotRequired[int | None],
    "standard_deviation_displacement_field": typing.NotRequired[float | None],
    "enforce_stationary_boundary": typing.NotRequired[int | None],
    "displacement_specific_options": typing.NotRequired[typing.Union[SimulateDisplacementFieldBsplineOptionsParametersTagged, SimulateDisplacementFieldExponentialOptionsParametersTagged] | None],
})


def simulate_displacement_field_displacement_specific_options_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "bspline_options": simulate_displacement_field_bspline_options_cargs,
        "exponential_options": simulate_displacement_field_exponential_options_cargs,
    }.get(t)


def simulate_displacement_field_displacement_specific_options_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def simulate_displacement_field_bspline_options_params(
    number_of_fitting_levels: int | None = None,
    number_of_control_points: int | None = None,
) -> SimulateDisplacementFieldBsplineOptionsParametersTagged:
    """
    Build parameters.
    
    Args:
        number_of_fitting_levels: Number of fitting levels for BSpline.
        number_of_control_points: Number of control points for BSpline.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "bspline_options",
    }
    if number_of_fitting_levels is not None:
        params["number_of_fitting_levels"] = number_of_fitting_levels
    if number_of_control_points is not None:
        params["number_of_control_points"] = number_of_control_points
    return params


def simulate_displacement_field_bspline_options_cargs(
    params: SimulateDisplacementFieldBsplineOptionsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    if params.get("number_of_fitting_levels", None) is not None:
        cargs.append(str(params.get("number_of_fitting_levels", None)))
    if params.get("number_of_control_points", None) is not None:
        cargs.append(str(params.get("number_of_control_points", None)))
    return cargs


def simulate_displacement_field_exponential_options_params(
    smoothing_standard_deviation: float | None = None,
) -> SimulateDisplacementFieldExponentialOptionsParametersTagged:
    """
    Build parameters.
    
    Args:
        smoothing_standard_deviation: Smoothing standard deviation for\
            Exponential.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "exponential_options",
    }
    if smoothing_standard_deviation is not None:
        params["smoothing_standard_deviation"] = smoothing_standard_deviation
    return params


def simulate_displacement_field_exponential_options_cargs(
    params: SimulateDisplacementFieldExponentialOptionsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    if params.get("smoothing_standard_deviation", None) is not None:
        cargs.append(str(params.get("smoothing_standard_deviation", None)))
    return cargs


class SimulateDisplacementFieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SimulateDisplacementFieldParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_displacement_field: OutputPathType
    """The simulated displacement field."""


def simulate_displacement_field_params(
    image_dimension: int,
    displacement_field_type: typing.Literal["BSpline", "Exponential"],
    domain_image: InputPathType,
    output_field: str,
    number_of_random_points: int | None = None,
    standard_deviation_displacement_field: float | None = None,
    enforce_stationary_boundary: int | None = None,
    displacement_specific_options: typing.Union[SimulateDisplacementFieldBsplineOptionsParametersTagged, SimulateDisplacementFieldExponentialOptionsParametersTagged] | None = None,
) -> SimulateDisplacementFieldParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: Dimensionality of the image.
        displacement_field_type: Type of displacement field to simulate.
        domain_image: Image defining the domain for the displacement field.
        output_field: Path to save the output displacement field.
        number_of_random_points: Number of random points to use in the\
            simulation.
        standard_deviation_displacement_field: Standard deviation for the\
            displacement field.
        enforce_stationary_boundary: Boolean flag indicating whether to enforce\
            stationary boundary.
        displacement_specific_options: Options specific to the type of\
            displacement field simulation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/SimulateDisplacementField",
        "image_dimension": image_dimension,
        "displacement_field_type": displacement_field_type,
        "domain_image": domain_image,
        "output_field": output_field,
    }
    if number_of_random_points is not None:
        params["number_of_random_points"] = number_of_random_points
    if standard_deviation_displacement_field is not None:
        params["standard_deviation_displacement_field"] = standard_deviation_displacement_field
    if enforce_stationary_boundary is not None:
        params["enforce_stationary_boundary"] = enforce_stationary_boundary
    if displacement_specific_options is not None:
        params["displacement_specific_options"] = displacement_specific_options
    return params


def simulate_displacement_field_cargs(
    params: SimulateDisplacementFieldParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("SimulateDisplacementField")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.append(params.get("displacement_field_type", None))
    cargs.append(execution.input_file(params.get("domain_image", None)))
    cargs.append(params.get("output_field", None))
    if params.get("number_of_random_points", None) is not None:
        cargs.append(str(params.get("number_of_random_points", None)))
    if params.get("standard_deviation_displacement_field", None) is not None:
        cargs.append(str(params.get("standard_deviation_displacement_field", None)))
    if params.get("enforce_stationary_boundary", None) is not None:
        cargs.append(str(params.get("enforce_stationary_boundary", None)))
    if params.get("displacement_specific_options", None) is not None:
        cargs.extend(simulate_displacement_field_displacement_specific_options_cargs_dyn_fn(params.get("displacement_specific_options", None)["@type"])(params.get("displacement_specific_options", None), execution))
    return cargs


def simulate_displacement_field_outputs(
    params: SimulateDisplacementFieldParameters,
    execution: Execution,
) -> SimulateDisplacementFieldOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SimulateDisplacementFieldOutputs(
        root=execution.output_file("."),
        output_displacement_field=execution.output_file(params.get("output_field", None)),
    )
    return ret


def simulate_displacement_field_execute(
    params: SimulateDisplacementFieldParameters,
    runner: Runner | None = None,
) -> SimulateDisplacementFieldOutputs:
    """
    SimulateDisplacementField
    
    Simulate displacement fields using various methods such as BSpline or
    Exponential.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SimulateDisplacementFieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SIMULATE_DISPLACEMENT_FIELD_METADATA)
    params = execution.params(params)
    cargs = simulate_displacement_field_cargs(params, execution)
    ret = simulate_displacement_field_outputs(params, execution)
    execution.run(cargs)
    return ret


def simulate_displacement_field(
    image_dimension: int,
    displacement_field_type: typing.Literal["BSpline", "Exponential"],
    domain_image: InputPathType,
    output_field: str,
    number_of_random_points: int | None = None,
    standard_deviation_displacement_field: float | None = None,
    enforce_stationary_boundary: int | None = None,
    displacement_specific_options: typing.Union[SimulateDisplacementFieldBsplineOptionsParametersTagged, SimulateDisplacementFieldExponentialOptionsParametersTagged] | None = None,
    runner: Runner | None = None,
) -> SimulateDisplacementFieldOutputs:
    """
    SimulateDisplacementField
    
    Simulate displacement fields using various methods such as BSpline or
    Exponential.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Dimensionality of the image.
        displacement_field_type: Type of displacement field to simulate.
        domain_image: Image defining the domain for the displacement field.
        output_field: Path to save the output displacement field.
        number_of_random_points: Number of random points to use in the\
            simulation.
        standard_deviation_displacement_field: Standard deviation for the\
            displacement field.
        enforce_stationary_boundary: Boolean flag indicating whether to enforce\
            stationary boundary.
        displacement_specific_options: Options specific to the type of\
            displacement field simulation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SimulateDisplacementFieldOutputs`).
    """
    params = simulate_displacement_field_params(
        image_dimension=image_dimension,
        displacement_field_type=displacement_field_type,
        domain_image=domain_image,
        output_field=output_field,
        number_of_random_points=number_of_random_points,
        standard_deviation_displacement_field=standard_deviation_displacement_field,
        enforce_stationary_boundary=enforce_stationary_boundary,
        displacement_specific_options=displacement_specific_options,
    )
    return simulate_displacement_field_execute(params, runner)


__all__ = [
    "SIMULATE_DISPLACEMENT_FIELD_METADATA",
    "SimulateDisplacementFieldOutputs",
    "simulate_displacement_field",
    "simulate_displacement_field_bspline_options_params",
    "simulate_displacement_field_execute",
    "simulate_displacement_field_exponential_options_params",
    "simulate_displacement_field_params",
]
