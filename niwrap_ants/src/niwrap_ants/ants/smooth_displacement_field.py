# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SMOOTH_DISPLACEMENT_FIELD_METADATA = Metadata(
    id="430313dde82351b7e8ca1893a4a8efe15e5d3c98.boutiques",
    name="SmoothDisplacementField",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


SmoothDisplacementFieldParameters = typing.TypedDict('SmoothDisplacementFieldParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/SmoothDisplacementField"]],
    "image_dimension": int,
    "input_field": InputPathType,
    "output_field": str,
    "variance_or_mesh_size_base_level": float,
    "number_of_levels": typing.NotRequired[int | None],
    "spline_order": typing.NotRequired[int | None],
    "estimate_inverse": typing.NotRequired[typing.Literal[0, 1] | None],
    "confidence_image": typing.NotRequired[InputPathType | None],
})
SmoothDisplacementFieldParametersTagged = typing.TypedDict('SmoothDisplacementFieldParametersTagged', {
    "@type": typing.Literal["ants/SmoothDisplacementField"],
    "image_dimension": int,
    "input_field": InputPathType,
    "output_field": str,
    "variance_or_mesh_size_base_level": float,
    "number_of_levels": typing.NotRequired[int | None],
    "spline_order": typing.NotRequired[int | None],
    "estimate_inverse": typing.NotRequired[typing.Literal[0, 1] | None],
    "confidence_image": typing.NotRequired[InputPathType | None],
})


class SmoothDisplacementFieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SmoothDisplacementFieldParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    smoothed_field: OutputPathType
    """The output file containing the smoothed displacement field."""
    confidence_image_out: OutputPathType | None
    """The output file containing confidence information from the smoothing
    process."""


def smooth_displacement_field_params(
    image_dimension: int,
    input_field: InputPathType,
    output_field: str,
    variance_or_mesh_size_base_level: float,
    number_of_levels: int | None = None,
    spline_order: int | None = None,
    estimate_inverse: typing.Literal[0, 1] | None = None,
    confidence_image: InputPathType | None = None,
) -> SmoothDisplacementFieldParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: The dimensionality of the input displacement field.
        input_field: The input displacement field file.
        output_field: The output file for the smoothed displacement field.
        variance_or_mesh_size_base_level: The variance for Gaussian smoothing\
            or mesh size at the base level for B-spline smoothing.
        number_of_levels: The number of levels for multi-resolution smoothing.
        spline_order: The order of the spline for B-spline smoothing.
        estimate_inverse: Estimate the inverse of the displacement field if set\
            to 1.
        confidence_image: Optional confidence image output of the smoothing\
            process.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/SmoothDisplacementField",
        "image_dimension": image_dimension,
        "input_field": input_field,
        "output_field": output_field,
        "variance_or_mesh_size_base_level": variance_or_mesh_size_base_level,
    }
    if number_of_levels is not None:
        params["number_of_levels"] = number_of_levels
    if spline_order is not None:
        params["spline_order"] = spline_order
    if estimate_inverse is not None:
        params["estimate_inverse"] = estimate_inverse
    if confidence_image is not None:
        params["confidence_image"] = confidence_image
    return params


def smooth_displacement_field_cargs(
    params: SmoothDisplacementFieldParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("SmoothDisplacementField")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.append(execution.input_file(params.get("input_field", None)))
    cargs.append(params.get("output_field", None))
    cargs.append(str(params.get("variance_or_mesh_size_base_level", None)))
    if params.get("number_of_levels", None) is not None:
        cargs.append(str(params.get("number_of_levels", None)))
    if params.get("spline_order", None) is not None:
        cargs.append(str(params.get("spline_order", None)))
    if params.get("estimate_inverse", None) is not None:
        cargs.append(str(params.get("estimate_inverse", None)))
    if params.get("confidence_image", None) is not None:
        cargs.append(execution.input_file(params.get("confidence_image", None)))
    return cargs


def smooth_displacement_field_outputs(
    params: SmoothDisplacementFieldParameters,
    execution: Execution,
) -> SmoothDisplacementFieldOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SmoothDisplacementFieldOutputs(
        root=execution.output_file("."),
        smoothed_field=execution.output_file(params.get("output_field", None)),
        confidence_image_out=execution.output_file(pathlib.Path(params.get("confidence_image", None)).name) if (params.get("confidence_image") is not None) else None,
    )
    return ret


def smooth_displacement_field_execute(
    params: SmoothDisplacementFieldParameters,
    runner: Runner | None = None,
) -> SmoothDisplacementFieldOutputs:
    """
    SmoothDisplacementField
    
    SmoothDisplacementField applies smoothing to a displacement field over a
    specified number of levels with optional parameters for spline order,
    inverse estimation, and confidence image output.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SmoothDisplacementFieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SMOOTH_DISPLACEMENT_FIELD_METADATA)
    params = execution.params(params)
    cargs = smooth_displacement_field_cargs(params, execution)
    ret = smooth_displacement_field_outputs(params, execution)
    execution.run(cargs)
    return ret


def smooth_displacement_field(
    image_dimension: int,
    input_field: InputPathType,
    output_field: str,
    variance_or_mesh_size_base_level: float,
    number_of_levels: int | None = None,
    spline_order: int | None = None,
    estimate_inverse: typing.Literal[0, 1] | None = None,
    confidence_image: InputPathType | None = None,
    runner: Runner | None = None,
) -> SmoothDisplacementFieldOutputs:
    """
    SmoothDisplacementField
    
    SmoothDisplacementField applies smoothing to a displacement field over a
    specified number of levels with optional parameters for spline order,
    inverse estimation, and confidence image output.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: The dimensionality of the input displacement field.
        input_field: The input displacement field file.
        output_field: The output file for the smoothed displacement field.
        variance_or_mesh_size_base_level: The variance for Gaussian smoothing\
            or mesh size at the base level for B-spline smoothing.
        number_of_levels: The number of levels for multi-resolution smoothing.
        spline_order: The order of the spline for B-spline smoothing.
        estimate_inverse: Estimate the inverse of the displacement field if set\
            to 1.
        confidence_image: Optional confidence image output of the smoothing\
            process.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SmoothDisplacementFieldOutputs`).
    """
    params = smooth_displacement_field_params(
        image_dimension=image_dimension,
        input_field=input_field,
        output_field=output_field,
        variance_or_mesh_size_base_level=variance_or_mesh_size_base_level,
        number_of_levels=number_of_levels,
        spline_order=spline_order,
        estimate_inverse=estimate_inverse,
        confidence_image=confidence_image,
    )
    return smooth_displacement_field_execute(params, runner)


__all__ = [
    "SMOOTH_DISPLACEMENT_FIELD_METADATA",
    "SmoothDisplacementFieldOutputs",
    "smooth_displacement_field",
    "smooth_displacement_field_execute",
    "smooth_displacement_field_params",
]
