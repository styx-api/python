# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TILE_IMAGES_METADATA = Metadata(
    id="d5c59deda3b33a375285832f265a0151acf9c1d9.boutiques",
    name="TileImages",
    package="ants",
    container_image_tag="antsx/ants:v2.5.3",
)


TileImagesParameters = typing.TypedDict('TileImagesParameters', {
    "@type": typing.NotRequired[typing.Literal["ants/TileImages"]],
    "image_dimension": int,
    "output_image": str,
    "layout": str,
    "input_images": list[InputPathType],
})
TileImagesParametersTagged = typing.TypedDict('TileImagesParametersTagged', {
    "@type": typing.Literal["ants/TileImages"],
    "image_dimension": int,
    "output_image": str,
    "layout": str,
    "input_images": list[InputPathType],
})


class TileImagesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TileImagesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tiled_image: OutputPathType
    """The final tiled output image."""


def tile_images_params(
    image_dimension: int,
    output_image: str,
    layout: str,
    input_images: list[InputPathType],
) -> TileImagesParametersTagged:
    """
    Build parameters.
    
    Args:
        image_dimension: Dimensionality of the output image.
        output_image: The path for the output tiled image.
        layout: Defines the structure of the tiled output image. The layout\
            dictates the number and arrangement of input images in the output\
            image.
        input_images: Input images to be tiled into the output image. The\
            number of input images should match the layout specification.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ants/TileImages",
        "image_dimension": image_dimension,
        "output_image": output_image,
        "layout": layout,
        "input_images": input_images,
    }
    return params


def tile_images_cargs(
    params: TileImagesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("TileImages")
    cargs.append(str(params.get("image_dimension", None)))
    cargs.append(params.get("output_image", None))
    cargs.append(params.get("layout", None))
    cargs.extend([execution.input_file(f) for f in params.get("input_images", None)])
    return cargs


def tile_images_outputs(
    params: TileImagesParameters,
    execution: Execution,
) -> TileImagesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TileImagesOutputs(
        root=execution.output_file("."),
        tiled_image=execution.output_file(params.get("output_image", None)),
    )
    return ret


def tile_images_execute(
    params: TileImagesParameters,
    runner: Runner | None = None,
) -> TileImagesOutputs:
    """
    TileImages
    
    TileImages allows assembling images into a multi-dimensional array,
    producing a single output image. The input images must have a dimension less
    than or equal to the specified output image dimension.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TileImagesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TILE_IMAGES_METADATA)
    params = execution.params(params)
    cargs = tile_images_cargs(params, execution)
    ret = tile_images_outputs(params, execution)
    execution.run(cargs)
    return ret


def tile_images(
    image_dimension: int,
    output_image: str,
    layout: str,
    input_images: list[InputPathType],
    runner: Runner | None = None,
) -> TileImagesOutputs:
    """
    TileImages
    
    TileImages allows assembling images into a multi-dimensional array,
    producing a single output image. The input images must have a dimension less
    than or equal to the specified output image dimension.
    
    Author: ANTs Developers
    
    URL: https://github.com/ANTsX/ANTs
    
    Args:
        image_dimension: Dimensionality of the output image.
        output_image: The path for the output tiled image.
        layout: Defines the structure of the tiled output image. The layout\
            dictates the number and arrangement of input images in the output\
            image.
        input_images: Input images to be tiled into the output image. The\
            number of input images should match the layout specification.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TileImagesOutputs`).
    """
    params = tile_images_params(
        image_dimension=image_dimension,
        output_image=output_image,
        layout=layout,
        input_images=input_images,
    )
    return tile_images_execute(params, runner)


__all__ = [
    "TILE_IMAGES_METADATA",
    "TileImagesOutputs",
    "tile_images",
    "tile_images_execute",
    "tile_images_params",
]
