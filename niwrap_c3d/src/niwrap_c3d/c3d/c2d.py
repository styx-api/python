# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

C2D_METADATA = Metadata(
    id="14020b0937295500f0b0909841a2550a57433a6c.boutiques",
    name="c2d",
    package="c3d",
    container_image_tag="pyushkevich/itksnap:v3.8.2",
)


C2dAccumParameters = typing.TypedDict('C2dAccumParameters', {
    "@type": typing.NotRequired[typing.Literal["accum"]],
    "accum": str,
})
C2dAccumParametersTagged = typing.TypedDict('C2dAccumParametersTagged', {
    "@type": typing.Literal["accum"],
    "accum": str,
})


C2dAcosParameters = typing.TypedDict('C2dAcosParameters', {
    "@type": typing.NotRequired[typing.Literal["acos"]],
    "acos": str,
})
C2dAcosParametersTagged = typing.TypedDict('C2dAcosParametersTagged', {
    "@type": typing.Literal["acos"],
    "acos": str,
})


C2dAddParameters = typing.TypedDict('C2dAddParameters', {
    "@type": typing.NotRequired[typing.Literal["add"]],
    "add": str,
})
C2dAddParametersTagged = typing.TypedDict('C2dAddParametersTagged', {
    "@type": typing.Literal["add"],
    "add": str,
})


C2dAlignLandmarksParameters = typing.TypedDict('C2dAlignLandmarksParameters', {
    "@type": typing.NotRequired[typing.Literal["align_landmarks"]],
    "align_landmarks": str,
})
C2dAlignLandmarksParametersTagged = typing.TypedDict('C2dAlignLandmarksParametersTagged', {
    "@type": typing.Literal["align_landmarks"],
    "align_landmarks": str,
})


C2dAnisotropicDiffusionParameters = typing.TypedDict('C2dAnisotropicDiffusionParameters', {
    "@type": typing.NotRequired[typing.Literal["anisotropic_diffusion"]],
    "anisotropic_diffusion": str,
})
C2dAnisotropicDiffusionParametersTagged = typing.TypedDict('C2dAnisotropicDiffusionParametersTagged', {
    "@type": typing.Literal["anisotropic_diffusion"],
    "anisotropic_diffusion": str,
})


C2dAntialiasParameters = typing.TypedDict('C2dAntialiasParameters', {
    "@type": typing.NotRequired[typing.Literal["antialias"]],
    "antialias": str,
})
C2dAntialiasParametersTagged = typing.TypedDict('C2dAntialiasParametersTagged', {
    "@type": typing.Literal["antialias"],
    "antialias": str,
})


C2dSetParameters = typing.TypedDict('C2dSetParameters', {
    "@type": typing.NotRequired[typing.Literal["set"]],
    "set": str,
})
C2dSetParametersTagged = typing.TypedDict('C2dSetParametersTagged', {
    "@type": typing.Literal["set"],
    "set": str,
})


C2dAsinParameters = typing.TypedDict('C2dAsinParameters', {
    "@type": typing.NotRequired[typing.Literal["asin"]],
    "asin": str,
})
C2dAsinParametersTagged = typing.TypedDict('C2dAsinParametersTagged', {
    "@type": typing.Literal["asin"],
    "asin": str,
})


C2dAtan2Parameters = typing.TypedDict('C2dAtan2Parameters', {
    "@type": typing.NotRequired[typing.Literal["atan2"]],
    "atan2": str,
})
C2dAtan2ParametersTagged = typing.TypedDict('C2dAtan2ParametersTagged', {
    "@type": typing.Literal["atan2"],
    "atan2": str,
})


C2dBackgroundParameters = typing.TypedDict('C2dBackgroundParameters', {
    "@type": typing.NotRequired[typing.Literal["background"]],
    "background": str,
})
C2dBackgroundParametersTagged = typing.TypedDict('C2dBackgroundParametersTagged', {
    "@type": typing.Literal["background"],
    "background": str,
})


C2dN4BiasCorrectionParameters = typing.TypedDict('C2dN4BiasCorrectionParameters', {
    "@type": typing.NotRequired[typing.Literal["n4_bias_correction"]],
    "n4_bias_correction": str,
})
C2dN4BiasCorrectionParametersTagged = typing.TypedDict('C2dN4BiasCorrectionParametersTagged', {
    "@type": typing.Literal["n4_bias_correction"],
    "n4_bias_correction": str,
})


C2dBinarizeParameters = typing.TypedDict('C2dBinarizeParameters', {
    "@type": typing.NotRequired[typing.Literal["binarize"]],
    "binarize": str,
})
C2dBinarizeParametersTagged = typing.TypedDict('C2dBinarizeParametersTagged', {
    "@type": typing.Literal["binarize"],
    "binarize": str,
})


C2dCannyParameters = typing.TypedDict('C2dCannyParameters', {
    "@type": typing.NotRequired[typing.Literal["canny"]],
    "canny": str,
})
C2dCannyParametersTagged = typing.TypedDict('C2dCannyParametersTagged', {
    "@type": typing.Literal["canny"],
    "canny": str,
})


C2dCeilParameters = typing.TypedDict('C2dCeilParameters', {
    "@type": typing.NotRequired[typing.Literal["ceil"]],
    "ceil": str,
})
C2dCeilParametersTagged = typing.TypedDict('C2dCeilParametersTagged', {
    "@type": typing.Literal["ceil"],
    "ceil": str,
})


C2dCentroidParameters = typing.TypedDict('C2dCentroidParameters', {
    "@type": typing.NotRequired[typing.Literal["centroid"]],
    "centroid": str,
})
C2dCentroidParametersTagged = typing.TypedDict('C2dCentroidParametersTagged', {
    "@type": typing.Literal["centroid"],
    "centroid": str,
})


C2dCentroidMarkParameters = typing.TypedDict('C2dCentroidMarkParameters', {
    "@type": typing.NotRequired[typing.Literal["centroid_mark"]],
    "centroid_mark": str,
})
C2dCentroidMarkParametersTagged = typing.TypedDict('C2dCentroidMarkParametersTagged', {
    "@type": typing.Literal["centroid_mark"],
    "centroid_mark": str,
})


C2dConnectedComponentsParameters = typing.TypedDict('C2dConnectedComponentsParameters', {
    "@type": typing.NotRequired[typing.Literal["connected_components"]],
    "connected_components": str,
})
C2dConnectedComponentsParametersTagged = typing.TypedDict('C2dConnectedComponentsParametersTagged', {
    "@type": typing.Literal["connected_components"],
    "connected_components": str,
})


C2dClearParameters = typing.TypedDict('C2dClearParameters', {
    "@type": typing.NotRequired[typing.Literal["clear"]],
    "clear": str,
})
C2dClearParametersTagged = typing.TypedDict('C2dClearParametersTagged', {
    "@type": typing.Literal["clear"],
    "clear": str,
})


C2dClipParameters = typing.TypedDict('C2dClipParameters', {
    "@type": typing.NotRequired[typing.Literal["clip"]],
    "clip": str,
})
C2dClipParametersTagged = typing.TypedDict('C2dClipParametersTagged', {
    "@type": typing.Literal["clip"],
    "clip": str,
})


C2dColorMapParameters = typing.TypedDict('C2dColorMapParameters', {
    "@type": typing.NotRequired[typing.Literal["color_map"]],
    "color_map": str,
})
C2dColorMapParametersTagged = typing.TypedDict('C2dColorMapParametersTagged', {
    "@type": typing.Literal["color_map"],
    "color_map": str,
})


C2dCompressParameters = typing.TypedDict('C2dCompressParameters', {
    "@type": typing.NotRequired[typing.Literal["compress"]],
    "compress": str,
})
C2dCompressParametersTagged = typing.TypedDict('C2dCompressParametersTagged', {
    "@type": typing.Literal["compress"],
    "compress": str,
})


C2dNoCompressParameters = typing.TypedDict('C2dNoCompressParameters', {
    "@type": typing.NotRequired[typing.Literal["no_compress"]],
    "no_compress": str,
})
C2dNoCompressParametersTagged = typing.TypedDict('C2dNoCompressParametersTagged', {
    "@type": typing.Literal["no_compress"],
    "no_compress": str,
})


C2dConvParameters = typing.TypedDict('C2dConvParameters', {
    "@type": typing.NotRequired[typing.Literal["conv"]],
    "conv": str,
})
C2dConvParametersTagged = typing.TypedDict('C2dConvParametersTagged', {
    "@type": typing.Literal["conv"],
    "conv": str,
})


C2dCoordinateMapVoxelParameters = typing.TypedDict('C2dCoordinateMapVoxelParameters', {
    "@type": typing.NotRequired[typing.Literal["coordinate_map_voxel"]],
    "coordinate_map_voxel": str,
})
C2dCoordinateMapVoxelParametersTagged = typing.TypedDict('C2dCoordinateMapVoxelParametersTagged', {
    "@type": typing.Literal["coordinate_map_voxel"],
    "coordinate_map_voxel": str,
})


C2dCoordinateMapPhysicalParameters = typing.TypedDict('C2dCoordinateMapPhysicalParameters', {
    "@type": typing.NotRequired[typing.Literal["coordinate_map_physical"]],
    "coordinate_map_physical": str,
})
C2dCoordinateMapPhysicalParametersTagged = typing.TypedDict('C2dCoordinateMapPhysicalParametersTagged', {
    "@type": typing.Literal["coordinate_map_physical"],
    "coordinate_map_physical": str,
})


C2dCopyTransformParameters = typing.TypedDict('C2dCopyTransformParameters', {
    "@type": typing.NotRequired[typing.Literal["copy_transform"]],
    "copy_transform": str,
})
C2dCopyTransformParametersTagged = typing.TypedDict('C2dCopyTransformParametersTagged', {
    "@type": typing.Literal["copy_transform"],
    "copy_transform": str,
})


C2dCosParameters = typing.TypedDict('C2dCosParameters', {
    "@type": typing.NotRequired[typing.Literal["cos"]],
    "cos": str,
})
C2dCosParametersTagged = typing.TypedDict('C2dCosParametersTagged', {
    "@type": typing.Literal["cos"],
    "cos": str,
})


C2dCreateParameters = typing.TypedDict('C2dCreateParameters', {
    "@type": typing.NotRequired[typing.Literal["create"]],
    "create": str,
})
C2dCreateParametersTagged = typing.TypedDict('C2dCreateParametersTagged', {
    "@type": typing.Literal["create"],
    "create": str,
})


C2dDicomSeriesListParameters = typing.TypedDict('C2dDicomSeriesListParameters', {
    "@type": typing.NotRequired[typing.Literal["dicom_series_list"]],
    "dicom_series_list": str,
})
C2dDicomSeriesListParametersTagged = typing.TypedDict('C2dDicomSeriesListParametersTagged', {
    "@type": typing.Literal["dicom_series_list"],
    "dicom_series_list": str,
})


C2dDicomSeriesReadParameters = typing.TypedDict('C2dDicomSeriesReadParameters', {
    "@type": typing.NotRequired[typing.Literal["dicom_series_read"]],
    "dicom_series_read": str,
})
C2dDicomSeriesReadParametersTagged = typing.TypedDict('C2dDicomSeriesReadParametersTagged', {
    "@type": typing.Literal["dicom_series_read"],
    "dicom_series_read": str,
})


C2dDilateParameters = typing.TypedDict('C2dDilateParameters', {
    "@type": typing.NotRequired[typing.Literal["dilate"]],
    "dilate": str,
})
C2dDilateParametersTagged = typing.TypedDict('C2dDilateParametersTagged', {
    "@type": typing.Literal["dilate"],
    "dilate": str,
})


C2dDivideParameters = typing.TypedDict('C2dDivideParameters', {
    "@type": typing.NotRequired[typing.Literal["divide"]],
    "divide": str,
})
C2dDivideParametersTagged = typing.TypedDict('C2dDivideParametersTagged', {
    "@type": typing.Literal["divide"],
    "divide": str,
})


C2dDuplicateParameters = typing.TypedDict('C2dDuplicateParameters', {
    "@type": typing.NotRequired[typing.Literal["duplicate"]],
    "duplicate": str,
})
C2dDuplicateParametersTagged = typing.TypedDict('C2dDuplicateParametersTagged', {
    "@type": typing.Literal["duplicate"],
    "duplicate": str,
})


C2dEndaccumParameters = typing.TypedDict('C2dEndaccumParameters', {
    "@type": typing.NotRequired[typing.Literal["endaccum"]],
    "endaccum": str,
})
C2dEndaccumParametersTagged = typing.TypedDict('C2dEndaccumParametersTagged', {
    "@type": typing.Literal["endaccum"],
    "endaccum": str,
})


C2dEndforParameters = typing.TypedDict('C2dEndforParameters', {
    "@type": typing.NotRequired[typing.Literal["endfor"]],
    "endfor": str,
})
C2dEndforParametersTagged = typing.TypedDict('C2dEndforParametersTagged', {
    "@type": typing.Literal["endfor"],
    "endfor": str,
})


C2dErodeParameters = typing.TypedDict('C2dErodeParameters', {
    "@type": typing.NotRequired[typing.Literal["erode"]],
    "erode": str,
})
C2dErodeParametersTagged = typing.TypedDict('C2dErodeParametersTagged', {
    "@type": typing.Literal["erode"],
    "erode": str,
})


C2dErfParameters = typing.TypedDict('C2dErfParameters', {
    "@type": typing.NotRequired[typing.Literal["erf"]],
    "erf": str,
})
C2dErfParametersTagged = typing.TypedDict('C2dErfParametersTagged', {
    "@type": typing.Literal["erf"],
    "erf": str,
})


C2dExpParameters = typing.TypedDict('C2dExpParameters', {
    "@type": typing.NotRequired[typing.Literal["exp"]],
    "exp": str,
})
C2dExpParametersTagged = typing.TypedDict('C2dExpParametersTagged', {
    "@type": typing.Literal["exp"],
    "exp": str,
})


C2dExportPatchesParameters = typing.TypedDict('C2dExportPatchesParameters', {
    "@type": typing.NotRequired[typing.Literal["export_patches"]],
    "export_patches": str,
})
C2dExportPatchesParametersTagged = typing.TypedDict('C2dExportPatchesParametersTagged', {
    "@type": typing.Literal["export_patches"],
    "export_patches": str,
})


C2dExportPatchesAugParameters = typing.TypedDict('C2dExportPatchesAugParameters', {
    "@type": typing.NotRequired[typing.Literal["export_patches_aug"]],
    "export_patches_aug": str,
})
C2dExportPatchesAugParametersTagged = typing.TypedDict('C2dExportPatchesAugParametersTagged', {
    "@type": typing.Literal["export_patches_aug"],
    "export_patches_aug": str,
})


C2dExtrudeSegParameters = typing.TypedDict('C2dExtrudeSegParameters', {
    "@type": typing.NotRequired[typing.Literal["extrude_seg"]],
    "extrude_seg": str,
})
C2dExtrudeSegParametersTagged = typing.TypedDict('C2dExtrudeSegParametersTagged', {
    "@type": typing.Literal["extrude_seg"],
    "extrude_seg": str,
})


C2dFillBackgroundWithNoiseParameters = typing.TypedDict('C2dFillBackgroundWithNoiseParameters', {
    "@type": typing.NotRequired[typing.Literal["fill_background_with_noise"]],
    "fill_background_with_noise": str,
})
C2dFillBackgroundWithNoiseParametersTagged = typing.TypedDict('C2dFillBackgroundWithNoiseParametersTagged', {
    "@type": typing.Literal["fill_background_with_noise"],
    "fill_background_with_noise": str,
})


C2dFftParameters = typing.TypedDict('C2dFftParameters', {
    "@type": typing.NotRequired[typing.Literal["fft"]],
    "fft": str,
})
C2dFftParametersTagged = typing.TypedDict('C2dFftParametersTagged', {
    "@type": typing.Literal["fft"],
    "fft": str,
})


C2dFlipParameters = typing.TypedDict('C2dFlipParameters', {
    "@type": typing.NotRequired[typing.Literal["flip"]],
    "flip": str,
})
C2dFlipParametersTagged = typing.TypedDict('C2dFlipParametersTagged', {
    "@type": typing.Literal["flip"],
    "flip": str,
})


C2dFloorParameters = typing.TypedDict('C2dFloorParameters', {
    "@type": typing.NotRequired[typing.Literal["floor"]],
    "floor": str,
})
C2dFloorParametersTagged = typing.TypedDict('C2dFloorParametersTagged', {
    "@type": typing.Literal["floor"],
    "floor": str,
})


C2dForeachParameters = typing.TypedDict('C2dForeachParameters', {
    "@type": typing.NotRequired[typing.Literal["foreach"]],
    "foreach": str,
})
C2dForeachParametersTagged = typing.TypedDict('C2dForeachParametersTagged', {
    "@type": typing.Literal["foreach"],
    "foreach": str,
})


C2dForeachCompParameters = typing.TypedDict('C2dForeachCompParameters', {
    "@type": typing.NotRequired[typing.Literal["foreach_comp"]],
    "foreach_comp": str,
})
C2dForeachCompParametersTagged = typing.TypedDict('C2dForeachCompParametersTagged', {
    "@type": typing.Literal["foreach_comp"],
    "foreach_comp": str,
})


C2dGlmParameters = typing.TypedDict('C2dGlmParameters', {
    "@type": typing.NotRequired[typing.Literal["glm"]],
    "glm": str,
})
C2dGlmParametersTagged = typing.TypedDict('C2dGlmParametersTagged', {
    "@type": typing.Literal["glm"],
    "glm": str,
})


C2dGradientParameters = typing.TypedDict('C2dGradientParameters', {
    "@type": typing.NotRequired[typing.Literal["gradient"]],
    "gradient": str,
})
C2dGradientParametersTagged = typing.TypedDict('C2dGradientParametersTagged', {
    "@type": typing.Literal["gradient"],
    "gradient": str,
})


C2dHelpParameters = typing.TypedDict('C2dHelpParameters', {
    "@type": typing.NotRequired[typing.Literal["_help"]],
    "_help": str,
})
C2dHelpParametersTagged = typing.TypedDict('C2dHelpParametersTagged', {
    "@type": typing.Literal["_help"],
    "_help": str,
})


C2dHolefillParameters = typing.TypedDict('C2dHolefillParameters', {
    "@type": typing.NotRequired[typing.Literal["holefill"]],
    "holefill": str,
})
C2dHolefillParametersTagged = typing.TypedDict('C2dHolefillParametersTagged', {
    "@type": typing.Literal["holefill"],
    "holefill": str,
})


C2dHessianEigenvaluesParameters = typing.TypedDict('C2dHessianEigenvaluesParameters', {
    "@type": typing.NotRequired[typing.Literal["hessian_eigenvalues"]],
    "hessian_eigenvalues": str,
})
C2dHessianEigenvaluesParametersTagged = typing.TypedDict('C2dHessianEigenvaluesParametersTagged', {
    "@type": typing.Literal["hessian_eigenvalues"],
    "hessian_eigenvalues": str,
})


C2dHessianObjectnessParameters = typing.TypedDict('C2dHessianObjectnessParameters', {
    "@type": typing.NotRequired[typing.Literal["hessian_objectness"]],
    "hessian_objectness": str,
})
C2dHessianObjectnessParametersTagged = typing.TypedDict('C2dHessianObjectnessParametersTagged', {
    "@type": typing.Literal["hessian_objectness"],
    "hessian_objectness": str,
})


C2dHistogramMatchParameters = typing.TypedDict('C2dHistogramMatchParameters', {
    "@type": typing.NotRequired[typing.Literal["histogram_match"]],
    "histogram_match": str,
})
C2dHistogramMatchParametersTagged = typing.TypedDict('C2dHistogramMatchParametersTagged', {
    "@type": typing.Literal["histogram_match"],
    "histogram_match": str,
})


C2dInfoParameters = typing.TypedDict('C2dInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["info"]],
    "info": str,
})
C2dInfoParametersTagged = typing.TypedDict('C2dInfoParametersTagged', {
    "@type": typing.Literal["info"],
    "info": str,
})


C2dInfoFullParameters = typing.TypedDict('C2dInfoFullParameters', {
    "@type": typing.NotRequired[typing.Literal["info_full"]],
    "info_full": str,
})
C2dInfoFullParametersTagged = typing.TypedDict('C2dInfoFullParametersTagged', {
    "@type": typing.Literal["info_full"],
    "info_full": str,
})


C2dInsertParameters = typing.TypedDict('C2dInsertParameters', {
    "@type": typing.NotRequired[typing.Literal["insert"]],
    "insert": str,
})
C2dInsertParametersTagged = typing.TypedDict('C2dInsertParametersTagged', {
    "@type": typing.Literal["insert"],
    "insert": str,
})


C2dInterpolationParameters = typing.TypedDict('C2dInterpolationParameters', {
    "@type": typing.NotRequired[typing.Literal["interpolation"]],
    "interpolation": str,
})
C2dInterpolationParametersTagged = typing.TypedDict('C2dInterpolationParametersTagged', {
    "@type": typing.Literal["interpolation"],
    "interpolation": str,
})


C2dIterationsParameters = typing.TypedDict('C2dIterationsParameters', {
    "@type": typing.NotRequired[typing.Literal["iterations"]],
    "iterations": str,
})
C2dIterationsParametersTagged = typing.TypedDict('C2dIterationsParametersTagged', {
    "@type": typing.Literal["iterations"],
    "iterations": str,
})


C2dLabelOverlapParameters = typing.TypedDict('C2dLabelOverlapParameters', {
    "@type": typing.NotRequired[typing.Literal["label_overlap"]],
    "label_overlap": str,
})
C2dLabelOverlapParametersTagged = typing.TypedDict('C2dLabelOverlapParametersTagged', {
    "@type": typing.Literal["label_overlap"],
    "label_overlap": str,
})


C2dLabelStatisticsParameters = typing.TypedDict('C2dLabelStatisticsParameters', {
    "@type": typing.NotRequired[typing.Literal["label_statistics"]],
    "label_statistics": str,
})
C2dLabelStatisticsParametersTagged = typing.TypedDict('C2dLabelStatisticsParametersTagged', {
    "@type": typing.Literal["label_statistics"],
    "label_statistics": str,
})


C2dLandmarksToSpheresParameters = typing.TypedDict('C2dLandmarksToSpheresParameters', {
    "@type": typing.NotRequired[typing.Literal["landmarks_to_spheres"]],
    "landmarks_to_spheres": str,
})
C2dLandmarksToSpheresParametersTagged = typing.TypedDict('C2dLandmarksToSpheresParametersTagged', {
    "@type": typing.Literal["landmarks_to_spheres"],
    "landmarks_to_spheres": str,
})


C2dLaplacianParameters = typing.TypedDict('C2dLaplacianParameters', {
    "@type": typing.NotRequired[typing.Literal["laplacian"]],
    "laplacian": str,
})
C2dLaplacianParametersTagged = typing.TypedDict('C2dLaplacianParametersTagged', {
    "@type": typing.Literal["laplacian"],
    "laplacian": str,
})


C2dLevelsetParameters = typing.TypedDict('C2dLevelsetParameters', {
    "@type": typing.NotRequired[typing.Literal["levelset"]],
    "levelset": str,
})
C2dLevelsetParametersTagged = typing.TypedDict('C2dLevelsetParametersTagged', {
    "@type": typing.Literal["levelset"],
    "levelset": str,
})


C2dLevelsetCurvatureParameters = typing.TypedDict('C2dLevelsetCurvatureParameters', {
    "@type": typing.NotRequired[typing.Literal["levelset_curvature"]],
    "levelset_curvature": str,
})
C2dLevelsetCurvatureParametersTagged = typing.TypedDict('C2dLevelsetCurvatureParametersTagged', {
    "@type": typing.Literal["levelset_curvature"],
    "levelset_curvature": str,
})


C2dLevelsetAdvectionParameters = typing.TypedDict('C2dLevelsetAdvectionParameters', {
    "@type": typing.NotRequired[typing.Literal["levelset_advection"]],
    "levelset_advection": str,
})
C2dLevelsetAdvectionParametersTagged = typing.TypedDict('C2dLevelsetAdvectionParametersTagged', {
    "@type": typing.Literal["levelset_advection"],
    "levelset_advection": str,
})


C2dLogParameters = typing.TypedDict('C2dLogParameters', {
    "@type": typing.NotRequired[typing.Literal["log"]],
    "log": str,
})
C2dLogParametersTagged = typing.TypedDict('C2dLogParametersTagged', {
    "@type": typing.Literal["log"],
    "log": str,
})


C2dLog10Parameters = typing.TypedDict('C2dLog10Parameters', {
    "@type": typing.NotRequired[typing.Literal["log10"]],
    "log10": str,
})
C2dLog10ParametersTagged = typing.TypedDict('C2dLog10ParametersTagged', {
    "@type": typing.Literal["log10"],
    "log10": str,
})


C2dManualParameters = typing.TypedDict('C2dManualParameters', {
    "@type": typing.NotRequired[typing.Literal["manual"]],
    "manual": str,
})
C2dManualParametersTagged = typing.TypedDict('C2dManualParametersTagged', {
    "@type": typing.Literal["manual"],
    "manual": str,
})


C2dMatchBoundingBoxParameters = typing.TypedDict('C2dMatchBoundingBoxParameters', {
    "@type": typing.NotRequired[typing.Literal["match_bounding_box"]],
    "match_bounding_box": str,
})
C2dMatchBoundingBoxParametersTagged = typing.TypedDict('C2dMatchBoundingBoxParametersTagged', {
    "@type": typing.Literal["match_bounding_box"],
    "match_bounding_box": str,
})


C2dMaximumParameters = typing.TypedDict('C2dMaximumParameters', {
    "@type": typing.NotRequired[typing.Literal["maximum"]],
    "maximum": str,
})
C2dMaximumParametersTagged = typing.TypedDict('C2dMaximumParametersTagged', {
    "@type": typing.Literal["maximum"],
    "maximum": str,
})


C2dMulticomponentSplitParameters = typing.TypedDict('C2dMulticomponentSplitParameters', {
    "@type": typing.NotRequired[typing.Literal["multicomponent_split"]],
    "multicomponent_split": str,
})
C2dMulticomponentSplitParametersTagged = typing.TypedDict('C2dMulticomponentSplitParametersTagged', {
    "@type": typing.Literal["multicomponent_split"],
    "multicomponent_split": str,
})


C2dMeanParameters = typing.TypedDict('C2dMeanParameters', {
    "@type": typing.NotRequired[typing.Literal["mean"]],
    "mean": str,
})
C2dMeanParametersTagged = typing.TypedDict('C2dMeanParametersTagged', {
    "@type": typing.Literal["mean"],
    "mean": str,
})


C2dMedianFilterParameters = typing.TypedDict('C2dMedianFilterParameters', {
    "@type": typing.NotRequired[typing.Literal["median_filter"]],
    "median_filter": str,
})
C2dMedianFilterParametersTagged = typing.TypedDict('C2dMedianFilterParametersTagged', {
    "@type": typing.Literal["median_filter"],
    "median_filter": str,
})


C2dMergeParameters = typing.TypedDict('C2dMergeParameters', {
    "@type": typing.NotRequired[typing.Literal["merge"]],
    "merge": str,
})
C2dMergeParametersTagged = typing.TypedDict('C2dMergeParametersTagged', {
    "@type": typing.Literal["merge"],
    "merge": str,
})


C2dMeanFilterParameters = typing.TypedDict('C2dMeanFilterParameters', {
    "@type": typing.NotRequired[typing.Literal["mean_filter"]],
    "mean_filter": str,
})
C2dMeanFilterParametersTagged = typing.TypedDict('C2dMeanFilterParametersTagged', {
    "@type": typing.Literal["mean_filter"],
    "mean_filter": str,
})


C2dMutualInfoParameters = typing.TypedDict('C2dMutualInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["mutual_info"]],
    "mutual_info": str,
})
C2dMutualInfoParametersTagged = typing.TypedDict('C2dMutualInfoParametersTagged', {
    "@type": typing.Literal["mutual_info"],
    "mutual_info": str,
})


C2dMinimumParameters = typing.TypedDict('C2dMinimumParameters', {
    "@type": typing.NotRequired[typing.Literal["minimum"]],
    "minimum": str,
})
C2dMinimumParametersTagged = typing.TypedDict('C2dMinimumParametersTagged', {
    "@type": typing.Literal["minimum"],
    "minimum": str,
})


C2dMixtureModelParameters = typing.TypedDict('C2dMixtureModelParameters', {
    "@type": typing.NotRequired[typing.Literal["mixture_model"]],
    "mixture_model": str,
})
C2dMixtureModelParametersTagged = typing.TypedDict('C2dMixtureModelParametersTagged', {
    "@type": typing.Literal["mixture_model"],
    "mixture_model": str,
})


C2dMomentsParameters = typing.TypedDict('C2dMomentsParameters', {
    "@type": typing.NotRequired[typing.Literal["moments"]],
    "moments": str,
})
C2dMomentsParametersTagged = typing.TypedDict('C2dMomentsParametersTagged', {
    "@type": typing.Literal["moments"],
    "moments": str,
})


C2dMattesMutualInfoParameters = typing.TypedDict('C2dMattesMutualInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["mattes_mutual_info"]],
    "mattes_mutual_info": str,
})
C2dMattesMutualInfoParametersTagged = typing.TypedDict('C2dMattesMutualInfoParametersTagged', {
    "@type": typing.Literal["mattes_mutual_info"],
    "mattes_mutual_info": str,
})


C2dMeanSquareParameters = typing.TypedDict('C2dMeanSquareParameters', {
    "@type": typing.NotRequired[typing.Literal["mean_square"]],
    "mean_square": str,
})
C2dMeanSquareParametersTagged = typing.TypedDict('C2dMeanSquareParametersTagged', {
    "@type": typing.Literal["mean_square"],
    "mean_square": str,
})


C2dMultiplyParameters = typing.TypedDict('C2dMultiplyParameters', {
    "@type": typing.NotRequired[typing.Literal["multiply"]],
    "multiply": str,
})
C2dMultiplyParametersTagged = typing.TypedDict('C2dMultiplyParametersTagged', {
    "@type": typing.Literal["multiply"],
    "multiply": str,
})


C2dNormalizedCrossCorrelationParameters = typing.TypedDict('C2dNormalizedCrossCorrelationParameters', {
    "@type": typing.NotRequired[typing.Literal["normalized_cross_correlation"]],
    "normalized_cross_correlation": str,
})
C2dNormalizedCrossCorrelationParametersTagged = typing.TypedDict('C2dNormalizedCrossCorrelationParametersTagged', {
    "@type": typing.Literal["normalized_cross_correlation"],
    "normalized_cross_correlation": str,
})


C2dNormalizedCorrelationParameters = typing.TypedDict('C2dNormalizedCorrelationParameters', {
    "@type": typing.NotRequired[typing.Literal["normalized_correlation"]],
    "normalized_correlation": str,
})
C2dNormalizedCorrelationParametersTagged = typing.TypedDict('C2dNormalizedCorrelationParametersTagged', {
    "@type": typing.Literal["normalized_correlation"],
    "normalized_correlation": str,
})


C2dNormalizedMutualInfoParameters = typing.TypedDict('C2dNormalizedMutualInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["normalized_mutual_info"]],
    "normalized_mutual_info": str,
})
C2dNormalizedMutualInfoParametersTagged = typing.TypedDict('C2dNormalizedMutualInfoParametersTagged', {
    "@type": typing.Literal["normalized_mutual_info"],
    "normalized_mutual_info": str,
})


C2dNoiseGaussianParameters = typing.TypedDict('C2dNoiseGaussianParameters', {
    "@type": typing.NotRequired[typing.Literal["noise_gaussian"]],
    "noise_gaussian": str,
})
C2dNoiseGaussianParametersTagged = typing.TypedDict('C2dNoiseGaussianParametersTagged', {
    "@type": typing.Literal["noise_gaussian"],
    "noise_gaussian": str,
})


C2dNoisePoissonParameters = typing.TypedDict('C2dNoisePoissonParameters', {
    "@type": typing.NotRequired[typing.Literal["noise_poisson"]],
    "noise_poisson": str,
})
C2dNoisePoissonParametersTagged = typing.TypedDict('C2dNoisePoissonParametersTagged', {
    "@type": typing.Literal["noise_poisson"],
    "noise_poisson": str,
})


C2dNoiseSpeckleParameters = typing.TypedDict('C2dNoiseSpeckleParameters', {
    "@type": typing.NotRequired[typing.Literal["noise_speckle"]],
    "noise_speckle": str,
})
C2dNoiseSpeckleParametersTagged = typing.TypedDict('C2dNoiseSpeckleParametersTagged', {
    "@type": typing.Literal["noise_speckle"],
    "noise_speckle": str,
})


C2dNoiseSaltPepperParameters = typing.TypedDict('C2dNoiseSaltPepperParameters', {
    "@type": typing.NotRequired[typing.Literal["noise_salt_pepper"]],
    "noise_salt_pepper": str,
})
C2dNoiseSaltPepperParametersTagged = typing.TypedDict('C2dNoiseSaltPepperParametersTagged', {
    "@type": typing.Literal["noise_salt_pepper"],
    "noise_salt_pepper": str,
})


C2dNoMulticomponentSplitParameters = typing.TypedDict('C2dNoMulticomponentSplitParameters', {
    "@type": typing.NotRequired[typing.Literal["no_multicomponent_split"]],
    "no_multicomponent_split": str,
})
C2dNoMulticomponentSplitParametersTagged = typing.TypedDict('C2dNoMulticomponentSplitParametersTagged', {
    "@type": typing.Literal["no_multicomponent_split"],
    "no_multicomponent_split": str,
})


C2dNormalizeLocalWindowParameters = typing.TypedDict('C2dNormalizeLocalWindowParameters', {
    "@type": typing.NotRequired[typing.Literal["normalize_local_window"]],
    "normalize_local_window": str,
})
C2dNormalizeLocalWindowParametersTagged = typing.TypedDict('C2dNormalizeLocalWindowParametersTagged', {
    "@type": typing.Literal["normalize_local_window"],
    "normalize_local_window": str,
})


C2dNormpdfParameters = typing.TypedDict('C2dNormpdfParameters', {
    "@type": typing.NotRequired[typing.Literal["normpdf"]],
    "normpdf": str,
})
C2dNormpdfParametersTagged = typing.TypedDict('C2dNormpdfParametersTagged', {
    "@type": typing.Literal["normpdf"],
    "normpdf": str,
})


C2dNoroundParameters = typing.TypedDict('C2dNoroundParameters', {
    "@type": typing.NotRequired[typing.Literal["noround"]],
    "noround": str,
})
C2dNoroundParametersTagged = typing.TypedDict('C2dNoroundParametersTagged', {
    "@type": typing.Literal["noround"],
    "noround": str,
})


C2dNospmParameters = typing.TypedDict('C2dNospmParameters', {
    "@type": typing.NotRequired[typing.Literal["nospm"]],
    "nospm": str,
})
C2dNospmParametersTagged = typing.TypedDict('C2dNospmParametersTagged', {
    "@type": typing.Literal["nospm"],
    "nospm": str,
})


C2dOutputParameters = typing.TypedDict('C2dOutputParameters', {
    "@type": typing.NotRequired[typing.Literal["output"]],
    "output": str,
})
C2dOutputParametersTagged = typing.TypedDict('C2dOutputParametersTagged', {
    "@type": typing.Literal["output"],
    "output": str,
})


C2dOutputMulticomponentParameters = typing.TypedDict('C2dOutputMulticomponentParameters', {
    "@type": typing.NotRequired[typing.Literal["output_multicomponent"]],
    "output_multicomponent": str,
})
C2dOutputMulticomponentParametersTagged = typing.TypedDict('C2dOutputMulticomponentParametersTagged', {
    "@type": typing.Literal["output_multicomponent"],
    "output_multicomponent": str,
})


C2dOutputMultipleMulticomponentParameters = typing.TypedDict('C2dOutputMultipleMulticomponentParameters', {
    "@type": typing.NotRequired[typing.Literal["output_multiple_multicomponent"]],
    "output_multiple_multicomponent": str,
})
C2dOutputMultipleMulticomponentParametersTagged = typing.TypedDict('C2dOutputMultipleMulticomponentParametersTagged', {
    "@type": typing.Literal["output_multiple_multicomponent"],
    "output_multiple_multicomponent": str,
})


C2dOrientParameters = typing.TypedDict('C2dOrientParameters', {
    "@type": typing.NotRequired[typing.Literal["orient"]],
    "orient": str,
})
C2dOrientParametersTagged = typing.TypedDict('C2dOrientParametersTagged', {
    "@type": typing.Literal["orient"],
    "orient": str,
})


C2dOutputMultipleParameters = typing.TypedDict('C2dOutputMultipleParameters', {
    "@type": typing.NotRequired[typing.Literal["output_multiple"]],
    "output_multiple": str,
})
C2dOutputMultipleParametersTagged = typing.TypedDict('C2dOutputMultipleParametersTagged', {
    "@type": typing.Literal["output_multiple"],
    "output_multiple": str,
})


C2dOrient1Parameters = typing.TypedDict('C2dOrient1Parameters', {
    "@type": typing.NotRequired[typing.Literal["orient_1"]],
    "orient": str,
})
C2dOrient1ParametersTagged = typing.TypedDict('C2dOrient1ParametersTagged', {
    "@type": typing.Literal["orient_1"],
    "orient": str,
})


C2dOriginParameters = typing.TypedDict('C2dOriginParameters', {
    "@type": typing.NotRequired[typing.Literal["origin"]],
    "origin": str,
})
C2dOriginParametersTagged = typing.TypedDict('C2dOriginParametersTagged', {
    "@type": typing.Literal["origin"],
    "origin": str,
})


C2dOriginVoxelParameters = typing.TypedDict('C2dOriginVoxelParameters', {
    "@type": typing.NotRequired[typing.Literal["origin_voxel"]],
    "origin_voxel": str,
})
C2dOriginVoxelParametersTagged = typing.TypedDict('C2dOriginVoxelParametersTagged', {
    "@type": typing.Literal["origin_voxel"],
    "origin_voxel": str,
})


C2dOriginVoxelCoordParameters = typing.TypedDict('C2dOriginVoxelCoordParameters', {
    "@type": typing.NotRequired[typing.Literal["origin_voxel_coord"]],
    "origin_voxel_coord": str,
})
C2dOriginVoxelCoordParametersTagged = typing.TypedDict('C2dOriginVoxelCoordParametersTagged', {
    "@type": typing.Literal["origin_voxel_coord"],
    "origin_voxel_coord": str,
})


C2dOverlapParameters = typing.TypedDict('C2dOverlapParameters', {
    "@type": typing.NotRequired[typing.Literal["overlap"]],
    "overlap": str,
})
C2dOverlapParametersTagged = typing.TypedDict('C2dOverlapParametersTagged', {
    "@type": typing.Literal["overlap"],
    "overlap": str,
})


C2dOverlayLabelImageParameters = typing.TypedDict('C2dOverlayLabelImageParameters', {
    "@type": typing.NotRequired[typing.Literal["overlay_label_image"]],
    "overlay_label_image": str,
})
C2dOverlayLabelImageParametersTagged = typing.TypedDict('C2dOverlayLabelImageParametersTagged', {
    "@type": typing.Literal["overlay_label_image"],
    "overlay_label_image": str,
})


C2dPadParameters = typing.TypedDict('C2dPadParameters', {
    "@type": typing.NotRequired[typing.Literal["pad"]],
    "pad": str,
})
C2dPadParametersTagged = typing.TypedDict('C2dPadParametersTagged', {
    "@type": typing.Literal["pad"],
    "pad": str,
})


C2dPadToParameters = typing.TypedDict('C2dPadToParameters', {
    "@type": typing.NotRequired[typing.Literal["pad_to"]],
    "pad_to": str,
})
C2dPadToParametersTagged = typing.TypedDict('C2dPadToParametersTagged', {
    "@type": typing.Literal["pad_to"],
    "pad_to": str,
})


C2dPcaParameters = typing.TypedDict('C2dPcaParameters', {
    "@type": typing.NotRequired[typing.Literal["pca"]],
    "pca": str,
})
C2dPcaParametersTagged = typing.TypedDict('C2dPcaParametersTagged', {
    "@type": typing.Literal["pca"],
    "pca": str,
})


C2dPercentIntensityModeParameters = typing.TypedDict('C2dPercentIntensityModeParameters', {
    "@type": typing.NotRequired[typing.Literal["percent_intensity_mode"]],
    "percent_intensity_mode": str,
})
C2dPercentIntensityModeParametersTagged = typing.TypedDict('C2dPercentIntensityModeParametersTagged', {
    "@type": typing.Literal["percent_intensity_mode"],
    "percent_intensity_mode": str,
})


C2dPixelParameters = typing.TypedDict('C2dPixelParameters', {
    "@type": typing.NotRequired[typing.Literal["pixel"]],
    "pixel": str,
})
C2dPixelParametersTagged = typing.TypedDict('C2dPixelParametersTagged', {
    "@type": typing.Literal["pixel"],
    "pixel": str,
})


C2dPopParameters = typing.TypedDict('C2dPopParameters', {
    "@type": typing.NotRequired[typing.Literal["pop"]],
    "pop": str,
})
C2dPopParametersTagged = typing.TypedDict('C2dPopParametersTagged', {
    "@type": typing.Literal["pop"],
    "pop": str,
})


C2dPopasParameters = typing.TypedDict('C2dPopasParameters', {
    "@type": typing.NotRequired[typing.Literal["popas"]],
    "popas": str,
})
C2dPopasParametersTagged = typing.TypedDict('C2dPopasParametersTagged', {
    "@type": typing.Literal["popas"],
    "popas": str,
})


C2dProbeParameters = typing.TypedDict('C2dProbeParameters', {
    "@type": typing.NotRequired[typing.Literal["probe"]],
    "probe": str,
})
C2dProbeParametersTagged = typing.TypedDict('C2dProbeParametersTagged', {
    "@type": typing.Literal["probe"],
    "probe": str,
})


C2dPushParameters = typing.TypedDict('C2dPushParameters', {
    "@type": typing.NotRequired[typing.Literal["push"]],
    "push": str,
})
C2dPushParametersTagged = typing.TypedDict('C2dPushParametersTagged', {
    "@type": typing.Literal["push"],
    "push": str,
})


C2dRankParameters = typing.TypedDict('C2dRankParameters', {
    "@type": typing.NotRequired[typing.Literal["rank"]],
    "rank": str,
})
C2dRankParametersTagged = typing.TypedDict('C2dRankParametersTagged', {
    "@type": typing.Literal["rank"],
    "rank": str,
})


C2dReciprocalParameters = typing.TypedDict('C2dReciprocalParameters', {
    "@type": typing.NotRequired[typing.Literal["reciprocal"]],
    "reciprocal": str,
})
C2dReciprocalParametersTagged = typing.TypedDict('C2dReciprocalParametersTagged', {
    "@type": typing.Literal["reciprocal"],
    "reciprocal": str,
})


C2dRegionParameters = typing.TypedDict('C2dRegionParameters', {
    "@type": typing.NotRequired[typing.Literal["region"]],
    "region": str,
})
C2dRegionParametersTagged = typing.TypedDict('C2dRegionParametersTagged', {
    "@type": typing.Literal["region"],
    "region": str,
})


C2dReorderParameters = typing.TypedDict('C2dReorderParameters', {
    "@type": typing.NotRequired[typing.Literal["reorder"]],
    "reorder": str,
})
C2dReorderParametersTagged = typing.TypedDict('C2dReorderParametersTagged', {
    "@type": typing.Literal["reorder"],
    "reorder": str,
})


C2dRetainLabelsParameters = typing.TypedDict('C2dRetainLabelsParameters', {
    "@type": typing.NotRequired[typing.Literal["retain_labels"]],
    "retain_labels": str,
})
C2dRetainLabelsParametersTagged = typing.TypedDict('C2dRetainLabelsParametersTagged', {
    "@type": typing.Literal["retain_labels"],
    "retain_labels": str,
})


C2dRfApplyParameters = typing.TypedDict('C2dRfApplyParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_apply"]],
    "rf_apply": str,
})
C2dRfApplyParametersTagged = typing.TypedDict('C2dRfApplyParametersTagged', {
    "@type": typing.Literal["rf_apply"],
    "rf_apply": str,
})


C2dRfTrainParameters = typing.TypedDict('C2dRfTrainParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_train"]],
    "rf_train": str,
})
C2dRfTrainParametersTagged = typing.TypedDict('C2dRfTrainParametersTagged', {
    "@type": typing.Literal["rf_train"],
    "rf_train": str,
})


C2dRfParamPatchParameters = typing.TypedDict('C2dRfParamPatchParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_param_patch"]],
    "rf_param_patch": str,
})
C2dRfParamPatchParametersTagged = typing.TypedDict('C2dRfParamPatchParametersTagged', {
    "@type": typing.Literal["rf_param_patch"],
    "rf_param_patch": str,
})


C2dRfParamUsexyzParameters = typing.TypedDict('C2dRfParamUsexyzParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_param_usexyz"]],
    "rf_param_usexyz": str,
})
C2dRfParamUsexyzParametersTagged = typing.TypedDict('C2dRfParamUsexyzParametersTagged', {
    "@type": typing.Literal["rf_param_usexyz"],
    "rf_param_usexyz": str,
})


C2dRfParamNousexyzParameters = typing.TypedDict('C2dRfParamNousexyzParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_param_nousexyz"]],
    "rf_param_nousexyz": str,
})
C2dRfParamNousexyzParametersTagged = typing.TypedDict('C2dRfParamNousexyzParametersTagged', {
    "@type": typing.Literal["rf_param_nousexyz"],
    "rf_param_nousexyz": str,
})


C2dRfParamNtreesParameters = typing.TypedDict('C2dRfParamNtreesParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_param_ntrees"]],
    "rf_param_ntrees": str,
})
C2dRfParamNtreesParametersTagged = typing.TypedDict('C2dRfParamNtreesParametersTagged', {
    "@type": typing.Literal["rf_param_ntrees"],
    "rf_param_ntrees": str,
})


C2dRfParamTreedepthParameters = typing.TypedDict('C2dRfParamTreedepthParameters', {
    "@type": typing.NotRequired[typing.Literal["rf_param_treedepth"]],
    "rf_param_treedepth": str,
})
C2dRfParamTreedepthParametersTagged = typing.TypedDict('C2dRfParamTreedepthParametersTagged', {
    "@type": typing.Literal["rf_param_treedepth"],
    "rf_param_treedepth": str,
})


C2dSetSformParameters = typing.TypedDict('C2dSetSformParameters', {
    "@type": typing.NotRequired[typing.Literal["set_sform"]],
    "set_sform": str,
})
C2dSetSformParametersTagged = typing.TypedDict('C2dSetSformParametersTagged', {
    "@type": typing.Literal["set_sform"],
    "set_sform": str,
})


C2dReplaceParameters = typing.TypedDict('C2dReplaceParameters', {
    "@type": typing.NotRequired[typing.Literal["replace"]],
    "replace": str,
})
C2dReplaceParametersTagged = typing.TypedDict('C2dReplaceParametersTagged', {
    "@type": typing.Literal["replace"],
    "replace": str,
})


C2dResampleParameters = typing.TypedDict('C2dResampleParameters', {
    "@type": typing.NotRequired[typing.Literal["resample"]],
    "resample": str,
})
C2dResampleParametersTagged = typing.TypedDict('C2dResampleParametersTagged', {
    "@type": typing.Literal["resample"],
    "resample": str,
})


C2dResampleIsoParameters = typing.TypedDict('C2dResampleIsoParameters', {
    "@type": typing.NotRequired[typing.Literal["resample_iso"]],
    "resample_iso": str,
})
C2dResampleIsoParametersTagged = typing.TypedDict('C2dResampleIsoParametersTagged', {
    "@type": typing.Literal["resample_iso"],
    "resample_iso": str,
})


C2dResampleMmParameters = typing.TypedDict('C2dResampleMmParameters', {
    "@type": typing.NotRequired[typing.Literal["resample_mm"]],
    "resample_mm": str,
})
C2dResampleMmParametersTagged = typing.TypedDict('C2dResampleMmParametersTagged', {
    "@type": typing.Literal["resample_mm"],
    "resample_mm": str,
})


C2dResliceItkParameters = typing.TypedDict('C2dResliceItkParameters', {
    "@type": typing.NotRequired[typing.Literal["reslice_itk"]],
    "reslice_itk": str,
})
C2dResliceItkParametersTagged = typing.TypedDict('C2dResliceItkParametersTagged', {
    "@type": typing.Literal["reslice_itk"],
    "reslice_itk": str,
})


C2dResliceMatrixParameters = typing.TypedDict('C2dResliceMatrixParameters', {
    "@type": typing.NotRequired[typing.Literal["reslice_matrix"]],
    "reslice_matrix": str,
})
C2dResliceMatrixParametersTagged = typing.TypedDict('C2dResliceMatrixParametersTagged', {
    "@type": typing.Literal["reslice_matrix"],
    "reslice_matrix": str,
})


C2dResliceIdentityParameters = typing.TypedDict('C2dResliceIdentityParameters', {
    "@type": typing.NotRequired[typing.Literal["reslice_identity"]],
    "reslice_identity": str,
})
C2dResliceIdentityParametersTagged = typing.TypedDict('C2dResliceIdentityParametersTagged', {
    "@type": typing.Literal["reslice_identity"],
    "reslice_identity": str,
})


C2dRgb2hsvParameters = typing.TypedDict('C2dRgb2hsvParameters', {
    "@type": typing.NotRequired[typing.Literal["rgb2hsv"]],
    "rgb2hsv": str,
})
C2dRgb2hsvParametersTagged = typing.TypedDict('C2dRgb2hsvParametersTagged', {
    "@type": typing.Literal["rgb2hsv"],
    "rgb2hsv": str,
})


C2dRmsParameters = typing.TypedDict('C2dRmsParameters', {
    "@type": typing.NotRequired[typing.Literal["rms"]],
    "rms": str,
})
C2dRmsParametersTagged = typing.TypedDict('C2dRmsParametersTagged', {
    "@type": typing.Literal["rms"],
    "rms": str,
})


C2dRoundParameters = typing.TypedDict('C2dRoundParameters', {
    "@type": typing.NotRequired[typing.Literal["round"]],
    "round": str,
})
C2dRoundParametersTagged = typing.TypedDict('C2dRoundParametersTagged', {
    "@type": typing.Literal["round"],
    "round": str,
})


C2dScaleParameters = typing.TypedDict('C2dScaleParameters', {
    "@type": typing.NotRequired[typing.Literal["scale"]],
    "scale": str,
})
C2dScaleParametersTagged = typing.TypedDict('C2dScaleParametersTagged', {
    "@type": typing.Literal["scale"],
    "scale": str,
})


C2dSetSform1Parameters = typing.TypedDict('C2dSetSform1Parameters', {
    "@type": typing.NotRequired[typing.Literal["set_sform_1"]],
    "set_sform": str,
})
C2dSetSform1ParametersTagged = typing.TypedDict('C2dSetSform1ParametersTagged', {
    "@type": typing.Literal["set_sform_1"],
    "set_sform": str,
})


C2dSinParameters = typing.TypedDict('C2dSinParameters', {
    "@type": typing.NotRequired[typing.Literal["sin"]],
    "sin": str,
})
C2dSinParametersTagged = typing.TypedDict('C2dSinParametersTagged', {
    "@type": typing.Literal["sin"],
    "sin": str,
})


C2dSliceParameters = typing.TypedDict('C2dSliceParameters', {
    "@type": typing.NotRequired[typing.Literal["slice"]],
    "slice": str,
})
C2dSliceParametersTagged = typing.TypedDict('C2dSliceParametersTagged', {
    "@type": typing.Literal["slice"],
    "slice": str,
})


C2dSliceAllParameters = typing.TypedDict('C2dSliceAllParameters', {
    "@type": typing.NotRequired[typing.Literal["slice_all"]],
    "slice_all": str,
})
C2dSliceAllParametersTagged = typing.TypedDict('C2dSliceAllParametersTagged', {
    "@type": typing.Literal["slice_all"],
    "slice_all": str,
})


C2dSharpenParameters = typing.TypedDict('C2dSharpenParameters', {
    "@type": typing.NotRequired[typing.Literal["sharpen"]],
    "sharpen": str,
})
C2dSharpenParametersTagged = typing.TypedDict('C2dSharpenParametersTagged', {
    "@type": typing.Literal["sharpen"],
    "sharpen": str,
})


C2dShiftParameters = typing.TypedDict('C2dShiftParameters', {
    "@type": typing.NotRequired[typing.Literal["shift"]],
    "shift": str,
})
C2dShiftParametersTagged = typing.TypedDict('C2dShiftParametersTagged', {
    "@type": typing.Literal["shift"],
    "shift": str,
})


C2dSignedDistanceTransformParameters = typing.TypedDict('C2dSignedDistanceTransformParameters', {
    "@type": typing.NotRequired[typing.Literal["signed_distance_transform"]],
    "signed_distance_transform": str,
})
C2dSignedDistanceTransformParametersTagged = typing.TypedDict('C2dSignedDistanceTransformParametersTagged', {
    "@type": typing.Literal["signed_distance_transform"],
    "signed_distance_transform": str,
})


C2dSmoothParameters = typing.TypedDict('C2dSmoothParameters', {
    "@type": typing.NotRequired[typing.Literal["smooth"]],
    "smooth": str,
})
C2dSmoothParametersTagged = typing.TypedDict('C2dSmoothParametersTagged', {
    "@type": typing.Literal["smooth"],
    "smooth": str,
})


C2dSmoothFastParameters = typing.TypedDict('C2dSmoothFastParameters', {
    "@type": typing.NotRequired[typing.Literal["smooth_fast"]],
    "smooth_fast": str,
})
C2dSmoothFastParametersTagged = typing.TypedDict('C2dSmoothFastParametersTagged', {
    "@type": typing.Literal["smooth_fast"],
    "smooth_fast": str,
})


C2dSpacingParameters = typing.TypedDict('C2dSpacingParameters', {
    "@type": typing.NotRequired[typing.Literal["spacing"]],
    "spacing": str,
})
C2dSpacingParametersTagged = typing.TypedDict('C2dSpacingParametersTagged', {
    "@type": typing.Literal["spacing"],
    "spacing": str,
})


C2dSplitParameters = typing.TypedDict('C2dSplitParameters', {
    "@type": typing.NotRequired[typing.Literal["split"]],
    "split": str,
})
C2dSplitParametersTagged = typing.TypedDict('C2dSplitParametersTagged', {
    "@type": typing.Literal["split"],
    "split": str,
})


C2dSqrtParameters = typing.TypedDict('C2dSqrtParameters', {
    "@type": typing.NotRequired[typing.Literal["sqrt"]],
    "sqrt": str,
})
C2dSqrtParametersTagged = typing.TypedDict('C2dSqrtParametersTagged', {
    "@type": typing.Literal["sqrt"],
    "sqrt": str,
})


C2dStapleParameters = typing.TypedDict('C2dStapleParameters', {
    "@type": typing.NotRequired[typing.Literal["staple"]],
    "staple": str,
})
C2dStapleParametersTagged = typing.TypedDict('C2dStapleParametersTagged', {
    "@type": typing.Literal["staple"],
    "staple": str,
})


C2dStructureTensorEigenvaluesParameters = typing.TypedDict('C2dStructureTensorEigenvaluesParameters', {
    "@type": typing.NotRequired[typing.Literal["structure_tensor_eigenvalues"]],
    "structure_tensor_eigenvalues": str,
})
C2dStructureTensorEigenvaluesParametersTagged = typing.TypedDict('C2dStructureTensorEigenvaluesParametersTagged', {
    "@type": typing.Literal["structure_tensor_eigenvalues"],
    "structure_tensor_eigenvalues": str,
})


C2dSpmParameters = typing.TypedDict('C2dSpmParameters', {
    "@type": typing.NotRequired[typing.Literal["spm"]],
    "spm": str,
})
C2dSpmParametersTagged = typing.TypedDict('C2dSpmParametersTagged', {
    "@type": typing.Literal["spm"],
    "spm": str,
})


C2dSubtractParameters = typing.TypedDict('C2dSubtractParameters', {
    "@type": typing.NotRequired[typing.Literal["subtract"]],
    "subtract": str,
})
C2dSubtractParametersTagged = typing.TypedDict('C2dSubtractParametersTagged', {
    "@type": typing.Literal["subtract"],
    "subtract": str,
})


C2dSupervoxelParameters = typing.TypedDict('C2dSupervoxelParameters', {
    "@type": typing.NotRequired[typing.Literal["supervoxel"]],
    "supervoxel": str,
})
C2dSupervoxelParametersTagged = typing.TypedDict('C2dSupervoxelParametersTagged', {
    "@type": typing.Literal["supervoxel"],
    "supervoxel": str,
})


C2dStretchParameters = typing.TypedDict('C2dStretchParameters', {
    "@type": typing.NotRequired[typing.Literal["stretch"]],
    "stretch": str,
})
C2dStretchParametersTagged = typing.TypedDict('C2dStretchParametersTagged', {
    "@type": typing.Literal["stretch"],
    "stretch": str,
})


C2dSwapdimParameters = typing.TypedDict('C2dSwapdimParameters', {
    "@type": typing.NotRequired[typing.Literal["swapdim"]],
    "swapdim": str,
})
C2dSwapdimParametersTagged = typing.TypedDict('C2dSwapdimParametersTagged', {
    "@type": typing.Literal["swapdim"],
    "swapdim": str,
})


C2dTestImageParameters = typing.TypedDict('C2dTestImageParameters', {
    "@type": typing.NotRequired[typing.Literal["test_image"]],
    "test_image": str,
})
C2dTestImageParametersTagged = typing.TypedDict('C2dTestImageParametersTagged', {
    "@type": typing.Literal["test_image"],
    "test_image": str,
})


C2dTestProbeParameters = typing.TypedDict('C2dTestProbeParameters', {
    "@type": typing.NotRequired[typing.Literal["test_probe"]],
    "test_probe": str,
})
C2dTestProbeParametersTagged = typing.TypedDict('C2dTestProbeParametersTagged', {
    "@type": typing.Literal["test_probe"],
    "test_probe": str,
})


C2dThresholdParameters = typing.TypedDict('C2dThresholdParameters', {
    "@type": typing.NotRequired[typing.Literal["threshold"]],
    "threshold": str,
})
C2dThresholdParametersTagged = typing.TypedDict('C2dThresholdParametersTagged', {
    "@type": typing.Literal["threshold"],
    "threshold": str,
})


C2dTileParameters = typing.TypedDict('C2dTileParameters', {
    "@type": typing.NotRequired[typing.Literal["tile"]],
    "tile": str,
})
C2dTileParametersTagged = typing.TypedDict('C2dTileParametersTagged', {
    "@type": typing.Literal["tile"],
    "tile": str,
})


C2dTrimParameters = typing.TypedDict('C2dTrimParameters', {
    "@type": typing.NotRequired[typing.Literal["trim"]],
    "trim": str,
})
C2dTrimParametersTagged = typing.TypedDict('C2dTrimParametersTagged', {
    "@type": typing.Literal["trim"],
    "trim": str,
})


C2dTrimToSizeParameters = typing.TypedDict('C2dTrimToSizeParameters', {
    "@type": typing.NotRequired[typing.Literal["trim_to_size"]],
    "trim_to_size": str,
})
C2dTrimToSizeParametersTagged = typing.TypedDict('C2dTrimToSizeParametersTagged', {
    "@type": typing.Literal["trim_to_size"],
    "trim_to_size": str,
})


C2dTypeParameters = typing.TypedDict('C2dTypeParameters', {
    "@type": typing.NotRequired[typing.Literal["type"]],
    "type": str,
})
C2dTypeParametersTagged = typing.TypedDict('C2dTypeParametersTagged', {
    "@type": typing.Literal["type"],
    "type": str,
})


C2dVerboseParameters = typing.TypedDict('C2dVerboseParameters', {
    "@type": typing.NotRequired[typing.Literal["verbose"]],
    "verbose": str,
})
C2dVerboseParametersTagged = typing.TypedDict('C2dVerboseParametersTagged', {
    "@type": typing.Literal["verbose"],
    "verbose": str,
})


C2dNoverboseParameters = typing.TypedDict('C2dNoverboseParameters', {
    "@type": typing.NotRequired[typing.Literal["noverbose"]],
    "noverbose": str,
})
C2dNoverboseParametersTagged = typing.TypedDict('C2dNoverboseParametersTagged', {
    "@type": typing.Literal["noverbose"],
    "noverbose": str,
})


C2dVersionParameters = typing.TypedDict('C2dVersionParameters', {
    "@type": typing.NotRequired[typing.Literal["version"]],
    "version": str,
})
C2dVersionParametersTagged = typing.TypedDict('C2dVersionParametersTagged', {
    "@type": typing.Literal["version"],
    "version": str,
})


C2dVoteParameters = typing.TypedDict('C2dVoteParameters', {
    "@type": typing.NotRequired[typing.Literal["vote"]],
    "vote": str,
})
C2dVoteParametersTagged = typing.TypedDict('C2dVoteParametersTagged', {
    "@type": typing.Literal["vote"],
    "vote": str,
})


C2dVoteMrfParameters = typing.TypedDict('C2dVoteMrfParameters', {
    "@type": typing.NotRequired[typing.Literal["vote_mrf"]],
    "vote_mrf": str,
})
C2dVoteMrfParametersTagged = typing.TypedDict('C2dVoteMrfParametersTagged', {
    "@type": typing.Literal["vote_mrf"],
    "vote_mrf": str,
})


C2dVoteLabelParameters = typing.TypedDict('C2dVoteLabelParameters', {
    "@type": typing.NotRequired[typing.Literal["vote_label"]],
    "vote_label": str,
})
C2dVoteLabelParametersTagged = typing.TypedDict('C2dVoteLabelParametersTagged', {
    "@type": typing.Literal["vote_label"],
    "vote_label": str,
})


C2dVoxelSumParameters = typing.TypedDict('C2dVoxelSumParameters', {
    "@type": typing.NotRequired[typing.Literal["voxel_sum"]],
    "voxel_sum": str,
})
C2dVoxelSumParametersTagged = typing.TypedDict('C2dVoxelSumParametersTagged', {
    "@type": typing.Literal["voxel_sum"],
    "voxel_sum": str,
})


C2dVoxelIntegralParameters = typing.TypedDict('C2dVoxelIntegralParameters', {
    "@type": typing.NotRequired[typing.Literal["voxel_integral"]],
    "voxel_integral": str,
})
C2dVoxelIntegralParametersTagged = typing.TypedDict('C2dVoxelIntegralParametersTagged', {
    "@type": typing.Literal["voxel_integral"],
    "voxel_integral": str,
})


C2dVoxelwiseRegressionParameters = typing.TypedDict('C2dVoxelwiseRegressionParameters', {
    "@type": typing.NotRequired[typing.Literal["voxelwise_regression"]],
    "voxelwise_regression": str,
})
C2dVoxelwiseRegressionParametersTagged = typing.TypedDict('C2dVoxelwiseRegressionParametersTagged', {
    "@type": typing.Literal["voxelwise_regression"],
    "voxelwise_regression": str,
})


C2dWarpParameters = typing.TypedDict('C2dWarpParameters', {
    "@type": typing.NotRequired[typing.Literal["warp"]],
    "warp": str,
})
C2dWarpParametersTagged = typing.TypedDict('C2dWarpParametersTagged', {
    "@type": typing.Literal["warp"],
    "warp": str,
})


C2dWarpLabelParameters = typing.TypedDict('C2dWarpLabelParameters', {
    "@type": typing.NotRequired[typing.Literal["warp_label"]],
    "warp_label": str,
})
C2dWarpLabelParametersTagged = typing.TypedDict('C2dWarpLabelParametersTagged', {
    "@type": typing.Literal["warp_label"],
    "warp_label": str,
})


C2dWrapParameters = typing.TypedDict('C2dWrapParameters', {
    "@type": typing.NotRequired[typing.Literal["wrap"]],
    "wrap": str,
})
C2dWrapParametersTagged = typing.TypedDict('C2dWrapParametersTagged', {
    "@type": typing.Literal["wrap"],
    "wrap": str,
})


C2dWeightedSumParameters = typing.TypedDict('C2dWeightedSumParameters', {
    "@type": typing.NotRequired[typing.Literal["weighted_sum"]],
    "weighted_sum": str,
})
C2dWeightedSumParametersTagged = typing.TypedDict('C2dWeightedSumParametersTagged', {
    "@type": typing.Literal["weighted_sum"],
    "weighted_sum": str,
})


C2dWeightedSumVoxelwiseParameters = typing.TypedDict('C2dWeightedSumVoxelwiseParameters', {
    "@type": typing.NotRequired[typing.Literal["weighted_sum_voxelwise"]],
    "weighted_sum_voxelwise": str,
})
C2dWeightedSumVoxelwiseParametersTagged = typing.TypedDict('C2dWeightedSumVoxelwiseParametersTagged', {
    "@type": typing.Literal["weighted_sum_voxelwise"],
    "weighted_sum_voxelwise": str,
})


C2dParameters = typing.TypedDict('C2dParameters', {
    "@type": typing.NotRequired[typing.Literal["c3d/c2d"]],
    "input": list[InputPathType],
    "operations": list[typing.Union[C2dAccumParametersTagged, C2dAcosParametersTagged, C2dAddParametersTagged, C2dAlignLandmarksParametersTagged, C2dAnisotropicDiffusionParametersTagged, C2dAntialiasParametersTagged, C2dSetParametersTagged, C2dAsinParametersTagged, C2dAtan2ParametersTagged, C2dBackgroundParametersTagged, C2dN4BiasCorrectionParametersTagged, C2dBinarizeParametersTagged, C2dCannyParametersTagged, C2dCeilParametersTagged, C2dCentroidParametersTagged, C2dCentroidMarkParametersTagged, C2dConnectedComponentsParametersTagged, C2dClearParametersTagged, C2dClipParametersTagged, C2dColorMapParametersTagged, C2dCompressParametersTagged, C2dNoCompressParametersTagged, C2dConvParametersTagged, C2dCoordinateMapVoxelParametersTagged, C2dCoordinateMapPhysicalParametersTagged, C2dCopyTransformParametersTagged, C2dCosParametersTagged, C2dCreateParametersTagged, C2dDicomSeriesListParametersTagged, C2dDicomSeriesReadParametersTagged, C2dDilateParametersTagged, C2dDivideParametersTagged, C2dDuplicateParametersTagged, C2dEndaccumParametersTagged, C2dEndforParametersTagged, C2dErodeParametersTagged, C2dErfParametersTagged, C2dExpParametersTagged, C2dExportPatchesParametersTagged, C2dExportPatchesAugParametersTagged, C2dExtrudeSegParametersTagged, C2dFillBackgroundWithNoiseParametersTagged, C2dFftParametersTagged, C2dFlipParametersTagged, C2dFloorParametersTagged, C2dForeachParametersTagged, C2dForeachCompParametersTagged, C2dGlmParametersTagged, C2dGradientParametersTagged, C2dHelpParametersTagged, C2dHolefillParametersTagged, C2dHessianEigenvaluesParametersTagged, C2dHessianObjectnessParametersTagged, C2dHistogramMatchParametersTagged, C2dInfoParametersTagged, C2dInfoFullParametersTagged, C2dInsertParametersTagged, C2dInterpolationParametersTagged, C2dIterationsParametersTagged, C2dLabelOverlapParametersTagged, C2dLabelStatisticsParametersTagged, C2dLandmarksToSpheresParametersTagged, C2dLaplacianParametersTagged, C2dLevelsetParametersTagged, C2dLevelsetCurvatureParametersTagged, C2dLevelsetAdvectionParametersTagged, C2dLogParametersTagged, C2dLog10ParametersTagged, C2dManualParametersTagged, C2dMatchBoundingBoxParametersTagged, C2dMaximumParametersTagged, C2dMulticomponentSplitParametersTagged, C2dMeanParametersTagged, C2dMedianFilterParametersTagged, C2dMergeParametersTagged, C2dMeanFilterParametersTagged, C2dMutualInfoParametersTagged, C2dMinimumParametersTagged, C2dMixtureModelParametersTagged, C2dMomentsParametersTagged, C2dMattesMutualInfoParametersTagged, C2dMeanSquareParametersTagged, C2dMultiplyParametersTagged, C2dNormalizedCrossCorrelationParametersTagged, C2dNormalizedCorrelationParametersTagged, C2dNormalizedMutualInfoParametersTagged, C2dNoiseGaussianParametersTagged, C2dNoisePoissonParametersTagged, C2dNoiseSpeckleParametersTagged, C2dNoiseSaltPepperParametersTagged, C2dNoMulticomponentSplitParametersTagged, C2dNormalizeLocalWindowParametersTagged, C2dNormpdfParametersTagged, C2dNoroundParametersTagged, C2dNospmParametersTagged, C2dOutputParametersTagged, C2dOutputMulticomponentParametersTagged, C2dOutputMultipleMulticomponentParametersTagged, C2dOrientParametersTagged, C2dOutputMultipleParametersTagged, C2dOrient1ParametersTagged, C2dOriginParametersTagged, C2dOriginVoxelParametersTagged, C2dOriginVoxelCoordParametersTagged, C2dOverlapParametersTagged, C2dOverlayLabelImageParametersTagged, C2dPadParametersTagged, C2dPadToParametersTagged, C2dPcaParametersTagged, C2dPercentIntensityModeParametersTagged, C2dPixelParametersTagged, C2dPopParametersTagged, C2dPopasParametersTagged, C2dProbeParametersTagged, C2dPushParametersTagged, C2dRankParametersTagged, C2dReciprocalParametersTagged, C2dRegionParametersTagged, C2dReorderParametersTagged, C2dRetainLabelsParametersTagged, C2dRfApplyParametersTagged, C2dRfTrainParametersTagged, C2dRfParamPatchParametersTagged, C2dRfParamUsexyzParametersTagged, C2dRfParamNousexyzParametersTagged, C2dRfParamNtreesParametersTagged, C2dRfParamTreedepthParametersTagged, C2dSetSformParametersTagged, C2dReplaceParametersTagged, C2dResampleParametersTagged, C2dResampleIsoParametersTagged, C2dResampleMmParametersTagged, C2dResliceItkParametersTagged, C2dResliceMatrixParametersTagged, C2dResliceIdentityParametersTagged, C2dRgb2hsvParametersTagged, C2dRmsParametersTagged, C2dRoundParametersTagged, C2dScaleParametersTagged, C2dSetSform1ParametersTagged, C2dSinParametersTagged, C2dSliceParametersTagged, C2dSliceAllParametersTagged, C2dSharpenParametersTagged, C2dShiftParametersTagged, C2dSignedDistanceTransformParametersTagged, C2dSmoothParametersTagged, C2dSmoothFastParametersTagged, C2dSpacingParametersTagged, C2dSplitParametersTagged, C2dSqrtParametersTagged, C2dStapleParametersTagged, C2dStructureTensorEigenvaluesParametersTagged, C2dSpmParametersTagged, C2dSubtractParametersTagged, C2dSupervoxelParametersTagged, C2dStretchParametersTagged, C2dSwapdimParametersTagged, C2dTestImageParametersTagged, C2dTestProbeParametersTagged, C2dThresholdParametersTagged, C2dTileParametersTagged, C2dTrimParametersTagged, C2dTrimToSizeParametersTagged, C2dTypeParametersTagged, C2dVerboseParametersTagged, C2dNoverboseParametersTagged, C2dVersionParametersTagged, C2dVoteParametersTagged, C2dVoteMrfParametersTagged, C2dVoteLabelParametersTagged, C2dVoxelSumParametersTagged, C2dVoxelIntegralParametersTagged, C2dVoxelwiseRegressionParametersTagged, C2dWarpParametersTagged, C2dWarpLabelParametersTagged, C2dWrapParametersTagged, C2dWeightedSumParametersTagged, C2dWeightedSumVoxelwiseParametersTagged]],
    "output": str,
})
C2dParametersTagged = typing.TypedDict('C2dParametersTagged', {
    "@type": typing.Literal["c3d/c2d"],
    "input": list[InputPathType],
    "operations": list[typing.Union[C2dAccumParametersTagged, C2dAcosParametersTagged, C2dAddParametersTagged, C2dAlignLandmarksParametersTagged, C2dAnisotropicDiffusionParametersTagged, C2dAntialiasParametersTagged, C2dSetParametersTagged, C2dAsinParametersTagged, C2dAtan2ParametersTagged, C2dBackgroundParametersTagged, C2dN4BiasCorrectionParametersTagged, C2dBinarizeParametersTagged, C2dCannyParametersTagged, C2dCeilParametersTagged, C2dCentroidParametersTagged, C2dCentroidMarkParametersTagged, C2dConnectedComponentsParametersTagged, C2dClearParametersTagged, C2dClipParametersTagged, C2dColorMapParametersTagged, C2dCompressParametersTagged, C2dNoCompressParametersTagged, C2dConvParametersTagged, C2dCoordinateMapVoxelParametersTagged, C2dCoordinateMapPhysicalParametersTagged, C2dCopyTransformParametersTagged, C2dCosParametersTagged, C2dCreateParametersTagged, C2dDicomSeriesListParametersTagged, C2dDicomSeriesReadParametersTagged, C2dDilateParametersTagged, C2dDivideParametersTagged, C2dDuplicateParametersTagged, C2dEndaccumParametersTagged, C2dEndforParametersTagged, C2dErodeParametersTagged, C2dErfParametersTagged, C2dExpParametersTagged, C2dExportPatchesParametersTagged, C2dExportPatchesAugParametersTagged, C2dExtrudeSegParametersTagged, C2dFillBackgroundWithNoiseParametersTagged, C2dFftParametersTagged, C2dFlipParametersTagged, C2dFloorParametersTagged, C2dForeachParametersTagged, C2dForeachCompParametersTagged, C2dGlmParametersTagged, C2dGradientParametersTagged, C2dHelpParametersTagged, C2dHolefillParametersTagged, C2dHessianEigenvaluesParametersTagged, C2dHessianObjectnessParametersTagged, C2dHistogramMatchParametersTagged, C2dInfoParametersTagged, C2dInfoFullParametersTagged, C2dInsertParametersTagged, C2dInterpolationParametersTagged, C2dIterationsParametersTagged, C2dLabelOverlapParametersTagged, C2dLabelStatisticsParametersTagged, C2dLandmarksToSpheresParametersTagged, C2dLaplacianParametersTagged, C2dLevelsetParametersTagged, C2dLevelsetCurvatureParametersTagged, C2dLevelsetAdvectionParametersTagged, C2dLogParametersTagged, C2dLog10ParametersTagged, C2dManualParametersTagged, C2dMatchBoundingBoxParametersTagged, C2dMaximumParametersTagged, C2dMulticomponentSplitParametersTagged, C2dMeanParametersTagged, C2dMedianFilterParametersTagged, C2dMergeParametersTagged, C2dMeanFilterParametersTagged, C2dMutualInfoParametersTagged, C2dMinimumParametersTagged, C2dMixtureModelParametersTagged, C2dMomentsParametersTagged, C2dMattesMutualInfoParametersTagged, C2dMeanSquareParametersTagged, C2dMultiplyParametersTagged, C2dNormalizedCrossCorrelationParametersTagged, C2dNormalizedCorrelationParametersTagged, C2dNormalizedMutualInfoParametersTagged, C2dNoiseGaussianParametersTagged, C2dNoisePoissonParametersTagged, C2dNoiseSpeckleParametersTagged, C2dNoiseSaltPepperParametersTagged, C2dNoMulticomponentSplitParametersTagged, C2dNormalizeLocalWindowParametersTagged, C2dNormpdfParametersTagged, C2dNoroundParametersTagged, C2dNospmParametersTagged, C2dOutputParametersTagged, C2dOutputMulticomponentParametersTagged, C2dOutputMultipleMulticomponentParametersTagged, C2dOrientParametersTagged, C2dOutputMultipleParametersTagged, C2dOrient1ParametersTagged, C2dOriginParametersTagged, C2dOriginVoxelParametersTagged, C2dOriginVoxelCoordParametersTagged, C2dOverlapParametersTagged, C2dOverlayLabelImageParametersTagged, C2dPadParametersTagged, C2dPadToParametersTagged, C2dPcaParametersTagged, C2dPercentIntensityModeParametersTagged, C2dPixelParametersTagged, C2dPopParametersTagged, C2dPopasParametersTagged, C2dProbeParametersTagged, C2dPushParametersTagged, C2dRankParametersTagged, C2dReciprocalParametersTagged, C2dRegionParametersTagged, C2dReorderParametersTagged, C2dRetainLabelsParametersTagged, C2dRfApplyParametersTagged, C2dRfTrainParametersTagged, C2dRfParamPatchParametersTagged, C2dRfParamUsexyzParametersTagged, C2dRfParamNousexyzParametersTagged, C2dRfParamNtreesParametersTagged, C2dRfParamTreedepthParametersTagged, C2dSetSformParametersTagged, C2dReplaceParametersTagged, C2dResampleParametersTagged, C2dResampleIsoParametersTagged, C2dResampleMmParametersTagged, C2dResliceItkParametersTagged, C2dResliceMatrixParametersTagged, C2dResliceIdentityParametersTagged, C2dRgb2hsvParametersTagged, C2dRmsParametersTagged, C2dRoundParametersTagged, C2dScaleParametersTagged, C2dSetSform1ParametersTagged, C2dSinParametersTagged, C2dSliceParametersTagged, C2dSliceAllParametersTagged, C2dSharpenParametersTagged, C2dShiftParametersTagged, C2dSignedDistanceTransformParametersTagged, C2dSmoothParametersTagged, C2dSmoothFastParametersTagged, C2dSpacingParametersTagged, C2dSplitParametersTagged, C2dSqrtParametersTagged, C2dStapleParametersTagged, C2dStructureTensorEigenvaluesParametersTagged, C2dSpmParametersTagged, C2dSubtractParametersTagged, C2dSupervoxelParametersTagged, C2dStretchParametersTagged, C2dSwapdimParametersTagged, C2dTestImageParametersTagged, C2dTestProbeParametersTagged, C2dThresholdParametersTagged, C2dTileParametersTagged, C2dTrimParametersTagged, C2dTrimToSizeParametersTagged, C2dTypeParametersTagged, C2dVerboseParametersTagged, C2dNoverboseParametersTagged, C2dVersionParametersTagged, C2dVoteParametersTagged, C2dVoteMrfParametersTagged, C2dVoteLabelParametersTagged, C2dVoxelSumParametersTagged, C2dVoxelIntegralParametersTagged, C2dVoxelwiseRegressionParametersTagged, C2dWarpParametersTagged, C2dWarpLabelParametersTagged, C2dWrapParametersTagged, C2dWeightedSumParametersTagged, C2dWeightedSumVoxelwiseParametersTagged]],
    "output": str,
})


def c2d_operations_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "accum": c2d_accum_cargs,
        "acos": c2d_acos_cargs,
        "add": c2d_add_cargs,
        "align_landmarks": c2d_align_landmarks_cargs,
        "anisotropic_diffusion": c2d_anisotropic_diffusion_cargs,
        "antialias": c2d_antialias_cargs,
        "set": c2d_set_cargs,
        "asin": c2d_asin_cargs,
        "atan2": c2d_atan2_cargs,
        "background": c2d_background_cargs,
        "n4_bias_correction": c2d_n4_bias_correction_cargs,
        "binarize": c2d_binarize_cargs,
        "canny": c2d_canny_cargs,
        "ceil": c2d_ceil_cargs,
        "centroid": c2d_centroid_cargs,
        "centroid_mark": c2d_centroid_mark_cargs,
        "connected_components": c2d_connected_components_cargs,
        "clear": c2d_clear_cargs,
        "clip": c2d_clip_cargs,
        "color_map": c2d_color_map_cargs,
        "compress": c2d_compress_cargs,
        "no_compress": c2d_no_compress_cargs,
        "conv": c2d_conv_cargs,
        "coordinate_map_voxel": c2d_coordinate_map_voxel_cargs,
        "coordinate_map_physical": c2d_coordinate_map_physical_cargs,
        "copy_transform": c2d_copy_transform_cargs,
        "cos": c2d_cos_cargs,
        "create": c2d_create_cargs,
        "dicom_series_list": c2d_dicom_series_list_cargs,
        "dicom_series_read": c2d_dicom_series_read_cargs,
        "dilate": c2d_dilate_cargs,
        "divide": c2d_divide_cargs,
        "duplicate": c2d_duplicate_cargs,
        "endaccum": c2d_endaccum_cargs,
        "endfor": c2d_endfor_cargs,
        "erode": c2d_erode_cargs,
        "erf": c2d_erf_cargs,
        "exp": c2d_exp_cargs,
        "export_patches": c2d_export_patches_cargs,
        "export_patches_aug": c2d_export_patches_aug_cargs,
        "extrude_seg": c2d_extrude_seg_cargs,
        "fill_background_with_noise": c2d_fill_background_with_noise_cargs,
        "fft": c2d_fft_cargs,
        "flip": c2d_flip_cargs,
        "floor": c2d_floor_cargs,
        "foreach": c2d_foreach_cargs,
        "foreach_comp": c2d_foreach_comp_cargs,
        "glm": c2d_glm_cargs,
        "gradient": c2d_gradient_cargs,
        "_help": c2d__help_cargs,
        "holefill": c2d_holefill_cargs,
        "hessian_eigenvalues": c2d_hessian_eigenvalues_cargs,
        "hessian_objectness": c2d_hessian_objectness_cargs,
        "histogram_match": c2d_histogram_match_cargs,
        "info": c2d_info_cargs,
        "info_full": c2d_info_full_cargs,
        "insert": c2d_insert_cargs,
        "interpolation": c2d_interpolation_cargs,
        "iterations": c2d_iterations_cargs,
        "label_overlap": c2d_label_overlap_cargs,
        "label_statistics": c2d_label_statistics_cargs,
        "landmarks_to_spheres": c2d_landmarks_to_spheres_cargs,
        "laplacian": c2d_laplacian_cargs,
        "levelset": c2d_levelset_cargs,
        "levelset_curvature": c2d_levelset_curvature_cargs,
        "levelset_advection": c2d_levelset_advection_cargs,
        "log": c2d_log_cargs,
        "log10": c2d_log10_cargs,
        "manual": c2d_manual_cargs,
        "match_bounding_box": c2d_match_bounding_box_cargs,
        "maximum": c2d_maximum_cargs,
        "multicomponent_split": c2d_multicomponent_split_cargs,
        "mean": c2d_mean_cargs,
        "median_filter": c2d_median_filter_cargs,
        "merge": c2d_merge_cargs,
        "mean_filter": c2d_mean_filter_cargs,
        "mutual_info": c2d_mutual_info_cargs,
        "minimum": c2d_minimum_cargs,
        "mixture_model": c2d_mixture_model_cargs,
        "moments": c2d_moments_cargs,
        "mattes_mutual_info": c2d_mattes_mutual_info_cargs,
        "mean_square": c2d_mean_square_cargs,
        "multiply": c2d_multiply_cargs,
        "normalized_cross_correlation": c2d_normalized_cross_correlation_cargs,
        "normalized_correlation": c2d_normalized_correlation_cargs,
        "normalized_mutual_info": c2d_normalized_mutual_info_cargs,
        "noise_gaussian": c2d_noise_gaussian_cargs,
        "noise_poisson": c2d_noise_poisson_cargs,
        "noise_speckle": c2d_noise_speckle_cargs,
        "noise_salt_pepper": c2d_noise_salt_pepper_cargs,
        "no_multicomponent_split": c2d_no_multicomponent_split_cargs,
        "normalize_local_window": c2d_normalize_local_window_cargs,
        "normpdf": c2d_normpdf_cargs,
        "noround": c2d_noround_cargs,
        "nospm": c2d_nospm_cargs,
        "output": c2d_output_cargs,
        "output_multicomponent": c2d_output_multicomponent_cargs,
        "output_multiple_multicomponent": c2d_output_multiple_multicomponent_cargs,
        "orient": c2d_orient_cargs,
        "output_multiple": c2d_output_multiple_cargs,
        "orient_1": c2d_orient_1_cargs,
        "origin": c2d_origin_cargs,
        "origin_voxel": c2d_origin_voxel_cargs,
        "origin_voxel_coord": c2d_origin_voxel_coord_cargs,
        "overlap": c2d_overlap_cargs,
        "overlay_label_image": c2d_overlay_label_image_cargs,
        "pad": c2d_pad_cargs,
        "pad_to": c2d_pad_to_cargs,
        "pca": c2d_pca_cargs,
        "percent_intensity_mode": c2d_percent_intensity_mode_cargs,
        "pixel": c2d_pixel_cargs,
        "pop": c2d_pop_cargs,
        "popas": c2d_popas_cargs,
        "probe": c2d_probe_cargs,
        "push": c2d_push_cargs,
        "rank": c2d_rank_cargs,
        "reciprocal": c2d_reciprocal_cargs,
        "region": c2d_region_cargs,
        "reorder": c2d_reorder_cargs,
        "retain_labels": c2d_retain_labels_cargs,
        "rf_apply": c2d_rf_apply_cargs,
        "rf_train": c2d_rf_train_cargs,
        "rf_param_patch": c2d_rf_param_patch_cargs,
        "rf_param_usexyz": c2d_rf_param_usexyz_cargs,
        "rf_param_nousexyz": c2d_rf_param_nousexyz_cargs,
        "rf_param_ntrees": c2d_rf_param_ntrees_cargs,
        "rf_param_treedepth": c2d_rf_param_treedepth_cargs,
        "set_sform": c2d_set_sform_cargs,
        "replace": c2d_replace_cargs,
        "resample": c2d_resample_cargs,
        "resample_iso": c2d_resample_iso_cargs,
        "resample_mm": c2d_resample_mm_cargs,
        "reslice_itk": c2d_reslice_itk_cargs,
        "reslice_matrix": c2d_reslice_matrix_cargs,
        "reslice_identity": c2d_reslice_identity_cargs,
        "rgb2hsv": c2d_rgb2hsv_cargs,
        "rms": c2d_rms_cargs,
        "round": c2d_round_cargs,
        "scale": c2d_scale_cargs,
        "set_sform_1": c2d_set_sform_1_cargs,
        "sin": c2d_sin_cargs,
        "slice": c2d_slice_cargs,
        "slice_all": c2d_slice_all_cargs,
        "sharpen": c2d_sharpen_cargs,
        "shift": c2d_shift_cargs,
        "signed_distance_transform": c2d_signed_distance_transform_cargs,
        "smooth": c2d_smooth_cargs,
        "smooth_fast": c2d_smooth_fast_cargs,
        "spacing": c2d_spacing_cargs,
        "split": c2d_split_cargs,
        "sqrt": c2d_sqrt_cargs,
        "staple": c2d_staple_cargs,
        "structure_tensor_eigenvalues": c2d_structure_tensor_eigenvalues_cargs,
        "spm": c2d_spm_cargs,
        "subtract": c2d_subtract_cargs,
        "supervoxel": c2d_supervoxel_cargs,
        "stretch": c2d_stretch_cargs,
        "swapdim": c2d_swapdim_cargs,
        "test_image": c2d_test_image_cargs,
        "test_probe": c2d_test_probe_cargs,
        "threshold": c2d_threshold_cargs,
        "tile": c2d_tile_cargs,
        "trim": c2d_trim_cargs,
        "trim_to_size": c2d_trim_to_size_cargs,
        "type": c2d_type_cargs,
        "verbose": c2d_verbose_cargs,
        "noverbose": c2d_noverbose_cargs,
        "version": c2d_version_cargs,
        "vote": c2d_vote_cargs,
        "vote_mrf": c2d_vote_mrf_cargs,
        "vote_label": c2d_vote_label_cargs,
        "voxel_sum": c2d_voxel_sum_cargs,
        "voxel_integral": c2d_voxel_integral_cargs,
        "voxelwise_regression": c2d_voxelwise_regression_cargs,
        "warp": c2d_warp_cargs,
        "warp_label": c2d_warp_label_cargs,
        "wrap": c2d_wrap_cargs,
        "weighted_sum": c2d_weighted_sum_cargs,
        "weighted_sum_voxelwise": c2d_weighted_sum_voxelwise_cargs,
    }.get(t)


def c2d_operations_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "output": c2d_output_outputs,
    }.get(t)


def c2d_accum_params(
    accum: str,
) -> C2dAccumParametersTagged:
    """
    Build parameters.
    
    Args:
        accum: -accum, -endaccum: Accumulate operations over all images\
            \
            Syntax: `-accum command-list -endaccum`\
            \
            Apply a binary operation (such as addition or multiplication) to\
            all the images on the stack in a cumulative fashion. The command(s)\
            will be applied to the last and second-to-last images on the stack,\
            then to the result of this operation and the third-to-last image on\
            the stack and so on. Below is the example of using the command to\
            add multiple images.\
            \
            c3d image*.nii -accum -add -endaccum -o sum.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "accum",
        "accum": accum,
    }
    return params


def c2d_accum_cargs(
    params: C2dAccumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-accum",
        params.get("accum", None)
    ])
    return cargs


def c2d_acos_params(
    acos: str,
) -> C2dAcosParametersTagged:
    """
    Build parameters.
    
    Args:
        acos: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "acos",
        "acos": acos,
    }
    return params


def c2d_acos_cargs(
    params: C2dAcosParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-acos",
        params.get("acos", None)
    ])
    return cargs


def c2d_add_params(
    add: str,
) -> C2dAddParametersTagged:
    """
    Build parameters.
    
    Args:
        add: -add: Voxelwise image addition\
            \
            Syntax: `-add`\
            \
            Adds the last two images on the stack, and places the sum at the\
            end of the stack.\
            \
            # Add two images: x = a + b\
            c3d a.img b.img -add -o x.img\
            \
            # Add three images, x = (a + b) + c in the first example, x = a +\
            (b + c) in the second\
            c3d a.img b.img -add c.img -add -o x.img\
            c3d a.img b.img c.img -add -add -o x.img\
            \
            # Subtract two images, using -scale command: x = a - b\
            c3d a.img b.img -scale -1 -add -o x.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "add",
        "add": add,
    }
    return params


def c2d_add_cargs(
    params: C2dAddParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-add",
        params.get("add", None)
    ])
    return cargs


def c2d_align_landmarks_params(
    align_landmarks: str,
) -> C2dAlignLandmarksParametersTagged:
    """
    Build parameters.
    
    Args:
        align_landmarks: -alm, -align-landmarks: Align images based on landmark\
            matching\
            \
            Syntax: `-alm dof outfile`\
            \
            Performs rigid or affine alignment between to sets of landmark\
            images. A landmark image is an image where for every intensity\
            value, the centroid of all voxels with that intensity represents a\
            landmark. Landmarks can be created using the paintbrush tool in\
            ITK-SNAP (they can be spheres, cubes, etc). The first image on the\
            stack is the target/fixed/reference image, and the second is the\
            moving image. The parameters are the degrees of freedom, which is a\
            number (6 for rigid, 7 for rigid+scale, 12 for affine) and the\
            output matrix file. In this example, we have images **fixed.nii*\
            and **moving.nii** with corresponding landmark images. We use\
            landmarks to align the moving image to the fixed:\
            \
            c3d fixed_landmarks.nii moving_landmarks.nii -alm 6 rigid.mat\
            c3d fixed.nii moving.nii -reslice-matrix rigid.mat -o\
            moving_resliced_to_fixed.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "align_landmarks",
        "align_landmarks": align_landmarks,
    }
    return params


def c2d_align_landmarks_cargs(
    params: C2dAlignLandmarksParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-align-landmarks",
        params.get("align_landmarks", None)
    ])
    return cargs


def c2d_anisotropic_diffusion_params(
    anisotropic_diffusion: str,
) -> C2dAnisotropicDiffusionParametersTagged:
    """
    Build parameters.
    
    Args:
        anisotropic_diffusion: -add: Voxelwise image addition\
            \
            Syntax: `-add`\
            \
            Adds the last two images on the stack, and places the sum at the\
            end of the stack.\
            \
            # Add two images: x = a + b\
            c3d a.img b.img -add -o x.img\
            \
            # Add three images, x = (a + b) + c in the first example, x = a +\
            (b + c) in the second\
            c3d a.img b.img -add c.img -add -o x.img\
            c3d a.img b.img c.img -add -add -o x.img\
            \
            # Subtract two images, using -scale command: x = a - b\
            c3d a.img b.img -scale -1 -add -o x.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "anisotropic_diffusion",
        "anisotropic_diffusion": anisotropic_diffusion,
    }
    return params


def c2d_anisotropic_diffusion_cargs(
    params: C2dAnisotropicDiffusionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-anisotropic-diffusion",
        params.get("anisotropic_diffusion", None)
    ])
    return cargs


def c2d_antialias_params(
    antialias: str,
) -> C2dAntialiasParametersTagged:
    """
    Build parameters.
    
    Args:
        antialias: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "antialias",
        "antialias": antialias,
    }
    return params


def c2d_antialias_cargs(
    params: C2dAntialiasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-antialias",
        params.get("antialias", None)
    ])
    return cargs


def c2d_set_params(
    set_: str,
) -> C2dSetParametersTagged:
    """
    Build parameters.
    
    Args:
        set_: -as: Assign image at the end of the stack to a variable\
            \
            Syntax: `-as var`\
            \
            Associates the image currently at the end of the stack with\
            variable name 'var'. This allows you to retrieve the image later on\
            the command line using the **-push** command. The **-as** and\
            **-push** commands are useful when you need to use a certain image\
            more than once during a convert3d operation. For example, if you\
            want to compute the distance transform of a binary image and mask\
            it so that the values outside of the binary image region have value\
            0, you would use the following command:\
            \
            c3d binary.img -as A -sdt -push A -times -o masked_distance.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "set",
        "set": set_,
    }
    return params


def c2d_set_cargs(
    params: C2dSetParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-as",
        params.get("set", None)
    ])
    return cargs


def c2d_asin_params(
    asin: str,
) -> C2dAsinParametersTagged:
    """
    Build parameters.
    
    Args:
        asin: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "asin",
        "asin": asin,
    }
    return params


def c2d_asin_cargs(
    params: C2dAsinParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-asin",
        params.get("asin", None)
    ])
    return cargs


def c2d_atan2_params(
    atan2: str,
) -> C2dAtan2ParametersTagged:
    """
    Build parameters.
    
    Args:
        atan2: -atan2: Voxelwise angle from sine and cosine\
            \
            Syntax: `-atan2`\
            \
            Computes the angle in radians from images containing sine and\
            cosine. This is a voxel-wise operation. It requires two images on\
            the stack (sine followed by cosine):\
            \
            c3d sin_theta.nii.gz cos_theta.nii.gz -atan2 -o theta.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "atan2",
        "atan2": atan2,
    }
    return params


def c2d_atan2_cargs(
    params: C2dAtan2Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-atan2",
        params.get("atan2", None)
    ])
    return cargs


def c2d_background_params(
    background: str,
) -> C2dBackgroundParametersTagged:
    """
    Build parameters.
    
    Args:
        background: -background: Specify background intensity\
            \
            Syntax: `-background <value> `\
            \
            Sets the background intensity for interpolation and other\
            operations where some default background value is needed. Default\
            is 0.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "background",
        "background": background,
    }
    return params


def c2d_background_cargs(
    params: C2dBackgroundParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-background",
        params.get("background", None)
    ])
    return cargs


def c2d_n4_bias_correction_params(
    n4_bias_correction: str,
) -> C2dN4BiasCorrectionParametersTagged:
    """
    Build parameters.
    
    Args:
        n4_bias_correction: -biascorr: Automatic MRI bias field correction\
            \
            Syntax: `-biascorr`\
            \
            Performs automatic bias field correction for MRI images. This\
            feature uses the [N3 implementation in ITK by Dr. Tustison][4],\
            based on the N3 algorithm by Sled et al.\
            \
            c3d mri.nii.gz -biascorr -o mricorr.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "n4_bias_correction",
        "n4_bias_correction": n4_bias_correction,
    }
    return params


def c2d_n4_bias_correction_cargs(
    params: C2dN4BiasCorrectionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-biascorr",
        params.get("n4_bias_correction", None)
    ])
    return cargs


def c2d_binarize_params(
    binarize: str,
) -> C2dBinarizeParametersTagged:
    """
    Build parameters.
    
    Args:
        binarize: -binarize: Convert image to binary\
            \
            Syntax: `-binarize`\
            \
            Converts an image to binary by mapping all background values (the\
            background is 0 by default and can be changed by the option\
            **-background**) to 0 and all non-background values to 1. The\
            **-binarize** command is shorthand for the **-threshold** command.\
            \
            c3d test.img -binarize -o binary.img\
            c3d -background 10 -binarize -o binary.img\
            c3d test.img -threshold 10 10 0 1 // equivalent to above command.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "binarize",
        "binarize": binarize,
    }
    return params


def c2d_binarize_cargs(
    params: C2dBinarizeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-binarize",
        params.get("binarize", None)
    ])
    return cargs


def c2d_canny_params(
    canny: str,
) -> C2dCannyParametersTagged:
    """
    Build parameters.
    
    Args:
        canny: -canny: Canny edge detector\
            \
            Syntax: `-canny <sigma_vector> <t_lower> <t_upper>`\
            \
            Performs edge detection on the last image on the stack using the\
            Canny filter. The parameters are a vector of standard deviations\
            defining the scale of the edges detected and lower and upper\
            thresholds for edge selection. See documentation on the [ITK Canny\
            Filter][14].
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "canny",
        "canny": canny,
    }
    return params


def c2d_canny_cargs(
    params: C2dCannyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-canny",
        params.get("canny", None)
    ])
    return cargs


def c2d_ceil_params(
    ceil: str,
) -> C2dCeilParametersTagged:
    """
    Build parameters.
    
    Args:
        ceil: -ceil: Round up image intensities\
            \
            Syntax: `-ceil `\
            \
            Each image intensity is replaced by the smallest integer larger or\
            equal to it\
            \
            c3d input.img -ceil -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "ceil",
        "ceil": ceil,
    }
    return params


def c2d_ceil_cargs(
    params: C2dCeilParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-ceil",
        params.get("ceil", None)
    ])
    return cargs


def c2d_centroid_params(
    centroid: str,
) -> C2dCentroidParametersTagged:
    """
    Build parameters.
    
    Args:
        centroid: -centroid: Report centroid of foreground voxels\
            \
            Syntax: `-centroid`\
            \
            Reports the centroid, in physical coordinates, of all foreground\
            voxels in the image.\
            \
            c3d binaryimage.img -centroid // centroid of all non-0 voxels\
            c3d grayimage.img -thresh 1000 7000 1 0 -centroid 1 // centroid of\
            all voxels in range 1000-7000\
            c3d labelimage.img -thresh 5 5 1 0 -centroid // centroid of all\
            voxels with label 5\
            c3d labelimage.img -split -foreach -centroid -endfor // centroids\
            of all labels (including 0).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "centroid",
        "centroid": centroid,
    }
    return params


def c2d_centroid_cargs(
    params: C2dCentroidParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-centroid",
        params.get("centroid", None)
    ])
    return cargs


def c2d_centroid_mark_params(
    centroid_mark: str,
) -> C2dCentroidMarkParametersTagged:
    """
    Build parameters.
    
    Args:
        centroid_mark: -centroid-mark: Mark the centroid of foreground voxels\
            \
            Syntax: `-centroid-mark <label>`\
            \
            Marks the centroid of the foreground voxels in an image. Unlike\
            **-centroid**, this command does not print the centroid location,\
            but marks the closest voxel in the image with the intensity\
            **label**. The remaining voxels are assigned 0 intensity. Combined\
            with -dilate, this can be used to mark centers of regions with\
            spheres.\
            \
            c3d binaryimage.nii -centroid-mark -dilate 1 3x3x3\
            c3d labelimage.nii -split -foreach -centroid-mark -endfor -merge -o\
            centers.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "centroid_mark",
        "centroid_mark": centroid_mark,
    }
    return params


def c2d_centroid_mark_cargs(
    params: C2dCentroidMarkParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-centroid-mark",
        params.get("centroid_mark", None)
    ])
    return cargs


def c2d_connected_components_params(
    connected_components: str,
) -> C2dConnectedComponentsParametersTagged:
    """
    Build parameters.
    
    Args:
        connected_components: -comp, -connected-components: Compute connected\
            components\
            \
            Syntax: `-comp`\
            \
            Computes the connected components of a binary image. Each connected\
            component is assigned an integer index. Indices are ordered by the\
            size of the component, so the component assigned index 1 is the\
            largest. The background is assigned index 0. To select the largest\
            connected component, combine the call to **-comp** with a call to\
            **-threshold**.\
            \
            c3d binary.img -comp -o comp.img\
            c3d binary.img -comp -threshold 1 1 1 0 -o largest_comp.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "connected_components",
        "connected_components": connected_components,
    }
    return params


def c2d_connected_components_cargs(
    params: C2dConnectedComponentsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-connected-components",
        params.get("connected_components", None)
    ])
    return cargs


def c2d_clear_params(
    clear_: str,
) -> C2dClearParametersTagged:
    """
    Build parameters.
    
    Args:
        clear_: -clear: Clear the image stack\
            \
            Syntax: `-clear`\
            \
            Clears the image stack. Images assigned a name with the **-as**\
            command will remain in memory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "clear",
        "clear": clear_,
    }
    return params


def c2d_clear_cargs(
    params: C2dClearParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-clear",
        params.get("clear", None)
    ])
    return cargs


def c2d_clip_params(
    clip: str,
) -> C2dClipParametersTagged:
    """
    Build parameters.
    
    Args:
        clip: -clip: Clip image intensity to range\
            \
            Syntax: `-clip iMin iMax`\
            \
            Clips image intensities, so that the values below *iMin* are\
            converted to *iMin* and values greater than *iMax* are converted to\
            *iMax*. This is useful for eliminating hyperintensities in images.\
            Values *iMin* and *iMax* are intensity specifications (see below).\
            \
            c3d mri.img -clip 1000 8000 -o mriclip01.img // Clips below and\
            above\
            c3d mri.img -clip -inf 8000 -o mriclip02.img // Clips above only\
            c3d mri.img -clip -inf 95% -o mriclip03.img // Clips at 95th\
            percentile.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "clip",
        "clip": clip,
    }
    return params


def c2d_clip_cargs(
    params: C2dClipParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-clip",
        params.get("clip", None)
    ])
    return cargs


def c2d_color_map_params(
    color_map: str,
) -> C2dColorMapParametersTagged:
    """
    Build parameters.
    
    Args:
        color_map: -color-map, -colormap: Convert scalar image to RGB using\
            color map\
            \
            Syntax: `-color-map <ColormapName> [min max]`\
            \
            Converts a scalar image to a color (RGB) image using a specified\
            color map. The output of the command are three images, containing\
            the red, green and blue channels of the RGB image. The mapping uses\
            the range of the input image, e.g., using the **jet** color map,\
            the lowest intensity pixel in the image will be mapped to blue, and\
            the highest intesnity pixel will be mapped to red. The admissible\
            color maps are\
            **hot,cool,spring,summer,autumn,winter,copper,jet,hsv,red,green,blue,grey,overunder**.\
            The command can be used with the -omc command to write RGB images.\
            The example below generates a PNG image from a slice in a scalar\
            image.\
            \
            c3d scalar.nii.gz -slice z 50% -flip y -color-map jet -type uchar\
            -omc colorslice.png\
            \
            By default the full image intensity range is mapped. The optional\
            **min** and **max** parameters can be used to set the range of the\
            color map.\
            \
            c3d scalar.nii.gz -slice z 50% -flip y -color-map jet 0 1 -type\
            uchar -omc colorslice.png.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "color_map",
        "color_map": color_map,
    }
    return params


def c2d_color_map_cargs(
    params: C2dColorMapParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-colormap",
        params.get("color_map", None)
    ])
    return cargs


def c2d_compress_params(
    compress: str,
) -> C2dCompressParametersTagged:
    """
    Build parameters.
    
    Args:
        compress: -compress, -no-compress: Enable/disable compression for some\
            image files\
            \
            Syntax: `-compress` or `-no-compress`\
            \
            Turns on compressing for image file formats that support it. For\
            some file formats, like NIFTI (.nii), compression is enabled\
            automatically when the filename includes the **.gz** extension. For\
            other formats, like MetaImage, you need to specify **-compress** to\
            enable compression. The following two commands save the image as\
            compressed NIFTI and MetaImage files:\
            \
            c3d input.nii -o output.nii.gz\
            c3d input.nii -compress -o output.mha.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "compress",
        "compress": compress,
    }
    return params


def c2d_compress_cargs(
    params: C2dCompressParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-compress",
        params.get("compress", None)
    ])
    return cargs


def c2d_no_compress_params(
    no_compress: str,
) -> C2dNoCompressParametersTagged:
    """
    Build parameters.
    
    Args:
        no_compress: -compress, -no-compress: Enable/disable compression for\
            some image files\
            \
            Syntax: `-compress` or `-no-compress`\
            \
            Turns on compressing for image file formats that support it. For\
            some file formats, like NIFTI (.nii), compression is enabled\
            automatically when the filename includes the **.gz** extension. For\
            other formats, like MetaImage, you need to specify **-compress** to\
            enable compression. The following two commands save the image as\
            compressed NIFTI and MetaImage files:\
            \
            c3d input.nii -o output.nii.gz\
            c3d input.nii -compress -o output.mha.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "no_compress",
        "no_compress": no_compress,
    }
    return params


def c2d_no_compress_cargs(
    params: C2dNoCompressParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-no-compress",
        params.get("no_compress", None)
    ])
    return cargs


def c2d_conv_params(
    conv: str,
) -> C2dConvParametersTagged:
    """
    Build parameters.
    
    Args:
        conv: -conv: Convolution\
            \
            Syntax `-conv`\
            \
            Performs convolution between the last two images on the stack. The\
            convolution is performed using the Fourier transform. The result is\
            an image of the same dimensions as the first image. For more\
            details, see ["FFT Based Convolution" by Gaetan Lehmann][Lehmann].\
            \
            c3d image.nii kernel.nii -conv -o result.nii\
            \
            \
            [Lehmann]: https://hdl.handle.net/10380/3154.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "conv",
        "conv": conv,
    }
    return params


def c2d_conv_cargs(
    params: C2dConvParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-conv",
        params.get("conv", None)
    ])
    return cargs


def c2d_coordinate_map_voxel_params(
    coordinate_map_voxel: str,
) -> C2dCoordinateMapVoxelParametersTagged:
    """
    Build parameters.
    
    Args:
        coordinate_map_voxel: -cmv, -coordinate-map-voxel: Generate voxel\
            coordinate maps (voxel units)\
            \
            Syntax: `-cmv`\
            \
            For a *N*-dimensional image, replaces the last image on the stack\
            with *N* images. The *k*-th output image at each voxel contains the\
            $k$-th coordinate of that voxel, in voxel units.\
            \
            c3d image.nii -cmv -oo coordmap%d.nii.gz\
            \
            One can use this command to split a brain segmentation image into a\
            left hemisphere segmentation and a right hemisphere segmentation\
            (assuming the X coordinate corresponds to the right-left axis)\
            \
            c3d seg.nii -as SEG -cmv -pop -pop -thresh 50% inf 1 0 -as MASK \\\
            -push SEG -times -o seg_left.nii.gz \\\
            -push MASK -replace 1 0 0 1 \\\
            -push SEG -times -o seg_right.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "coordinate_map_voxel",
        "coordinate_map_voxel": coordinate_map_voxel,
    }
    return params


def c2d_coordinate_map_voxel_cargs(
    params: C2dCoordinateMapVoxelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-coordinate-map-voxel",
        params.get("coordinate_map_voxel", None)
    ])
    return cargs


def c2d_coordinate_map_physical_params(
    coordinate_map_physical: str,
) -> C2dCoordinateMapPhysicalParametersTagged:
    """
    Build parameters.
    
    Args:
        coordinate_map_physical: -cmp, -coordinate-map-physical: Generate voxel\
            coordinate maps (voxel units)\
            \
            Syntax: `-cmp`\
            \
            This command is similar to **-cmv** (**-coordinate-map-voxel**),\
            but the output will contain the physical coordinates of the voxels,\
            in the NIFTI (RAS) coordinate frame.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "coordinate_map_physical",
        "coordinate_map_physical": coordinate_map_physical,
    }
    return params


def c2d_coordinate_map_physical_cargs(
    params: C2dCoordinateMapPhysicalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-coordinate-map-physical",
        params.get("coordinate_map_physical", None)
    ])
    return cargs


def c2d_copy_transform_params(
    copy_transform: str,
) -> C2dCopyTransformParametersTagged:
    """
    Build parameters.
    
    Args:
        copy_transform: -copy-transform: Copy header information\
            \
            Syntax: `-copy-transform`\
            \
            Copies the image header, specifically the image to physical space\
            transform (origin, spacing, direction cosines), from the first\
            image (reference) to the second image (target). This is best done\
            with NIFTI images, which store this information well. In the\
            example below, *out.nii* will have the same header as *first.nii*\
            and the same intensities as *second.nii*.\
            \
            c3d first.nii second.nii -copy-transform -o out.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "copy_transform",
        "copy_transform": copy_transform,
    }
    return params


def c2d_copy_transform_cargs(
    params: C2dCopyTransformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-copy-transform",
        params.get("copy_transform", None)
    ])
    return cargs


def c2d_cos_params(
    cos: str,
) -> C2dCosParametersTagged:
    """
    Build parameters.
    
    Args:
        cos: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "cos",
        "cos": cos,
    }
    return params


def c2d_cos_cargs(
    params: C2dCosParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-cos",
        params.get("cos", None)
    ])
    return cargs


def c2d_create_params(
    create: str,
) -> C2dCreateParametersTagged:
    """
    Build parameters.
    
    Args:
        create: -create: Generate blank image\
            \
            Syntax: `-create dimensions voxel_size`\
            \
            Creates a new blank image with specified dimensions and voxel size,\
            and places it at the end of the stack. The image is set to the\
            current background value, which is 0 by default but can be\
            overwritten with the **-background** command. The origin of the\
            image can be changed with the **-origin** command.\
            \
            c3d -create 256x256x160 1x1x1mm -o newimage.img\
            c3d -background 128 -create 256x256x160 1x1x1mm -origin\
            128x128x80mm -o newimage.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "create",
        "create": create,
    }
    return params


def c2d_create_cargs(
    params: C2dCreateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-create",
        params.get("create", None)
    ])
    return cargs


def c2d_dicom_series_list_params(
    dicom_series_list: str,
) -> C2dDicomSeriesListParametersTagged:
    """
    Build parameters.
    
    Args:
        dicom_series_list: -dicom-series-list: List image series in a DICOM\
            directory\
            \
            Syntax: `-dicom-series-list <directory>\
            \
            Prints out a table of DICOM series ids and corresponding image\
            information to standard output.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "dicom_series_list",
        "dicom_series_list": dicom_series_list,
    }
    return params


def c2d_dicom_series_list_cargs(
    params: C2dDicomSeriesListParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-dicom-series-list",
        params.get("dicom_series_list", None)
    ])
    return cargs


def c2d_dicom_series_read_params(
    dicom_series_read: str,
) -> C2dDicomSeriesReadParametersTagged:
    """
    Build parameters.
    
    Args:
        dicom_series_read: -dicom-series-read: Read a DICOM image series\
            \
            Syntax: `-dicom-series-read <directory> <series_id>`\
            \
            Imports a specific DICOM image series from a directory containing\
            DICOM files. The **directory** parameter may also point to one of\
            the DICOM files in the directory.\
            The **seried_id** is a string identifier for the series that can be\
            obtained by calling **-dicom-series-list**.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "dicom_series_read",
        "dicom_series_read": dicom_series_read,
    }
    return params


def c2d_dicom_series_read_cargs(
    params: C2dDicomSeriesReadParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-dicom-series-read",
        params.get("dicom_series_read", None)
    ])
    return cargs


def c2d_dilate_params(
    dilate: str,
) -> C2dDilateParametersTagged:
    """
    Build parameters.
    
    Args:
        dilate: -dilate: Binary dilation\
            \
            Syntax: `-dilate <label> <radius_vector>`\
            \
            Applies the dilation [mathematical morphology][5] operation to a\
            binary image. The first parameter is the intensity value of the\
            object that is to be dilated. The second is the radius of the\
            dilation structuring element in 3D.\
            \
            c3d binary.img -dilate 255 3x3x3vox -o newimage.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "dilate",
        "dilate": dilate,
    }
    return params


def c2d_dilate_cargs(
    params: C2dDilateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-dilate",
        params.get("dilate", None)
    ])
    return cargs


def c2d_divide_params(
    divide: str,
) -> C2dDivideParametersTagged:
    """
    Build parameters.
    
    Args:
        divide: -divide: Voxelwise image division\
            \
            Syntax: `-divide`\
            \
            Divides one image by another. For instance to compute C = A / B,\
            use the command\
            \
            c3d A.img B.img -divide -o C.img\
            \
            Divison may generate infinite and not-a-number (NaN) values if B\
            contains zeros. You can use **-replace** to get rid of these values\
            \
            c3d A.img B.img -divide -replace inf 1000 -inf -1000 NaN 0 -o\
            C2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "divide",
        "divide": divide,
    }
    return params


def c2d_divide_cargs(
    params: C2dDivideParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-divide",
        params.get("divide", None)
    ])
    return cargs


def c2d_duplicate_params(
    duplicate: str,
) -> C2dDuplicateParametersTagged:
    """
    Build parameters.
    
    Args:
        duplicate: -dup: Duplicate the last image on the stack\
            \
            Syntax: `-dup`\
            \
            Duplicates the image at the end of the stack. This is equivalent to\
            **-as var -push var**, but shorter. An example is when you want to\
            pass an image as both arguments to a binary operator, e.g.,\
            computing the square of the image intensity:\
            \
            c3d input.img -dup -times -o square.img\
            \
            ### Commands: Voxelwise Calculations.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "duplicate",
        "duplicate": duplicate,
    }
    return params


def c2d_duplicate_cargs(
    params: C2dDuplicateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-dup",
        params.get("duplicate", None)
    ])
    return cargs


def c2d_endaccum_params(
    endaccum: str,
) -> C2dEndaccumParametersTagged:
    """
    Build parameters.
    
    Args:
        endaccum: -accum, -endaccum: Accumulate operations over all images\
            \
            Syntax: `-accum command-list -endaccum`\
            \
            Apply a binary operation (such as addition or multiplication) to\
            all the images on the stack in a cumulative fashion. The command(s)\
            will be applied to the last and second-to-last images on the stack,\
            then to the result of this operation and the third-to-last image on\
            the stack and so on. Below is the example of using the command to\
            add multiple images.\
            \
            c3d image*.nii -accum -add -endaccum -o sum.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "endaccum",
        "endaccum": endaccum,
    }
    return params


def c2d_endaccum_cargs(
    params: C2dEndaccumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-endaccum",
        params.get("endaccum", None)
    ])
    return cargs


def c2d_endfor_params(
    endfor: str,
) -> C2dEndforParametersTagged:
    """
    Build parameters.
    
    Args:
        endfor: -foreach, -endfor: Loop commands over all images on the stack\
            \
            Syntax: `-foreach commands-list -endfor`\
            \
            This command forces the commands between **-foreach** and\
            **-endfor** to be applied to every image on the stack. The main use\
            of this command is to automate processing of multiple datasets. For\
            example,\
            \
            c3d epi*.nii -foreach -smooth 3mm -endfor -oo epism%03d.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "endfor",
        "endfor": endfor,
    }
    return params


def c2d_endfor_cargs(
    params: C2dEndforParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-endfor",
        params.get("endfor", None)
    ])
    return cargs


def c2d_erode_params(
    erode: str,
) -> C2dErodeParametersTagged:
    """
    Build parameters.
    
    Args:
        erode: -erode: Binary erosion\
            \
            Syntax: `-erode <label> <radius_vector>`\
            \
            Applies erosion [mathematical morphology][5] operation to a binary\
            image. The first parameter is the intensity value of the object\
            that is to be eroded. The second is the radius of the erosion\
            structuring element in 3D.\
            \
            c3d binary.img -erode 255 3x3x3vox -o newimage.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "erode",
        "erode": erode,
    }
    return params


def c2d_erode_cargs(
    params: C2dErodeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-erode",
        params.get("erode", None)
    ])
    return cargs


def c2d_erf_params(
    erf: str,
) -> C2dErfParametersTagged:
    """
    Build parameters.
    
    Args:
        erf: -erf: Standard error function\
            \
            Syntax: `-erf mu sigma`\
            \
            Computes the standard error function. This is useful for applying\
            soft thresholds. The function computes y = erf((x - mu)/sigma).\
            \
            c3d input.img -erf 5 2 -o erf.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "erf",
        "erf": erf,
    }
    return params


def c2d_erf_cargs(
    params: C2dErfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-erf",
        params.get("erf", None)
    ])
    return cargs


def c2d_exp_params(
    exp: str,
) -> C2dExpParametersTagged:
    """
    Build parameters.
    
    Args:
        exp: -exp: Voxelwise natural exponent\
            \
            Syntax: `-exp`\
            \
            Computes exponent of each voxel in the last image on the stack.\
            \
            c3d input.img -exp -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "exp",
        "exp": exp,
    }
    return params


def c2d_exp_cargs(
    params: C2dExpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-exp",
        params.get("exp", None)
    ])
    return cargs


def c2d_export_patches_params(
    export_patches: str,
) -> C2dExportPatchesParametersTagged:
    """
    Build parameters.
    
    Args:
        export_patches: -export-patches, -xp: Fixed size patch sampling from\
            masked regions\
            \
            Syntax: `-export-patches <outfile> <radius_vector> <frequency>`\
            \
            See also: **-export-patches-aug (-xpa)** command, which provides\
            data augmentation for deep learning.\
            \
            This command samples patches from a region of a ND image and stores\
            them into a data file that can be read easily in other software,\
            for example, NumPy. This is useful for generating training data for\
            machine learning projects. Multiple "channels" can be sampled.\
            \
            c3d chan1.nii chan2.nii chan3.nii mask.nii -xp samples.dat 4x4x4\
            100\
            \
            This command will sample the three images chan1, chan2, chan3 at\
            foreground voxels in the mask. Voxels in the mask foreground region\
            are sampled randomly, following a uniform distribution. The value\
            of 100 means that every 100-th voxel, on average, is sampled. The\
            radius 4x4x4 means that patches of size 9x9x9 will be generated.\
            For each sampled voxel, the sampled intensity data is represented\
            as a 3x9x9x9 array in this example.\
            \
            To read these samples in NumPy use the following code\
            \
            dims = (9,9,9) # Patch dimensions\
            k = 3 # Number of channels\
            bps = (4 * k * reduce(mul, dims, 1)) # Bytes per sample\
            np = os.path.getsize(fname) // bps # Number of samples\
            arr = numpy.memmap(fname,'float32','r',shape=(np,k) + dims)\
            \
            It is also possible to visualize the extracted samples in ITK-SNAP\
            by reading them as a raw image, with dimensions equal to the\
            dimensions of the patch, and the z-dimension multiplied by the\
            number of samples.\
            \
            The command can also be used to extract entire structures. For\
            example, if we have a binary segmentation of a lesion of an\
            approximately known size in an MRI scan, we can extract a patch of\
            given size centered on this lesion, as follows:\
            \
            c3d mri.nii lesion_seg.nii -centroid-mark 1 -xp single_sample.dat\
            50x50x20 1\
            \
            In the above example, **-centroid-mark** transforms the lesion\
            segmentation into a single-voxel mask, from which the sample from\
            the MRI is taken.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "export_patches",
        "export_patches": export_patches,
    }
    return params


def c2d_export_patches_cargs(
    params: C2dExportPatchesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-export-patches",
        params.get("export_patches", None)
    ])
    return cargs


def c2d_export_patches_aug_params(
    export_patches_aug: str,
) -> C2dExportPatchesAugParametersTagged:
    """
    Build parameters.
    
    Args:
        export_patches_aug: -export-patches-aug, -xpa: data augmentation for\
            deep learning\
            \
            Syntax `-export-patches-aug <N> <sigma_angle>`\
            \
            This command must precede the `-export-patches (-xp)` command and\
            instructs this command to not only sample patches along the image\
            axes but to also sample **N** randomly rotated patches. Rotation is\
            around a uniformly distributed axis with a rotation angle\
            distributed normally with teh standard deviation **sigma_angle**,\
            specified in degrees. This kind of sampling is useful for data\
            augmentation for machine learning algorithms.\
            \
            c3d chan1.nii chan2.nii chan3.nii mask.nii -xpa 5 10 -xp\
            samples.dat 4x4x4 100.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "export_patches_aug",
        "export_patches_aug": export_patches_aug,
    }
    return params


def c2d_export_patches_aug_cargs(
    params: C2dExportPatchesAugParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-export-patches-aug",
        params.get("export_patches_aug", None)
    ])
    return cargs


def c2d_extrude_seg_params(
    extrude_seg: str,
) -> C2dExtrudeSegParametersTagged:
    """
    Build parameters.
    
    Args:
        extrude_seg: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "extrude_seg",
        "extrude_seg": extrude_seg,
    }
    return params


def c2d_extrude_seg_cargs(
    params: C2dExtrudeSegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-extrude-seg",
        params.get("extrude_seg", None)
    ])
    return cargs


def c2d_fill_background_with_noise_params(
    fill_background_with_noise: str,
) -> C2dFillBackgroundWithNoiseParametersTagged:
    """
    Build parameters.
    
    Args:
        fill_background_with_noise: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fill_background_with_noise",
        "fill_background_with_noise": fill_background_with_noise,
    }
    return params


def c2d_fill_background_with_noise_cargs(
    params: C2dFillBackgroundWithNoiseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-fill-background-with-noise",
        params.get("fill_background_with_noise", None)
    ])
    return cargs


def c2d_fft_params(
    fft: str,
) -> C2dFftParametersTagged:
    """
    Build parameters.
    
    Args:
        fft: -fft: Fast Fourier transform\
            \
            Syntax `-fft`\
            \
            Computes the Fourier transform of a real-valued image at the end of\
            the stack. The image is replaced by the real and imaginary\
            components of the FFT. This command is only available if\
            **convert3d** is compiled with the FFTW library support.\
            \
            c3d image.nii -fft -oo real.nii imag.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fft",
        "fft": fft,
    }
    return params


def c2d_fft_cargs(
    params: C2dFftParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-fft",
        params.get("fft", None)
    ])
    return cargs


def c2d_flip_params(
    flip: str,
) -> C2dFlipParametersTagged:
    """
    Build parameters.
    
    Args:
        flip: -flip: Flip image around an axis\
            \
            Syntax: `-flip axes`\
            \
            Flips the image around specified axes. The parameter 'axes' may be\
            any combination of characters 'x', 'y', and 'z'; the order does not\
            matter.\
            \
            c3d input.img -flip xy -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "flip",
        "flip": flip,
    }
    return params


def c2d_flip_cargs(
    params: C2dFlipParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-flip",
        params.get("flip", None)
    ])
    return cargs


def c2d_floor_params(
    floor: str,
) -> C2dFloorParametersTagged:
    """
    Build parameters.
    
    Args:
        floor: -floor: Round down image intensities\
            \
            Syntax: `-floor `\
            \
            Each image intensity is replaced by the largest integer smaller or\
            equal to it.\
            \
            c3d input.img -floor -o output.img\
            \
            To round each intensity to the closest integer, use\
            \
            c3d input.img -shift 0.5 -floor.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "floor",
        "floor": floor,
    }
    return params


def c2d_floor_cargs(
    params: C2dFloorParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-floor",
        params.get("floor", None)
    ])
    return cargs


def c2d_foreach_params(
    foreach: str,
) -> C2dForeachParametersTagged:
    """
    Build parameters.
    
    Args:
        foreach: -foreach, -endfor: Loop commands over all images on the stack\
            \
            Syntax: `-foreach commands-list -endfor`\
            \
            This command forces the commands between **-foreach** and\
            **-endfor** to be applied to every image on the stack. The main use\
            of this command is to automate processing of multiple datasets. For\
            example,\
            \
            c3d epi*.nii -foreach -smooth 3mm -endfor -oo epism%03d.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "foreach",
        "foreach": foreach,
    }
    return params


def c2d_foreach_cargs(
    params: C2dForeachParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-foreach",
        params.get("foreach", None)
    ])
    return cargs


def c2d_foreach_comp_params(
    foreach_comp: str,
) -> C2dForeachCompParametersTagged:
    """
    Build parameters.
    
    Args:
        foreach_comp: -foreach-comp, -endfor: Loop commands over components of\
            a multi-component image\
            \
            Syntax `-foreach-comp <N> commands-list -endfor`\
            \
            This command runs the list of commands separately for each\
            component of a set of multi-component images loaded with -mcs. This\
            makes it possible to perform component-wise operations on\
            multi-component images. For example, it can be used to average\
            several multi-component images. If the image stack contains images\
            *x1* *y1* *z1* *x2* *y2* *z2*, then the operations will be run on\
            *[x1,x2]*, *[y1,y2]*, *[z1,z2]*. For example, if multi_1.nii to\
            multi_10.nii are three-component images, then the mean\
            three-component image is given by\
            \
            c2d -mcs multi_*.nii -foreach-comp -mean -endfor -omc\
            multi_mean.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "foreach_comp",
        "foreach_comp": foreach_comp,
    }
    return params


def c2d_foreach_comp_cargs(
    params: C2dForeachCompParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-foreach-comp",
        params.get("foreach_comp", None)
    ])
    return cargs


def c2d_glm_params(
    glm: str,
) -> C2dGlmParametersTagged:
    """
    Build parameters.
    
    Args:
        glm: -glm: General linear model\
            \
            Syntax: `-glm design_matrix_file contrast_vector_file`\
            \
            Applies voxel-wise general linear model to a set of images. More\
            precisely, the general linear model solves the following system: $Y\
            = X \\beta + \\epsilon$, where Y are the observations (a list of n\
            images, where each voxel is treated as an independent observation);\
            X is the $n x k$ design matrix, where $k$ is the number of factors;\
            $\\beta$ is a set of $k$ unknown images (factors) and $\\epsilon$\
            is the error term. The command will compute the $\\beta$ images and\
            return a weighted sum of them, where the weights are specified in\
            the contrast vector. The design matrix and the contrast vector are\
            passed in as files. The file format is just a space-separated list\
            of numbers. For a good explanation of the general linear model, see\
            [S. Kiebel and A. Holmes, General Linear Model, in Ashburner,\
            Friston, Holmes eds., *Human Brain Function, 2nd Edition*][6]. The\
            example below computes the regression coefficient between a set of\
            longitudinal images and subject's age:\
            \
            echo "1 67.00" > design_mat.txt\
            echo "1 75.00" >> design_mat.txt\
            echo "1 80.00" >> design_mat.txt\
            echo "1 83.00" >> design_mat.txt\
            echo "0 1" >> contrast_vec.txt\
            c3d time1.img time2.img time3.img time4.img -glm design_mat.txt\
            contrast_vec.txt -o regress.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "glm",
        "glm": glm,
    }
    return params


def c2d_glm_cargs(
    params: C2dGlmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-glm",
        params.get("glm", None)
    ])
    return cargs


def c2d_gradient_params(
    gradient: str,
) -> C2dGradientParametersTagged:
    """
    Build parameters.
    
    Args:
        gradient: -grad, -gradient: Image gradient\
            \
            Syntax `-grad`\
            \
            Computes the gradient of the image. Each component of the gradient\
            is placed on the stack in order (x,y,z). The gradient is computed\
            in physical RAS coordinates, taking into account image spacing and\
            orientation. In other words, the gradient is the vector in physical\
            space orthogonal to the isocontours of the image. No smoothing is\
            performed, so it is a good idea to smooth the image first before\
            computing the gradient.\
            \
            c3d myimage.nii -smooth 1.2vox -grad -oo grad_comp_%02d.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "gradient",
        "gradient": gradient,
    }
    return params


def c2d_gradient_cargs(
    params: C2dGradientParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-grad",
        params.get("gradient", None)
    ])
    return cargs


def c2d__help_params(
    v__help: str,
) -> C2dHelpParametersTagged:
    """
    Build parameters.
    
    Args:
        v__help: -hesseig, -hessian-eigenvalues: Compute eigenvalues of the\
            Hessian matrix\
            \
            Syntax `-hesseig <scale>`\
            \
            Computes the Hessian matrix at every pixel of an image and the\
            eigenvalues of the Hessian. Images of the eigenvalues (sorted by\
            value) are placed on the stack. These images are useful as texture\
            features. See also the '''-steig''' command. The scale determines\
            the amount of Gaussian smoothing applied for computing the partial\
            derivatives in the Hessian, and is in physical (mm) units.\
            \
            c3d myimage.nii -hesseig 2.0 -oo eig%02d.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "_help",
        "_help": v__help,
    }
    return params


def c2d__help_cargs(
    params: C2dHelpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-h",
        params.get("_help", None)
    ])
    return cargs


def c2d_holefill_params(
    holefill: str,
) -> C2dHolefillParametersTagged:
    """
    Build parameters.
    
    Args:
        holefill: -holefill: Fill holes in binary image\
            \
            Syntax: `-holefill intensity_value [0|1] `\
            \
            Apply the binary hole filling algorithm to a particular intensity\
            value in the image. The input image is typically a binary image or\
            a multi-label segmentation image. Holes (voxels not matching the\
            specified intensity value that are completely contained by voxels\
            matching this value) are filled. The second parameter specifies\
            what type of topological connectivity is used to determine holes.\
            The value 0 uses the default algorithm in ITK (face connectivity)\
            and 1 uses the full connectivity variant (face, edge and vertex\
            connectivity). For more details see the [ITK page for this\
            algorithm][7].\
            \
            c3d segmentation.nii.gz -holefill 5 0 -type uchar -o\
            filledlabel5.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "holefill",
        "holefill": holefill,
    }
    return params


def c2d_holefill_cargs(
    params: C2dHolefillParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-hf",
        params.get("holefill", None)
    ])
    return cargs


def c2d_hessian_eigenvalues_params(
    hessian_eigenvalues: str,
) -> C2dHessianEigenvaluesParametersTagged:
    """
    Build parameters.
    
    Args:
        hessian_eigenvalues: -hesseig, -hessian-eigenvalues: Compute\
            eigenvalues of the Hessian matrix\
            \
            Syntax `-hesseig <scale>`\
            \
            Computes the Hessian matrix at every pixel of an image and the\
            eigenvalues of the Hessian. Images of the eigenvalues (sorted by\
            value) are placed on the stack. These images are useful as texture\
            features. See also the '''-steig''' command. The scale determines\
            the amount of Gaussian smoothing applied for computing the partial\
            derivatives in the Hessian, and is in physical (mm) units.\
            \
            c3d myimage.nii -hesseig 2.0 -oo eig%02d.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "hessian_eigenvalues",
        "hessian_eigenvalues": hessian_eigenvalues,
    }
    return params


def c2d_hessian_eigenvalues_cargs(
    params: C2dHessianEigenvaluesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-hesseig",
        params.get("hessian_eigenvalues", None)
    ])
    return cargs


def c2d_hessian_objectness_params(
    hessian_objectness: str,
) -> C2dHessianObjectnessParametersTagged:
    """
    Build parameters.
    
    Args:
        hessian_objectness: -hessobj, -hessian-objectness: Hessian objectness\
            filter\
            \
            Syntax: `-hessobj <dimension> <min_scale> <max_scale>`\
            \
            Also known as the Frangi vesselness filter, this filter can be used\
            to highlight tube-like, sheet-like and blob-like objects in the\
            image. For details, see documentation to the [corresponging ITK\
            class][HTOMIF].\
            \
            Parameter `dimension` is an integer that determines the kind of\
            features that are highlighed. Use 0 for blobs, 1 for tubes, 2 for\
            pancakes, etc. The min and max scale parameters are floating point\
            values, giving the scale of the features highlighted, in physical\
            units. Typically, just one scale is used.\
            \
            # Detect vessel-like structures at scale 0.5mm\
            c3d image.nii.gz -hessobj 1 0.5 0.5\
            \
            [HTOMIF]\
            http://www.itk.org/Doxygen/html/classitk_1_1HessianToObjectnessMeasureImageFilter.html.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "hessian_objectness",
        "hessian_objectness": hessian_objectness,
    }
    return params


def c2d_hessian_objectness_cargs(
    params: C2dHessianObjectnessParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-hessobj",
        params.get("hessian_objectness", None)
    ])
    return cargs


def c2d_histogram_match_params(
    histogram_match: str,
) -> C2dHistogramMatchParametersTagged:
    """
    Build parameters.
    
    Args:
        histogram_match: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "histogram_match",
        "histogram_match": histogram_match,
    }
    return params


def c2d_histogram_match_cargs(
    params: C2dHistogramMatchParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-histmatch",
        params.get("histogram_match", None)
    ])
    return cargs


def c2d_info_params(
    info: str,
) -> C2dInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        info: -info: Display brief image information\
            \
            Syntax: `-info`\
            \
            Prints brief information about the last image on the stack. Does\
            not affect the stack.\
            \
            c3d image.hdr -info\
            \
            Use with the **-foreach** command to get information on multiple\
            images\
            \
            c3d images*.nii -foreach -info -endfor.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "info",
        "info": info,
    }
    return params


def c2d_info_cargs(
    params: C2dInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-info",
        params.get("info", None)
    ])
    return cargs


def c2d_info_full_params(
    info_full: str,
) -> C2dInfoFullParametersTagged:
    """
    Build parameters.
    
    Args:
        info_full: -info-full: Display verbose image information\
            \
            Syntax: `-info-full`\
            \
            Prints extended information about the last image on the stack, such\
            as the metadata dictionary. For example,\
            \
            c3d image.hdr -info-full.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "info_full",
        "info_full": info_full,
    }
    return params


def c2d_info_full_cargs(
    params: C2dInfoFullParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-info-full",
        params.get("info_full", None)
    ])
    return cargs


def c2d_insert_params(
    insert: str,
) -> C2dInsertParametersTagged:
    """
    Build parameters.
    
    Args:
        insert: -insert: Insert image anywhere in the stack\
            \
            Syntax: `-insert var pos`\
            \
            This command is similar to **-push**, but allows you to insert the\
            image associated with 'var' at any position in the stack, counting\
            from the end. When 'pos' is 0, the image is placed at the end of\
            the stack (same as **-push**). When pos is one, the image is placed\
            at the next-to-end position, and so on.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "insert",
        "insert": insert,
    }
    return params


def c2d_insert_cargs(
    params: C2dInsertParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-insert",
        params.get("insert", None)
    ])
    return cargs


def c2d_interpolation_params(
    interpolation: str,
) -> C2dInterpolationParametersTagged:
    """
    Build parameters.
    
    Args:
        interpolation: -interpolation: Set interpolation mode\
            \
            Syntax: `-interpolation\
            <NearestNeighbor|Linear|Cubic|Sinc|Gaussian> [param]`\
            \
            Specifies the interpolation used with **-resample** and other\
            commands. Default is **Linear**. Gaussian interpolation takes as\
            the parameter the standard deviation of the Gaussian filter (e.g,\
            1mm). Gaussian interpolation is very similar in result to first\
            smoothing an image with a Gaussian filter and then reslicing it\
            with linear interpolation, but is more accurate and has less\
            aliasing artifacts. It is also slower, and should only be used with\
            small sigmas (a few voxels across).\
            \
            Shorthand 0 can be used for *NearestNeighbor*, 1 for *Linear* and 3\
            for *Cubic*. For example:\
            \
            c3d -int 3 test.nii -resample 200x200x200% -o cubic_supersample.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "interpolation",
        "interpolation": interpolation,
    }
    return params


def c2d_interpolation_cargs(
    params: C2dInterpolationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-interpolation",
        params.get("interpolation", None)
    ])
    return cargs


def c2d_iterations_params(
    iterations: str,
) -> C2dIterationsParametersTagged:
    """
    Build parameters.
    
    Args:
        iterations: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "iterations",
        "iterations": iterations,
    }
    return params


def c2d_iterations_cargs(
    params: C2dIterationsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-iterations",
        params.get("iterations", None)
    ])
    return cargs


def c2d_label_overlap_params(
    label_overlap: str,
) -> C2dLabelOverlapParametersTagged:
    """
    Build parameters.
    
    Args:
        label_overlap: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "label_overlap",
        "label_overlap": label_overlap,
    }
    return params


def c2d_label_overlap_cargs(
    params: C2dLabelOverlapParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-label-overlap",
        params.get("label_overlap", None)
    ])
    return cargs


def c2d_label_statistics_params(
    label_statistics: str,
) -> C2dLabelStatisticsParametersTagged:
    """
    Build parameters.
    
    Args:
        label_statistics: -lstat, -label-statistics: Display segmentation\
            volumes and intensity statistics\
            \
            Syntax: `-lstat`\
            \
            Given a grayscale image and a multilabel (or binary) image, this\
            command computes the statistics for every label in the latter,\
            including volumes, average grayscale intensity, etc. For instance,\
            if image *mri.nii* is a medical image and *seg.nii* is a multilabel\
            segmentation of the image with labels 0, 1 and 4, the following\
            command can be used to print the statistics of the intensity of\
            *mri.nii* for each of the labels\
            \
            c3d mri.nii seg.nii -lstat\
            \
            The output contains the mean, standard deviation, maximum intensity\
            and minimum intensity for each label. If you just need volumes from\
            a multi-label image, use **-dup** command as follows:\
            \
            c3d seg.nii -dup -lstat.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "label_statistics",
        "label_statistics": label_statistics,
    }
    return params


def c2d_label_statistics_cargs(
    params: C2dLabelStatisticsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-label-statistics",
        params.get("label_statistics", None)
    ])
    return cargs


def c2d_landmarks_to_spheres_params(
    landmarks_to_spheres: str,
) -> C2dLandmarksToSpheresParametersTagged:
    """
    Build parameters.
    
    Args:
        landmarks_to_spheres: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "landmarks_to_spheres",
        "landmarks_to_spheres": landmarks_to_spheres,
    }
    return params


def c2d_landmarks_to_spheres_cargs(
    params: C2dLandmarksToSpheresParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-landmarks-to-spheres",
        params.get("landmarks_to_spheres", None)
    ])
    return cargs


def c2d_laplacian_params(
    laplacian: str,
) -> C2dLaplacianParametersTagged:
    """
    Build parameters.
    
    Args:
        laplacian: -laplacian, -laplace: Laplacian filter\
            \
            Syntax: `-laplacian`\
            \
            Applies the Laplacian filter to the image. Used to detect ridges of\
            intensity. Typically, used with the **-smooth** option to obtain\
            the equivalent of convolving the image with the *Laplacian of the\
            Gaussian (LoG)* kernel:\
            \
            c3d input.img -smooth 1.2vox -laplacian -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "laplacian",
        "laplacian": laplacian,
    }
    return params


def c2d_laplacian_cargs(
    params: C2dLaplacianParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-laplacian",
        params.get("laplacian", None)
    ])
    return cargs


def c2d_levelset_params(
    levelset: str,
) -> C2dLevelsetParametersTagged:
    """
    Build parameters.
    
    Args:
        levelset: -levelset: Level set segmentation\
            \
            Syntax: `-levelset n_iter `\
            \
            Perform level set segmentation for *n\\_iter* iterations, like in\
            ITK-SNAP. The last image on the stack is treated as the\
            initialization image and the next-to-last image on the stack is the\
            speed image. Both images should be in the range between -1 and 1.\
            Here is how the signs of the different images are interpreted\
            \
            | | Speed Image | Initialization Image | Output Image |\
            | -- | ------------- | -------------------- | ------------ |\
            | +1 | Foreground | Outside | Outside |\
            | -1 | Background | Inside | Inside |\
            \
            Here is an example where you have the speed and the initialization\
            given:\
            \
            c3d speed.img initial.img -levelset-curvature 0.5 -levelset 100 -o\
            seg.img\
            \
            Here is an example of segmenting the ventricles in an MRI image,\
            where the ventricles and other CSF have intensity below 715. The\
            image seg_bubbles.nii.gz in this example is a binary image of the\
            initialization seeds (1 inside the seeds, 0 outside).\
            \
            c3d brain.nii.gz -erf 715 100 -scale -1 seg_bubbles.nii.gz \\\
            -replace 0 1 1 -1 -levelset-curvature 0.2 -levelset 500 \\\
            -thresh -inf 0 1 0 -o segmentation.nii.gz\
            \
            Another example of smoothing a binary image that is useful for\
            cleaning up manual segmentations. Here the speed image is positive\
            inside the binary object, and the initialization is negative inside\
            the object. The command writes out both the level set image (whose\
            0-level set is the smoothed boundary of the binary object) and the\
            smoothed binary object\
            \
            c3d binary.img -threshold 1 inf 1 -1 -binary.img 1 inf 1 -1 \\\
            -levelset-curvature 1.5 -levelset 100 -o levelset.img \\\
            -thresh -inf 0 1 0 -o smoothed_binary.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "levelset",
        "levelset": levelset,
    }
    return params


def c2d_levelset_cargs(
    params: C2dLevelsetParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-levelset",
        params.get("levelset", None)
    ])
    return cargs


def c2d_levelset_curvature_params(
    levelset_curvature: str,
) -> C2dLevelsetCurvatureParametersTagged:
    """
    Build parameters.
    
    Args:
        levelset_curvature: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "levelset_curvature",
        "levelset_curvature": levelset_curvature,
    }
    return params


def c2d_levelset_curvature_cargs(
    params: C2dLevelsetCurvatureParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-levelset-curvature",
        params.get("levelset_curvature", None)
    ])
    return cargs


def c2d_levelset_advection_params(
    levelset_advection: str,
) -> C2dLevelsetAdvectionParametersTagged:
    """
    Build parameters.
    
    Args:
        levelset_advection: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "levelset_advection",
        "levelset_advection": levelset_advection,
    }
    return params


def c2d_levelset_advection_cargs(
    params: C2dLevelsetAdvectionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-levelset-advection",
        params.get("levelset_advection", None)
    ])
    return cargs


def c2d_log_params(
    log: str,
) -> C2dLogParametersTagged:
    """
    Build parameters.
    
    Args:
        log: -log, -ln: Voxelwise natural logarithm\
            \
            Syntax: `-log`\
            \
            Computes natural logarithm of each voxel in the last image on the\
            stack.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "log",
        "log": log,
    }
    return params


def c2d_log_cargs(
    params: C2dLogParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-ln",
        params.get("log", None)
    ])
    return cargs


def c2d_log10_params(
    log10: str,
) -> C2dLog10ParametersTagged:
    """
    Build parameters.
    
    Args:
        log10: -log10: Voxelwise base 10 logarithm\
            \
            Syntax: `-log10`\
            \
            Computes base 10 logarithm of each voxel in the last image on the\
            stack.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "log10",
        "log10": log10,
    }
    return params


def c2d_log10_cargs(
    params: C2dLog10Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-log10",
        params.get("log10", None)
    ])
    return cargs


def c2d_manual_params(
    manual: str,
) -> C2dManualParametersTagged:
    """
    Build parameters.
    
    Args:
        manual: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "manual",
        "manual": manual,
    }
    return params


def c2d_manual_cargs(
    params: C2dManualParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-manual",
        params.get("manual", None)
    ])
    return cargs


def c2d_match_bounding_box_params(
    match_bounding_box: str,
) -> C2dMatchBoundingBoxParametersTagged:
    """
    Build parameters.
    
    Args:
        match_bounding_box: -mbb, -match-bounding-box: Match bounding box of\
            one image to another\
            \
            Syntax: `-mbb`\
            \
            Given two images on the stack (reference and target), sets the\
            header of the target image so that the two images occupy the same\
            physical space. The direction cosines of the target image are set\
            to match the reference image. This command is related to\
            '-copy-transform' but supports images of different size.\
            \
            c3d reference.nii target.nii -mbb -o out.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "match_bounding_box",
        "match_bounding_box": match_bounding_box,
    }
    return params


def c2d_match_bounding_box_cargs(
    params: C2dMatchBoundingBoxParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-match-bounding-box",
        params.get("match_bounding_box", None)
    ])
    return cargs


def c2d_maximum_params(
    maximum: str,
) -> C2dMaximumParametersTagged:
    """
    Build parameters.
    
    Args:
        maximum: -max: Voxel-wise maximum of two images\
            \
            Syntax: `-max`\
            \
            Computes the voxel-wise maximum of two images. Can be used with the\
            **-accum** command to compute maximum of all images.\
            \
            c3d i1.nii i2.nii -max -o max12.nii\
            c3d i1.nii i2.nii i3.nii i4.nii -accum -max -endaccum -o\
            max1234.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "maximum",
        "maximum": maximum,
    }
    return params


def c2d_maximum_cargs(
    params: C2dMaximumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-maximum",
        params.get("maximum", None)
    ])
    return cargs


def c2d_multicomponent_split_params(
    multicomponent_split: str,
) -> C2dMulticomponentSplitParametersTagged:
    """
    Build parameters.
    
    Args:
        multicomponent_split: -mcs, -multicomponent-split: Enable splitting of\
            multi-component images on read\
            \
            Syntax: `-mcs`\
            \
            Enable reading of multi-component images. By default, when a\
            multi-component image is encountered, the components are combined\
            into a single image. Setting the **-mcs** flag changes this\
            behavior, and each of the components is loaded sequentially. See\
            the section below on multi-component image support.\
            \
            $ c3d -mcs rgb.mha -foreach -probe 110x110x80mm -endfor\
            Interpolated image value at 110 110 80 is 1\
            Interpolated image value at 110 110 80 is 66\
            Interpolated image value at 110 110 80 is 29\
            \
            $ c3d rgb.mha -foreach -probe 110x110x80mm -endfor\
            Interpolated image value at 110 110 80 is 49.5198.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "multicomponent_split",
        "multicomponent_split": multicomponent_split,
    }
    return params


def c2d_multicomponent_split_cargs(
    params: C2dMulticomponentSplitParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mcs",
        params.get("multicomponent_split", None)
    ])
    return cargs


def c2d_mean_params(
    mean: str,
) -> C2dMeanParametersTagged:
    """
    Build parameters.
    
    Args:
        mean: -mean: Mean of all images on the stack\
            \
            Syntax: `-mean `\
            \
            Computes the mean of all the images on the stack. All images on the\
            stack are replaced with the mean image.\
            \
            c3d image_*.nii -mean -o mean.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mean",
        "mean": mean,
    }
    return params


def c2d_mean_cargs(
    params: C2dMeanParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mean",
        params.get("mean", None)
    ])
    return cargs


def c2d_median_filter_params(
    median_filter: str,
) -> C2dMedianFilterParametersTagged:
    """
    Build parameters.
    
    Args:
        median_filter: -median, -median-filter: Median filter\
            \
            Syntax: `-median <radius_vector>`\
            \
            Applies the median filter: the intensity of each voxel is replaced\
            by the median of the intensities in the neighborhood of size\
            specified by the radius parameter. For example, the following code\
            will apply the median filter with the 5x5x5 neighborhood.\
            \
            c3d in.nii -median 2x2x2 -o median.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "median_filter",
        "median_filter": median_filter,
    }
    return params


def c2d_median_filter_cargs(
    params: C2dMedianFilterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-median",
        params.get("median_filter", None)
    ])
    return cargs


def c2d_merge_params(
    merge: str,
) -> C2dMergeParametersTagged:
    """
    Build parameters.
    
    Args:
        merge: -merge: Merge images from previous split command\
            \
            Syntax: `-merge`\
            \
            Works in conjunction with the **-split** command. Has similar\
            behavior to **-vote**, except that label values are carried from\
            the input to the **-split** command.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "merge",
        "merge": merge,
    }
    return params


def c2d_merge_cargs(
    params: C2dMergeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-merge",
        params.get("merge", None)
    ])
    return cargs


def c2d_mean_filter_params(
    mean_filter: str,
) -> C2dMeanFilterParametersTagged:
    """
    Build parameters.
    
    Args:
        mean_filter: -mf, -mean-filter: Mean filter\
            \
            Syntax: `-mf <radius_vector>`\
            \
            Applies the mean filter: the intensity of each voxel is replaced by\
            the mean of the intensities in the neighborhood of size specified\
            by the radius parameter. For example, the following code will apply\
            the mean filter with the 5x5x5 neighborhood.\
            \
            c3d in.nii -mf 2x2x2 -o filtered.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mean_filter",
        "mean_filter": mean_filter,
    }
    return params


def c2d_mean_filter_cargs(
    params: C2dMeanFilterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mf",
        params.get("mean_filter", None)
    ])
    return cargs


def c2d_mutual_info_params(
    mutual_info: str,
) -> C2dMutualInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        mutual_info: -min: Voxel-wise minimum of two images\
            \
            Syntax: `-min`\
            \
            Computes the voxel-wise minimum of two images. Can be used with the\
            **-accum** command to compute minimum of all images.\
            \
            c3d i1.nii i2.nii -min -o min12.nii\
            c3d i1.nii i2.nii i3.nii i4.nii -accum -min -endaccum -o\
            min1234.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mutual_info",
        "mutual_info": mutual_info,
    }
    return params


def c2d_mutual_info_cargs(
    params: C2dMutualInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mi",
        params.get("mutual_info", None)
    ])
    return cargs


def c2d_minimum_params(
    minimum: str,
) -> C2dMinimumParametersTagged:
    """
    Build parameters.
    
    Args:
        minimum: -min: Voxel-wise minimum of two images\
            \
            Syntax: `-min`\
            \
            Computes the voxel-wise minimum of two images. Can be used with the\
            **-accum** command to compute minimum of all images.\
            \
            c3d i1.nii i2.nii -min -o min12.nii\
            c3d i1.nii i2.nii i3.nii i4.nii -accum -min -endaccum -o\
            min1234.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "minimum",
        "minimum": minimum,
    }
    return params


def c2d_minimum_cargs(
    params: C2dMinimumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-minimum",
        params.get("minimum", None)
    ])
    return cargs


def c2d_mixture_model_params(
    mixture_model: str,
) -> C2dMixtureModelParametersTagged:
    """
    Build parameters.
    
    Args:
        mixture_model: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mixture_model",
        "mixture_model": mixture_model,
    }
    return params


def c2d_mixture_model_cargs(
    params: C2dMixtureModelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mixture",
        params.get("mixture_model", None)
    ])
    return cargs


def c2d_moments_params(
    moments: str,
) -> C2dMomentsParametersTagged:
    """
    Build parameters.
    
    Args:
        moments: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "moments",
        "moments": moments,
    }
    return params


def c2d_moments_cargs(
    params: C2dMomentsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-moments",
        params.get("moments", None)
    ])
    return cargs


def c2d_mattes_mutual_info_params(
    mattes_mutual_info: str,
) -> C2dMattesMutualInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        mattes_mutual_info: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mattes_mutual_info",
        "mattes_mutual_info": mattes_mutual_info,
    }
    return params


def c2d_mattes_mutual_info_cargs(
    params: C2dMattesMutualInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-mmi",
        params.get("mattes_mutual_info", None)
    ])
    return cargs


def c2d_mean_square_params(
    mean_square: str,
) -> C2dMeanSquareParametersTagged:
    """
    Build parameters.
    
    Args:
        mean_square: -msq, -mean-square: Compute mean square difference metric\
            \
            Syntax: `-msq [movtransform.mat] [reftransform.mat]`\
            \
            Compute the mean square difference metric between the last two\
            images on the stack. If an optional *movtransform.mat* file is\
            provided, the metric is computed by applying the transform to the\
            moving image. If, in addition to *movtransform.mat*, the optional\
            *reftransform.mat* file is also provided -- the moving transform is\
            applied to the moving image, the ref transform is applied to the\
            reference image, and the metric is computed in an image space that\
            is physically halfway between the reference and moving images. This\
            may be useful for unbiased metric computation if the two transforms\
            are inverse of each other as both images undergo similar amount of\
            interpolation. The definitions of reference and moving images and\
            the transform file format are similar to the **-reslice-matrix**\
            command.\
            \
            # Compute metric between ref.nii and mov.nii\
            c3d ref.nii mov.nii -msq\
            \
            # Compute metric between ref.nii and mov.nii after applying\
            transform to mov.nii\
            c3d ref.nii mov.nii -msq tmov.mat\
            \
            # Compute metric between ref.nii and mov.nii in a neutral space\
            after applying transforms to both\
            c3d ref.nii mov.nii -msq tmov.mat tref.mat.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mean_square",
        "mean_square": mean_square,
    }
    return params


def c2d_mean_square_cargs(
    params: C2dMeanSquareParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-msq",
        params.get("mean_square", None)
    ])
    return cargs


def c2d_multiply_params(
    multiply: str,
) -> C2dMultiplyParametersTagged:
    """
    Build parameters.
    
    Args:
        multiply: -multiply, -times: Multiply two images\
            \
            Syntax: `-multiply`\
            \
            Multiply two images voxel-by-voxel. The operation is applied to the\
            last two images on the stack.\
            \
            # Compute x = a * b\
            c3d a.img b.img -multiply -o x.img\
            \
            # Compute x = a * (b + c) using add and -multiply\
            c3d a.img b.img c.img -multiply -add -o x.img\
            \
            Combine with the **-dup** command to compute voxelwise square of\
            the image\
            \
            # Compute x = a^2\
            c3d a.img -dup -multiply -o x.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "multiply",
        "multiply": multiply,
    }
    return params


def c2d_multiply_cargs(
    params: C2dMultiplyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-multiply",
        params.get("multiply", None)
    ])
    return cargs


def c2d_normalized_cross_correlation_params(
    normalized_cross_correlation: str,
) -> C2dNormalizedCrossCorrelationParametersTagged:
    """
    Build parameters.
    
    Args:
        normalized_cross_correlation: -ncc, -normalized-cross-correlation:\
            Compute normalized cross-correlation image\
            \
            Syntax: `-ncc <radius_vector>`\
            \
            Computes normalized cross-correlation between two images that\
            occupy the same physical space. Each voxel in the resulting image\
            is the cross-correlation of patches of given radius surrounding the\
            voxel in the two input images. This is different from **-ncor**,\
            which computes a global cross-correlation metric value.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "normalized_cross_correlation",
        "normalized_cross_correlation": normalized_cross_correlation,
    }
    return params


def c2d_normalized_cross_correlation_cargs(
    params: C2dNormalizedCrossCorrelationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-ncc",
        params.get("normalized_cross_correlation", None)
    ])
    return cargs


def c2d_normalized_correlation_params(
    normalized_correlation: str,
) -> C2dNormalizedCorrelationParametersTagged:
    """
    Build parameters.
    
    Args:
        normalized_correlation: -ncor, -normalized-correlation: Compute\
            normalized correlation metric\
            \
            Syntax: `-ncor [movtransform.mat] [reftransform.mat]`\
            \
            : Compute the normalized correlation metric between the last two\
            images on the stack. See documentation for **-msq***.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "normalized_correlation",
        "normalized_correlation": normalized_correlation,
    }
    return params


def c2d_normalized_correlation_cargs(
    params: C2dNormalizedCorrelationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-ncor",
        params.get("normalized_correlation", None)
    ])
    return cargs


def c2d_normalized_mutual_info_params(
    normalized_mutual_info: str,
) -> C2dNormalizedMutualInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        normalized_mutual_info: -mmi, -mattes-mutual-info: Compute mutual\
            informaiton metric\
            \
            Syntax: `-nmi [movtransform.mat] [reftransform.mat]`\
            \
            Compute the Mattes mutual information metric between the last two\
            images on the stack. See documentation for **-msq**.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "normalized_mutual_info",
        "normalized_mutual_info": normalized_mutual_info,
    }
    return params


def c2d_normalized_mutual_info_cargs(
    params: C2dNormalizedMutualInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-nmi",
        params.get("normalized_mutual_info", None)
    ])
    return cargs


def c2d_noise_gaussian_params(
    noise_gaussian: str,
) -> C2dNoiseGaussianParametersTagged:
    """
    Build parameters.
    
    Args:
        noise_gaussian: -noise-gaussian, -noise: Apply additive Gaussian noise\
            \
            Syntax: `-noise-gaussian <sigma>`\
            \
            Adds Gaussian noise to an image with zero mean and standard\
            deviation sigma. Please see [Noise simulation article][15] by G.\
            Lehmann for details.\
            \
            c3d image.nii -noise-gaussian 5 -o noisy.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noise_gaussian",
        "noise_gaussian": noise_gaussian,
    }
    return params


def c2d_noise_gaussian_cargs(
    params: C2dNoiseGaussianParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noise-gaussian",
        params.get("noise_gaussian", None)
    ])
    return cargs


def c2d_noise_poisson_params(
    noise_poisson: str,
) -> C2dNoisePoissonParametersTagged:
    """
    Build parameters.
    
    Args:
        noise_poisson: -noise-poisson: Apply Poisson noise\
            Syntax: `-noise-poisson <scale>`\
            \
            Applies Poisson (shot) noise to an image with given scale. Please\
            see [Noise simulation article][15] by G. Lehmann for details.\
            \
            c3d image.nii -noise-poisson 5 -o noisy.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noise_poisson",
        "noise_poisson": noise_poisson,
    }
    return params


def c2d_noise_poisson_cargs(
    params: C2dNoisePoissonParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noise-poisson",
        params.get("noise_poisson", None)
    ])
    return cargs


def c2d_noise_speckle_params(
    noise_speckle: str,
) -> C2dNoiseSpeckleParametersTagged:
    """
    Build parameters.
    
    Args:
        noise_speckle: -noise-speckle: Apply Poisson noise\
            Syntax: `-noise-speckle <sigma>`\
            \
            Applies Speckle noise to an image with given standard deviation.\
            Please see [Noise simulation article][15] by G. Lehmann for\
            details.\
            \
            c3d image.nii -noise-speckle 5 -o noisy.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noise_speckle",
        "noise_speckle": noise_speckle,
    }
    return params


def c2d_noise_speckle_cargs(
    params: C2dNoiseSpeckleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noise-speckle",
        params.get("noise_speckle", None)
    ])
    return cargs


def c2d_noise_salt_pepper_params(
    noise_salt_pepper: str,
) -> C2dNoiseSaltPepperParametersTagged:
    """
    Build parameters.
    
    Args:
        noise_salt_pepper: -noise-salt-pepper: Apply salt and pepper noise\
            Syntax: `-noise-salt-pepper <probability>`\
            \
            Applies salt and pepper noise to an image with given probability.\
            Please see [Noise simulation article][15] by G. Lehmann for\
            details.\
            \
            c3d image.nii -noise-salt-pepper 0.1 -o noisy.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noise_salt_pepper",
        "noise_salt_pepper": noise_salt_pepper,
    }
    return params


def c2d_noise_salt_pepper_cargs(
    params: C2dNoiseSaltPepperParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noise-salt-pepper",
        params.get("noise_salt_pepper", None)
    ])
    return cargs


def c2d_no_multicomponent_split_params(
    no_multicomponent_split: str,
) -> C2dNoMulticomponentSplitParametersTagged:
    """
    Build parameters.
    
    Args:
        no_multicomponent_split: -nomcs, -no-multicomponent-split: Disable\
            splitting of multi-component images on read\
            \
            Syntax: `-nomcs`\
            \
            Used to reverse the effect of previous **-mcs** command.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "no_multicomponent_split",
        "no_multicomponent_split": no_multicomponent_split,
    }
    return params


def c2d_no_multicomponent_split_cargs(
    params: C2dNoMulticomponentSplitParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-nomcs",
        params.get("no_multicomponent_split", None)
    ])
    return cargs


def c2d_normalize_local_window_params(
    normalize_local_window: str,
) -> C2dNormalizeLocalWindowParametersTagged:
    """
    Build parameters.
    
    Args:
        normalize_local_window: -nlw, -normalize-local-window: Standardize\
            image intensity using local neighborhood\
            \
            Syntax: `-nlw <radius>`\
            \
            This command takes as inputs an image and a mask image. At each\
            voxel, the mean of the local neighborhood is subtracted, and the\
            result is divided by the standard deviation of the neighborhood.\
            The mean and standard deviation are computed only over the masked\
            region. You might also want to multiply by the mask.\
            \
            c3d gray.nii.gz mask.nii.gz -nlw 10x10x10 -o residual.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "normalize_local_window",
        "normalize_local_window": normalize_local_window,
    }
    return params


def c2d_normalize_local_window_cargs(
    params: C2dNormalizeLocalWindowParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-nlw",
        params.get("normalize_local_window", None)
    ])
    return cargs


def c2d_normpdf_params(
    normpdf: str,
) -> C2dNormpdfParametersTagged:
    """
    Build parameters.
    
    Args:
        normpdf: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "normpdf",
        "normpdf": normpdf,
    }
    return params


def c2d_normpdf_cargs(
    params: C2dNormpdfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-normpdf",
        params.get("normpdf", None)
    ])
    return cargs


def c2d_noround_params(
    noround: str,
) -> C2dNoroundParametersTagged:
    """
    Build parameters.
    
    Args:
        noround: -noround, -round: Floating point rounding behavior\
            \
            Syntax: `-noround` or `-round `\
            \
            By default, **convert3d** will round floating point values when\
            converting to an integer, short or byte image. This command\
            specifies that rounding should not be used. Rounding is used to\
            avoid numerical errors stemming from the internal floating point\
            representation.\
            \
            c3d image1.img -type short -noround image2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noround",
        "noround": noround,
    }
    return params


def c2d_noround_cargs(
    params: C2dNoroundParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noround",
        params.get("noround", None)
    ])
    return cargs


def c2d_nospm_params(
    nospm: str,
) -> C2dNospmParametersTagged:
    """
    Build parameters.
    
    Args:
        nospm: -spm, -nospm: SPM compatibility in Analyze output\
            \
            Syntax: `-spm` or `-nospm `\
            \
            These options specify whether use the SPM extension to the Analyze\
            (.hdr,.img) format. When this option is on, the origin field stored\
            by SPM in the Analyze header will be correctly interpreted. When\
            saving analyze files, the origin will be set correctly. The default\
            is equivalent to the **-nospm** option. Best to avoid this issue\
            altogether by using NIFTI and SPM5 or later.\
            \
            c3d -spm in.hdr out.img.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "nospm",
        "nospm": nospm,
    }
    return params


def c2d_nospm_cargs(
    params: C2dNospmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-nospm",
        params.get("nospm", None)
    ])
    return cargs


class C2dOutputOutputs(typing.NamedTuple):
    """
    Output object returned when calling `C2dOutputParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The output"""


def c2d_output_params(
    output: str,
) -> C2dOutputParametersTagged:
    """
    Build parameters.
    
    Args:
        output: -o: Output (write) last image on the stack to image file\
            \
            Syntax: `-o filename`\
            \
            Write image, overriding an existing image. Without the **-o**\
            option, **convert3d** will write an image only if it does not\
            exist. The **-o** options protects input images from being\
            accidentally deleted. Here we copy an image, changing format:\
            \
            c3d image1.mha -o image2.nii\
            \
            The **-o** option can also be used to save an intermediate image in\
            the stack:\
            \
            c3d image1.img -threshold 1 10 1 0 -o thresh.img -resample 50% -o\
            final.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "output",
        "output": output,
    }
    return params


def c2d_output_cargs(
    params: C2dOutputParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-o",
        params.get("output", None)
    ])
    return cargs


def c2d_output_outputs(
    params: C2dOutputParameters,
    execution: Execution,
) -> C2dOutputOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = C2dOutputOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


def c2d_output_multicomponent_params(
    output_multicomponent: str,
) -> C2dOutputMulticomponentParametersTagged:
    """
    Build parameters.
    
    Args:
        output_multicomponent: -omc, -output-multicomponent: Output multiple\
            images to single file\
            \
            Syntax: `-omc [number] filename`\
            \
            Write multiple images on the **Convert3d** stack as a single\
            multi-component image file. If the optional number *n* is\
            specified, only the last *n* images on the stack will be used. Not\
            all file formats support multi-component output. NIFTI is the\
            safest bet.\
            \
            c3d red.nii green.nii blue.nii -omc rgb.mha\
            \
            For 2D images, this command can be used to generate color PNG\
            files:\
            \
            c3d image.nii -slice z 50% -colormap jet -type uchar -omc\
            colorslice.png.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "output_multicomponent",
        "output_multicomponent": output_multicomponent,
    }
    return params


def c2d_output_multicomponent_cargs(
    params: C2dOutputMulticomponentParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-omc",
        params.get("output_multicomponent", None)
    ])
    return cargs


def c2d_output_multiple_multicomponent_params(
    output_multiple_multicomponent: str,
) -> C2dOutputMultipleMulticomponentParametersTagged:
    """
    Build parameters.
    
    Args:
        output_multiple_multicomponent: -oomc: Output multiple multi-component\
            images to multiple files\
            \
            Syntax: `-oomc n_comp image_list` or `-oomc n_comp image_spec`\
            \
            Write all images on the **convert3d** stack as multiple\
            multi-component image files. The command is a mixture of the\
            **-omc** and **-oo** commands. There must be a multiple of 'n_comp'\
            images on the stack. Every consecutive 'n_comp' images on the stack\
            will be written to a separate multi-component image.\
            \
            ### Commands: Stack Manipulation and Flow Control\
            \
            These commands are used to manipulate the **convert3d** stack. The\
            stack is a linear array of images. Every time an image is specified\
            on the command line, it is loaded and placed at the end of the\
            stack. Most operations take one image from the end of the stack,\
            apply some operation to it, and place the result on the end of the\
            stack. Certain commands like **-levelset** and **-reslice-matrix**\
            take two images from the end of the stack as the input and replace\
            them with a single output. Some other commands, like **-mean** and\
            **-vote** take all images on the stack and replace them with a\
            single output.\
            \
            Sometimes, for complex operations, it is useful to change the order\
            of the images on the stack, to duplicate images, or to execute the\
            same command multiple times. The stack manipulation and flow\
            control commands allow you to complete complex tasks without saving\
            intermediate images to the disk.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "output_multiple_multicomponent",
        "output_multiple_multicomponent": output_multiple_multicomponent,
    }
    return params


def c2d_output_multiple_multicomponent_cargs(
    params: C2dOutputMultipleMulticomponentParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-oomc",
        params.get("output_multiple_multicomponent", None)
    ])
    return cargs


def c2d_orient_params(
    orient: str,
) -> C2dOrientParametersTagged:
    """
    Build parameters.
    
    Args:
        orient: -orient: Change image orientation\
            \
            Syntax: `-orient CODE`\
            \
            Set the orientation of the image using one of 48 canonical\
            orientations. The orientation describes the mapping from the voxel\
            coordinate system (i,j,k) to the physical coordinate system\
            (x,y,z). In the voxel coordinate system, i runs along columns of\
            voxels, j runs along rows of voxels, and k runs along slices of\
            voxels. It is assumed (by the NIFTI convention) that the axes of\
            the physical coordinate system run as follows: x from (L)eft to\
            (R)ight, y from (P)osterior to (A)nterior, z from (I)nferior to\
            (S)uperior.\
            \
            The CODE passed in is a three-letter code consisting of letters\
            RLAPSI. Each letter describes the anatomical direction\
            corresponding to the voxel coordinates (i,j,k). For example, code\
            RAI means that i runs from Right to Left, j from Anterior to\
            Posterior, and k from Inferior to Superior.\
            \
            c3d input.img -orient RAI -o output.img\
            c3d input.img -orient SAL -o output.img\
            \
            This command has the same behavior as the 'Reorient Image' menu\
            option in ITK-SNAP.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "orient",
        "orient": orient,
    }
    return params


def c2d_orient_cargs(
    params: C2dOrientParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-orient",
        params.get("orient", None)
    ])
    return cargs


def c2d_output_multiple_params(
    output_multiple: str,
) -> C2dOutputMultipleParametersTagged:
    """
    Build parameters.
    
    Args:
        output_multiple: -oo: Output multiple images to multiple files\
            \
            Syntax: `-oo image_list` or `-oo image_spec`\
            \
            Write all images on the **convert3d** stack as multiple files.\
            There are two ways to use this command. The first is to supply a\
            list of file names, separated by spaces:\
            \
            c3d labelimage.nii -split -oo labelA.nii labelB.nii labelC.nii\
            \
            In the above example, the image at the end of the stack will be\
            saved as *labelC.nii*, the image next to the end of the stack will\
            be saved as *labelB.nii* and so on.\
            \
            The second way to use the **-oo** command is to supply a pattern\
            for the output filenames. In this case, all the images on the stack\
            will be written. The format for the pattern is the same as for the\
            [C++ printf command][8]. For example, the following command\
            \
            c3d labelimage.nii -split -oo label%02d.nii\
            \
            will generate images *label00.nii*, *label01.nii*, *label02.nii*\
            and so on. The image at the end of the stack will have the highest\
            number, and the image at the beginning of the stack will have\
            number 00.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "output_multiple",
        "output_multiple": output_multiple,
    }
    return params


def c2d_output_multiple_cargs(
    params: C2dOutputMultipleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-oo",
        params.get("output_multiple", None)
    ])
    return cargs


def c2d_orient_1_params(
    orient: str,
) -> C2dOrient1ParametersTagged:
    """
    Build parameters.
    
    Args:
        orient: -orient: Change image orientation\
            \
            Syntax: `-orient CODE`\
            \
            Set the orientation of the image using one of 48 canonical\
            orientations. The orientation describes the mapping from the voxel\
            coordinate system (i,j,k) to the physical coordinate system\
            (x,y,z). In the voxel coordinate system, i runs along columns of\
            voxels, j runs along rows of voxels, and k runs along slices of\
            voxels. It is assumed (by the NIFTI convention) that the axes of\
            the physical coordinate system run as follows: x from (L)eft to\
            (R)ight, y from (P)osterior to (A)nterior, z from (I)nferior to\
            (S)uperior.\
            \
            The CODE passed in is a three-letter code consisting of letters\
            RLAPSI. Each letter describes the anatomical direction\
            corresponding to the voxel coordinates (i,j,k). For example, code\
            RAI means that i runs from Right to Left, j from Anterior to\
            Posterior, and k from Inferior to Superior.\
            \
            c3d input.img -orient RAI -o output.img\
            c3d input.img -orient SAL -o output.img\
            \
            This command has the same behavior as the 'Reorient Image' menu\
            option in ITK-SNAP.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "orient_1",
        "orient": orient,
    }
    return params


def c2d_orient_1_cargs(
    params: C2dOrient1Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-orient",
        params.get("orient", None)
    ])
    return cargs


def c2d_origin_params(
    origin: str,
) -> C2dOriginParametersTagged:
    """
    Build parameters.
    
    Args:
        origin: -origin: Set image origin\
            \
            Syntax: `-origin vector `\
            \
            Set the origin of the image. The origin is the world coordinate (in\
            NIfTI coordinate space) of the center of the voxel (0,0,0) in the\
            image. The origin should be specified in millimeters.\
            \
            c3d input.img -origin 100x100x100mm -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "origin",
        "origin": origin,
    }
    return params


def c2d_origin_cargs(
    params: C2dOriginParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-origin",
        params.get("origin", None)
    ])
    return cargs


def c2d_origin_voxel_params(
    origin_voxel: str,
) -> C2dOriginVoxelParametersTagged:
    """
    Build parameters.
    
    Args:
        origin_voxel: -origin-voxel: Assign image origin to a voxel\
            \
            Syntax: `-origin-voxel vector `\
            \
            Set the origin of the image by specifying the voxel coordinates of\
            the center of the patient (RAS) coordinate system. The vector\
            should be specified in voxel units.\
            \
            c3d input.img -origin-voxel 60x70x35 -o output.img\
            c3d input.img -origin-voxel 50% -o output.img # image centered\
            around origin.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "origin_voxel",
        "origin_voxel": origin_voxel,
    }
    return params


def c2d_origin_voxel_cargs(
    params: C2dOriginVoxelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-origin-voxel",
        params.get("origin_voxel", None)
    ])
    return cargs


def c2d_origin_voxel_coord_params(
    origin_voxel_coord: str,
) -> C2dOriginVoxelCoordParametersTagged:
    """
    Build parameters.
    
    Args:
        origin_voxel_coord: -origin-voxel-coord: Set coordinate of specified\
            voxel\
            \
            Syntax: `-origin-voxel-coord: <index> <vector>`\
            \
            This command updates the origin of the image such that the specifed\
            voxel has the specified coordinate. For example, you can use the\
            command to set the world coordinate (in NIFTI coordinate space) of\
            the center voxel of the image, as follows:\
            \
            c3d input.nii -origin-voxel-coord: 50% 10x10x5mm -o output.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "origin_voxel_coord",
        "origin_voxel_coord": origin_voxel_coord,
    }
    return params


def c2d_origin_voxel_coord_cargs(
    params: C2dOriginVoxelCoordParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-origin-voxel-coord",
        params.get("origin_voxel_coord", None)
    ])
    return cargs


def c2d_overlap_params(
    overlap: str,
) -> C2dOverlapParametersTagged:
    """
    Build parameters.
    
    Args:
        overlap: -overlap: Compute relative overlap between binary images\
            \
            Syntax: `-overlap Z`\
            \
            Compute relative overlap between labels in the last two images on\
            the stack. Overlap is computed for a given label **Z**, i.e., the\
            number of voxels that are equal to **Z** in both images is computed\
            and divided by either the average number of voxels equal to **Z**\
            in both images (to get Dice coefficient) or by the size of the\
            region where at least one of the images is equal to **Z** (Jaccard\
            coefficient).\
            \
            The command below computes overlap for label 255.\
            \
            c3d -verbose seg1.img seg2.img -overlap 255\
            \
            The output of the command is in the following terse format, with\
            the last two values giving Dice and Jaccard coefficients,\
            respectively.\
            \
            OVL: 1, 2383, 2474, 1807, 0.744081, 0.592459\
            \
            Use the flag **-verbose** to get full information.\
            \
            Matching voxels in first image: 2383\
            Matching voxels in second image: 2474\
            Size of overlap region: 1807\
            Dice similarity coefficient: 0.744081\
            Intersection / ratio: 0.592459\
            \
            This command does not alter the stack.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "overlap",
        "overlap": overlap,
    }
    return params


def c2d_overlap_cargs(
    params: C2dOverlapParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-overlap",
        params.get("overlap", None)
    ])
    return cargs


def c2d_overlay_label_image_params(
    overlay_label_image: str,
) -> C2dOverlayLabelImageParametersTagged:
    """
    Build parameters.
    
    Args:
        overlay_label_image: -oli, -overlay-label-image: Overlay segmentation\
            image on grayscale image\
            \
            Syntax: `-oli lookup_table_file opacity`\
            \
            This command takes a grayscale image and a label image (i.e. image\
            with a set of discrete values) and produces red, green and blue\
            components of a color image. The resulting color image is an\
            overlay of the labels over the grey image. The first parameter\
            (*lookup\\_table*) is a text file with entries in the format\
            \
            label_value red green blue alpha\
            \
            Alpha values must be between 0 and 1. Red, green and blue values\
            should be on the same order as the intensity of the grey image\
            (typically 0-255). The text file is compatible with ITK-SNAP and\
            can be generated using the ITK-SNAP `Segmentation->Save Label\
            Descriptions` command. The second parameter (*opacity*) is between\
            0 and 1 and sets the overall opacity of the overlay. The output of\
            this command is similar to the way ITK-SNAP presents segmentation\
            data on top of grayscale images.\
            \
            c3d gray.nii.gz -stretch 2% 98% 0 255 -clip 0 255 seg.nii.gz -oli\
            labels.txt 0.5 -omc rgb.nii.gz\
            \
            Note: this command does not interpolate between entries in the\
            lookup table. It should not be used for images with a continuous\
            intensity spectrum.\
            \
            Here is a more complex example, used to visualize a segmentation\
            result. We do a few things in this command: trim grayscale and\
            segmentation images to an ROI around the object of interest; map\
            intensity range of the grayscale image to 0-255; extract slices\
            through the middle of the cropped images; overlay segmentation on\
            the grayscale image; and save as a color PNG file.\
            \
            c3d seg.nii.gz -trim 20x20x0vox -as S gray.nii.gz -stretch 2% 98% 0\
            255 -clip 0 255 \\\\\
            -reslice-identity -push S -foreach -slice z 50% -flip xy -endfor\
            \\\\\
            -oli labels.txt 0.5 -type uchar -omc ovl.png.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "overlay_label_image",
        "overlay_label_image": overlay_label_image,
    }
    return params


def c2d_overlay_label_image_cargs(
    params: C2dOverlayLabelImageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-overlay-label-image",
        params.get("overlay_label_image", None)
    ])
    return cargs


def c2d_pad_params(
    pad: str,
) -> C2dPadParametersTagged:
    """
    Build parameters.
    
    Args:
        pad: -pad: Pad image with constant value\
            \
            Syntax: `-pad <padlower> <padupper> <value> `\
            \
            Pads the image by a given percentage or number of voxels. The\
            *padlower* dimension pads along the zero faces of the image, and\
            the *padupper* dimension pads along the upper faces of the image.\
            For example to add 1 voxel to the left side of an image, do\
            \
            c3d img1.nii -pad 1x0x0vox 0x0x0vox 0 -o padded.nii\
            \
            while\
            \
            c3d img1.nii -pad 2x2x4vox 0% 0 -o padded.nii\
            \
            adds two voxels padding to the left and posterior sides, and four\
            slices to the bottom of the image. Note that the first argument\
            changes the location of voxel (0,0,0) and thus the origin of the\
            output image will be changed to maintain anatomical alignment\
            between the padded and original images.\
            \
            Normally you will want to pad with zeros, but you can pad with any\
            constant value, eg :\
            \
            c3d img1.nii -pad 10% 10% 1 -o padded.nii\
            \
            Adds 10% to all sides of the image, and fills the new voxels with\
            the value 1.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "pad",
        "pad": pad,
    }
    return params


def c2d_pad_cargs(
    params: C2dPadParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-pad",
        params.get("pad", None)
    ])
    return cargs


def c2d_pad_to_params(
    pad_to: str,
) -> C2dPadToParametersTagged:
    """
    Build parameters.
    
    Args:
        pad_to: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "pad_to",
        "pad_to": pad_to,
    }
    return params


def c2d_pad_to_cargs(
    params: C2dPadToParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-padto",
        params.get("pad_to", None)
    ])
    return cargs


def c2d_pca_params(
    pca: str,
) -> C2dPcaParametersTagged:
    """
    Build parameters.
    
    Args:
        pca: -pca: Principal components analysis of foreground voxels\
            \
            Syntax: `-pca`\
            \
            Similar to the *-centroid* command, computes the centroid and\
            prinicipal components of the foregrond voxels in the image. For\
            example if the image is a binary image of an ellipsoid, this will\
            report the center and the principal axes of the ellipsoid, in\
            physical NIFTI coordinates.\
            \
            c3d binaryimage.img -pca // centroid of all non-0 voxels\
            c3d labelimage.img -thresh 5 5 1 0 -pca // centroid of all voxels\
            with label 5\
            c3d labelimage.img -split -foreach -pca -endfor // centroids of all\
            labels (including 0).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "pca",
        "pca": pca,
    }
    return params


def c2d_pca_cargs(
    params: C2dPcaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-pca",
        params.get("pca", None)
    ])
    return cargs


def c2d_percent_intensity_mode_params(
    percent_intensity_mode: str,
) -> C2dPercentIntensityModeParametersTagged:
    """
    Build parameters.
    
    Args:
        percent_intensity_mode: -pim, -percent-intensity-mode: Set behavior of\
            % specifier\
            \
            Syntax: `-pim Quantile | q | ForegroundQuantile | fq | Range | r`\
            \
            This options changes how the percent sign (%) is interpreted when\
            specifying intensity values. **Quantile (q)** means that `10%`\
            describes the 10th percentile of all intensity values in the image\
            (i.e., 10% of the voxels have lower intensity).\
            **ForegroundQuantile (fq)** is similar, but voxels with background\
            intensity (see **-background** option) are excluded from the\
            percentile computation. **Range (r)** changes the meaning of\
            percent sign from percentile to the range between the minimum and\
            maximum of the image, and `0.1%` becomes equal to MIN + 0.1 (MAX -\
            MIN). The default is **Quantile**.\
            \
            $ c3d comp01.png -verbose -pim Quantile -verbose -threshold 75% inf\
            1 0\
            Quantile 0.75 maps to 18\
            \
            $ c3d comp01.png -verbose -pim ForegroundQuantile -verbose\
            -threshold 75% inf 1 0\
            Foreground quantile 0.75 (over 37467 voxels) maps to 58\
            \
            $ c3d comp01.png -verbose -pim Range -verbose -threshold 75% inf 1\
            0\
            Intensity range spec 0.75 maps to 191.25.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "percent_intensity_mode",
        "percent_intensity_mode": percent_intensity_mode,
    }
    return params


def c2d_percent_intensity_mode_cargs(
    params: C2dPercentIntensityModeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-percent-intensity-mode",
        params.get("percent_intensity_mode", None)
    ])
    return cargs


def c2d_pixel_params(
    pixel: str,
) -> C2dPixelParametersTagged:
    """
    Build parameters.
    
    Args:
        pixel: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "pixel",
        "pixel": pixel,
    }
    return params


def c2d_pixel_cargs(
    params: C2dPixelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-pixel",
        params.get("pixel", None)
    ])
    return cargs


def c2d_pop_params(
    pop_: str,
) -> C2dPopParametersTagged:
    """
    Build parameters.
    
    Args:
        pop_: -pop: Remove last image from the stack\
            \
            Syntax: `-pop`\
            \
            Removes the last image from the image stack. Images assigned a name\
            with the **-as** command will remain in memory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "pop",
        "pop": pop_,
    }
    return params


def c2d_pop_cargs(
    params: C2dPopParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-pop",
        params.get("pop", None)
    ])
    return cargs


def c2d_popas_params(
    popas: str,
) -> C2dPopasParametersTagged:
    """
    Build parameters.
    
    Args:
        popas: -popas: Remove last image from the stack and assign to variable\
            \
            Syntax: `-popas var`\
            \
            Removes the last image from the stack, but also assigns it the name\
            'var', keeping the image in memory. Same as calling **-as** *var*\
            followed by **-pop**.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "popas",
        "popas": popas,
    }
    return params


def c2d_popas_cargs(
    params: C2dPopasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-popas",
        params.get("popas", None)
    ])
    return cargs


def c2d_probe_params(
    probe: str,
) -> C2dProbeParametersTagged:
    """
    Build parameters.
    
    Args:
        probe: -probe: Report image intensity at a voxel\
            \
            Syntax: `-probe <point_spec>`\
            \
            Prints the value of the image at the position specified by the\
            parameter `point_spec`, which may be in physical units or voxel\
            units:\
            \
            c3d img1.img -probe 128x120x160vox\
            c3d img1.img -interpolation NearestNeighbor -probe 60x60x60mm\
            c3d img1.img -probe 50%.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "probe",
        "probe": probe,
    }
    return params


def c2d_probe_cargs(
    params: C2dProbeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-probe",
        params.get("probe", None)
    ])
    return cargs


def c2d_push_params(
    push: str,
) -> C2dPushParametersTagged:
    """
    Build parameters.
    
    Args:
        push: -push: Place variable at the end of the stack\
            \
            Syntax: `-push var`\
            \
            Places the image associated with variable name 'var' on end of the\
            image stack. Variable names are assigned using the **-as** command.\
            The **-as** and **-push** commands are useful when you need to use\
            a certain image more than once during a convert3d operation. For\
            example, if you want to compute the distance transform of a binary\
            image and mask it so that the values outside of the binary image\
            region have value 0, you would use the following command:\
            \
            c3d binary.img -as A -sdt -push A -times -o masked_distance.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "push",
        "push": push,
    }
    return params


def c2d_push_cargs(
    params: C2dPushParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-push",
        params.get("push", None)
    ])
    return cargs


def c2d_rank_params(
    rank: str,
) -> C2dRankParametersTagged:
    """
    Build parameters.
    
    Args:
        rank: -rank: Voxelwise ranking of intensity values\
            \
            Syntax: `-rank `\
            \
            This command takes N images as the input (all the images on the\
            stack are used). It also generates N images as the output. For\
            voxel k in image j, it assigns it a label based on its rank among\
            the values of voxel k in all N images. If the voxel has highest\
            intensity in image j, then the j'th output will have value 1.\
            \
            c3d img1.img img2.img ... imgN.img -rank -oo rank%d.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rank",
        "rank": rank,
    }
    return params


def c2d_rank_cargs(
    params: C2dRankParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rank",
        params.get("rank", None)
    ])
    return cargs


def c2d_reciprocal_params(
    reciprocal: str,
) -> C2dReciprocalParametersTagged:
    """
    Build parameters.
    
    Args:
        reciprocal: -reciprocal: Image voxelwise reciprocal\
            \
            Syntax: `-reciprocal `\
            \
            Computes the reciprocal of an image. For instance to compute B = 1\
            / A, use the command\
            \
            c3d A.img -reciprocal -o B.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "reciprocal",
        "reciprocal": reciprocal,
    }
    return params


def c2d_reciprocal_cargs(
    params: C2dReciprocalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-reciprocal",
        params.get("reciprocal", None)
    ])
    return cargs


def c2d_region_params(
    region: str,
) -> C2dRegionParametersTagged:
    """
    Build parameters.
    
    Args:
        region: -region: Extract region from image\
            \
            Syntax: `-region vOrigin vSize `\
            \
            Extract a rectangular region from the image. The first parameter is\
            the position of the corner of the region, and the second is the\
            size of the region.\
            \
            c3d img1.img -region 20x20x20vox 50x60x70vox -o img2.img\
            c3d img1.img -region 25% 50% -o img3.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "region",
        "region": region,
    }
    return params


def c2d_region_cargs(
    params: C2dRegionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-region",
        params.get("region", None)
    ])
    return cargs


def c2d_reorder_params(
    reorder: str,
) -> C2dReorderParametersTagged:
    """
    Build parameters.
    
    Args:
        reorder: -reorder: Rearrange images on the stack\
            \
            Syntax: `-reorder k` or `-reorder fraction`\
            \
            Rearranges images in the stack, such that images that are k\
            positions apart become next to each other on the stack. In other\
            words, if the original order of the images is 1, 2, ..., n, the new\
            order of the images becomes 1, 1+k, 1+2k, ..., 2, 2+k, 2+2k, ...,\
            k, 2k, ... n. Of course, n must be divisible by k. As an\
            alternative to specifying k, you can specify a floating point\
            number (i.e., **-reorder** 0.5), in which case k is obtained by\
            multiplying n by the floating point number and rounding to the\
            nearest integer.\
            \
            The following three commands are equivalent:\
            \
            c3d a1.nii a2.nii a3.nii a4.nii b1.nii b2.nii b3.nii b4.nii\
            -reorder 4 ...\
            c3d a1.nii a2.nii a3.nii a4.nii b1.nii b2.nii b3.nii b4.nii\
            -reorder 0.5 ...\
            c3d a1.nii b1.nii a2.nii b2.nii a3.nii b3.nii a4.nii b4.nii ...\
            \
            The **-reorder** command us useful when you specify two sets of\
            images using wildcards and then want to perform pairwise operations\
            on the images. For example\
            \
            c3d weight*.nii gray*.nii -reorder 0.5 -weighted-sum-voxelwise -o\
            wsum.nii\
            \
            is equivalent to the command\
            \
            c3d weight1.nii gray1.nii weight2.nii gray2.nii ...\
            -weighted-sum-voxelwise -o wsum.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "reorder",
        "reorder": reorder,
    }
    return params


def c2d_reorder_cargs(
    params: C2dReorderParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-reorder",
        params.get("reorder", None)
    ])
    return cargs


def c2d_retain_labels_params(
    retain_labels: str,
) -> C2dRetainLabelsParametersTagged:
    """
    Build parameters.
    
    Args:
        retain_labels: -retain-labels: Retain labels in a label image\
            \
            Syntax: `-retain-labels I1 I2 ... IN`\
            \
            Assuming that the input is a multi-label segmentation image, this\
            command keeps all labels specifed in the list and replaces the\
            remaining labels with the background value.\
            \
            c3d seg.nii -retain-labels 2 3 4 8 -o subseg.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "retain_labels",
        "retain_labels": retain_labels,
    }
    return params


def c2d_retain_labels_cargs(
    params: C2dRetainLabelsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-retain-labels",
        params.get("retain_labels", None)
    ])
    return cargs


def c2d_rf_apply_params(
    rf_apply: str,
) -> C2dRfApplyParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_apply: -rf-apply: Apply Random Forest classifier\
            \
            Syntax: `-rf-apply <classifier_file>`\
            \
            This command applies a classifier trained previously by\
            **-rf-train**. The stack must contain the same number of feature\
            images as when training. The images will be removed from the stack\
            and replaced with a set of K probability images, where K is the\
            number of classes during training. See examples under **-rf-train**\
            for usage.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_apply",
        "rf_apply": rf_apply,
    }
    return params


def c2d_rf_apply_cargs(
    params: C2dRfApplyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-apply",
        params.get("rf_apply", None)
    ])
    return cargs


def c2d_rf_train_params(
    rf_train: str,
) -> C2dRfTrainParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_train: -rf-train: Train Random Forest classifier\
            \
            Syntax: `-rf-train <classifier_file>`\
            \
            This command trains a classifier using an implementation of the\
            [Breyman et al. Random Forest Algorithm][Br2001], with\
            modifications proposed by [Criminisi and Shotton][Cr2004]. The\
            stack must contain one or more images of features (e.g., grayscale\
            images), followed by a multi-label image. The latter must have at\
            least two non-zero labels corresponding to different classes. The\
            classifier is trained on a voxel by voxel basis. All voxels with\
            label *L* are treated as the examples of class *L*. The classifier\
            is output to a binary file that can later be used by the\
            **-rf-apply** command. Multiple parameters can be specified with\
            the **-rf-param-xxx** options before calling **-rf-train**. The\
            stack is not modified by this command.\
            \
            # Training with two MRI modalities as features and default\
            parameters\
            c3d t1_mri.nii t2_mri.nii segmentation.nii -rf-train myforest1.rf\
            \
            # Training with patches as features (see docs for -rf-param-patch)\
            c3d ultrasound.nii seg.nii -rf-param-patch 2x2x2 -rf-train\
            myforest2.rf\
            \
            # Applying the classifier\
            c3d ultrasound.nii -rf-apply myforest2.rf -omc class_prob.nii.gz\
            \
            The commands are meant to replicate the "classification"\
            pre-segmentation mode in ITK-SNAP, i.e., extending a rough example\
            segmentation to the entire image domain. It is possible to also use\
            the commands to train classifiers jointly on data from multiple\
            subjects, each with its own segmentation, as long as the images\
            from the different subjects occupy the same image space and can be\
            stacked into a 4-dimensional image. For example:\
            \
            # Train using MRI and segmentations from N subjects\
            c2d mri_subj*.nii -tile w -popas ALLMRI \\\
            seg_subj*.nii -tile w -popas ALLSEG \\\
            -rf-param-patch 2x2x2x0 \\\
            -push ALLMRI -push ALLSEG -rf-train myforest.rf\
            \
            # Apply using single MRI\
            c2d mri_new.nii -rf-apply myforest.rf -omc classprob.nii\
            \
            [Br2001] Breiman, L. (2001). Random forests. Machine learning,\
            45(1), 5-32.\
            [Cr2004] Criminisi, A., & Shotton, J. (2013). Decision forests for\
            computer vision and medical image analysis. Springer Science &\
            Business Media.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_train",
        "rf_train": rf_train,
    }
    return params


def c2d_rf_train_cargs(
    params: C2dRfTrainParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-train",
        params.get("rf_train", None)
    ])
    return cargs


def c2d_rf_param_patch_params(
    rf_param_patch: str,
) -> C2dRfParamPatchParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_param_patch: -rf-param-patch: Random Forest training patch size\
            \
            Syntax: `-rf-param-patch <size_spec>`\
            \
            Set the radius of the patch used to generate features for the RF\
            classifier. By default this is zero, which means that just the\
            intensity of each voxel is used as a feature. Setting this to\
            non-zero values will result in neighboring intensities also being\
            used as features, and can improve classification in presence of\
            complex image texture. The patch size in each dimension is (2 *\
            radius + 1). See **-rf-train** command for details.\
            \
            # Set patch size to 5x5x5\
            c3d ... -rf-param-patch 2x2x2 ... -rf-train myforest.rf.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_param_patch",
        "rf_param_patch": rf_param_patch,
    }
    return params


def c2d_rf_param_patch_cargs(
    params: C2dRfParamPatchParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-param-patch",
        params.get("rf_param_patch", None)
    ])
    return cargs


def c2d_rf_param_usexyz_params(
    rf_param_usexyz: str,
) -> C2dRfParamUsexyzParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_param_usexyz: -rf-param-usexyz: Random Forest coordinate features\
            \
            Syntax: `-rf-param-usexyz`\
            \
            Use the coordinates of voxels as additional features. This allows\
            some geometric relations between different labels to be learned.\
            Equivalent to the corresponding ITK-SNAP option.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_param_usexyz",
        "rf_param_usexyz": rf_param_usexyz,
    }
    return params


def c2d_rf_param_usexyz_cargs(
    params: C2dRfParamUsexyzParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-param-usexyz",
        params.get("rf_param_usexyz", None)
    ])
    return cargs


def c2d_rf_param_nousexyz_params(
    rf_param_nousexyz: str,
) -> C2dRfParamNousexyzParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_param_nousexyz: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_param_nousexyz",
        "rf_param_nousexyz": rf_param_nousexyz,
    }
    return params


def c2d_rf_param_nousexyz_cargs(
    params: C2dRfParamNousexyzParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-param-nousexyz",
        params.get("rf_param_nousexyz", None)
    ])
    return cargs


def c2d_rf_param_ntrees_params(
    rf_param_ntrees: str,
) -> C2dRfParamNtreesParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_param_ntrees: -rf-param-ntrees: Random Forest forest size\
            \
            Syntax: `-rf-param-ntrees <integer>`\
            \
            Sets the number of trees in the forest. Default value is 50. Larger\
            forests are more robust but more time to train and apply.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_param_ntrees",
        "rf_param_ntrees": rf_param_ntrees,
    }
    return params


def c2d_rf_param_ntrees_cargs(
    params: C2dRfParamNtreesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-param-ntrees",
        params.get("rf_param_ntrees", None)
    ])
    return cargs


def c2d_rf_param_treedepth_params(
    rf_param_treedepth: str,
) -> C2dRfParamTreedepthParametersTagged:
    """
    Build parameters.
    
    Args:
        rf_param_treedepth: -rf-param-treedepth: Random Forest tree depth\
            \
            Syntax: `-rf-param-treedepth <integer>`\
            \
            Sets the depth of the trees in the classifier. Default value is 30.\
            Deeper trees can learn on more complex data but require more time.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rf_param_treedepth",
        "rf_param_treedepth": rf_param_treedepth,
    }
    return params


def c2d_rf_param_treedepth_cargs(
    params: C2dRfParamTreedepthParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rf-param-treedepth",
        params.get("rf_param_treedepth", None)
    ])
    return cargs


def c2d_set_sform_params(
    set_sform: str,
) -> C2dSetSformParametersTagged:
    """
    Build parameters.
    
    Args:
        set_sform: -set-sform: Set the transform to physical space\
            \
            Syntax: `-set-sform <sform.mat> `\
            \
            Sets the Nifti sform of the last image on the stack to the 4x4\
            matrix provided.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "set_sform",
        "set_sform": set_sform,
    }
    return params


def c2d_set_sform_cargs(
    params: C2dSetSformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-set-sform",
        params.get("set_sform", None)
    ])
    return cargs


def c2d_replace_params(
    replace: str,
) -> C2dReplaceParametersTagged:
    """
    Build parameters.
    
    Args:
        replace: -replace: Replace intensities in image\
            \
            Syntax: `-replace I1 J1 I2 J2 ... `\
            \
            Replace intensity I1 by J1, I2 by J2 and so on. Allowed values of\
            intensity include **nan**, **inf** and **-inf**.\
            \
            c3d img1.img -replace 1 128 nan 0.0 -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "replace",
        "replace": replace,
    }
    return params


def c2d_replace_cargs(
    params: C2dReplaceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-replace",
        params.get("replace", None)
    ])
    return cargs


def c2d_resample_params(
    resample: str,
) -> C2dResampleParametersTagged:
    """
    Build parameters.
    
    Args:
        resample: -resample: Resample image to new dimensions\
            \
            Syntax: `-resample <dimensions> `\
            \
            Resamples the image, keeping the bounding box the same, but\
            changing the number of voxels in the image. The dimensions can be\
            specified as a percentage, for example to double the number of\
            voxels in each direction. The **-interpolation** flag affects how\
            sampling is performed.\
            \
            c3d img1.img -resample 123x142x200 -o img2.img\
            c3d img1.img -resample 200% -o img2.img\
            c3d img1.img -resample 100x100x200% -o img2.img\
            c3d img1.img -background 4.0 -interpolation Cubic -resample\
            123x142x200 -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "resample",
        "resample": resample,
    }
    return params


def c2d_resample_cargs(
    params: C2dResampleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-resample",
        params.get("resample", None)
    ])
    return cargs


def c2d_resample_iso_params(
    resample_iso: str,
) -> C2dResampleIsoParametersTagged:
    """
    Build parameters.
    
    Args:
        resample_iso: -resample-iso: Resample image to (approximately)\
            isotropic resolution\
            \
            Syntax: `-resample-iso <min|max>`\
            \
            Resamples the image to have approximately isotropic resolution,\
            either based on the smallest voxel dimension ('min' mode) or\
            largest voxel dimension ('max' mode). This command calls\
            **-resample** with appropriately calculated new image dimensions.\
            The bounding box of the image in physical space is preserved.\
            Therefore, since the image dimensions must be integer, the actual\
            voxel dimensions after resampling may not be precisely isotropic.\
            \
            c3d img1.img -resample-iso min -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "resample_iso",
        "resample_iso": resample_iso,
    }
    return params


def c2d_resample_iso_cargs(
    params: C2dResampleIsoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-resample-iso",
        params.get("resample_iso", None)
    ])
    return cargs


def c2d_resample_mm_params(
    resample_mm: str,
) -> C2dResampleMmParametersTagged:
    """
    Build parameters.
    
    Args:
        resample_mm: -resample-mm: Resample image to new resolution\
            \
            Syntax: `-resample-mm <voxel_size> `\
            \
            Resamples the image as in **-resample**, but the user specifies the\
            new voxel size rather than dimensions. This may not be precise, so\
            the bounding box of the image may change. A warning will be\
            generated in that case.\
            \
            c3d img1.img -resample-mm 1.0x1.5x1.5mm -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "resample_mm",
        "resample_mm": resample_mm,
    }
    return params


def c2d_resample_mm_cargs(
    params: C2dResampleMmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-resample-mm",
        params.get("resample_mm", None)
    ])
    return cargs


def c2d_reslice_itk_params(
    reslice_itk: str,
) -> C2dResliceItkParametersTagged:
    """
    Build parameters.
    
    Args:
        reslice_itk: -reslice-itk: Resample image using affine transform\
            \
            Syntax: `-reslice-itk <transform_file> `\
            \
            Applies affine (or other) transform in ITK (ANTs) format to an\
            image. See notes to **-reslice-matrix** for usage.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "reslice_itk",
        "reslice_itk": reslice_itk,
    }
    return params


def c2d_reslice_itk_cargs(
    params: C2dResliceItkParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-reslice-itk",
        params.get("reslice_itk", None)
    ])
    return cargs


def c2d_reslice_matrix_params(
    reslice_matrix: str,
) -> C2dResliceMatrixParametersTagged:
    """
    Build parameters.
    
    Args:
        reslice_matrix: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "reslice_matrix",
        "reslice_matrix": reslice_matrix,
    }
    return params


def c2d_reslice_matrix_cargs(
    params: C2dResliceMatrixParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-reslice-matrix",
        params.get("reslice_matrix", None)
    ])
    return cargs


def c2d_reslice_identity_params(
    reslice_identity: str,
) -> C2dResliceIdentityParametersTagged:
    """
    Build parameters.
    
    Args:
        reslice_identity: -reslice-identity: Resample image using identity\
            transform\
            \
            Syntax: `-reslice-identity `\
            \
            Applies the **-reslice-matrix** command with the identity\
            transform. This is useful when you have two scans of the same\
            subject with different coordinate transformations to patient space\
            and you want to resample one scan in the space of another scan. For\
            example, if you have T1 and T2 images in different coordinate\
            frames, and want to reslice the T2 image into the space of the T1\
            \
            c3d t1.nii t2.nii -reslice-identity -o t2_in_t1_space.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "reslice_identity",
        "reslice_identity": reslice_identity,
    }
    return params


def c2d_reslice_identity_cargs(
    params: C2dResliceIdentityParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-reslice-identity",
        params.get("reslice_identity", None)
    ])
    return cargs


def c2d_rgb2hsv_params(
    rgb2hsv: str,
) -> C2dRgb2hsvParametersTagged:
    """
    Build parameters.
    
    Args:
        rgb2hsv: -rgb2hsv: Convert RGB image to HSV image\
            \
            Syntax `-rgb2hsv`\
            \
            Takes the last three images on the stack and treats them as red,\
            green, and blue channels. Outputs three images corresponding to\
            hue, saturation, value. To read color images you need the\
            ***-msc*** command.\
            \
            c3d -mcs color.png -rgb2hsv -omc hsv.png.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rgb2hsv",
        "rgb2hsv": rgb2hsv,
    }
    return params


def c2d_rgb2hsv_cargs(
    params: C2dRgb2hsvParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rgb2hsv",
        params.get("rgb2hsv", None)
    ])
    return cargs


def c2d_rms_params(
    rms: str,
) -> C2dRmsParametersTagged:
    """
    Build parameters.
    
    Args:
        rms: -rms: Voxelwise vector norm\
            \
            Syntax: `-rms`\
            \
            Computes RMS (root mean square) of all images on the stack. The\
            command takes the square of each image on the stack, adds all the\
            squared images and takes the square root of the result. This is\
            very useful for statistical operations. Images must have the same\
            size.\
            \
            c3d img1.img img2.img img3.img img4.img -rms -o rms.img\
            \
            The equivalent of this command is\
            \
            c3d img1.img img2.img img3.img img4.img -foreach -dup -times\
            -endfor \\\
            -accum -add -endaccum -sqrt -o rms.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "rms",
        "rms": rms,
    }
    return params


def c2d_rms_cargs(
    params: C2dRmsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-rms",
        params.get("rms", None)
    ])
    return cargs


def c2d_round_params(
    round_: str,
) -> C2dRoundParametersTagged:
    """
    Build parameters.
    
    Args:
        round_: -noround, -round: Floating point rounding behavior\
            \
            Syntax: `-noround` or `-round `\
            \
            By default, **convert3d** will round floating point values when\
            converting to an integer, short or byte image. This command\
            specifies that rounding should not be used. Rounding is used to\
            avoid numerical errors stemming from the internal floating point\
            representation.\
            \
            c3d image1.img -type short -noround image2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "round",
        "round": round_,
    }
    return params


def c2d_round_cargs(
    params: C2dRoundParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-round",
        params.get("round", None)
    ])
    return cargs


def c2d_scale_params(
    scale: str,
) -> C2dScaleParametersTagged:
    """
    Build parameters.
    
    Args:
        scale: -scale: Scale intensity by constant factor\
            \
            Syntax: `-scale <factor>`\
            \
            Multiplies the intensity of each voxel in the last image on the\
            stack by the given factor.\
            \
            c3d img1.img -scale 0.5 -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "scale",
        "scale": scale,
    }
    return params


def c2d_scale_cargs(
    params: C2dScaleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-scale",
        params.get("scale", None)
    ])
    return cargs


def c2d_set_sform_1_params(
    set_sform: str,
) -> C2dSetSform1ParametersTagged:
    """
    Build parameters.
    
    Args:
        set_sform: -set-sform: Set the transform to physical space\
            \
            Syntax: `-set-sform <sform.mat> `\
            \
            Sets the Nifti sform of the last image on the stack to the 4x4\
            matrix provided.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "set_sform_1",
        "set_sform": set_sform,
    }
    return params


def c2d_set_sform_1_cargs(
    params: C2dSetSform1Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-set-sform",
        params.get("set_sform", None)
    ])
    return cargs


def c2d_sin_params(
    sin: str,
) -> C2dSinParametersTagged:
    """
    Build parameters.
    
    Args:
        sin: -cos: Voxelwise cosine\
            \
            Syntax: `-sin`\
            \
            Replaces the last image on the stack with the cosine trigonometric\
            operation applied to all voxels. Input must be in radians.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "sin",
        "sin": sin,
    }
    return params


def c2d_sin_cargs(
    params: C2dSinParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-sin",
        params.get("sin", None)
    ])
    return cargs


def c2d_slice_params(
    slice_: str,
) -> C2dSliceParametersTagged:
    """
    Build parameters.
    
    Args:
        slice_: -slice: Extract slices from an image\
            \
            Syntax: `-slice axis position_spec`\
            \
            Extracts a slice along the specified axis (x,y or z). The position\
            specifier **position_spec** can be a single slice or a range of\
            slices. For a single slice, it can be specified as a number or a\
            percentage. Numbering is zero-based, i.e, the first slice is slice\
            0, the last slice is N-1, where N is the number of slices. For a\
            range, use MATLAB notation first:step:last. The slice is placed on\
            the stack as an image with size 1 in the last dimension. You can\
            save the slice as a 2D PNG image.\
            \
            c3d input.img -slice x 128 -o myslice.nii.gz\
            c3d input.img -slice y 50% myslice.nii.gz\
            c3d input.img -slice z 25% -type uchar -stretch 0 2000 0 255 -o\
            myslice.png\
            c3d input.img -slice z 0:-1 -oo slice%0d.nii.gz\
            c3d input.img -slice z 20%:10%:80% -oo slice%0d.nii.gz\
            \
            With the new command **c2d**, the **-slice** command can be used to\
            extract volumes from a 4D image. This can be useful to reformat a\
            4D NIFTI image as a 3D multi-component NIFTI image, using the\
            command\
            \
            c2d input4d.nii.gz -slice w 0:-1 -omc output3d_multicomp.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "slice",
        "slice": slice_,
    }
    return params


def c2d_slice_cargs(
    params: C2dSliceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-slice",
        params.get("slice", None)
    ])
    return cargs


def c2d_slice_all_params(
    slice_all: str,
) -> C2dSliceAllParametersTagged:
    """
    Build parameters.
    
    Args:
        slice_all: -slice-all: Extract slices from all images on the stack\
            \
            Syntax `-slice-all axis position_spec`\
            \
            This command behaves identical to the **-slice** command, but all\
            images on the stack are sliced, and the slices are interleaved.\
            This is useful for slicing multi-component images. For example, if\
            you read a four-component image 'test4.nii.gz', you can extract and\
            save the slices as follows:\
            \
            c3d test4.nii.gz -slice-all 20%:10%:80% -oomc 4 slice4_%03d.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "slice_all",
        "slice_all": slice_all,
    }
    return params


def c2d_slice_all_cargs(
    params: C2dSliceAllParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-slice-all",
        params.get("slice_all", None)
    ])
    return cargs


def c2d_sharpen_params(
    sharpen: str,
) -> C2dSharpenParametersTagged:
    """
    Build parameters.
    
    Args:
        sharpen: -sharpen: Sharpen edges in the image\
            \
            Syntax: `-sharpen`\
            \
            Applies the Laplacian sharpening filter from ITK, which accentuates\
            the edges in the image.\
            \
            c3d input.nii.gz -sharpen -o output.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "sharpen",
        "sharpen": sharpen,
    }
    return params


def c2d_sharpen_cargs(
    params: C2dSharpenParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-sharpen",
        params.get("sharpen", None)
    ])
    return cargs


def c2d_shift_params(
    shift: str,
) -> C2dShiftParametersTagged:
    """
    Build parameters.
    
    Args:
        shift: -shift: Shift image intensity by constant\
            \
            Syntax: `-shift <constant>`\
            \
            Adds the given constant to every voxel.\
            \
            c3d img1.img -shift 100 -o img2.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "shift",
        "shift": shift,
    }
    return params


def c2d_shift_cargs(
    params: C2dShiftParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-shift",
        params.get("shift", None)
    ])
    return cargs


def c2d_signed_distance_transform_params(
    signed_distance_transform: str,
) -> C2dSignedDistanceTransformParametersTagged:
    """
    Build parameters.
    
    Args:
        signed_distance_transform: -sdt, -signed-distance-transform: Signed\
            distance transform of a binary image\
            \
            Syntax: `-sdt`\
            \
            Computes the signed distance transform of a binary image. Voxels\
            where the binary image is non-zero will have negative values and\
            voxels where the binary image is zero will have negative values.\
            The magnitude of the value will be the approximate Euclidean\
            distance to the boundary of the object represented by the binary\
            image.\
            \
            c3d binary.img -sdt -o dist.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "signed_distance_transform",
        "signed_distance_transform": signed_distance_transform,
    }
    return params


def c2d_signed_distance_transform_cargs(
    params: C2dSignedDistanceTransformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-signed-distance-transform",
        params.get("signed_distance_transform", None)
    ])
    return cargs


def c2d_smooth_params(
    smooth: str,
) -> C2dSmoothParametersTagged:
    """
    Build parameters.
    
    Args:
        smooth: -smooth: Gaussian smoothing\
            \
            Syntax: `-smooth <sigma_vector> `\
            \
            Applies Gaussian smoothing to the image. The parameter vector\
            specifies the standard deviation of the Gaussian kernel. Also see\
            [Vector Format Specification][10] below.\
            \
            c3d img1.img -smooth 2x1x1vox -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "smooth",
        "smooth": smooth,
    }
    return params


def c2d_smooth_cargs(
    params: C2dSmoothParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-smooth",
        params.get("smooth", None)
    ])
    return cargs


def c2d_smooth_fast_params(
    smooth_fast: str,
) -> C2dSmoothFastParametersTagged:
    """
    Build parameters.
    
    Args:
        smooth_fast: -smooth-fast: Fast approximate Gaussian smoothing\
            \
            Syntax: `-smooth-fast <sigma_vector> `\
            \
            Applies Gaussian smoothing to the image using the fast [Deriche\
            recursive smoothing algorithm][15]. The parameter vector specifies\
            the standard deviation of the Gaussian kernel. Also see [Vector\
            Format Specification][10] below.\
            \
            c3d img1.img -smooth-fast 20x10x10vox -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "smooth_fast",
        "smooth_fast": smooth_fast,
    }
    return params


def c2d_smooth_fast_cargs(
    params: C2dSmoothFastParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-smooth-fast",
        params.get("smooth_fast", None)
    ])
    return cargs


def c2d_spacing_params(
    spacing: str,
) -> C2dSpacingParametersTagged:
    """
    Build parameters.
    
    Args:
        spacing: -spacing: Set voxel spacing\
            \
            Syntax: `-spacing <vector> `\
            \
            Sets the voxel spacing of the image. This should always be a vector\
            with positive components. For example, to set the spacing of the\
            image to 1mm isotropic, use the command below. This command only\
            changes the header of the image, not its contents.\
            \
            c3d img.nii -spacing 1x1x1mm -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "spacing",
        "spacing": spacing,
    }
    return params


def c2d_spacing_cargs(
    params: C2dSpacingParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-spacing",
        params.get("spacing", None)
    ])
    return cargs


def c2d_split_params(
    split: str,
) -> C2dSplitParametersTagged:
    """
    Build parameters.
    
    Args:
        split: -split: Split multi-label image into binary images\
            \
            Syntax: `-split`\
            \
            This command takes a multilabel image (one with a small number of\
            discrete intensity levels), and replaces it with a set of binary\
            images, one for each of the levels. The images can later be\
            recombined using the **-merge** command. The labels corresponding\
            to each binary image are remembered by **convert3d** so that when\
            **-merge** is called, the labels are faithfully reassigned. The\
            **-merge** command treats each input as a probability image, and\
            selects at each voxel the label that has highest probability. The\
            example below smooths each label independently, then recombines\
            using **-merge**\
            \
            c3d multilabel.nii -split -foreach -smooth 3mm -endfor -merge -o\
            ml_smooth.nii\
            \
            Also of note is that the **-split** command will disregard infinite\
            intensity values. So if you want to apply voting to a subset of the\
            labels, you can replace labels you do not care about with *inf*,\
            for example, using the **-thresh** command.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "split",
        "split": split,
    }
    return params


def c2d_split_cargs(
    params: C2dSplitParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-split",
        params.get("split", None)
    ])
    return cargs


def c2d_sqrt_params(
    sqrt: str,
) -> C2dSqrtParametersTagged:
    """
    Build parameters.
    
    Args:
        sqrt: -sqrt: Take square root of image\
            \
            Syntax: `-sqrt `\
            \
            Computes square root of each voxel in the image.\
            \
            c3d input.img -sqrt -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "sqrt",
        "sqrt": sqrt,
    }
    return params


def c2d_sqrt_cargs(
    params: C2dSqrtParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-sqrt",
        params.get("sqrt", None)
    ])
    return cargs


def c2d_staple_params(
    staple: str,
) -> C2dStapleParametersTagged:
    """
    Build parameters.
    
    Args:
        staple: -staple: STAPLE algorithm to combine segmentations\
            \
            Syntax: `-staple <intensity_value> `\
            \
            Runs the ITK implementation of the STAPLE algorithm ([See\
            Paper][11]). STAPLE generates an estimate of the 'true'\
            segmentation of a structure given a set of segmentations by\
            different raters. This command treats all images on the stack as\
            inputs. Each image is considered to be a segmentation by a\
            different rater. The parameter *intensity_value* specifies the\
            label in the segmentation images corresponding to the structure of\
            interest (e.g., the segmentation image may have value 1\
            corresponding to the caudate and value 2 corresponding to the\
            hippocampus. To run STAPLE on the hippocampus, pass in 2 as the\
            *intensity_value*). The output of STAPLE is a real-valued image\
            with voxels between 0 and 1, representing the probability of each\
            voxel being in the 'true' segmentation. This image can be\
            thresholded to get a binary consensus segmentation. Additional\
            outputs (estimates of the sensitivity and specificity of each\
            rater) are printed out if the **-verbose** command is used before\
            the **-staple** command.\
            \
            c3d -verbose rater1.img rater2.img rater3.img -staple 1 -o\
            probmap.img\
            c3d -verbose rater*.img -staple 1 -threshold 0.5 inf 1 0 -o\
            bin_segm.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "staple",
        "staple": staple,
    }
    return params


def c2d_staple_cargs(
    params: C2dStapleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-staple",
        params.get("staple", None)
    ])
    return cargs


def c2d_structure_tensor_eigenvalues_params(
    structure_tensor_eigenvalues: str,
) -> C2dStructureTensorEigenvaluesParametersTagged:
    """
    Build parameters.
    
    Args:
        structure_tensor_eigenvalues: -steig, -structure-tensor-eigenvalues:\
            Compute eigenvalues of the structure tensor\
            \
            Syntax `-steig <scale> <radius>`\
            \
            Computes the Hessian matrix at every pixel of an image and the\
            eigenvalues of the Hessian. Images of the eigenvalues (sorted by\
            value) are placed on the stack. These images are useful as texture\
            features. See also the '''-steig''' command. The scale determines\
            the amount of Gaussian smoothing applied for computing the partial\
            derivatives in the Hessian, and is in physical (mm) units.\
            \
            c3d myimage.nii -hesseig 2.0 -oo eig%02d.nii.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "structure_tensor_eigenvalues",
        "structure_tensor_eigenvalues": structure_tensor_eigenvalues,
    }
    return params


def c2d_structure_tensor_eigenvalues_cargs(
    params: C2dStructureTensorEigenvaluesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-steig",
        params.get("structure_tensor_eigenvalues", None)
    ])
    return cargs


def c2d_spm_params(
    spm: str,
) -> C2dSpmParametersTagged:
    """
    Build parameters.
    
    Args:
        spm: -spm, -nospm: SPM compatibility in Analyze output\
            \
            Syntax: `-spm` or `-nospm `\
            \
            These options specify whether use the SPM extension to the Analyze\
            (.hdr,.img) format. When this option is on, the origin field stored\
            by SPM in the Analyze header will be correctly interpreted. When\
            saving analyze files, the origin will be set correctly. The default\
            is equivalent to the **-nospm** option. Best to avoid this issue\
            altogether by using NIFTI and SPM5 or later.\
            \
            c3d -spm in.hdr out.img.gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "spm",
        "spm": spm,
    }
    return params


def c2d_spm_cargs(
    params: C2dSpmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-spm",
        params.get("spm", None)
    ])
    return cargs


def c2d_subtract_params(
    subtract: str,
) -> C2dSubtractParametersTagged:
    """
    Build parameters.
    
    Args:
        subtract: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "subtract",
        "subtract": subtract,
    }
    return params


def c2d_subtract_cargs(
    params: C2dSubtractParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-subtract",
        params.get("subtract", None)
    ])
    return cargs


def c2d_supervoxel_params(
    supervoxel: str,
) -> C2dSupervoxelParametersTagged:
    """
    Build parameters.
    
    Args:
        supervoxel: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "supervoxel",
        "supervoxel": supervoxel,
    }
    return params


def c2d_supervoxel_cargs(
    params: C2dSupervoxelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-supervoxel",
        params.get("supervoxel", None)
    ])
    return cargs


def c2d_stretch_params(
    stretch: str,
) -> C2dStretchParametersTagged:
    """
    Build parameters.
    
    Args:
        stretch: -stretch: Stretch image intensities linearly\
            \
            Syntax: `-stretch <u1 u2 v1 v2> `\
            \
            Stretches the intensities in the image linearly, such that u1 maps\
            to v1 and u2 maps to v2. The linear transformation is applied to\
            all intensities in the image, whether inside the range or not. For\
            example, to map a floating point image with intensities in interval\
            (0,1) to the full range of an unsigned short image, use\
            \
            c3d input.img -stretch 0.0 1.0 0 65535 -type ushort -o output.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "stretch",
        "stretch": stretch,
    }
    return params


def c2d_stretch_cargs(
    params: C2dStretchParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-stretch",
        params.get("stretch", None)
    ])
    return cargs


def c2d_swapdim_params(
    swapdim: str,
) -> C2dSwapdimParametersTagged:
    """
    Build parameters.
    
    Args:
        swapdim: -swapdim: Reorder the coordinate axes of an image\
            \
            Syntax `-swapdim <code>`\
            \
            This command reorders the image axes (columns, rows, slices) to\
            achieve a desired transformation between voxel space and physical\
            space. The image remains exactly the same in physical space, but\
            the encoding of the voxels in memory and on disk is changed to\
            obtain the desired transformation. The transformation is specified\
            as a three-letter 'RAI' code, as in the '''-orient''' command.\
            \
            c3d img.nii -swapdim ASL -info -o out.nii\
            \
            \
            ### Commands: Image Processing\
            \
            The following commands invoke an action that is applied to images.\
            Unary commands apply the action to the last image on the stack,\
            binary commands apply to the last two images and so on. Commands\
            are affected by options, which are listed separately.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "swapdim",
        "swapdim": swapdim,
    }
    return params


def c2d_swapdim_cargs(
    params: C2dSwapdimParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-swapdim",
        params.get("swapdim", None)
    ])
    return cargs


def c2d_test_image_params(
    test_image: str,
) -> C2dTestImageParametersTagged:
    """
    Build parameters.
    
    Args:
        test_image: -test-image, -test-probe: Test condition\
            \
            Syntax: `-test-image [tolerance]` and `-test-probe <vector> <value>\
            [tolerance]`\
            \
            These advanced commands (with more to come in the future) are\
            primarily meant to allow testing of **c3d**. However, they can also\
            be used for flow control in shell scripts (e.g., **bash** shell).\
            The commands check a certain aspect of the **c3d** state and cause\
            the program to exit with either return code 0 if the test succeeded\
            or a non-zero return code if the test failed.\
            \
            **-test-image** tests if the last two images on the stack are\
            identical (both in terms of data and header). Returns 0 if the\
            images are identical. The optional tolerance parameter has default\
            value 1e-8.\
            \
            c3d input1.img input2.img -test-image\
            \
            **-test-probe** is similar to the **-probe** command. It tests if\
            the value of the last image on the stack at the position given by\
            **vector** is equal to the **test_value**. An optional tolerance\
            value may be specified, the default is 1e-8.\
            \
            c3d input1.img -test-probe 40x40x20vox 1.0 1e-6.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "test_image",
        "test_image": test_image,
    }
    return params


def c2d_test_image_cargs(
    params: C2dTestImageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-test-image",
        params.get("test_image", None)
    ])
    return cargs


def c2d_test_probe_params(
    test_probe: str,
) -> C2dTestProbeParametersTagged:
    """
    Build parameters.
    
    Args:
        test_probe: -test-image, -test-probe: Test condition\
            \
            Syntax: `-test-image [tolerance]` and `-test-probe <vector> <value>\
            [tolerance]`\
            \
            These advanced commands (with more to come in the future) are\
            primarily meant to allow testing of **c3d**. However, they can also\
            be used for flow control in shell scripts (e.g., **bash** shell).\
            The commands check a certain aspect of the **c3d** state and cause\
            the program to exit with either return code 0 if the test succeeded\
            or a non-zero return code if the test failed.\
            \
            **-test-image** tests if the last two images on the stack are\
            identical (both in terms of data and header). Returns 0 if the\
            images are identical. The optional tolerance parameter has default\
            value 1e-8.\
            \
            c3d input1.img input2.img -test-image\
            \
            **-test-probe** is similar to the **-probe** command. It tests if\
            the value of the last image on the stack at the position given by\
            **vector** is equal to the **test_value**. An optional tolerance\
            value may be specified, the default is 1e-8.\
            \
            c3d input1.img -test-probe 40x40x20vox 1.0 1e-6.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "test_probe",
        "test_probe": test_probe,
    }
    return params


def c2d_test_probe_cargs(
    params: C2dTestProbeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-test-probe",
        params.get("test_probe", None)
    ])
    return cargs


def c2d_threshold_params(
    threshold: str,
) -> C2dThresholdParametersTagged:
    """
    Build parameters.
    
    Args:
        threshold: -thresh, -threshold: Binary thresholding\
            \
            Syntax: `-thresh <u1 u2 vIn vOut> `\
            \
            Thresholds the image, setting voxels whose intensity is in the\
            range [u1,u2] to vIn and all other voxels to vOut. Values *u1* and\
            *u2* are intensity specifications (see below). This means that you\
            can supply values **inf** and **-inf** for u1 and u2 to construct a\
            one-sided threshold. You can also specify *u1* and *u2* as\
            percentiles.\
            c3d in.img -threshold -inf 128 1 0 -o out.img\
            c3d in.img -threshold 64 128 1 0 -o out.img\
            c3d in.img -threshold 20% 40% 1 0 -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "threshold",
        "threshold": threshold,
    }
    return params


def c2d_threshold_cargs(
    params: C2dThresholdParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-threshold",
        params.get("threshold", None)
    ])
    return cargs


def c2d_tile_params(
    tile: str,
) -> C2dTileParametersTagged:
    """
    Build parameters.
    
    Args:
        tile: -tile: Tile and stack multiple images into one\
            \
            Syntax: `-tile <tile_spec>`\
            \
            Tiles multiple images into a single image -- including stacking\
            slices into a 3D volume. The command takes all images on the stack\
            and produces a single tiled image. The **tile_spec** parameter can\
            either specify a coordinate axis (x, y, or z) along which to tile\
            the images, or a layout vector (e.g., **4x4**) which specifies the\
            tiling along each coordinate. Passing 0 for the last value in the\
            layout vector determines the value based on the number of images\
            currently loaded. For example, to create a 3D volume from a set of\
            slices, we use\
            \
            c3d slices*.png -tile z -o volume.nii.gz\
            \
            And to arrange the same 2D slices into a 2D montage of 4 images per\
            row, we would use the **c2d** command as follows:\
            \
            c2d slices*.png -tile 4x0 -type uchar -o montage.png.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "tile",
        "tile": tile,
    }
    return params


def c2d_tile_cargs(
    params: C2dTileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-tile",
        params.get("tile", None)
    ])
    return cargs


def c2d_trim_params(
    trim: str,
) -> C2dTrimParametersTagged:
    """
    Build parameters.
    
    Args:
        trim: -trim: Trim background region of image\
            \
            Syntax: `-trim <margin_vector>`\
            \
            Use this command to trim background in an image. When most of the\
            image is filled by background, this command will find the smallest\
            rectangular region that contains all of the non-background voxels\
            in the image. I will then expand this region by the margin of the\
            size specified, and return the resulting region as the new image.\
            For example, this command will trim an image, leaving a 5-voxel\
            margin of background values on all sides\
            \
            c3d in.img -trim 5vox -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "trim",
        "trim": trim,
    }
    return params


def c2d_trim_cargs(
    params: C2dTrimParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-trim",
        params.get("trim", None)
    ])
    return cargs


def c2d_trim_to_size_params(
    trim_to_size: str,
) -> C2dTrimToSizeParametersTagged:
    """
    Build parameters.
    
    Args:
        trim_to_size: -trim-to-size: Trim image to given size\
            \
            Syntax: `-trim-to-size <size_vector>`\
            \
            Like **-trim**, this command trims the background in an image.\
            However, instead of **-trim**, you specify the target size of the\
            output region. The actual region may be smaller if the specified\
            region falls outside the boundaries of the input image. For\
            example, if you want a 64x64x128 image containing all the\
            foreground pixels in your image, call\
            \
            c3d in.img -trim-to-size 64x64x128vox -o out.img.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "trim_to_size",
        "trim_to_size": trim_to_size,
    }
    return params


def c2d_trim_to_size_cargs(
    params: C2dTrimToSizeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-trim-to-size",
        params.get("trim_to_size", None)
    ])
    return cargs


def c2d_type_params(
    type_: str,
) -> C2dTypeParametersTagged:
    """
    Build parameters.
    
    Args:
        type_: -type: Specify pixel type for image output\
            \
            Syntax: `-type < char | uchar | short | ushort | int | uint | float\
            | double > `\
            \
            Specifies the pixel type for the output image. By default, images\
            are written in floating point (**float**) format. The type does not\
            affect how images are processed, only how they are saved.\
            \
            c3d image1.img -type short image2.img\
            \
            Some images require data in certain types. For example, to save PNG\
            images, uchar or ushort type must be specified.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "type",
        "type": type_,
    }
    return params


def c2d_type_cargs(
    params: C2dTypeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-type",
        params.get("type", None)
    ])
    return cargs


def c2d_verbose_params(
    verbose: str,
) -> C2dVerboseParametersTagged:
    """
    Build parameters.
    
    Args:
        verbose: -verbose: Enable verbose output of commands\
            \
            Syntax: `-verbose`\
            \
            Commands entered after the **-verbose** command will print\
            debugging information. This can be turned off with **-noverbose**.\
            \
            ### Parameter Specifications.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "verbose",
        "verbose": verbose,
    }
    return params


def c2d_verbose_cargs(
    params: C2dVerboseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-verbose",
        params.get("verbose", None)
    ])
    return cargs


def c2d_noverbose_params(
    noverbose: str,
) -> C2dNoverboseParametersTagged:
    """
    Build parameters.
    
    Args:
        noverbose: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "noverbose",
        "noverbose": noverbose,
    }
    return params


def c2d_noverbose_cargs(
    params: C2dNoverboseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-noverbose",
        params.get("noverbose", None)
    ])
    return cargs


def c2d_version_params(
    version: str,
) -> C2dVersionParametersTagged:
    """
    Build parameters.
    
    Args:
        version: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "version",
        "version": version,
    }
    return params


def c2d_version_cargs(
    params: C2dVersionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-version",
        params.get("version", None)
    ])
    return cargs


def c2d_vote_params(
    vote: str,
) -> C2dVoteParametersTagged:
    """
    Build parameters.
    
    Args:
        vote: -vote: Vote among images on the stack\
            \
            Syntax: `-vote `\
            \
            This command takes all images on the stack as arguments and at each\
            voxel *(i,j,k)* returns the index of the image for which the image\
            value at *(i,j,k)* is the greatest. This is most useful when\
            combining probability maps into a single label image. If images\
            prob1.img, prob2.img, etc. give the probability of label 1, 2, etc.\
            over the image domain, the **-vote** command will return the most\
            probable label at each voxel.\
            \
            c3d prob1.img prob2.img prob3.img -vote -type uchar -o label.img\
            \
            The value assigned to each image is based on its position from the\
            bottom of the stack, with zero indicating bottom-most image. In the\
            example above, the output image has values 0 for voxels where\
            prob1.img is highest, 1 for prob2.img and 2 for prob3.img. Also see\
            the related commands **-split** and **-merge**.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "vote",
        "vote": vote,
    }
    return params


def c2d_vote_cargs(
    params: C2dVoteParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-vote",
        params.get("vote", None)
    ])
    return cargs


def c2d_vote_mrf_params(
    vote_mrf: str,
) -> C2dVoteMrfParametersTagged:
    """
    Build parameters.
    
    Args:
        vote_mrf: -vote-mrf: Vote with Markov Random Field regularlization\
            \
            Syntax: `-vote-mrf <mode> <lambda>`\
            \
            This command is similar to **-vote** but it performs\
            regularlization using the Markov Random Field (MRF). This form of\
            regularization penalizes the total surface area of the segments in\
            the output. It results in more contiguous segments.\
            \
            The command takes all the images on the stack and assumes that they\
            are likelihood images corresponding to labels 1, 2, ... N. This\
            means that voxel **x** in image **k** holds the probability that\
            voxel **x** has label **k**. Likelihood images must be between 0\
            and 1. Any values outside of the range are interpreted as the voxel\
            being excluded from the voting. These voxels will be assigned label\
            0 in the output.\
            \
            The problem is encoded in the form of energy minimization,\
            consisting of a data term and a regularization term. The data term\
            encodes the cost (penalty) associated with assigning the voxel\
            **x** the label **k**. The parameter **mode** describes how\
            likelihood images are mapped to the cost.\
            \
            * `VOTES_AGAINST` or `VA`. This mode is useful when the command is\
            being used to combine several multi-label segmentations into a\
            single one. Each likelihood image is assumed to be the proportion\
            of segmentations that assign label *k* to voxel *x*. The data term\
            equals to the error associated to assining the voxel *k* label *x*.\
            This error is calculated as the sum of the likelihoods for all\
            labels at *x* minus the likelihood for *k* at *x*. Note that the\
            likelihoods do not have to add up to one, which may be interpreted\
            as missing data for some voxels.\
            \
            * `LOG_LIKELIHOOD` or `LL`. The cost for label *k* at voxel *x* is\
            the logarithm of the k-th likelihood image at *x*. This will assign\
            infinite cost when the likelihood is zero.\
            \
            The regularlization term is encoded as **lambda** times the total\
            number of neighboring voxels inside the mask (non-excluded region\
            of the image) that have different labels.\
            \
            The optmization problem is solved using the Alpha-Expansion graph\
            cut algorithm. Users of this functionality should cite the\
            following papers.\
            \
            1. Yuri Boykov, Olga Veksler, Ramin Zabih, *Efficient Approximate\
            Energy Minimization via Graph Cuts*, IEEE transactions on PAMI,\
            vol. 20, no. 12, p. 1222-1239, 2001.\
            \
            2. Vladimir Kolmogorov and Ramin Zabih, *What Energy Functions can\
            be Minimized via Graph Cuts?*, IEEE transactions on PAMI, vol. 26,\
            no. 2, p. 147-159, 2004.\
            \
            3. Yuri Boykov and Vladimir Kolmogorov, *An Experimental Comparison\
            of Min-Cut/Max-Flow Algorithms for Energy Minimization in Vision*,\
            IEEE transactions on PAMI, vol. 26, no. 9, p. 1124-1137, 2004.\
            \
            As noted in the open source implementation of the graph cuts\
            algorithms distributed under the General Public License, "This\
            software can be used only for research purposes, you should cite\
            the aforementioned paper in any resulting publication. If you wish\
            to use this software (or the algorithms described in the\
            aforementioned paper) for commercial purposes, you should be aware\
            that there is a US patent: R. Zabih, Y. Boykov, O. Veksler, *System\
            and method for fast approximate energy minimization via graph\
            cuts*, United Stated Patent 6,744,923, June 1, 2004.\
            \
            The example below illustrates applying **-vote-mrf** with a\
            user-specified mask. Voxels outside of the mask are first remapped\
            to NaN (not a number) and thus excluded from the MRF optimization\
            and given 0 label.\
            \
            c3d lhood01.nii lhood02.nii lhood03.nii mask.nii -popas M \\\
            -foreach -push M -replace 0 NaN -times -endfor \\\
            -vote-mrf VA 0.2 -o result.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "vote_mrf",
        "vote_mrf": vote_mrf,
    }
    return params


def c2d_vote_mrf_cargs(
    params: C2dVoteMrfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-vote-mrf",
        params.get("vote_mrf", None)
    ])
    return cargs


def c2d_vote_label_params(
    vote_label: str,
) -> C2dVoteLabelParametersTagged:
    """
    Build parameters.
    
    Args:
        vote_label: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "vote_label",
        "vote_label": vote_label,
    }
    return params


def c2d_vote_label_cargs(
    params: C2dVoteLabelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-vote-label",
        params.get("vote_label", None)
    ])
    return cargs


def c2d_voxel_sum_params(
    voxel_sum: str,
) -> C2dVoxelSumParametersTagged:
    """
    Build parameters.
    
    Args:
        voxel_sum: -voxel-sum: Print sum of all voxel intensities\
            \
            Syntax: `-voxel-sum `\
            \
            Print the sum of all voxels in the image.\
            \
            $ c3d image.img -voxel-sum\
            Voxel Sum: 200923123.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "voxel_sum",
        "voxel_sum": voxel_sum,
    }
    return params


def c2d_voxel_sum_cargs(
    params: C2dVoxelSumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-voxel-sum",
        params.get("voxel_sum", None)
    ])
    return cargs


def c2d_voxel_integral_params(
    voxel_integral: str,
) -> C2dVoxelIntegralParametersTagged:
    """
    Build parameters.
    
    Args:
        voxel_integral: -voxel-integral: Print volume integral of all voxel\
            intensities\
            \
            Syntax: `-voxel-integral`\
            \
            Like **-voxel-sum**, but multiplies the sum of voxel intensities by\
            voxel volume. This is useful for computing volumes of objects\
            represented by binary images. The result is in 'ml'.\
            \
            $ c3d image.img -voxel-integral\
            Voxel Integral: 2341.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "voxel_integral",
        "voxel_integral": voxel_integral,
    }
    return params


def c2d_voxel_integral_cargs(
    params: C2dVoxelIntegralParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-voxel-integral",
        params.get("voxel_integral", None)
    ])
    return cargs


def c2d_voxelwise_regression_params(
    voxelwise_regression: str,
) -> C2dVoxelwiseRegressionParametersTagged:
    """
    Build parameters.
    
    Args:
        voxelwise_regression: -voxreg, -voxelwise-regression: Regression\
            between two images\
            \
            Syntax: `-voxreg regression_order `\
            \
            Perform regression between corresponding voxels in two images. This\
            command takes two images as input, X and Y. This command finds\
            parameters b\\_0, b\\_1, ..., b\\_k, such that Y is best\
            approximated by b\\_0 + b\\_1 * X + b\\_2 * X^2 + ... + b_k * X^k.\
            Here is an example of linear regression.\
            \
            $ c3d Y.nii X.nii -voxreg 2\
            REGCOEFF[0] = 5.56935\
            REGCOEFF[1] = 0.844024\
            \
            $ c3d Y.nii X.nii -scale 0.844024 -shift 5.56935 -voxreg 2\
            REGCOEFF[0] = 0\
            REGCOEFF[1] = 1.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "voxelwise_regression",
        "voxelwise_regression": voxelwise_regression,
    }
    return params


def c2d_voxelwise_regression_cargs(
    params: C2dVoxelwiseRegressionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-voxelwise-regression",
        params.get("voxelwise_regression", None)
    ])
    return cargs


def c2d_warp_params(
    warp: str,
) -> C2dWarpParametersTagged:
    """
    Build parameters.
    
    Args:
        warp: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "warp",
        "warp": warp,
    }
    return params


def c2d_warp_cargs(
    params: C2dWarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-warp",
        params.get("warp", None)
    ])
    return cargs


def c2d_warp_label_params(
    warp_label: str,
) -> C2dWarpLabelParametersTagged:
    """
    Build parameters.
    
    Args:
        warp_label: No description found.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "warp_label",
        "warp_label": warp_label,
    }
    return params


def c2d_warp_label_cargs(
    params: C2dWarpLabelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-warp-label",
        params.get("warp_label", None)
    ])
    return cargs


def c2d_wrap_params(
    wrap: str,
) -> C2dWrapParametersTagged:
    """
    Build parameters.
    
    Args:
        wrap: -wrap: Wrap (rotate) image\
            \
            Syntax: `-wrap <vector> `\
            \
            Wrap image around one or more voxel dimensions. Wrapping is\
            typically used to correct for MRI wrap-around artifacts. The vector\
            must have integer components, possibly negative. For example,\
            \
            c3d badmri.nii.gz -wrap 0x20x0 -o fixedmri.nii.gz\
            \
            will wrap the image in the second voxel dimension by 20 voxels\
            (i.e., voxel at 10x40x20 will me moved to the position 10x20x20).\
            \
            \
            ### Commands: Options and Parameters\
            \
            Options change the behavior of commands that *appear later on the\
            command line*. This is very important. Specifying options after the\
            command will have no effect.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "wrap",
        "wrap": wrap,
    }
    return params


def c2d_wrap_cargs(
    params: C2dWrapParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-wrap",
        params.get("wrap", None)
    ])
    return cargs


def c2d_weighted_sum_params(
    weighted_sum: str,
) -> C2dWeightedSumParametersTagged:
    """
    Build parameters.
    
    Args:
        weighted_sum: -wsum, -weighted-sum: Weighed sum of images with constant\
            weights\
            \
            Syntax: `-wsum weight1 weight2 ... weightN `\
            \
            Computes weighted sum of the last N images on the stack.\
            \
            c3d image1.nii image2.nii image3.nii -wsum 0.2 0.7 0.1 -o wsum.nii\
            \
            This command is particularly useful for combining components in a\
            multicomponent image. For example, for an RGB image, we can convert\
            it to grayscale (using [ImageMagick][13] formula) as follows:\
            \
            c3d -mcs rgb.nii -wsum 0.29900 0.58700 0.11400 -o gray.nii.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "weighted_sum",
        "weighted_sum": weighted_sum,
    }
    return params


def c2d_weighted_sum_cargs(
    params: C2dWeightedSumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-weighted-sum",
        params.get("weighted_sum", None)
    ])
    return cargs


def c2d_weighted_sum_voxelwise_params(
    weighted_sum_voxelwise: str,
) -> C2dWeightedSumVoxelwiseParametersTagged:
    """
    Build parameters.
    
    Args:
        weighted_sum_voxelwise: -wsv, -weighed-sum-voxelwise: Weighed sum of\
            images with spatially varying weights\
            \
            Syntax: `-wsv `\
            \
            Computes weighted sum of N weight images and N scalar images. The\
            images must be interleaved on the stack. All images on the stack\
            are used.\
            \
            c3d weight1.nii image1.nii weight2.nii image2.nii weight3.nii\
            image3.nii -wsv -o mysum.nii.gz\
            \
            The **-reorder** command can simplify loading the images:\
            \
            c3d weight*.nii image*.nii -reorder 0.5 -wsv -o mysum.nii.gz\
            \
            ### Commands: Image Header Manipulation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "weighted_sum_voxelwise",
        "weighted_sum_voxelwise": weighted_sum_voxelwise,
    }
    return params


def c2d_weighted_sum_voxelwise_cargs(
    params: C2dWeightedSumVoxelwiseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.extend([
        "-weighted-sum-voxelwise",
        params.get("weighted_sum_voxelwise", None)
    ])
    return cargs


class C2dOutputs(typing.NamedTuple):
    """
    Output object returned when calling `C2dParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    operations: list[typing.Union[C2dOutputOutputs]]
    """Outputs from `C2dOutputParameters`.This is a list of outputs with the
    same length and order as the inputs."""


def c2d_params(
    input_: list[InputPathType],
    operations: list[typing.Union[C2dAccumParametersTagged, C2dAcosParametersTagged, C2dAddParametersTagged, C2dAlignLandmarksParametersTagged, C2dAnisotropicDiffusionParametersTagged, C2dAntialiasParametersTagged, C2dSetParametersTagged, C2dAsinParametersTagged, C2dAtan2ParametersTagged, C2dBackgroundParametersTagged, C2dN4BiasCorrectionParametersTagged, C2dBinarizeParametersTagged, C2dCannyParametersTagged, C2dCeilParametersTagged, C2dCentroidParametersTagged, C2dCentroidMarkParametersTagged, C2dConnectedComponentsParametersTagged, C2dClearParametersTagged, C2dClipParametersTagged, C2dColorMapParametersTagged, C2dCompressParametersTagged, C2dNoCompressParametersTagged, C2dConvParametersTagged, C2dCoordinateMapVoxelParametersTagged, C2dCoordinateMapPhysicalParametersTagged, C2dCopyTransformParametersTagged, C2dCosParametersTagged, C2dCreateParametersTagged, C2dDicomSeriesListParametersTagged, C2dDicomSeriesReadParametersTagged, C2dDilateParametersTagged, C2dDivideParametersTagged, C2dDuplicateParametersTagged, C2dEndaccumParametersTagged, C2dEndforParametersTagged, C2dErodeParametersTagged, C2dErfParametersTagged, C2dExpParametersTagged, C2dExportPatchesParametersTagged, C2dExportPatchesAugParametersTagged, C2dExtrudeSegParametersTagged, C2dFillBackgroundWithNoiseParametersTagged, C2dFftParametersTagged, C2dFlipParametersTagged, C2dFloorParametersTagged, C2dForeachParametersTagged, C2dForeachCompParametersTagged, C2dGlmParametersTagged, C2dGradientParametersTagged, C2dHelpParametersTagged, C2dHolefillParametersTagged, C2dHessianEigenvaluesParametersTagged, C2dHessianObjectnessParametersTagged, C2dHistogramMatchParametersTagged, C2dInfoParametersTagged, C2dInfoFullParametersTagged, C2dInsertParametersTagged, C2dInterpolationParametersTagged, C2dIterationsParametersTagged, C2dLabelOverlapParametersTagged, C2dLabelStatisticsParametersTagged, C2dLandmarksToSpheresParametersTagged, C2dLaplacianParametersTagged, C2dLevelsetParametersTagged, C2dLevelsetCurvatureParametersTagged, C2dLevelsetAdvectionParametersTagged, C2dLogParametersTagged, C2dLog10ParametersTagged, C2dManualParametersTagged, C2dMatchBoundingBoxParametersTagged, C2dMaximumParametersTagged, C2dMulticomponentSplitParametersTagged, C2dMeanParametersTagged, C2dMedianFilterParametersTagged, C2dMergeParametersTagged, C2dMeanFilterParametersTagged, C2dMutualInfoParametersTagged, C2dMinimumParametersTagged, C2dMixtureModelParametersTagged, C2dMomentsParametersTagged, C2dMattesMutualInfoParametersTagged, C2dMeanSquareParametersTagged, C2dMultiplyParametersTagged, C2dNormalizedCrossCorrelationParametersTagged, C2dNormalizedCorrelationParametersTagged, C2dNormalizedMutualInfoParametersTagged, C2dNoiseGaussianParametersTagged, C2dNoisePoissonParametersTagged, C2dNoiseSpeckleParametersTagged, C2dNoiseSaltPepperParametersTagged, C2dNoMulticomponentSplitParametersTagged, C2dNormalizeLocalWindowParametersTagged, C2dNormpdfParametersTagged, C2dNoroundParametersTagged, C2dNospmParametersTagged, C2dOutputParametersTagged, C2dOutputMulticomponentParametersTagged, C2dOutputMultipleMulticomponentParametersTagged, C2dOrientParametersTagged, C2dOutputMultipleParametersTagged, C2dOrient1ParametersTagged, C2dOriginParametersTagged, C2dOriginVoxelParametersTagged, C2dOriginVoxelCoordParametersTagged, C2dOverlapParametersTagged, C2dOverlayLabelImageParametersTagged, C2dPadParametersTagged, C2dPadToParametersTagged, C2dPcaParametersTagged, C2dPercentIntensityModeParametersTagged, C2dPixelParametersTagged, C2dPopParametersTagged, C2dPopasParametersTagged, C2dProbeParametersTagged, C2dPushParametersTagged, C2dRankParametersTagged, C2dReciprocalParametersTagged, C2dRegionParametersTagged, C2dReorderParametersTagged, C2dRetainLabelsParametersTagged, C2dRfApplyParametersTagged, C2dRfTrainParametersTagged, C2dRfParamPatchParametersTagged, C2dRfParamUsexyzParametersTagged, C2dRfParamNousexyzParametersTagged, C2dRfParamNtreesParametersTagged, C2dRfParamTreedepthParametersTagged, C2dSetSformParametersTagged, C2dReplaceParametersTagged, C2dResampleParametersTagged, C2dResampleIsoParametersTagged, C2dResampleMmParametersTagged, C2dResliceItkParametersTagged, C2dResliceMatrixParametersTagged, C2dResliceIdentityParametersTagged, C2dRgb2hsvParametersTagged, C2dRmsParametersTagged, C2dRoundParametersTagged, C2dScaleParametersTagged, C2dSetSform1ParametersTagged, C2dSinParametersTagged, C2dSliceParametersTagged, C2dSliceAllParametersTagged, C2dSharpenParametersTagged, C2dShiftParametersTagged, C2dSignedDistanceTransformParametersTagged, C2dSmoothParametersTagged, C2dSmoothFastParametersTagged, C2dSpacingParametersTagged, C2dSplitParametersTagged, C2dSqrtParametersTagged, C2dStapleParametersTagged, C2dStructureTensorEigenvaluesParametersTagged, C2dSpmParametersTagged, C2dSubtractParametersTagged, C2dSupervoxelParametersTagged, C2dStretchParametersTagged, C2dSwapdimParametersTagged, C2dTestImageParametersTagged, C2dTestProbeParametersTagged, C2dThresholdParametersTagged, C2dTileParametersTagged, C2dTrimParametersTagged, C2dTrimToSizeParametersTagged, C2dTypeParametersTagged, C2dVerboseParametersTagged, C2dNoverboseParametersTagged, C2dVersionParametersTagged, C2dVoteParametersTagged, C2dVoteMrfParametersTagged, C2dVoteLabelParametersTagged, C2dVoxelSumParametersTagged, C2dVoxelIntegralParametersTagged, C2dVoxelwiseRegressionParametersTagged, C2dWarpParametersTagged, C2dWarpLabelParametersTagged, C2dWrapParametersTagged, C2dWeightedSumParametersTagged, C2dWeightedSumVoxelwiseParametersTagged]],
    output: str,
) -> C2dParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: The input image to process.
        operations: The operations to perform.
        output: The output image.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "c3d/c2d",
        "input": input_,
        "operations": operations,
        "output": output,
    }
    return params


def c2d_cargs(
    params: C2dParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("c2d")
    cargs.append(" ".join([execution.input_file(f) for f in params.get("input", None)]))
    cargs.extend([a for c in [c2d_operations_cargs_dyn_fn(s["@type"])(s, execution) for s in params.get("operations", None)] for a in c])
    cargs.extend([
        "-o",
        params.get("output", None)
    ])
    return cargs


def c2d_outputs(
    params: C2dParameters,
    execution: Execution,
) -> C2dOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = C2dOutputs(
        root=execution.output_file("."),
        operations=[c2d_operations_outputs_dyn_fn(i["@type"])(i, execution) if c2d_operations_outputs_dyn_fn(i["@type"]) else None for i in params.get("operations")],
    )
    return ret


def c2d_execute(
    params: C2dParameters,
    runner: Runner | None = None,
) -> C2dOutputs:
    """
    c2d
    
    c2d is a command-line tool for medical image processing.
    
    Author: Convert3D Developers
    
    URL: http://www.itksnap.org/pmwiki/pmwiki.php?n=Convert3D.Convert3D
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `C2dOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(C2D_METADATA)
    params = execution.params(params)
    cargs = c2d_cargs(params, execution)
    ret = c2d_outputs(params, execution)
    execution.run(cargs)
    return ret


def c2d(
    input_: list[InputPathType],
    operations: list[typing.Union[C2dAccumParametersTagged, C2dAcosParametersTagged, C2dAddParametersTagged, C2dAlignLandmarksParametersTagged, C2dAnisotropicDiffusionParametersTagged, C2dAntialiasParametersTagged, C2dSetParametersTagged, C2dAsinParametersTagged, C2dAtan2ParametersTagged, C2dBackgroundParametersTagged, C2dN4BiasCorrectionParametersTagged, C2dBinarizeParametersTagged, C2dCannyParametersTagged, C2dCeilParametersTagged, C2dCentroidParametersTagged, C2dCentroidMarkParametersTagged, C2dConnectedComponentsParametersTagged, C2dClearParametersTagged, C2dClipParametersTagged, C2dColorMapParametersTagged, C2dCompressParametersTagged, C2dNoCompressParametersTagged, C2dConvParametersTagged, C2dCoordinateMapVoxelParametersTagged, C2dCoordinateMapPhysicalParametersTagged, C2dCopyTransformParametersTagged, C2dCosParametersTagged, C2dCreateParametersTagged, C2dDicomSeriesListParametersTagged, C2dDicomSeriesReadParametersTagged, C2dDilateParametersTagged, C2dDivideParametersTagged, C2dDuplicateParametersTagged, C2dEndaccumParametersTagged, C2dEndforParametersTagged, C2dErodeParametersTagged, C2dErfParametersTagged, C2dExpParametersTagged, C2dExportPatchesParametersTagged, C2dExportPatchesAugParametersTagged, C2dExtrudeSegParametersTagged, C2dFillBackgroundWithNoiseParametersTagged, C2dFftParametersTagged, C2dFlipParametersTagged, C2dFloorParametersTagged, C2dForeachParametersTagged, C2dForeachCompParametersTagged, C2dGlmParametersTagged, C2dGradientParametersTagged, C2dHelpParametersTagged, C2dHolefillParametersTagged, C2dHessianEigenvaluesParametersTagged, C2dHessianObjectnessParametersTagged, C2dHistogramMatchParametersTagged, C2dInfoParametersTagged, C2dInfoFullParametersTagged, C2dInsertParametersTagged, C2dInterpolationParametersTagged, C2dIterationsParametersTagged, C2dLabelOverlapParametersTagged, C2dLabelStatisticsParametersTagged, C2dLandmarksToSpheresParametersTagged, C2dLaplacianParametersTagged, C2dLevelsetParametersTagged, C2dLevelsetCurvatureParametersTagged, C2dLevelsetAdvectionParametersTagged, C2dLogParametersTagged, C2dLog10ParametersTagged, C2dManualParametersTagged, C2dMatchBoundingBoxParametersTagged, C2dMaximumParametersTagged, C2dMulticomponentSplitParametersTagged, C2dMeanParametersTagged, C2dMedianFilterParametersTagged, C2dMergeParametersTagged, C2dMeanFilterParametersTagged, C2dMutualInfoParametersTagged, C2dMinimumParametersTagged, C2dMixtureModelParametersTagged, C2dMomentsParametersTagged, C2dMattesMutualInfoParametersTagged, C2dMeanSquareParametersTagged, C2dMultiplyParametersTagged, C2dNormalizedCrossCorrelationParametersTagged, C2dNormalizedCorrelationParametersTagged, C2dNormalizedMutualInfoParametersTagged, C2dNoiseGaussianParametersTagged, C2dNoisePoissonParametersTagged, C2dNoiseSpeckleParametersTagged, C2dNoiseSaltPepperParametersTagged, C2dNoMulticomponentSplitParametersTagged, C2dNormalizeLocalWindowParametersTagged, C2dNormpdfParametersTagged, C2dNoroundParametersTagged, C2dNospmParametersTagged, C2dOutputParametersTagged, C2dOutputMulticomponentParametersTagged, C2dOutputMultipleMulticomponentParametersTagged, C2dOrientParametersTagged, C2dOutputMultipleParametersTagged, C2dOrient1ParametersTagged, C2dOriginParametersTagged, C2dOriginVoxelParametersTagged, C2dOriginVoxelCoordParametersTagged, C2dOverlapParametersTagged, C2dOverlayLabelImageParametersTagged, C2dPadParametersTagged, C2dPadToParametersTagged, C2dPcaParametersTagged, C2dPercentIntensityModeParametersTagged, C2dPixelParametersTagged, C2dPopParametersTagged, C2dPopasParametersTagged, C2dProbeParametersTagged, C2dPushParametersTagged, C2dRankParametersTagged, C2dReciprocalParametersTagged, C2dRegionParametersTagged, C2dReorderParametersTagged, C2dRetainLabelsParametersTagged, C2dRfApplyParametersTagged, C2dRfTrainParametersTagged, C2dRfParamPatchParametersTagged, C2dRfParamUsexyzParametersTagged, C2dRfParamNousexyzParametersTagged, C2dRfParamNtreesParametersTagged, C2dRfParamTreedepthParametersTagged, C2dSetSformParametersTagged, C2dReplaceParametersTagged, C2dResampleParametersTagged, C2dResampleIsoParametersTagged, C2dResampleMmParametersTagged, C2dResliceItkParametersTagged, C2dResliceMatrixParametersTagged, C2dResliceIdentityParametersTagged, C2dRgb2hsvParametersTagged, C2dRmsParametersTagged, C2dRoundParametersTagged, C2dScaleParametersTagged, C2dSetSform1ParametersTagged, C2dSinParametersTagged, C2dSliceParametersTagged, C2dSliceAllParametersTagged, C2dSharpenParametersTagged, C2dShiftParametersTagged, C2dSignedDistanceTransformParametersTagged, C2dSmoothParametersTagged, C2dSmoothFastParametersTagged, C2dSpacingParametersTagged, C2dSplitParametersTagged, C2dSqrtParametersTagged, C2dStapleParametersTagged, C2dStructureTensorEigenvaluesParametersTagged, C2dSpmParametersTagged, C2dSubtractParametersTagged, C2dSupervoxelParametersTagged, C2dStretchParametersTagged, C2dSwapdimParametersTagged, C2dTestImageParametersTagged, C2dTestProbeParametersTagged, C2dThresholdParametersTagged, C2dTileParametersTagged, C2dTrimParametersTagged, C2dTrimToSizeParametersTagged, C2dTypeParametersTagged, C2dVerboseParametersTagged, C2dNoverboseParametersTagged, C2dVersionParametersTagged, C2dVoteParametersTagged, C2dVoteMrfParametersTagged, C2dVoteLabelParametersTagged, C2dVoxelSumParametersTagged, C2dVoxelIntegralParametersTagged, C2dVoxelwiseRegressionParametersTagged, C2dWarpParametersTagged, C2dWarpLabelParametersTagged, C2dWrapParametersTagged, C2dWeightedSumParametersTagged, C2dWeightedSumVoxelwiseParametersTagged]],
    output: str,
    runner: Runner | None = None,
) -> C2dOutputs:
    """
    c2d
    
    c2d is a command-line tool for medical image processing.
    
    Author: Convert3D Developers
    
    URL: http://www.itksnap.org/pmwiki/pmwiki.php?n=Convert3D.Convert3D
    
    Args:
        input_: The input image to process.
        operations: The operations to perform.
        output: The output image.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `C2dOutputs`).
    """
    params = c2d_params(
        input_=input_,
        operations=operations,
        output=output,
    )
    return c2d_execute(params, runner)


__all__ = [
    "C2D_METADATA",
    "C2dOutputOutputs",
    "C2dOutputs",
    "c2d",
    "c2d__help_params",
    "c2d_accum_params",
    "c2d_acos_params",
    "c2d_add_params",
    "c2d_align_landmarks_params",
    "c2d_anisotropic_diffusion_params",
    "c2d_antialias_params",
    "c2d_asin_params",
    "c2d_atan2_params",
    "c2d_background_params",
    "c2d_binarize_params",
    "c2d_canny_params",
    "c2d_ceil_params",
    "c2d_centroid_mark_params",
    "c2d_centroid_params",
    "c2d_clear_params",
    "c2d_clip_params",
    "c2d_color_map_params",
    "c2d_compress_params",
    "c2d_connected_components_params",
    "c2d_conv_params",
    "c2d_coordinate_map_physical_params",
    "c2d_coordinate_map_voxel_params",
    "c2d_copy_transform_params",
    "c2d_cos_params",
    "c2d_create_params",
    "c2d_dicom_series_list_params",
    "c2d_dicom_series_read_params",
    "c2d_dilate_params",
    "c2d_divide_params",
    "c2d_duplicate_params",
    "c2d_endaccum_params",
    "c2d_endfor_params",
    "c2d_erf_params",
    "c2d_erode_params",
    "c2d_execute",
    "c2d_exp_params",
    "c2d_export_patches_aug_params",
    "c2d_export_patches_params",
    "c2d_extrude_seg_params",
    "c2d_fft_params",
    "c2d_fill_background_with_noise_params",
    "c2d_flip_params",
    "c2d_floor_params",
    "c2d_foreach_comp_params",
    "c2d_foreach_params",
    "c2d_glm_params",
    "c2d_gradient_params",
    "c2d_hessian_eigenvalues_params",
    "c2d_hessian_objectness_params",
    "c2d_histogram_match_params",
    "c2d_holefill_params",
    "c2d_info_full_params",
    "c2d_info_params",
    "c2d_insert_params",
    "c2d_interpolation_params",
    "c2d_iterations_params",
    "c2d_label_overlap_params",
    "c2d_label_statistics_params",
    "c2d_landmarks_to_spheres_params",
    "c2d_laplacian_params",
    "c2d_levelset_advection_params",
    "c2d_levelset_curvature_params",
    "c2d_levelset_params",
    "c2d_log10_params",
    "c2d_log_params",
    "c2d_manual_params",
    "c2d_match_bounding_box_params",
    "c2d_mattes_mutual_info_params",
    "c2d_maximum_params",
    "c2d_mean_filter_params",
    "c2d_mean_params",
    "c2d_mean_square_params",
    "c2d_median_filter_params",
    "c2d_merge_params",
    "c2d_minimum_params",
    "c2d_mixture_model_params",
    "c2d_moments_params",
    "c2d_multicomponent_split_params",
    "c2d_multiply_params",
    "c2d_mutual_info_params",
    "c2d_n4_bias_correction_params",
    "c2d_no_compress_params",
    "c2d_no_multicomponent_split_params",
    "c2d_noise_gaussian_params",
    "c2d_noise_poisson_params",
    "c2d_noise_salt_pepper_params",
    "c2d_noise_speckle_params",
    "c2d_normalize_local_window_params",
    "c2d_normalized_correlation_params",
    "c2d_normalized_cross_correlation_params",
    "c2d_normalized_mutual_info_params",
    "c2d_normpdf_params",
    "c2d_noround_params",
    "c2d_nospm_params",
    "c2d_noverbose_params",
    "c2d_orient_1_params",
    "c2d_orient_params",
    "c2d_origin_params",
    "c2d_origin_voxel_coord_params",
    "c2d_origin_voxel_params",
    "c2d_output_multicomponent_params",
    "c2d_output_multiple_multicomponent_params",
    "c2d_output_multiple_params",
    "c2d_output_params",
    "c2d_overlap_params",
    "c2d_overlay_label_image_params",
    "c2d_pad_params",
    "c2d_pad_to_params",
    "c2d_params",
    "c2d_pca_params",
    "c2d_percent_intensity_mode_params",
    "c2d_pixel_params",
    "c2d_pop_params",
    "c2d_popas_params",
    "c2d_probe_params",
    "c2d_push_params",
    "c2d_rank_params",
    "c2d_reciprocal_params",
    "c2d_region_params",
    "c2d_reorder_params",
    "c2d_replace_params",
    "c2d_resample_iso_params",
    "c2d_resample_mm_params",
    "c2d_resample_params",
    "c2d_reslice_identity_params",
    "c2d_reslice_itk_params",
    "c2d_reslice_matrix_params",
    "c2d_retain_labels_params",
    "c2d_rf_apply_params",
    "c2d_rf_param_nousexyz_params",
    "c2d_rf_param_ntrees_params",
    "c2d_rf_param_patch_params",
    "c2d_rf_param_treedepth_params",
    "c2d_rf_param_usexyz_params",
    "c2d_rf_train_params",
    "c2d_rgb2hsv_params",
    "c2d_rms_params",
    "c2d_round_params",
    "c2d_scale_params",
    "c2d_set_params",
    "c2d_set_sform_1_params",
    "c2d_set_sform_params",
    "c2d_sharpen_params",
    "c2d_shift_params",
    "c2d_signed_distance_transform_params",
    "c2d_sin_params",
    "c2d_slice_all_params",
    "c2d_slice_params",
    "c2d_smooth_fast_params",
    "c2d_smooth_params",
    "c2d_spacing_params",
    "c2d_split_params",
    "c2d_spm_params",
    "c2d_sqrt_params",
    "c2d_staple_params",
    "c2d_stretch_params",
    "c2d_structure_tensor_eigenvalues_params",
    "c2d_subtract_params",
    "c2d_supervoxel_params",
    "c2d_swapdim_params",
    "c2d_test_image_params",
    "c2d_test_probe_params",
    "c2d_threshold_params",
    "c2d_tile_params",
    "c2d_trim_params",
    "c2d_trim_to_size_params",
    "c2d_type_params",
    "c2d_verbose_params",
    "c2d_version_params",
    "c2d_vote_label_params",
    "c2d_vote_mrf_params",
    "c2d_vote_params",
    "c2d_voxel_integral_params",
    "c2d_voxel_sum_params",
    "c2d_voxelwise_regression_params",
    "c2d_warp_label_params",
    "c2d_warp_params",
    "c2d_weighted_sum_params",
    "c2d_weighted_sum_voxelwise_params",
    "c2d_wrap_params",
]
