# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANATOMI_CUTS_UTILS_METADATA = Metadata(
    id="5b69d917d40aa2d42c8485fb374b3003d3556d0b.boutiques",
    name="anatomiCutsUtils",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


AnatomiCutsUtilsParameters = typing.TypedDict('AnatomiCutsUtilsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/anatomiCutsUtils"]],
    "modules": typing.NotRequired[list[str] | None],
})
AnatomiCutsUtilsParametersTagged = typing.TypedDict('AnatomiCutsUtilsParametersTagged', {
    "@type": typing.Literal["freesurfer/anatomiCutsUtils"],
    "modules": typing.NotRequired[list[str] | None],
})


class AnatomiCutsUtilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AnatomiCutsUtilsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def anatomi_cuts_utils_params(
    modules: list[str] | None = None,
) -> AnatomiCutsUtilsParametersTagged:
    """
    Build parameters.
    
    Args:
        modules: Specify the modules to import for processing. Ensure necessary\
            modules like 'graph_tools' are installed.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/anatomiCutsUtils",
    }
    if modules is not None:
        params["modules"] = modules
    return params


def anatomi_cuts_utils_cargs(
    params: AnatomiCutsUtilsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("anatomiCutsUtils")
    if params.get("modules", None) is not None:
        cargs.extend(params.get("modules", None))
    return cargs


def anatomi_cuts_utils_outputs(
    params: AnatomiCutsUtilsParameters,
    execution: Execution,
) -> AnatomiCutsUtilsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AnatomiCutsUtilsOutputs(
        root=execution.output_file("."),
    )
    return ret


def anatomi_cuts_utils_execute(
    params: AnatomiCutsUtilsParameters,
    runner: Runner | None = None,
) -> AnatomiCutsUtilsOutputs:
    """
    anatomiCutsUtils
    
    A tool for anatomical segmentation using graph-based methods.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AnatomiCutsUtilsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANATOMI_CUTS_UTILS_METADATA)
    params = execution.params(params)
    cargs = anatomi_cuts_utils_cargs(params, execution)
    ret = anatomi_cuts_utils_outputs(params, execution)
    execution.run(cargs)
    return ret


def anatomi_cuts_utils(
    modules: list[str] | None = None,
    runner: Runner | None = None,
) -> AnatomiCutsUtilsOutputs:
    """
    anatomiCutsUtils
    
    A tool for anatomical segmentation using graph-based methods.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        modules: Specify the modules to import for processing. Ensure necessary\
            modules like 'graph_tools' are installed.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AnatomiCutsUtilsOutputs`).
    """
    params = anatomi_cuts_utils_params(
        modules=modules,
    )
    return anatomi_cuts_utils_execute(params, runner)


__all__ = [
    "ANATOMI_CUTS_UTILS_METADATA",
    "AnatomiCutsUtilsOutputs",
    "anatomi_cuts_utils",
    "anatomi_cuts_utils_execute",
    "anatomi_cuts_utils_params",
]
