# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA = Metadata(
    id="f7c05eb76747f2bed1da5f76ca71a39e0e609b4c.boutiques",
    name="AntsN4BiasFieldCorrectionFs",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


AntsN4BiasFieldCorrectionFsParameters = typing.TypedDict('AntsN4BiasFieldCorrectionFsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/AntsN4BiasFieldCorrectionFs"]],
    "input_file": InputPathType,
    "output_file": str,
    "mask_file": typing.NotRequired[InputPathType | None],
    "shrink_factor": typing.NotRequired[int | None],
    "iterations": typing.NotRequired[list[float] | None],
    "output_dtype": typing.NotRequired[str | None],
    "replace_zeros": typing.NotRequired[str | None],
})
AntsN4BiasFieldCorrectionFsParametersTagged = typing.TypedDict('AntsN4BiasFieldCorrectionFsParametersTagged', {
    "@type": typing.Literal["freesurfer/AntsN4BiasFieldCorrectionFs"],
    "input_file": InputPathType,
    "output_file": str,
    "mask_file": typing.NotRequired[InputPathType | None],
    "shrink_factor": typing.NotRequired[int | None],
    "iterations": typing.NotRequired[list[float] | None],
    "output_dtype": typing.NotRequired[str | None],
    "replace_zeros": typing.NotRequired[str | None],
})


class AntsN4BiasFieldCorrectionFsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AntsN4BiasFieldCorrectionFsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    corrected_output_file: OutputPathType
    """Corrected volume output file."""


def ants_n4_bias_field_correction_fs_params(
    input_file: InputPathType,
    output_file: str,
    mask_file: InputPathType | None = None,
    shrink_factor: int | None = None,
    iterations: list[float] | None = None,
    output_dtype: str | None = None,
    replace_zeros: str | None = None,
) -> AntsN4BiasFieldCorrectionFsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input volume file.
        output_file: Corrected output volume file.
        mask_file: Use image mask during correction.
        shrink_factor: Resample factor to decrease computation time. Default is\
            4.
        iterations: Number of resolutions and max iterations per resolution.\
            Default is `50 50 50 50`, which indicates 4 fitting levels with 50\
            iterations each.
        output_dtype: Corrected output data type. Can be float, uchar, or int.\
            Default is float.
        replace_zeros: Replace 0s with offset + scale*rand(). Values will be\
            remasked in the output if remask=1.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/AntsN4BiasFieldCorrectionFs",
        "input_file": input_file,
        "output_file": output_file,
    }
    if mask_file is not None:
        params["mask_file"] = mask_file
    if shrink_factor is not None:
        params["shrink_factor"] = shrink_factor
    if iterations is not None:
        params["iterations"] = iterations
    if output_dtype is not None:
        params["output_dtype"] = output_dtype
    if replace_zeros is not None:
        params["replace_zeros"] = replace_zeros
    return params


def ants_n4_bias_field_correction_fs_cargs(
    params: AntsN4BiasFieldCorrectionFsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("AntsN4BiasFieldCorrectionFs")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("shrink_factor", None) is not None:
        cargs.extend([
            "-s",
            str(params.get("shrink_factor", None))
        ])
    if params.get("iterations", None) is not None:
        cargs.extend([
            "-t",
            *map(str, params.get("iterations", None))
        ])
    if params.get("output_dtype", None) is not None:
        cargs.extend([
            "-d",
            params.get("output_dtype", None)
        ])
    if params.get("replace_zeros", None) is not None:
        cargs.extend([
            "-r",
            params.get("replace_zeros", None)
        ])
    return cargs


def ants_n4_bias_field_correction_fs_outputs(
    params: AntsN4BiasFieldCorrectionFsParameters,
    execution: Execution,
) -> AntsN4BiasFieldCorrectionFsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AntsN4BiasFieldCorrectionFsOutputs(
        root=execution.output_file("."),
        corrected_output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def ants_n4_bias_field_correction_fs_execute(
    params: AntsN4BiasFieldCorrectionFsParameters,
    runner: Runner | None = None,
) -> AntsN4BiasFieldCorrectionFsOutputs:
    """
    AntsN4BiasFieldCorrectionFs
    
    Runs N4 (nonparameteric, nonuniform normalization) retrospective bias
    correction on an image. This program wraps the AntsN4BiasFieldCorrection
    utility available in the ANTs package.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsN4BiasFieldCorrectionFsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA)
    params = execution.params(params)
    cargs = ants_n4_bias_field_correction_fs_cargs(params, execution)
    ret = ants_n4_bias_field_correction_fs_outputs(params, execution)
    execution.run(cargs)
    return ret


def ants_n4_bias_field_correction_fs(
    input_file: InputPathType,
    output_file: str,
    mask_file: InputPathType | None = None,
    shrink_factor: int | None = None,
    iterations: list[float] | None = None,
    output_dtype: str | None = None,
    replace_zeros: str | None = None,
    runner: Runner | None = None,
) -> AntsN4BiasFieldCorrectionFsOutputs:
    """
    AntsN4BiasFieldCorrectionFs
    
    Runs N4 (nonparameteric, nonuniform normalization) retrospective bias
    correction on an image. This program wraps the AntsN4BiasFieldCorrection
    utility available in the ANTs package.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input volume file.
        output_file: Corrected output volume file.
        mask_file: Use image mask during correction.
        shrink_factor: Resample factor to decrease computation time. Default is\
            4.
        iterations: Number of resolutions and max iterations per resolution.\
            Default is `50 50 50 50`, which indicates 4 fitting levels with 50\
            iterations each.
        output_dtype: Corrected output data type. Can be float, uchar, or int.\
            Default is float.
        replace_zeros: Replace 0s with offset + scale*rand(). Values will be\
            remasked in the output if remask=1.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AntsN4BiasFieldCorrectionFsOutputs`).
    """
    params = ants_n4_bias_field_correction_fs_params(
        input_file=input_file,
        output_file=output_file,
        mask_file=mask_file,
        shrink_factor=shrink_factor,
        iterations=iterations,
        output_dtype=output_dtype,
        replace_zeros=replace_zeros,
    )
    return ants_n4_bias_field_correction_fs_execute(params, runner)


__all__ = [
    "ANTS_N4_BIAS_FIELD_CORRECTION_FS_METADATA",
    "AntsN4BiasFieldCorrectionFsOutputs",
    "ants_n4_bias_field_correction_fs",
    "ants_n4_bias_field_correction_fs_execute",
    "ants_n4_bias_field_correction_fs_params",
]
