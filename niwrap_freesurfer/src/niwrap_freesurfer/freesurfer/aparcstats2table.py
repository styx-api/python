# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

APARCSTATS2TABLE_METADATA = Metadata(
    id="2dfe86d8f3cbaf4479df19a82085ad457536316c.boutiques",
    name="aparcstats2table",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Aparcstats2tableParameters = typing.TypedDict('Aparcstats2tableParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/aparcstats2table"]],
    "subjects": typing.NotRequired[list[str] | None],
    "subjectsfile": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "hemi": str,
    "tablefile": InputPathType,
    "parcellation": typing.NotRequired[str | None],
    "measure": typing.NotRequired[str | None],
    "delimiter": typing.NotRequired[str | None],
    "skip_missing": bool,
    "parcid_only": bool,
    "common_parcs": bool,
    "parcs_file": typing.NotRequired[InputPathType | None],
    "report_rois": bool,
    "transpose": bool,
    "debug": bool,
    "etiv": bool,
    "scale": typing.NotRequired[float | None],
})
Aparcstats2tableParametersTagged = typing.TypedDict('Aparcstats2tableParametersTagged', {
    "@type": typing.Literal["freesurfer/aparcstats2table"],
    "subjects": typing.NotRequired[list[str] | None],
    "subjectsfile": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "hemi": str,
    "tablefile": InputPathType,
    "parcellation": typing.NotRequired[str | None],
    "measure": typing.NotRequired[str | None],
    "delimiter": typing.NotRequired[str | None],
    "skip_missing": bool,
    "parcid_only": bool,
    "common_parcs": bool,
    "parcs_file": typing.NotRequired[InputPathType | None],
    "report_rois": bool,
    "transpose": bool,
    "debug": bool,
    "etiv": bool,
    "scale": typing.NotRequired[float | None],
})


class Aparcstats2tableOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Aparcstats2tableParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_table: OutputPathType
    """Output table file with processed data."""


def aparcstats2table_params(
    hemi: str,
    tablefile: InputPathType,
    subjects: list[str] | None = None,
    subjectsfile: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    parcellation: str | None = None,
    measure: str | None = None,
    delimiter: str | None = None,
    skip_missing: bool = False,
    parcid_only: bool = False,
    common_parcs: bool = False,
    parcs_file: InputPathType | None = None,
    report_rois: bool = False,
    transpose: bool = False,
    debug: bool = False,
    etiv: bool = False,
    scale: float | None = None,
) -> Aparcstats2tableParametersTagged:
    """
    Build parameters.
    
    Args:
        hemi: Hemisphere being analyzed (lh or rh required).
        tablefile: Output table file.
        subjects: List of subject IDs.
        subjectsfile: File containing list of subjects (one per line).
        qdec: QDEC table file with subject IDs.
        qdec_long: Longitudinal QDEC table with subject templates.
        parcellation: Parcellation atlas (default: aparc).
        measure: Measure type (e.g., area, volume, thickness).
        delimiter: Delimiter between measures in the table (default: tab).
        skip_missing: Skip subjects if input is not found.
        parcid_only: Write only ROI names without pre/appended hemi/measure.
        common_parcs: Output only common parcellations across all subjects.
        parcs_file: File specifying which parcellations to output.
        report_rois: Print ROI information for each subject.
        transpose: Transpose the table (subjects in columns).
        debug: Increase verbosity.
        etiv: Report volume as percent estimated total intracranial volume.
        scale: Scale factor for output values.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/aparcstats2table",
        "hemi": hemi,
        "tablefile": tablefile,
        "skip_missing": skip_missing,
        "parcid_only": parcid_only,
        "common_parcs": common_parcs,
        "report_rois": report_rois,
        "transpose": transpose,
        "debug": debug,
        "etiv": etiv,
    }
    if subjects is not None:
        params["subjects"] = subjects
    if subjectsfile is not None:
        params["subjectsfile"] = subjectsfile
    if qdec is not None:
        params["qdec"] = qdec
    if qdec_long is not None:
        params["qdec_long"] = qdec_long
    if parcellation is not None:
        params["parcellation"] = parcellation
    if measure is not None:
        params["measure"] = measure
    if delimiter is not None:
        params["delimiter"] = delimiter
    if parcs_file is not None:
        params["parcs_file"] = parcs_file
    if scale is not None:
        params["scale"] = scale
    return params


def aparcstats2table_cargs(
    params: Aparcstats2tableParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("aparcstats2table")
    if params.get("subjects", None) is not None:
        cargs.extend([
            "--subjects",
            *params.get("subjects", None)
        ])
    if params.get("subjectsfile", None) is not None:
        cargs.extend([
            "--subjectsfile",
            execution.input_file(params.get("subjectsfile", None))
        ])
    if params.get("qdec", None) is not None:
        cargs.extend([
            "--qdec",
            execution.input_file(params.get("qdec", None))
        ])
    if params.get("qdec_long", None) is not None:
        cargs.extend([
            "--qdec-long",
            execution.input_file(params.get("qdec_long", None))
        ])
    cargs.extend([
        "--hemi",
        params.get("hemi", None)
    ])
    cargs.extend([
        "-t",
        execution.input_file(params.get("tablefile", None))
    ])
    if params.get("parcellation", None) is not None:
        cargs.extend([
            "--parc",
            params.get("parcellation", None)
        ])
    if params.get("measure", None) is not None:
        cargs.extend([
            "-m",
            params.get("measure", None)
        ])
    if params.get("delimiter", None) is not None:
        cargs.extend([
            "-d",
            params.get("delimiter", None)
        ])
    if params.get("skip_missing", False):
        cargs.append("--skip")
    if params.get("parcid_only", False):
        cargs.append("--parcid-only")
    if params.get("common_parcs", False):
        cargs.append("--common-parcs")
    if params.get("parcs_file", None) is not None:
        cargs.extend([
            "--parcs-from-file",
            execution.input_file(params.get("parcs_file", None))
        ])
    if params.get("report_rois", False):
        cargs.append("--report-rois")
    if params.get("transpose", False):
        cargs.append("--transpose")
    if params.get("debug", False):
        cargs.append("-v")
    if params.get("etiv", False):
        cargs.append("--etiv")
    if params.get("scale", None) is not None:
        cargs.extend([
            "--scale",
            str(params.get("scale", None))
        ])
    return cargs


def aparcstats2table_outputs(
    params: Aparcstats2tableParameters,
    execution: Execution,
) -> Aparcstats2tableOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Aparcstats2tableOutputs(
        root=execution.output_file("."),
        output_table=execution.output_file(pathlib.Path(params.get("tablefile", None)).name),
    )
    return ret


def aparcstats2table_execute(
    params: Aparcstats2tableParameters,
    runner: Runner | None = None,
) -> Aparcstats2tableOutputs:
    """
    aparcstats2table
    
    Converts a cortical stats file into a table format with subjects as rows and
    parcellations as columns.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Aparcstats2tableOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(APARCSTATS2TABLE_METADATA)
    params = execution.params(params)
    cargs = aparcstats2table_cargs(params, execution)
    ret = aparcstats2table_outputs(params, execution)
    execution.run(cargs)
    return ret


def aparcstats2table(
    hemi: str,
    tablefile: InputPathType,
    subjects: list[str] | None = None,
    subjectsfile: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    parcellation: str | None = None,
    measure: str | None = None,
    delimiter: str | None = None,
    skip_missing: bool = False,
    parcid_only: bool = False,
    common_parcs: bool = False,
    parcs_file: InputPathType | None = None,
    report_rois: bool = False,
    transpose: bool = False,
    debug: bool = False,
    etiv: bool = False,
    scale: float | None = None,
    runner: Runner | None = None,
) -> Aparcstats2tableOutputs:
    """
    aparcstats2table
    
    Converts a cortical stats file into a table format with subjects as rows and
    parcellations as columns.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        hemi: Hemisphere being analyzed (lh or rh required).
        tablefile: Output table file.
        subjects: List of subject IDs.
        subjectsfile: File containing list of subjects (one per line).
        qdec: QDEC table file with subject IDs.
        qdec_long: Longitudinal QDEC table with subject templates.
        parcellation: Parcellation atlas (default: aparc).
        measure: Measure type (e.g., area, volume, thickness).
        delimiter: Delimiter between measures in the table (default: tab).
        skip_missing: Skip subjects if input is not found.
        parcid_only: Write only ROI names without pre/appended hemi/measure.
        common_parcs: Output only common parcellations across all subjects.
        parcs_file: File specifying which parcellations to output.
        report_rois: Print ROI information for each subject.
        transpose: Transpose the table (subjects in columns).
        debug: Increase verbosity.
        etiv: Report volume as percent estimated total intracranial volume.
        scale: Scale factor for output values.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Aparcstats2tableOutputs`).
    """
    params = aparcstats2table_params(
        subjects=subjects,
        subjectsfile=subjectsfile,
        qdec=qdec,
        qdec_long=qdec_long,
        hemi=hemi,
        tablefile=tablefile,
        parcellation=parcellation,
        measure=measure,
        delimiter=delimiter,
        skip_missing=skip_missing,
        parcid_only=parcid_only,
        common_parcs=common_parcs,
        parcs_file=parcs_file,
        report_rois=report_rois,
        transpose=transpose,
        debug=debug,
        etiv=etiv,
        scale=scale,
    )
    return aparcstats2table_execute(params, runner)


__all__ = [
    "APARCSTATS2TABLE_METADATA",
    "Aparcstats2tableOutputs",
    "aparcstats2table",
    "aparcstats2table_execute",
    "aparcstats2table_params",
]
