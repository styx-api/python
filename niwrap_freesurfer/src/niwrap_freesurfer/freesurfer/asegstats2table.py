# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ASEGSTATS2TABLE_METADATA = Metadata(
    id="72305d9ab5ffacd0859b26cb93dda15aaa6787ac.boutiques",
    name="asegstats2table",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Asegstats2tableParameters = typing.TypedDict('Asegstats2tableParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/asegstats2table"]],
    "subjects": typing.NotRequired[list[str] | None],
    "inputs": typing.NotRequired[list[str] | None],
    "tablefile": str,
    "subjectsfile": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "fsgd": typing.NotRequired[InputPathType | None],
    "maxsegno": typing.NotRequired[list[str] | None],
    "segids_from_file": typing.NotRequired[InputPathType | None],
    "segno_include": typing.NotRequired[list[str] | None],
    "segno_exclude": typing.NotRequired[list[str] | None],
    "measure": typing.NotRequired[str | None],
    "delimiter": typing.NotRequired[str | None],
    "statsfile": typing.NotRequired[str | None],
    "subdir": typing.NotRequired[str | None],
    "scale": typing.NotRequired[float | None],
    "write_etiv": bool,
    "debug": bool,
    "transpose_flag": bool,
    "common_segs_flag": bool,
    "all_segs_flag": bool,
    "no_vol_extras_flag": bool,
    "skip_missing_flag": bool,
    "replace53_flag": bool,
})
Asegstats2tableParametersTagged = typing.TypedDict('Asegstats2tableParametersTagged', {
    "@type": typing.Literal["freesurfer/asegstats2table"],
    "subjects": typing.NotRequired[list[str] | None],
    "inputs": typing.NotRequired[list[str] | None],
    "tablefile": str,
    "subjectsfile": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "fsgd": typing.NotRequired[InputPathType | None],
    "maxsegno": typing.NotRequired[list[str] | None],
    "segids_from_file": typing.NotRequired[InputPathType | None],
    "segno_include": typing.NotRequired[list[str] | None],
    "segno_exclude": typing.NotRequired[list[str] | None],
    "measure": typing.NotRequired[str | None],
    "delimiter": typing.NotRequired[str | None],
    "statsfile": typing.NotRequired[str | None],
    "subdir": typing.NotRequired[str | None],
    "scale": typing.NotRequired[float | None],
    "write_etiv": bool,
    "debug": bool,
    "transpose_flag": bool,
    "common_segs_flag": bool,
    "all_segs_flag": bool,
    "no_vol_extras_flag": bool,
    "skip_missing_flag": bool,
    "replace53_flag": bool,
})


class Asegstats2tableOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Asegstats2tableParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_table: OutputPathType
    """The resulting table file with segmentation data."""


def asegstats2table_params(
    tablefile: str,
    subjects: list[str] | None = None,
    inputs: list[str] | None = None,
    subjectsfile: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    fsgd: InputPathType | None = None,
    maxsegno: list[str] | None = None,
    segids_from_file: InputPathType | None = None,
    segno_include: list[str] | None = None,
    segno_exclude: list[str] | None = None,
    measure: str | None = None,
    delimiter: str | None = None,
    statsfile: str | None = None,
    subdir: str | None = None,
    scale: float | None = None,
    write_etiv: bool = False,
    debug: bool = False,
    transpose_flag: bool = False,
    common_segs_flag: bool = False,
    all_segs_flag: bool = False,
    no_vol_extras_flag: bool = False,
    skip_missing_flag: bool = False,
    replace53_flag: bool = False,
) -> Asegstats2tableParametersTagged:
    """
    Build parameters.
    
    Args:
        tablefile: The output table file.
        subjects: List of subjects.
        inputs: List of input stat files.
        subjectsfile: Name of the file which has the list of subjects (one\
            subject per line).
        qdec: Name of the qdec table which has the column of subjects ids\
            (fsid).
        qdec_long: Name of the longitudinal qdec table with column of tp ids\
            (fsid) and subject templates (fsid-base).
        fsgd: Name of the FSGD file to extract subjects from.
        maxsegno: Specify the maximum segmentation number.
        segids_from_file: Output only the segmentations present in the\
            specified file.
        segno_include: Include only the specified segmentation IDs.
        segno_exclude: Exclude the specified segmentation IDs.
        measure: Measure to report: default is volume (alternative: mean, std).
        delimiter: Delimiter between measures in the table. Default is tab\
            (alternative: comma, space, semicolon).
        statsfile: Use specified stats file instead of 'aseg.stats'.
        subdir: Use specified subdir instead of 'stats/'.
        scale: Scale factor for all values written to output file. Default is\
            1.
        write_etiv: Report volume as percent estimated total intracranial\
            volume.
        debug: Increase verbosity for debugging purposes.
        transpose_flag: Transpose the table: subjects in columns and\
            segmentations in rows.
        common_segs_flag: Output only the segmentations common to all stats\
            files.
        all_segs_flag: Output all segmentations in the stats files given.
        no_vol_extras_flag: Do not include global volume measures like\
            BrainSegVol.
        skip_missing_flag: Skip subjects that do not have a stats file.
        replace53_flag: Replace 5.3 structure names with later names.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/asegstats2table",
        "tablefile": tablefile,
        "write_etiv": write_etiv,
        "debug": debug,
        "transpose_flag": transpose_flag,
        "common_segs_flag": common_segs_flag,
        "all_segs_flag": all_segs_flag,
        "no_vol_extras_flag": no_vol_extras_flag,
        "skip_missing_flag": skip_missing_flag,
        "replace53_flag": replace53_flag,
    }
    if subjects is not None:
        params["subjects"] = subjects
    if inputs is not None:
        params["inputs"] = inputs
    if subjectsfile is not None:
        params["subjectsfile"] = subjectsfile
    if qdec is not None:
        params["qdec"] = qdec
    if qdec_long is not None:
        params["qdec_long"] = qdec_long
    if fsgd is not None:
        params["fsgd"] = fsgd
    if maxsegno is not None:
        params["maxsegno"] = maxsegno
    if segids_from_file is not None:
        params["segids_from_file"] = segids_from_file
    if segno_include is not None:
        params["segno_include"] = segno_include
    if segno_exclude is not None:
        params["segno_exclude"] = segno_exclude
    if measure is not None:
        params["measure"] = measure
    if delimiter is not None:
        params["delimiter"] = delimiter
    if statsfile is not None:
        params["statsfile"] = statsfile
    if subdir is not None:
        params["subdir"] = subdir
    if scale is not None:
        params["scale"] = scale
    return params


def asegstats2table_cargs(
    params: Asegstats2tableParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("asegstats2table")
    if params.get("subjects", None) is not None:
        cargs.extend([
            "--subjects",
            *params.get("subjects", None)
        ])
    if params.get("inputs", None) is not None:
        cargs.extend([
            "--inputs",
            *params.get("inputs", None)
        ])
    cargs.extend([
        "--tablefile",
        params.get("tablefile", None)
    ])
    if params.get("subjectsfile", None) is not None:
        cargs.extend([
            "--subjectsfile",
            execution.input_file(params.get("subjectsfile", None))
        ])
    if params.get("qdec", None) is not None:
        cargs.extend([
            "--qdec",
            execution.input_file(params.get("qdec", None))
        ])
    if params.get("qdec_long", None) is not None:
        cargs.extend([
            "--qdec-long",
            execution.input_file(params.get("qdec_long", None))
        ])
    if params.get("fsgd", None) is not None:
        cargs.extend([
            "--fsgd",
            execution.input_file(params.get("fsgd", None))
        ])
    if params.get("maxsegno", None) is not None:
        cargs.extend([
            "--maxsegno",
            *params.get("maxsegno", None)
        ])
    if params.get("segids_from_file", None) is not None:
        cargs.extend([
            "--segids-from-file",
            execution.input_file(params.get("segids_from_file", None))
        ])
    if params.get("segno_include", None) is not None:
        cargs.extend([
            "--segno",
            *params.get("segno_include", None)
        ])
    if params.get("segno_exclude", None) is not None:
        cargs.extend([
            "--no-segno",
            *params.get("segno_exclude", None)
        ])
    if params.get("measure", None) is not None:
        cargs.extend([
            "--meas",
            params.get("measure", None)
        ])
    if params.get("delimiter", None) is not None:
        cargs.extend([
            "--delimiter",
            params.get("delimiter", None)
        ])
    if params.get("statsfile", None) is not None:
        cargs.extend([
            "--statsfile",
            params.get("statsfile", None)
        ])
    if params.get("subdir", None) is not None:
        cargs.extend([
            "--subdir",
            params.get("subdir", None)
        ])
    if params.get("scale", None) is not None:
        cargs.extend([
            "--scale",
            str(params.get("scale", None))
        ])
    if params.get("write_etiv", False):
        cargs.append("--etiv")
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("transpose_flag", False):
        cargs.append("--transpose")
    if params.get("common_segs_flag", False):
        cargs.append("--common-segs")
    if params.get("all_segs_flag", False):
        cargs.append("--all-segs")
    if params.get("no_vol_extras_flag", False):
        cargs.append("--no-vol-extras")
    if params.get("skip_missing_flag", False):
        cargs.append("--skip")
    if params.get("replace53_flag", False):
        cargs.append("--replace53")
    return cargs


def asegstats2table_outputs(
    params: Asegstats2tableParameters,
    execution: Execution,
) -> Asegstats2tableOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Asegstats2tableOutputs(
        root=execution.output_file("."),
        output_table=execution.output_file(params.get("tablefile", None)),
    )
    return ret


def asegstats2table_execute(
    params: Asegstats2tableParameters,
    runner: Runner | None = None,
) -> Asegstats2tableOutputs:
    """
    asegstats2table
    
    Converts a subcortical stats file created by recon-all and/or mri_segstats
    (e.g., aseg.stats) into a table.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Asegstats2tableOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ASEGSTATS2TABLE_METADATA)
    params = execution.params(params)
    cargs = asegstats2table_cargs(params, execution)
    ret = asegstats2table_outputs(params, execution)
    execution.run(cargs)
    return ret


def asegstats2table(
    tablefile: str,
    subjects: list[str] | None = None,
    inputs: list[str] | None = None,
    subjectsfile: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    fsgd: InputPathType | None = None,
    maxsegno: list[str] | None = None,
    segids_from_file: InputPathType | None = None,
    segno_include: list[str] | None = None,
    segno_exclude: list[str] | None = None,
    measure: str | None = None,
    delimiter: str | None = None,
    statsfile: str | None = None,
    subdir: str | None = None,
    scale: float | None = None,
    write_etiv: bool = False,
    debug: bool = False,
    transpose_flag: bool = False,
    common_segs_flag: bool = False,
    all_segs_flag: bool = False,
    no_vol_extras_flag: bool = False,
    skip_missing_flag: bool = False,
    replace53_flag: bool = False,
    runner: Runner | None = None,
) -> Asegstats2tableOutputs:
    """
    asegstats2table
    
    Converts a subcortical stats file created by recon-all and/or mri_segstats
    (e.g., aseg.stats) into a table.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        tablefile: The output table file.
        subjects: List of subjects.
        inputs: List of input stat files.
        subjectsfile: Name of the file which has the list of subjects (one\
            subject per line).
        qdec: Name of the qdec table which has the column of subjects ids\
            (fsid).
        qdec_long: Name of the longitudinal qdec table with column of tp ids\
            (fsid) and subject templates (fsid-base).
        fsgd: Name of the FSGD file to extract subjects from.
        maxsegno: Specify the maximum segmentation number.
        segids_from_file: Output only the segmentations present in the\
            specified file.
        segno_include: Include only the specified segmentation IDs.
        segno_exclude: Exclude the specified segmentation IDs.
        measure: Measure to report: default is volume (alternative: mean, std).
        delimiter: Delimiter between measures in the table. Default is tab\
            (alternative: comma, space, semicolon).
        statsfile: Use specified stats file instead of 'aseg.stats'.
        subdir: Use specified subdir instead of 'stats/'.
        scale: Scale factor for all values written to output file. Default is\
            1.
        write_etiv: Report volume as percent estimated total intracranial\
            volume.
        debug: Increase verbosity for debugging purposes.
        transpose_flag: Transpose the table: subjects in columns and\
            segmentations in rows.
        common_segs_flag: Output only the segmentations common to all stats\
            files.
        all_segs_flag: Output all segmentations in the stats files given.
        no_vol_extras_flag: Do not include global volume measures like\
            BrainSegVol.
        skip_missing_flag: Skip subjects that do not have a stats file.
        replace53_flag: Replace 5.3 structure names with later names.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Asegstats2tableOutputs`).
    """
    params = asegstats2table_params(
        subjects=subjects,
        inputs=inputs,
        tablefile=tablefile,
        subjectsfile=subjectsfile,
        qdec=qdec,
        qdec_long=qdec_long,
        fsgd=fsgd,
        maxsegno=maxsegno,
        segids_from_file=segids_from_file,
        segno_include=segno_include,
        segno_exclude=segno_exclude,
        measure=measure,
        delimiter=delimiter,
        statsfile=statsfile,
        subdir=subdir,
        scale=scale,
        write_etiv=write_etiv,
        debug=debug,
        transpose_flag=transpose_flag,
        common_segs_flag=common_segs_flag,
        all_segs_flag=all_segs_flag,
        no_vol_extras_flag=no_vol_extras_flag,
        skip_missing_flag=skip_missing_flag,
        replace53_flag=replace53_flag,
    )
    return asegstats2table_execute(params, runner)


__all__ = [
    "ASEGSTATS2TABLE_METADATA",
    "Asegstats2tableOutputs",
    "asegstats2table",
    "asegstats2table_execute",
    "asegstats2table_params",
]
