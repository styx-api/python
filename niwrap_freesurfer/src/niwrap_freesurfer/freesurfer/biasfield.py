# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BIASFIELD_METADATA = Metadata(
    id="791c68624f21165063a1669d3c6117e3219b6789.boutiques",
    name="biasfield",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


BiasfieldParameters = typing.TypedDict('BiasfieldParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/biasfield"]],
    "subject": str,
    "tmpdir": typing.NotRequired[str | None],
    "no_cleanup": bool,
    "help": bool,
    "debug": bool,
    "version": bool,
})
BiasfieldParametersTagged = typing.TypedDict('BiasfieldParametersTagged', {
    "@type": typing.Literal["freesurfer/biasfield"],
    "subject": str,
    "tmpdir": typing.NotRequired[str | None],
    "no_cleanup": bool,
    "help": bool,
    "debug": bool,
    "version": bool,
})


class BiasfieldOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BiasfieldParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    biasfield_output: OutputPathType
    """Generated bias field in the subject MRI directory"""
    rawavg_cor_norm: OutputPathType
    """The rawavg.mgz in 256^3, 1mm^3 space with the bias field removed"""


def biasfield_params(
    subject: str,
    tmpdir: str | None = None,
    no_cleanup: bool = False,
    help_: bool = False,
    debug: bool = False,
    version: bool = False,
) -> BiasfieldParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        tmpdir: Temporary directory.
        no_cleanup: Prevent cleanup of temporary files.
        help_: Display help information.
        debug: Enable debugging mode.
        version: Display script version info.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/biasfield",
        "subject": subject,
        "no_cleanup": no_cleanup,
        "help": help_,
        "debug": debug,
        "version": version,
    }
    if tmpdir is not None:
        params["tmpdir"] = tmpdir
    return params


def biasfield_cargs(
    params: BiasfieldParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("biasfield")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    if params.get("tmpdir", None) is not None:
        cargs.extend([
            "--tmp",
            params.get("tmpdir", None)
        ])
    if params.get("no_cleanup", False):
        cargs.append("--nocleanup")
    if params.get("help", False):
        cargs.append("--help")
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def biasfield_outputs(
    params: BiasfieldParameters,
    execution: Execution,
) -> BiasfieldOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BiasfieldOutputs(
        root=execution.output_file("."),
        biasfield_output=execution.output_file("biasfield.mgz"),
        rawavg_cor_norm=execution.output_file("rawavg.cor.norm.mgz"),
    )
    return ret


def biasfield_execute(
    params: BiasfieldParameters,
    runner: Runner | None = None,
) -> BiasfieldOutputs:
    """
    biasfield
    
    Computes the bias field by dividing the (unconformed) orig.mgz by the
    norm.mgz.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiasfieldOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BIASFIELD_METADATA)
    params = execution.params(params)
    cargs = biasfield_cargs(params, execution)
    ret = biasfield_outputs(params, execution)
    execution.run(cargs)
    return ret


def biasfield(
    subject: str,
    tmpdir: str | None = None,
    no_cleanup: bool = False,
    help_: bool = False,
    debug: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> BiasfieldOutputs:
    """
    biasfield
    
    Computes the bias field by dividing the (unconformed) orig.mgz by the
    norm.mgz.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        tmpdir: Temporary directory.
        no_cleanup: Prevent cleanup of temporary files.
        help_: Display help information.
        debug: Enable debugging mode.
        version: Display script version info.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiasfieldOutputs`).
    """
    params = biasfield_params(
        subject=subject,
        tmpdir=tmpdir,
        no_cleanup=no_cleanup,
        help_=help_,
        debug=debug,
        version=version,
    )
    return biasfield_execute(params, runner)


__all__ = [
    "BIASFIELD_METADATA",
    "BiasfieldOutputs",
    "biasfield",
    "biasfield_execute",
    "biasfield_params",
]
