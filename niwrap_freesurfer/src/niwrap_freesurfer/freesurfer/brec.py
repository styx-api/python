# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BREC_METADATA = Metadata(
    id="ce9f9f5bb497c6bb574e5731aafa611a10debdc6.boutiques",
    name="brec",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


BrecParameters = typing.TypedDict('BrecParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/brec"]],
    "my_file": str,
    "depth_limit": bool,
})
BrecParametersTagged = typing.TypedDict('BrecParametersTagged', {
    "@type": typing.Literal["freesurfer/brec"],
    "my_file": str,
    "depth_limit": bool,
})


class BrecOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BrecParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def brec_params(
    my_file: str,
    depth_limit: bool = False,
) -> BrecParametersTagged:
    """
    Build parameters.
    
    Args:
        my_file: Input file with .rec extension.
        depth_limit: Optional depth limit flag.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/brec",
        "my_file": my_file,
        "depth_limit": depth_limit,
    }
    return params


def brec_cargs(
    params: BrecParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("brec")
    cargs.append(params.get("my_file", None))
    if params.get("depth_limit", False):
        cargs.append("-depth_limit")
    return cargs


def brec_outputs(
    params: BrecParameters,
    execution: Execution,
) -> BrecOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BrecOutputs(
        root=execution.output_file("."),
    )
    return ret


def brec_execute(
    params: BrecParameters,
    runner: Runner | None = None,
) -> BrecOutputs:
    """
    brec
    
    A description for brec tool could not be retrieved.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BrecOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BREC_METADATA)
    params = execution.params(params)
    cargs = brec_cargs(params, execution)
    ret = brec_outputs(params, execution)
    execution.run(cargs)
    return ret


def brec(
    my_file: str,
    depth_limit: bool = False,
    runner: Runner | None = None,
) -> BrecOutputs:
    """
    brec
    
    A description for brec tool could not be retrieved.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        my_file: Input file with .rec extension.
        depth_limit: Optional depth limit flag.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BrecOutputs`).
    """
    params = brec_params(
        my_file=my_file,
        depth_limit=depth_limit,
    )
    return brec_execute(params, runner)


__all__ = [
    "BREC_METADATA",
    "BrecOutputs",
    "brec",
    "brec_execute",
    "brec_params",
]
