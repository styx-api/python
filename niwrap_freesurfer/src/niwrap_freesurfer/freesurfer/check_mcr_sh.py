# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CHECK_MCR_SH_METADATA = Metadata(
    id="26a2d886f94b630d8a88df334863e396bb69e62a.boutiques",
    name="checkMCR.sh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


CheckMcrShParameters = typing.TypedDict('CheckMcrShParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/checkMCR.sh"]],
    "help": bool,
})
CheckMcrShParametersTagged = typing.TypedDict('CheckMcrShParametersTagged', {
    "@type": typing.Literal["freesurfer/checkMCR.sh"],
    "help": bool,
})


class CheckMcrShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CheckMcrShParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def check_mcr_sh_params(
    help_: bool = False,
) -> CheckMcrShParametersTagged:
    """
    Build parameters.
    
    Args:
        help_: Display help information about checkMCR.sh.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/checkMCR.sh",
        "help": help_,
    }
    return params


def check_mcr_sh_cargs(
    params: CheckMcrShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("checkMCR.sh")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def check_mcr_sh_outputs(
    params: CheckMcrShParameters,
    execution: Execution,
) -> CheckMcrShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CheckMcrShOutputs(
        root=execution.output_file("."),
    )
    return ret


def check_mcr_sh_execute(
    params: CheckMcrShParameters,
    runner: Runner | None = None,
) -> CheckMcrShOutputs:
    """
    checkMCR.sh
    
    Script to check for the presence of Matlab Compiler Runtime (MCR) for Matlab
    2019b, used for the hippocampal/amygdala and brainstem modules.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CheckMcrShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CHECK_MCR_SH_METADATA)
    params = execution.params(params)
    cargs = check_mcr_sh_cargs(params, execution)
    ret = check_mcr_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def check_mcr_sh(
    help_: bool = False,
    runner: Runner | None = None,
) -> CheckMcrShOutputs:
    """
    checkMCR.sh
    
    Script to check for the presence of Matlab Compiler Runtime (MCR) for Matlab
    2019b, used for the hippocampal/amygdala and brainstem modules.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        help_: Display help information about checkMCR.sh.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CheckMcrShOutputs`).
    """
    params = check_mcr_sh_params(
        help_=help_,
    )
    return check_mcr_sh_execute(params, runner)


__all__ = [
    "CHECK_MCR_SH_METADATA",
    "CheckMcrShOutputs",
    "check_mcr_sh",
    "check_mcr_sh_execute",
    "check_mcr_sh_params",
]
