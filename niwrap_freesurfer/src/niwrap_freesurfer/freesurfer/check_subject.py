# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CHECK_SUBJECT_METADATA = Metadata(
    id="b4df2e6bdb47d7da74832b18728ab9312cd83cc9.boutiques",
    name="check_subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


CheckSubjectParameters = typing.TypedDict('CheckSubjectParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/check_subject"]],
    "subject_dir": str,
})
CheckSubjectParametersTagged = typing.TypedDict('CheckSubjectParametersTagged', {
    "@type": typing.Literal["freesurfer/check_subject"],
    "subject_dir": str,
})


class CheckSubjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CheckSubjectParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def check_subject_params(
    subject_dir: str,
) -> CheckSubjectParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_dir: Path to the subject directory to check.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/check_subject",
        "subject_dir": subject_dir,
    }
    return params


def check_subject_cargs(
    params: CheckSubjectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("check_subject")
    cargs.append(params.get("subject_dir", None))
    return cargs


def check_subject_outputs(
    params: CheckSubjectParameters,
    execution: Execution,
) -> CheckSubjectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CheckSubjectOutputs(
        root=execution.output_file("."),
    )
    return ret


def check_subject_execute(
    params: CheckSubjectParameters,
    runner: Runner | None = None,
) -> CheckSubjectOutputs:
    """
    check_subject
    
    Checks a subject directory for the existence of a surf directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CheckSubjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CHECK_SUBJECT_METADATA)
    params = execution.params(params)
    cargs = check_subject_cargs(params, execution)
    ret = check_subject_outputs(params, execution)
    execution.run(cargs)
    return ret


def check_subject(
    subject_dir: str,
    runner: Runner | None = None,
) -> CheckSubjectOutputs:
    """
    check_subject
    
    Checks a subject directory for the existence of a surf directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_dir: Path to the subject directory to check.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CheckSubjectOutputs`).
    """
    params = check_subject_params(
        subject_dir=subject_dir,
    )
    return check_subject_execute(params, runner)


__all__ = [
    "CHECK_SUBJECT_METADATA",
    "CheckSubjectOutputs",
    "check_subject",
    "check_subject_execute",
    "check_subject_params",
]
