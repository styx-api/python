# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CONF2HIRES_METADATA = Metadata(
    id="c326b081c5f5603acadc449e53ae6ec356eea705.boutiques",
    name="conf2hires",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Conf2hiresParameters = typing.TypedDict('Conf2hiresParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/conf2hires"]],
    "subject": str,
    "t2": bool,
    "no_t2": bool,
    "mm_norm_sigma": typing.NotRequired[float | None],
    "flair": bool,
    "no_flair": bool,
    "threads": typing.NotRequired[float | None],
    "copy_bias_from_conf": bool,
    "norm_opts_rca": bool,
    "cubic": bool,
    "trilin": bool,
    "dev": bool,
    "no_dev": bool,
    "bbr_con": typing.NotRequired[str | None],
    "bbr_t1": bool,
    "bbr_t2": bool,
    "first_peak_d1": bool,
    "first_peak_d2": bool,
    "stopmask": typing.NotRequired[str | None],
    "expert": typing.NotRequired[str | None],
    "force_update": bool,
})
Conf2hiresParametersTagged = typing.TypedDict('Conf2hiresParametersTagged', {
    "@type": typing.Literal["freesurfer/conf2hires"],
    "subject": str,
    "t2": bool,
    "no_t2": bool,
    "mm_norm_sigma": typing.NotRequired[float | None],
    "flair": bool,
    "no_flair": bool,
    "threads": typing.NotRequired[float | None],
    "copy_bias_from_conf": bool,
    "norm_opts_rca": bool,
    "cubic": bool,
    "trilin": bool,
    "dev": bool,
    "no_dev": bool,
    "bbr_con": typing.NotRequired[str | None],
    "bbr_t1": bool,
    "bbr_t2": bool,
    "first_peak_d1": bool,
    "first_peak_d2": bool,
    "stopmask": typing.NotRequired[str | None],
    "expert": typing.NotRequired[str | None],
    "force_update": bool,
})


class Conf2hiresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Conf2hiresParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def conf2hires_params(
    subject: str,
    t2: bool = False,
    no_t2: bool = False,
    mm_norm_sigma: float | None = None,
    flair: bool = False,
    no_flair: bool = False,
    threads: float | None = None,
    copy_bias_from_conf: bool = False,
    norm_opts_rca: bool = False,
    cubic: bool = False,
    trilin: bool = False,
    dev: bool = False,
    no_dev: bool = False,
    bbr_con: str | None = None,
    bbr_t1: bool = False,
    bbr_t2: bool = False,
    first_peak_d1: bool = False,
    first_peak_d2: bool = False,
    stopmask: str | None = None,
    expert: str | None = None,
    force_update: bool = False,
) -> Conf2hiresParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        t2: Enable T2 processing.
        no_t2: Disable T2 processing (default).
        mm_norm_sigma: Smoothing level for T2 mri_normalize (default is 8).
        flair: Enable FLAIR processing.
        no_flair: Disable FLAIR processing (default).
        threads: Number of threads to use.
        copy_bias_from_conf: Copy bias field from conformed instead of\
            computing directly.
        norm_opts_rca: Compute bias directly using recon-all opts to\
            mri_normalize.
        cubic: Use cubic normalization (applies with --copy-bias-from-conf).
        trilin: Use trilinear normalization (default, applies with\
            --copy-bias-from-conf).
        dev: Use mris_make_surfaces.dev.
        no_dev: Do not use mris_make_surfaces.dev (default).
        bbr_con: Set BBR contrast type (default t2).
        bbr_t1: Set BBR contrast type to t1.
        bbr_t2: Set BBR contrast type to t2.
        first_peak_d1: Refine surface targets in MRIScomputeBorderValues()\
            using first peak method D1.
        first_peak_d2: Refine surface targets in MRIScomputeBorderValues()\
            using first peak method D2.
        stopmask: Specify stop mask.
        expert: Use expert options.
        force_update: Force update of final surfaces.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/conf2hires",
        "subject": subject,
        "t2": t2,
        "no_t2": no_t2,
        "flair": flair,
        "no_flair": no_flair,
        "copy_bias_from_conf": copy_bias_from_conf,
        "norm_opts_rca": norm_opts_rca,
        "cubic": cubic,
        "trilin": trilin,
        "dev": dev,
        "no_dev": no_dev,
        "bbr_t1": bbr_t1,
        "bbr_t2": bbr_t2,
        "first_peak_d1": first_peak_d1,
        "first_peak_d2": first_peak_d2,
        "force_update": force_update,
    }
    if mm_norm_sigma is not None:
        params["mm_norm_sigma"] = mm_norm_sigma
    if threads is not None:
        params["threads"] = threads
    if bbr_con is not None:
        params["bbr_con"] = bbr_con
    if stopmask is not None:
        params["stopmask"] = stopmask
    if expert is not None:
        params["expert"] = expert
    return params


def conf2hires_cargs(
    params: Conf2hiresParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("conf2hires")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    if params.get("t2", False):
        cargs.append("--t2")
    if params.get("no_t2", False):
        cargs.append("--no-t2")
    if params.get("mm_norm_sigma", None) is not None:
        cargs.extend([
            "--mm-norm-sigma",
            str(params.get("mm_norm_sigma", None))
        ])
    if params.get("flair", False):
        cargs.append("--flair")
    if params.get("no_flair", False):
        cargs.append("--no-flair")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("copy_bias_from_conf", False):
        cargs.append("--copy-bias-from-conf")
    if params.get("norm_opts_rca", False):
        cargs.append("--norm-opts-rca")
    if params.get("cubic", False):
        cargs.append("--cubic")
    if params.get("trilin", False):
        cargs.append("--trilin")
    if params.get("dev", False):
        cargs.append("--dev")
    if params.get("no_dev", False):
        cargs.append("--no-dev")
    if params.get("bbr_con", None) is not None:
        cargs.extend([
            "--bbr-con",
            params.get("bbr_con", None)
        ])
    if params.get("bbr_t1", False):
        cargs.append("--bbr-t1")
    if params.get("bbr_t2", False):
        cargs.append("--bbr-t2")
    if params.get("first_peak_d1", False):
        cargs.append("--first-peak-d1")
    if params.get("first_peak_d2", False):
        cargs.append("--first-peak-d2")
    if params.get("stopmask", None) is not None:
        cargs.extend([
            "--stopmask",
            params.get("stopmask", None)
        ])
    if params.get("expert", None) is not None:
        cargs.extend([
            "--expert",
            params.get("expert", None)
        ])
    if params.get("force_update", False):
        cargs.append("--force-update")
    return cargs


def conf2hires_outputs(
    params: Conf2hiresParameters,
    execution: Execution,
) -> Conf2hiresOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Conf2hiresOutputs(
        root=execution.output_file("."),
    )
    return ret


def conf2hires_execute(
    params: Conf2hiresParameters,
    runner: Runner | None = None,
) -> Conf2hiresOutputs:
    """
    conf2hires
    
    Places the surfaces on high resolution T1 (and maybe T2) volumes based on an
    initial placement on a conformed volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Conf2hiresOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONF2HIRES_METADATA)
    params = execution.params(params)
    cargs = conf2hires_cargs(params, execution)
    ret = conf2hires_outputs(params, execution)
    execution.run(cargs)
    return ret


def conf2hires(
    subject: str,
    t2: bool = False,
    no_t2: bool = False,
    mm_norm_sigma: float | None = None,
    flair: bool = False,
    no_flair: bool = False,
    threads: float | None = None,
    copy_bias_from_conf: bool = False,
    norm_opts_rca: bool = False,
    cubic: bool = False,
    trilin: bool = False,
    dev: bool = False,
    no_dev: bool = False,
    bbr_con: str | None = None,
    bbr_t1: bool = False,
    bbr_t2: bool = False,
    first_peak_d1: bool = False,
    first_peak_d2: bool = False,
    stopmask: str | None = None,
    expert: str | None = None,
    force_update: bool = False,
    runner: Runner | None = None,
) -> Conf2hiresOutputs:
    """
    conf2hires
    
    Places the surfaces on high resolution T1 (and maybe T2) volumes based on an
    initial placement on a conformed volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        t2: Enable T2 processing.
        no_t2: Disable T2 processing (default).
        mm_norm_sigma: Smoothing level for T2 mri_normalize (default is 8).
        flair: Enable FLAIR processing.
        no_flair: Disable FLAIR processing (default).
        threads: Number of threads to use.
        copy_bias_from_conf: Copy bias field from conformed instead of\
            computing directly.
        norm_opts_rca: Compute bias directly using recon-all opts to\
            mri_normalize.
        cubic: Use cubic normalization (applies with --copy-bias-from-conf).
        trilin: Use trilinear normalization (default, applies with\
            --copy-bias-from-conf).
        dev: Use mris_make_surfaces.dev.
        no_dev: Do not use mris_make_surfaces.dev (default).
        bbr_con: Set BBR contrast type (default t2).
        bbr_t1: Set BBR contrast type to t1.
        bbr_t2: Set BBR contrast type to t2.
        first_peak_d1: Refine surface targets in MRIScomputeBorderValues()\
            using first peak method D1.
        first_peak_d2: Refine surface targets in MRIScomputeBorderValues()\
            using first peak method D2.
        stopmask: Specify stop mask.
        expert: Use expert options.
        force_update: Force update of final surfaces.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Conf2hiresOutputs`).
    """
    params = conf2hires_params(
        subject=subject,
        t2=t2,
        no_t2=no_t2,
        mm_norm_sigma=mm_norm_sigma,
        flair=flair,
        no_flair=no_flair,
        threads=threads,
        copy_bias_from_conf=copy_bias_from_conf,
        norm_opts_rca=norm_opts_rca,
        cubic=cubic,
        trilin=trilin,
        dev=dev,
        no_dev=no_dev,
        bbr_con=bbr_con,
        bbr_t1=bbr_t1,
        bbr_t2=bbr_t2,
        first_peak_d1=first_peak_d1,
        first_peak_d2=first_peak_d2,
        stopmask=stopmask,
        expert=expert,
        force_update=force_update,
    )
    return conf2hires_execute(params, runner)


__all__ = [
    "CONF2HIRES_METADATA",
    "Conf2hiresOutputs",
    "conf2hires",
    "conf2hires_execute",
    "conf2hires_params",
]
