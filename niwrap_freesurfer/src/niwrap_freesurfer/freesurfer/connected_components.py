# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CONNECTED_COMPONENTS_METADATA = Metadata(
    id="7f90eb6d5a07cc028a8f6217054ba32de106f4c7.boutiques",
    name="connected_components",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ConnectedComponentsParameters = typing.TypedDict('ConnectedComponentsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/connected_components"]],
    "input_image": InputPathType,
    "output_image": str,
    "threshold": typing.NotRequired[float | None],
})
ConnectedComponentsParametersTagged = typing.TypedDict('ConnectedComponentsParametersTagged', {
    "@type": typing.Literal["freesurfer/connected_components"],
    "input_image": InputPathType,
    "output_image": str,
    "threshold": typing.NotRequired[float | None],
})


class ConnectedComponentsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ConnectedComponentsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_labelled_image_file: OutputPathType
    """Labeled connected components image output file."""


def connected_components_params(
    input_image: InputPathType,
    output_image: str = "output_labelled_image",
    threshold: float | None = None,
) -> ConnectedComponentsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input image file.
        output_image: Output labeled connected components image.
        threshold: Threshold for binarizing the input image.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/connected_components",
        "input_image": input_image,
        "output_image": output_image,
    }
    if threshold is not None:
        params["threshold"] = threshold
    return params


def connected_components_cargs(
    params: ConnectedComponentsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("connected_components")
    cargs.append(execution.input_file(params.get("input_image", None)))
    cargs.extend([
        "-o",
        params.get("output_image", "output_labelled_image")
    ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "-t",
            str(params.get("threshold", None))
        ])
    return cargs


def connected_components_outputs(
    params: ConnectedComponentsParameters,
    execution: Execution,
) -> ConnectedComponentsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ConnectedComponentsOutputs(
        root=execution.output_file("."),
        output_labelled_image_file=execution.output_file(params.get("output_image", "output_labelled_image") + ".nii.gz"),
    )
    return ret


def connected_components_execute(
    params: ConnectedComponentsParameters,
    runner: Runner | None = None,
) -> ConnectedComponentsOutputs:
    """
    connected_components
    
    A tool for identifying connected components in an image.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConnectedComponentsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONNECTED_COMPONENTS_METADATA)
    params = execution.params(params)
    cargs = connected_components_cargs(params, execution)
    ret = connected_components_outputs(params, execution)
    execution.run(cargs)
    return ret


def connected_components(
    input_image: InputPathType,
    output_image: str = "output_labelled_image",
    threshold: float | None = None,
    runner: Runner | None = None,
) -> ConnectedComponentsOutputs:
    """
    connected_components
    
    A tool for identifying connected components in an image.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Input image file.
        output_image: Output labeled connected components image.
        threshold: Threshold for binarizing the input image.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConnectedComponentsOutputs`).
    """
    params = connected_components_params(
        input_image=input_image,
        output_image=output_image,
        threshold=threshold,
    )
    return connected_components_execute(params, runner)


__all__ = [
    "CONNECTED_COMPONENTS_METADATA",
    "ConnectedComponentsOutputs",
    "connected_components",
    "connected_components_execute",
    "connected_components_params",
]
