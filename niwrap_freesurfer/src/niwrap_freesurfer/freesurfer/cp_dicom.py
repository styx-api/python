# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CP_DICOM_METADATA = Metadata(
    id="a61a44a95b9acc4f8c31cd28c22febf9e54641e5.boutiques",
    name="cp-dicom",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


CpDicomParameters = typing.TypedDict('CpDicomParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/cp-dicom"]],
    "dicom_dir": str,
    "output_dir": str,
    "debug": bool,
})
CpDicomParametersTagged = typing.TypedDict('CpDicomParametersTagged', {
    "@type": typing.Literal["freesurfer/cp-dicom"],
    "dicom_dir": str,
    "output_dir": str,
    "debug": bool,
})


class CpDicomOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CpDicomParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def cp_dicom_params(
    dicom_dir: str,
    output_dir: str,
    debug: bool = False,
) -> CpDicomParametersTagged:
    """
    Build parameters.
    
    Args:
        dicom_dir: Directory containing DICOM files.
        output_dir: Output directory where sorted DICOM files will be stored.
        debug: Print additional debug information.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/cp-dicom",
        "dicom_dir": dicom_dir,
        "output_dir": output_dir,
        "debug": debug,
    }
    return params


def cp_dicom_cargs(
    params: CpDicomParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("cp-dicom")
    cargs.extend([
        "-d",
        params.get("dicom_dir", None)
    ])
    cargs.extend([
        "-o",
        params.get("output_dir", None)
    ])
    if params.get("debug", False):
        cargs.append("-debug")
    return cargs


def cp_dicom_outputs(
    params: CpDicomParameters,
    execution: Execution,
) -> CpDicomOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CpDicomOutputs(
        root=execution.output_file("."),
    )
    return ret


def cp_dicom_execute(
    params: CpDicomParameters,
    runner: Runner | None = None,
) -> CpDicomOutputs:
    """
    cp-dicom
    
    Copies DICOM files into separate directories for each series based on DICOM
    headers.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CpDicomOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CP_DICOM_METADATA)
    params = execution.params(params)
    cargs = cp_dicom_cargs(params, execution)
    ret = cp_dicom_outputs(params, execution)
    execution.run(cargs)
    return ret


def cp_dicom(
    dicom_dir: str,
    output_dir: str,
    debug: bool = False,
    runner: Runner | None = None,
) -> CpDicomOutputs:
    """
    cp-dicom
    
    Copies DICOM files into separate directories for each series based on DICOM
    headers.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        dicom_dir: Directory containing DICOM files.
        output_dir: Output directory where sorted DICOM files will be stored.
        debug: Print additional debug information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CpDicomOutputs`).
    """
    params = cp_dicom_params(
        dicom_dir=dicom_dir,
        output_dir=output_dir,
        debug=debug,
    )
    return cp_dicom_execute(params, runner)


__all__ = [
    "CP_DICOM_METADATA",
    "CpDicomOutputs",
    "cp_dicom",
    "cp_dicom_execute",
    "cp_dicom_params",
]
