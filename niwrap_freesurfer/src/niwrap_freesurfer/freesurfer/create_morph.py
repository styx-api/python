# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CREATE_MORPH_METADATA = Metadata(
    id="0ff99b3441c14b38521318fab3badba78909daaf.boutiques",
    name="createMorph",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


CreateMorphParameters = typing.TypedDict('CreateMorphParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/createMorph"]],
    "input_transforms": list[str],
    "output_transform": str,
    "template": typing.NotRequired[InputPathType | None],
    "subject": typing.NotRequired[InputPathType | None],
    "debug_coordinates": typing.NotRequired[list[float] | None],
})
CreateMorphParametersTagged = typing.TypedDict('CreateMorphParametersTagged', {
    "@type": typing.Literal["freesurfer/createMorph"],
    "input_transforms": list[str],
    "output_transform": str,
    "template": typing.NotRequired[InputPathType | None],
    "subject": typing.NotRequired[InputPathType | None],
    "debug_coordinates": typing.NotRequired[list[float] | None],
})


class CreateMorphOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CreateMorphParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_transform_file: OutputPathType
    """The resulting output transform file in tm3d format."""


def create_morph_params(
    input_transforms: list[str],
    output_transform: str,
    template: InputPathType | None = None,
    subject: InputPathType | None = None,
    debug_coordinates: list[float] | None = None,
) -> CreateMorphParametersTagged:
    """
    Build parameters.
    
    Args:
        input_transforms: Input transforms, must specify type (affine, volume,\
            morph, mesh, gcam) with filename.
        output_transform: Output transform file in tm3d format.
        template: Template volume for geometry. Required if a gcam is present.
        subject: Subject volume for geometry.
        debug_coordinates: Coordinates for debugging purposes. Requires three\
            integer values.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/createMorph",
        "input_transforms": input_transforms,
        "output_transform": output_transform,
    }
    if template is not None:
        params["template"] = template
    if subject is not None:
        params["subject"] = subject
    if debug_coordinates is not None:
        params["debug_coordinates"] = debug_coordinates
    return params


def create_morph_cargs(
    params: CreateMorphParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("createMorph")
    cargs.extend([
        "--in",
        *params.get("input_transforms", None)
    ])
    cargs.extend([
        "--out",
        params.get("output_transform", None)
    ])
    if params.get("template", None) is not None:
        cargs.extend([
            "--template",
            execution.input_file(params.get("template", None))
        ])
    if params.get("subject", None) is not None:
        cargs.extend([
            "--subject",
            execution.input_file(params.get("subject", None))
        ])
    if params.get("debug_coordinates", None) is not None:
        cargs.extend([
            "--dbg",
            *map(str, params.get("debug_coordinates", None))
        ])
    return cargs


def create_morph_outputs(
    params: CreateMorphParameters,
    execution: Execution,
) -> CreateMorphOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CreateMorphOutputs(
        root=execution.output_file("."),
        output_transform_file=execution.output_file(params.get("output_transform", None)),
    )
    return ret


def create_morph_execute(
    params: CreateMorphParameters,
    runner: Runner | None = None,
) -> CreateMorphOutputs:
    """
    createMorph
    
    Tool to create morphological transformations using specified input
    transforms.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateMorphOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CREATE_MORPH_METADATA)
    params = execution.params(params)
    cargs = create_morph_cargs(params, execution)
    ret = create_morph_outputs(params, execution)
    execution.run(cargs)
    return ret


def create_morph(
    input_transforms: list[str],
    output_transform: str,
    template: InputPathType | None = None,
    subject: InputPathType | None = None,
    debug_coordinates: list[float] | None = None,
    runner: Runner | None = None,
) -> CreateMorphOutputs:
    """
    createMorph
    
    Tool to create morphological transformations using specified input
    transforms.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_transforms: Input transforms, must specify type (affine, volume,\
            morph, mesh, gcam) with filename.
        output_transform: Output transform file in tm3d format.
        template: Template volume for geometry. Required if a gcam is present.
        subject: Subject volume for geometry.
        debug_coordinates: Coordinates for debugging purposes. Requires three\
            integer values.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateMorphOutputs`).
    """
    params = create_morph_params(
        input_transforms=input_transforms,
        output_transform=output_transform,
        template=template,
        subject=subject,
        debug_coordinates=debug_coordinates,
    )
    return create_morph_execute(params, runner)


__all__ = [
    "CREATE_MORPH_METADATA",
    "CreateMorphOutputs",
    "create_morph",
    "create_morph_execute",
    "create_morph_params",
]
