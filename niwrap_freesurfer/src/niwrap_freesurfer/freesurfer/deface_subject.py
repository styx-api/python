# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DEFACE_SUBJECT_METADATA = Metadata(
    id="7c334a149092c36895908dacd855b00538942a5d.boutiques",
    name="deface_subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DefaceSubjectParameters = typing.TypedDict('DefaceSubjectParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/deface_subject"]],
    "subjects_dir": str,
    "subject_id": str,
    "volume_input": InputPathType,
    "volume_output": str,
})
DefaceSubjectParametersTagged = typing.TypedDict('DefaceSubjectParametersTagged', {
    "@type": typing.Literal["freesurfer/deface_subject"],
    "subjects_dir": str,
    "subject_id": str,
    "volume_input": InputPathType,
    "volume_output": str,
})


class DefaceSubjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DefaceSubjectParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume: OutputPathType
    """Defaced output volume."""


def deface_subject_params(
    subjects_dir: str,
    subject_id: str,
    volume_input: InputPathType,
    volume_output: str,
) -> DefaceSubjectParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects_dir: Directory containing FreeSurfer subject directories.
        subject_id: Subject ID that specifies the subject directory.
        volume_input: Input volume to be defaced.
        volume_output: Output volume after defacing.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/deface_subject",
        "subjects_dir": subjects_dir,
        "subject_id": subject_id,
        "volume_input": volume_input,
        "volume_output": volume_output,
    }
    return params


def deface_subject_cargs(
    params: DefaceSubjectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("deface_subject")
    cargs.extend([
        "-sdir",
        params.get("subjects_dir", None)
    ])
    cargs.extend([
        "-id",
        params.get("subject_id", None)
    ])
    cargs.extend([
        "-i",
        execution.input_file(params.get("volume_input", None))
    ])
    cargs.extend([
        "-o",
        params.get("volume_output", None)
    ])
    return cargs


def deface_subject_outputs(
    params: DefaceSubjectParameters,
    execution: Execution,
) -> DefaceSubjectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DefaceSubjectOutputs(
        root=execution.output_file("."),
        output_volume=execution.output_file(params.get("volume_output", None)),
    )
    return ret


def deface_subject_execute(
    params: DefaceSubjectParameters,
    runner: Runner | None = None,
) -> DefaceSubjectOutputs:
    """
    deface_subject
    
    Tool for defacing MRI images to anonymize patient data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DefaceSubjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DEFACE_SUBJECT_METADATA)
    params = execution.params(params)
    cargs = deface_subject_cargs(params, execution)
    ret = deface_subject_outputs(params, execution)
    execution.run(cargs)
    return ret


def deface_subject(
    subjects_dir: str,
    subject_id: str,
    volume_input: InputPathType,
    volume_output: str,
    runner: Runner | None = None,
) -> DefaceSubjectOutputs:
    """
    deface_subject
    
    Tool for defacing MRI images to anonymize patient data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects_dir: Directory containing FreeSurfer subject directories.
        subject_id: Subject ID that specifies the subject directory.
        volume_input: Input volume to be defaced.
        volume_output: Output volume after defacing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DefaceSubjectOutputs`).
    """
    params = deface_subject_params(
        subjects_dir=subjects_dir,
        subject_id=subject_id,
        volume_input=volume_input,
        volume_output=volume_output,
    )
    return deface_subject_execute(params, runner)


__all__ = [
    "DEFACE_SUBJECT_METADATA",
    "DefaceSubjectOutputs",
    "deface_subject",
    "deface_subject_execute",
    "deface_subject_params",
]
