# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DEFECT2SEG_METADATA = Metadata(
    id="12ffaaea46cdc5d96ba3f6b4833570361e61f73d.boutiques",
    name="defect2seg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Defect2segParameters = typing.TypedDict('Defect2segParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/defect2seg"]],
    "output_seg": str,
    "template": InputPathType,
    "left_hemisphere": typing.NotRequired[list[str] | None],
    "right_hemisphere": typing.NotRequired[list[str] | None],
    "subject": typing.NotRequired[str | None],
    "lh_only": bool,
    "rh_only": bool,
    "cortex": bool,
    "no_cortex": bool,
})
Defect2segParametersTagged = typing.TypedDict('Defect2segParametersTagged', {
    "@type": typing.Literal["freesurfer/defect2seg"],
    "output_seg": str,
    "template": InputPathType,
    "left_hemisphere": typing.NotRequired[list[str] | None],
    "right_hemisphere": typing.NotRequired[list[str] | None],
    "subject": typing.NotRequired[str | None],
    "lh_only": bool,
    "rh_only": bool,
    "cortex": bool,
    "no_cortex": bool,
})


class Defect2segOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Defect2segParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_segmentation: OutputPathType
    """Resulting defect segmentation volume"""


def defect2seg_params(
    output_seg: str,
    template: InputPathType,
    left_hemisphere: list[str] | None = None,
    right_hemisphere: list[str] | None = None,
    subject: str | None = None,
    lh_only: bool = False,
    rh_only: bool = False,
    cortex: bool = False,
    no_cortex: bool = False,
) -> Defect2segParametersTagged:
    """
    Build parameters.
    
    Args:
        output_seg: Output segmentation volume.
        template: Template for segmentation.
        left_hemisphere: Left hemisphere inputs: surface, defect labels,\
            pointset, and offset.
        right_hemisphere: Right hemisphere inputs: surface, defect labels,\
            pointset, and offset.
        subject: Subject identifier, sets default values for other parameters.
        lh_only: Consider only left hemisphere defects.
        rh_only: Consider only right hemisphere defects.
        cortex: Constrain defects to within cortex.
        no_cortex: Allow defects outside of cortex.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/defect2seg",
        "output_seg": output_seg,
        "template": template,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "cortex": cortex,
        "no_cortex": no_cortex,
    }
    if left_hemisphere is not None:
        params["left_hemisphere"] = left_hemisphere
    if right_hemisphere is not None:
        params["right_hemisphere"] = right_hemisphere
    if subject is not None:
        params["subject"] = subject
    return params


def defect2seg_cargs(
    params: Defect2segParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("defect2seg")
    cargs.extend([
        "--o",
        params.get("output_seg", None)
    ])
    cargs.extend([
        "--t",
        execution.input_file(params.get("template", None))
    ])
    if params.get("left_hemisphere", None) is not None:
        cargs.extend([
            "--lh",
            *params.get("left_hemisphere", None)
        ])
    if params.get("right_hemisphere", None) is not None:
        cargs.extend([
            "--rh",
            *params.get("right_hemisphere", None)
        ])
    if params.get("subject", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject", None)
        ])
    if params.get("lh_only", False):
        cargs.append("--lh-only")
    if params.get("rh_only", False):
        cargs.append("--rh-only")
    if params.get("cortex", False):
        cargs.append("--cortex")
    if params.get("no_cortex", False):
        cargs.append("--no-cortex")
    return cargs


def defect2seg_outputs(
    params: Defect2segParameters,
    execution: Execution,
) -> Defect2segOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Defect2segOutputs(
        root=execution.output_file("."),
        output_segmentation=execution.output_file(params.get("output_seg", None)),
    )
    return ret


def defect2seg_execute(
    params: Defect2segParameters,
    runner: Runner | None = None,
) -> Defect2segOutputs:
    """
    defect2seg
    
    Converts surface defect labels into a segmentation volume and pointsets.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Defect2segOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DEFECT2SEG_METADATA)
    params = execution.params(params)
    cargs = defect2seg_cargs(params, execution)
    ret = defect2seg_outputs(params, execution)
    execution.run(cargs)
    return ret


def defect2seg(
    output_seg: str,
    template: InputPathType,
    left_hemisphere: list[str] | None = None,
    right_hemisphere: list[str] | None = None,
    subject: str | None = None,
    lh_only: bool = False,
    rh_only: bool = False,
    cortex: bool = False,
    no_cortex: bool = False,
    runner: Runner | None = None,
) -> Defect2segOutputs:
    """
    defect2seg
    
    Converts surface defect labels into a segmentation volume and pointsets.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_seg: Output segmentation volume.
        template: Template for segmentation.
        left_hemisphere: Left hemisphere inputs: surface, defect labels,\
            pointset, and offset.
        right_hemisphere: Right hemisphere inputs: surface, defect labels,\
            pointset, and offset.
        subject: Subject identifier, sets default values for other parameters.
        lh_only: Consider only left hemisphere defects.
        rh_only: Consider only right hemisphere defects.
        cortex: Constrain defects to within cortex.
        no_cortex: Allow defects outside of cortex.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Defect2segOutputs`).
    """
    params = defect2seg_params(
        output_seg=output_seg,
        template=template,
        left_hemisphere=left_hemisphere,
        right_hemisphere=right_hemisphere,
        subject=subject,
        lh_only=lh_only,
        rh_only=rh_only,
        cortex=cortex,
        no_cortex=no_cortex,
    )
    return defect2seg_execute(params, runner)


__all__ = [
    "DEFECT2SEG_METADATA",
    "Defect2segOutputs",
    "defect2seg",
    "defect2seg_execute",
    "defect2seg_params",
]
