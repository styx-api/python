# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DIFFUSION_UTILS_METADATA = Metadata(
    id="630e5deb25babaf629430731349f2f52c949dcea.boutiques",
    name="diffusionUtils",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DiffusionUtilsParameters = typing.TypedDict('DiffusionUtilsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/diffusionUtils"]],
    "dummy_flag": bool,
})
DiffusionUtilsParametersTagged = typing.TypedDict('DiffusionUtilsParametersTagged', {
    "@type": typing.Literal["freesurfer/diffusionUtils"],
    "dummy_flag": bool,
})


class DiffusionUtilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DiffusionUtilsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def diffusion_utils_params(
    dummy_flag: bool = False,
) -> DiffusionUtilsParametersTagged:
    """
    Build parameters.
    
    Args:
        dummy_flag: Dummy input as no valid help information is provided due to\
            missing module.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/diffusionUtils",
        "dummy_flag": dummy_flag,
    }
    return params


def diffusion_utils_cargs(
    params: DiffusionUtilsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("diffusionUtils")
    if params.get("dummy_flag", False):
        cargs.append("--dummy")
    return cargs


def diffusion_utils_outputs(
    params: DiffusionUtilsParameters,
    execution: Execution,
) -> DiffusionUtilsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DiffusionUtilsOutputs(
        root=execution.output_file("."),
    )
    return ret


def diffusion_utils_execute(
    params: DiffusionUtilsParameters,
    runner: Runner | None = None,
) -> DiffusionUtilsOutputs:
    """
    diffusionUtils
    
    A utility related to diffusion data, potentially using the DIPY library.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DiffusionUtilsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DIFFUSION_UTILS_METADATA)
    params = execution.params(params)
    cargs = diffusion_utils_cargs(params, execution)
    ret = diffusion_utils_outputs(params, execution)
    execution.run(cargs)
    return ret


def diffusion_utils(
    dummy_flag: bool = False,
    runner: Runner | None = None,
) -> DiffusionUtilsOutputs:
    """
    diffusionUtils
    
    A utility related to diffusion data, potentially using the DIPY library.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        dummy_flag: Dummy input as no valid help information is provided due to\
            missing module.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DiffusionUtilsOutputs`).
    """
    params = diffusion_utils_params(
        dummy_flag=dummy_flag,
    )
    return diffusion_utils_execute(params, runner)


__all__ = [
    "DIFFUSION_UTILS_METADATA",
    "DiffusionUtilsOutputs",
    "diffusion_utils",
    "diffusion_utils_execute",
    "diffusion_utils_params",
]
