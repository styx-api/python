# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_MATCH_METADATA = Metadata(
    id="3e19241fdc2d436026c2b1e5858939e139f1083c.boutiques",
    name="dmri_match",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriMatchParameters = typing.TypedDict('DmriMatchParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/dmri_match"]],
    "parcellation1": InputPathType,
    "parcellation2": InputPathType,
    "num_clusters": float,
    "clustering_path1": InputPathType,
    "clustering_path2": InputPathType,
    "labels": bool,
    "euclidean": bool,
    "bounding_box": bool,
    "symmetry": bool,
    "inter_hemi_ratio_removal": typing.NotRequired[str | None],
    "output": str,
})
DmriMatchParametersTagged = typing.TypedDict('DmriMatchParametersTagged', {
    "@type": typing.Literal["freesurfer/dmri_match"],
    "parcellation1": InputPathType,
    "parcellation2": InputPathType,
    "num_clusters": float,
    "clustering_path1": InputPathType,
    "clustering_path2": InputPathType,
    "labels": bool,
    "euclidean": bool,
    "bounding_box": bool,
    "symmetry": bool,
    "inter_hemi_ratio_removal": typing.NotRequired[str | None],
    "output": str,
})


class DmriMatchOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DmriMatchParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file from dmri_match"""


def dmri_match_params(
    parcellation1: InputPathType,
    parcellation2: InputPathType,
    num_clusters: float,
    clustering_path1: InputPathType,
    clustering_path2: InputPathType,
    output: str,
    labels: bool = False,
    euclidean: bool = False,
    bounding_box: bool = False,
    symmetry: bool = False,
    inter_hemi_ratio_removal: str | None = None,
) -> DmriMatchParametersTagged:
    """
    Build parameters.
    
    Args:
        parcellation1: First parcellation input file.
        parcellation2: Second parcellation input file.
        num_clusters: Number of clusters.
        clustering_path1: First clustering path.
        clustering_path2: Second clustering path.
        output: Output file.
        labels: Use labels (no additional input expected).
        euclidean: Use Euclidean distance for matching.
        bounding_box: Use bounding box constraint (no additional input\
            expected).
        symmetry: Use symmetry constraint (no additional input expected).
        inter_hemi_ratio_removal: Inter-hemispheric ratio cluster removal\
            constraint.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/dmri_match",
        "parcellation1": parcellation1,
        "parcellation2": parcellation2,
        "num_clusters": num_clusters,
        "clustering_path1": clustering_path1,
        "clustering_path2": clustering_path2,
        "labels": labels,
        "euclidean": euclidean,
        "bounding_box": bounding_box,
        "symmetry": symmetry,
        "output": output,
    }
    if inter_hemi_ratio_removal is not None:
        params["inter_hemi_ratio_removal"] = inter_hemi_ratio_removal
    return params


def dmri_match_cargs(
    params: DmriMatchParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_match")
    cargs.extend([
        "-s1",
        execution.input_file(params.get("parcellation1", None))
    ])
    cargs.extend([
        "-s2",
        execution.input_file(params.get("parcellation2", None))
    ])
    cargs.extend([
        "-c",
        str(params.get("num_clusters", None))
    ])
    cargs.extend([
        "-h1",
        execution.input_file(params.get("clustering_path1", None))
    ])
    cargs.extend([
        "-h2",
        execution.input_file(params.get("clustering_path2", None))
    ])
    if params.get("labels", False):
        cargs.append("-labels")
    if params.get("euclidean", False):
        cargs.append("-euclid")
    if params.get("bounding_box", False):
        cargs.append("-bb")
    if params.get("symmetry", False):
        cargs.append("-sym")
    if params.get("inter_hemi_ratio_removal", None) is not None:
        cargs.append(params.get("inter_hemi_ratio_removal", None))
    cargs.extend([
        "-o",
        params.get("output", None)
    ])
    return cargs


def dmri_match_outputs(
    params: DmriMatchParameters,
    execution: Execution,
) -> DmriMatchOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriMatchOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output", None)),
    )
    return ret


def dmri_match_execute(
    params: DmriMatchParameters,
    runner: Runner | None = None,
) -> DmriMatchOutputs:
    """
    dmri_match
    
    Tool for matching diffusion MRI parcellations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriMatchOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_MATCH_METADATA)
    params = execution.params(params)
    cargs = dmri_match_cargs(params, execution)
    ret = dmri_match_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_match(
    parcellation1: InputPathType,
    parcellation2: InputPathType,
    num_clusters: float,
    clustering_path1: InputPathType,
    clustering_path2: InputPathType,
    output: str,
    labels: bool = False,
    euclidean: bool = False,
    bounding_box: bool = False,
    symmetry: bool = False,
    inter_hemi_ratio_removal: str | None = None,
    runner: Runner | None = None,
) -> DmriMatchOutputs:
    """
    dmri_match
    
    Tool for matching diffusion MRI parcellations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        parcellation1: First parcellation input file.
        parcellation2: Second parcellation input file.
        num_clusters: Number of clusters.
        clustering_path1: First clustering path.
        clustering_path2: Second clustering path.
        output: Output file.
        labels: Use labels (no additional input expected).
        euclidean: Use Euclidean distance for matching.
        bounding_box: Use bounding box constraint (no additional input\
            expected).
        symmetry: Use symmetry constraint (no additional input expected).
        inter_hemi_ratio_removal: Inter-hemispheric ratio cluster removal\
            constraint.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriMatchOutputs`).
    """
    params = dmri_match_params(
        parcellation1=parcellation1,
        parcellation2=parcellation2,
        num_clusters=num_clusters,
        clustering_path1=clustering_path1,
        clustering_path2=clustering_path2,
        labels=labels,
        euclidean=euclidean,
        bounding_box=bounding_box,
        symmetry=symmetry,
        inter_hemi_ratio_removal=inter_hemi_ratio_removal,
        output=output,
    )
    return dmri_match_execute(params, runner)


__all__ = [
    "DMRI_MATCH_METADATA",
    "DmriMatchOutputs",
    "dmri_match",
    "dmri_match_execute",
    "dmri_match_params",
]
