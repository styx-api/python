# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_MERGEPATHS_METADATA = Metadata(
    id="d09f39b5969ca1e494eb59099da10470db2c3ada.boutiques",
    name="dmri_mergepaths",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriMergepathsParameters = typing.TypedDict('DmriMergepathsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/dmri_mergepaths"]],
    "input_volumes": list[InputPathType],
    "input_directory": typing.NotRequired[str | None],
    "output_volume": str,
    "color_table": InputPathType,
    "threshold": float,
    "debug": bool,
    "check_opts": bool,
})
DmriMergepathsParametersTagged = typing.TypedDict('DmriMergepathsParametersTagged', {
    "@type": typing.Literal["freesurfer/dmri_mergepaths"],
    "input_volumes": list[InputPathType],
    "input_directory": typing.NotRequired[str | None],
    "output_volume": str,
    "color_table": InputPathType,
    "threshold": float,
    "debug": bool,
    "check_opts": bool,
})


class DmriMergepathsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DmriMergepathsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def dmri_mergepaths_params(
    input_volumes: list[InputPathType],
    output_volume: str,
    color_table: InputPathType,
    threshold: float,
    input_directory: str | None = None,
    debug: bool = False,
    check_opts: bool = False,
) -> DmriMergepathsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volumes: Input volume(s).
        output_volume: Output volume.
        color_table: Color table file.
        threshold: Lower threshold for display (0<=num<=1, as fraction of max).
        input_directory: Input directory (optional). If specified, names of\
            input files are relative to this.
        debug: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/dmri_mergepaths",
        "input_volumes": input_volumes,
        "output_volume": output_volume,
        "color_table": color_table,
        "threshold": threshold,
        "debug": debug,
        "check_opts": check_opts,
    }
    if input_directory is not None:
        params["input_directory"] = input_directory
    return params


def dmri_mergepaths_cargs(
    params: DmriMergepathsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_mergepaths")
    cargs.extend([execution.input_file(f) for f in params.get("input_volumes", None)])
    if params.get("input_directory", None) is not None:
        cargs.extend([
            "--indir",
            params.get("input_directory", None)
        ])
    cargs.extend([
        "--out",
        params.get("output_volume", None)
    ])
    cargs.extend([
        "--ctab",
        execution.input_file(params.get("color_table", None))
    ])
    cargs.extend([
        "--thresh",
        str(params.get("threshold", None))
    ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("check_opts", False):
        cargs.append("--checkopts")
    return cargs


def dmri_mergepaths_outputs(
    params: DmriMergepathsParameters,
    execution: Execution,
) -> DmriMergepathsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriMergepathsOutputs(
        root=execution.output_file("."),
    )
    return ret


def dmri_mergepaths_execute(
    params: DmriMergepathsParameters,
    runner: Runner | None = None,
) -> DmriMergepathsOutputs:
    """
    dmri_mergepaths
    
    A tool for merging diffusion MRI path data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriMergepathsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_MERGEPATHS_METADATA)
    params = execution.params(params)
    cargs = dmri_mergepaths_cargs(params, execution)
    ret = dmri_mergepaths_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_mergepaths(
    input_volumes: list[InputPathType],
    output_volume: str,
    color_table: InputPathType,
    threshold: float,
    input_directory: str | None = None,
    debug: bool = False,
    check_opts: bool = False,
    runner: Runner | None = None,
) -> DmriMergepathsOutputs:
    """
    dmri_mergepaths
    
    A tool for merging diffusion MRI path data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volumes: Input volume(s).
        output_volume: Output volume.
        color_table: Color table file.
        threshold: Lower threshold for display (0<=num<=1, as fraction of max).
        input_directory: Input directory (optional). If specified, names of\
            input files are relative to this.
        debug: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriMergepathsOutputs`).
    """
    params = dmri_mergepaths_params(
        input_volumes=input_volumes,
        input_directory=input_directory,
        output_volume=output_volume,
        color_table=color_table,
        threshold=threshold,
        debug=debug,
        check_opts=check_opts,
    )
    return dmri_mergepaths_execute(params, runner)


__all__ = [
    "DMRI_MERGEPATHS_METADATA",
    "DmriMergepathsOutputs",
    "dmri_mergepaths",
    "dmri_mergepaths_execute",
    "dmri_mergepaths_params",
]
