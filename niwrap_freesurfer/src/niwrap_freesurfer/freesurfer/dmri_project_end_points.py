# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_PROJECT_END_POINTS_METADATA = Metadata(
    id="61111b40c648f169944bf98b5918d4561840f813.boutiques",
    name="dmri_projectEndPoints",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriProjectEndPointsParameters = typing.TypedDict('DmriProjectEndPointsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/dmri_projectEndPoints"]],
    "streamline_file": InputPathType,
    "left_surface_file": InputPathType,
    "right_surface_file": InputPathType,
    "left_overlay_file": str,
    "right_overlay_file": str,
    "reference_image": InputPathType,
})
DmriProjectEndPointsParametersTagged = typing.TypedDict('DmriProjectEndPointsParametersTagged', {
    "@type": typing.Literal["freesurfer/dmri_projectEndPoints"],
    "streamline_file": InputPathType,
    "left_surface_file": InputPathType,
    "right_surface_file": InputPathType,
    "left_overlay_file": str,
    "right_overlay_file": str,
    "reference_image": InputPathType,
})


class DmriProjectEndPointsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DmriProjectEndPointsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_left_overlay: OutputPathType
    """Overlay file for left hemisphere surface"""
    out_right_overlay: OutputPathType
    """Overlay file for right hemisphere surface"""


def dmri_project_end_points_params(
    streamline_file: InputPathType,
    left_surface_file: InputPathType,
    right_surface_file: InputPathType,
    left_overlay_file: str,
    right_overlay_file: str,
    reference_image: InputPathType,
) -> DmriProjectEndPointsParametersTagged:
    """
    Build parameters.
    
    Args:
        streamline_file: Input streamline file (e.g. streamlineFile.trk).
        left_surface_file: Left hemisphere surface file (e.g.\
            surfaceFile_lh.orig).
        right_surface_file: Right hemisphere surface file (e.g.\
            surfaceFile_rh.orig).
        left_overlay_file: Output overlay file for left hemisphere.
        right_overlay_file: Output overlay file for right hemisphere.
        reference_image: Reference image for the projections.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/dmri_projectEndPoints",
        "streamline_file": streamline_file,
        "left_surface_file": left_surface_file,
        "right_surface_file": right_surface_file,
        "left_overlay_file": left_overlay_file,
        "right_overlay_file": right_overlay_file,
        "reference_image": reference_image,
    }
    return params


def dmri_project_end_points_cargs(
    params: DmriProjectEndPointsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_projectEndPoints")
    cargs.extend([
        "-i",
        execution.input_file(params.get("streamline_file", None))
    ])
    cargs.extend([
        "-sl",
        execution.input_file(params.get("left_surface_file", None))
    ])
    cargs.extend([
        "-sr",
        execution.input_file(params.get("right_surface_file", None))
    ])
    cargs.extend([
        "-ol",
        params.get("left_overlay_file", None)
    ])
    cargs.extend([
        "-or",
        params.get("right_overlay_file", None)
    ])
    cargs.extend([
        "-ri",
        execution.input_file(params.get("reference_image", None))
    ])
    return cargs


def dmri_project_end_points_outputs(
    params: DmriProjectEndPointsParameters,
    execution: Execution,
) -> DmriProjectEndPointsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriProjectEndPointsOutputs(
        root=execution.output_file("."),
        out_left_overlay=execution.output_file(params.get("left_overlay_file", None)),
        out_right_overlay=execution.output_file(params.get("right_overlay_file", None)),
    )
    return ret


def dmri_project_end_points_execute(
    params: DmriProjectEndPointsParameters,
    runner: Runner | None = None,
) -> DmriProjectEndPointsOutputs:
    """
    dmri_projectEndPoints
    
    A tool for projecting the endpoints of streamlines onto cortical surfaces,
    producing overlay files for visualization.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriProjectEndPointsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_PROJECT_END_POINTS_METADATA)
    params = execution.params(params)
    cargs = dmri_project_end_points_cargs(params, execution)
    ret = dmri_project_end_points_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_project_end_points(
    streamline_file: InputPathType,
    left_surface_file: InputPathType,
    right_surface_file: InputPathType,
    left_overlay_file: str,
    right_overlay_file: str,
    reference_image: InputPathType,
    runner: Runner | None = None,
) -> DmriProjectEndPointsOutputs:
    """
    dmri_projectEndPoints
    
    A tool for projecting the endpoints of streamlines onto cortical surfaces,
    producing overlay files for visualization.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        streamline_file: Input streamline file (e.g. streamlineFile.trk).
        left_surface_file: Left hemisphere surface file (e.g.\
            surfaceFile_lh.orig).
        right_surface_file: Right hemisphere surface file (e.g.\
            surfaceFile_rh.orig).
        left_overlay_file: Output overlay file for left hemisphere.
        right_overlay_file: Output overlay file for right hemisphere.
        reference_image: Reference image for the projections.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriProjectEndPointsOutputs`).
    """
    params = dmri_project_end_points_params(
        streamline_file=streamline_file,
        left_surface_file=left_surface_file,
        right_surface_file=right_surface_file,
        left_overlay_file=left_overlay_file,
        right_overlay_file=right_overlay_file,
        reference_image=reference_image,
    )
    return dmri_project_end_points_execute(params, runner)


__all__ = [
    "DMRI_PROJECT_END_POINTS_METADATA",
    "DmriProjectEndPointsOutputs",
    "dmri_project_end_points",
    "dmri_project_end_points_execute",
    "dmri_project_end_points_params",
]
