# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_SPLINE_METADATA = Metadata(
    id="304947980f37d974ccae1237b4ef678652a556e0.boutiques",
    name="dmri_spline",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriSplineParameters = typing.TypedDict('DmriSplineParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/dmri_spline"]],
    "control_points_file": InputPathType,
    "mask_volume": InputPathType,
    "output_volume": typing.NotRequired[str | None],
    "show_points": bool,
    "output_points": typing.NotRequired[str | None],
    "output_vectors_base": typing.NotRequired[str | None],
    "debug": bool,
    "check_options": bool,
})
DmriSplineParametersTagged = typing.TypedDict('DmriSplineParametersTagged', {
    "@type": typing.Literal["freesurfer/dmri_spline"],
    "control_points_file": InputPathType,
    "mask_volume": InputPathType,
    "output_volume": typing.NotRequired[str | None],
    "show_points": bool,
    "output_points": typing.NotRequired[str | None],
    "output_vectors_base": typing.NotRequired[str | None],
    "debug": bool,
    "check_options": bool,
})


class DmriSplineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DmriSplineParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_volume: OutputPathType | None
    """Output volume of the interpolated spline"""
    out_points_file: OutputPathType | None
    """Output text file with interpolated spline points"""
    out_tangent_vectors: OutputPathType | None
    """Output text file containing tangent vectors"""
    out_normal_vectors: OutputPathType | None
    """Output text file containing normal vectors"""
    out_curvature: OutputPathType | None
    """Output text file containing curvatures"""


def dmri_spline_params(
    control_points_file: InputPathType,
    mask_volume: InputPathType,
    output_volume: str | None = None,
    show_points: bool = False,
    output_points: str | None = None,
    output_vectors_base: str | None = None,
    debug: bool = False,
    check_options: bool = False,
) -> DmriSplineParametersTagged:
    """
    Build parameters.
    
    Args:
        control_points_file: Input text file containing control points.
        mask_volume: Input mask volume (spline is not allowed to stray off\
            mask).
        output_volume: Output volume of the interpolated spline.
        show_points: Highlight control points in output volume (default: no).
        output_points: Output text file containing all interpolated spline\
            points.
        output_vectors_base: Base name of output text files containing tangent\
            vectors, normal vectors, and curvatures at every point along the spline.
        debug: Turn on debugging.
        check_options: Don't run anything, just check options and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/dmri_spline",
        "control_points_file": control_points_file,
        "mask_volume": mask_volume,
        "show_points": show_points,
        "debug": debug,
        "check_options": check_options,
    }
    if output_volume is not None:
        params["output_volume"] = output_volume
    if output_points is not None:
        params["output_points"] = output_points
    if output_vectors_base is not None:
        params["output_vectors_base"] = output_vectors_base
    return params


def dmri_spline_cargs(
    params: DmriSplineParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_spline")
    cargs.extend([
        "--cpts",
        execution.input_file(params.get("control_points_file", None))
    ])
    cargs.extend([
        "--mask",
        execution.input_file(params.get("mask_volume", None))
    ])
    if params.get("output_volume", None) is not None:
        cargs.extend([
            "--out",
            params.get("output_volume", None)
        ])
    if params.get("show_points", False):
        cargs.append("--show")
    if params.get("output_points", None) is not None:
        cargs.extend([
            "--outpts",
            params.get("output_points", None)
        ])
    if params.get("output_vectors_base", None) is not None:
        cargs.extend([
            "--outvec",
            params.get("output_vectors_base", None)
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("check_options", False):
        cargs.append("--checkopts")
    return cargs


def dmri_spline_outputs(
    params: DmriSplineParameters,
    execution: Execution,
) -> DmriSplineOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriSplineOutputs(
        root=execution.output_file("."),
        out_volume=execution.output_file(params.get("output_volume", None)) if (params.get("output_volume") is not None) else None,
        out_points_file=execution.output_file(params.get("output_points", None)) if (params.get("output_points") is not None) else None,
        out_tangent_vectors=execution.output_file(params.get("output_vectors_base", None) + "_tangent.txt") if (params.get("output_vectors_base") is not None) else None,
        out_normal_vectors=execution.output_file(params.get("output_vectors_base", None) + "_normal.txt") if (params.get("output_vectors_base") is not None) else None,
        out_curvature=execution.output_file(params.get("output_vectors_base", None) + "_curvature.txt") if (params.get("output_vectors_base") is not None) else None,
    )
    return ret


def dmri_spline_execute(
    params: DmriSplineParameters,
    runner: Runner | None = None,
) -> DmriSplineOutputs:
    """
    dmri_spline
    
    Tool for interpolating and analyzing splines within a defined mask.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriSplineOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_SPLINE_METADATA)
    params = execution.params(params)
    cargs = dmri_spline_cargs(params, execution)
    ret = dmri_spline_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_spline(
    control_points_file: InputPathType,
    mask_volume: InputPathType,
    output_volume: str | None = None,
    show_points: bool = False,
    output_points: str | None = None,
    output_vectors_base: str | None = None,
    debug: bool = False,
    check_options: bool = False,
    runner: Runner | None = None,
) -> DmriSplineOutputs:
    """
    dmri_spline
    
    Tool for interpolating and analyzing splines within a defined mask.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        control_points_file: Input text file containing control points.
        mask_volume: Input mask volume (spline is not allowed to stray off\
            mask).
        output_volume: Output volume of the interpolated spline.
        show_points: Highlight control points in output volume (default: no).
        output_points: Output text file containing all interpolated spline\
            points.
        output_vectors_base: Base name of output text files containing tangent\
            vectors, normal vectors, and curvatures at every point along the spline.
        debug: Turn on debugging.
        check_options: Don't run anything, just check options and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriSplineOutputs`).
    """
    params = dmri_spline_params(
        control_points_file=control_points_file,
        mask_volume=mask_volume,
        output_volume=output_volume,
        show_points=show_points,
        output_points=output_points,
        output_vectors_base=output_vectors_base,
        debug=debug,
        check_options=check_options,
    )
    return dmri_spline_execute(params, runner)


__all__ = [
    "DMRI_SPLINE_METADATA",
    "DmriSplineOutputs",
    "dmri_spline",
    "dmri_spline_execute",
    "dmri_spline_params",
]
