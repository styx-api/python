# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DMRI_TRK2TRK_METADATA = Metadata(
    id="85bb5d53793134c6ba0badd997794eca3a6ffbbe.boutiques",
    name="dmri_trk2trk",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


DmriTrk2trkParameters = typing.TypedDict('DmriTrk2trkParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/dmri_trk2trk"]],
    "in_trk": list[InputPathType],
    "in_asc": typing.NotRequired[list[InputPathType] | None],
    "in_dir": typing.NotRequired[str | None],
    "out_trk": typing.NotRequired[str | None],
    "out_asc": typing.NotRequired[str | None],
    "out_vol": typing.NotRequired[str | None],
    "out_dir": typing.NotRequired[str | None],
    "in_ref": typing.NotRequired[InputPathType | None],
    "out_ref": typing.NotRequired[InputPathType | None],
    "reg_file": typing.NotRequired[InputPathType | None],
    "regnl_file": typing.NotRequired[InputPathType | None],
    "inv_flag": bool,
    "fill_flag": bool,
    "overlay": typing.NotRequired[list[InputPathType] | None],
    "inclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "exclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "terminal_inclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "terminal_exclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "length_min": typing.NotRequired[float | None],
    "length_max": typing.NotRequired[float | None],
    "mean_flag": bool,
    "nearmean_flag": bool,
    "nth_streamline": typing.NotRequired[float | None],
    "every_nth_streamline": typing.NotRequired[float | None],
    "smooth_flag": bool,
    "debug_flag": bool,
    "check_opts": bool,
})
DmriTrk2trkParametersTagged = typing.TypedDict('DmriTrk2trkParametersTagged', {
    "@type": typing.Literal["freesurfer/dmri_trk2trk"],
    "in_trk": list[InputPathType],
    "in_asc": typing.NotRequired[list[InputPathType] | None],
    "in_dir": typing.NotRequired[str | None],
    "out_trk": typing.NotRequired[str | None],
    "out_asc": typing.NotRequired[str | None],
    "out_vol": typing.NotRequired[str | None],
    "out_dir": typing.NotRequired[str | None],
    "in_ref": typing.NotRequired[InputPathType | None],
    "out_ref": typing.NotRequired[InputPathType | None],
    "reg_file": typing.NotRequired[InputPathType | None],
    "regnl_file": typing.NotRequired[InputPathType | None],
    "inv_flag": bool,
    "fill_flag": bool,
    "overlay": typing.NotRequired[list[InputPathType] | None],
    "inclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "exclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "terminal_inclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "terminal_exclusion_mask": typing.NotRequired[list[InputPathType] | None],
    "length_min": typing.NotRequired[float | None],
    "length_max": typing.NotRequired[float | None],
    "mean_flag": bool,
    "nearmean_flag": bool,
    "nth_streamline": typing.NotRequired[float | None],
    "every_nth_streamline": typing.NotRequired[float | None],
    "smooth_flag": bool,
    "debug_flag": bool,
    "check_opts": bool,
})


class DmriTrk2trkOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DmriTrk2trkParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_trk_file: OutputPathType | None
    """Transformed output .trk file"""
    out_asc_file: OutputPathType | None
    """Transformed output ASCII text file"""
    out_vol_file: OutputPathType | None
    """Transformed output volume"""


def dmri_trk2trk_params(
    in_trk: list[InputPathType],
    in_asc: list[InputPathType] | None = None,
    in_dir: str | None = None,
    out_trk: str | None = None,
    out_asc: str | None = None,
    out_vol: str | None = None,
    out_dir: str | None = None,
    in_ref: InputPathType | None = None,
    out_ref: InputPathType | None = None,
    reg_file: InputPathType | None = None,
    regnl_file: InputPathType | None = None,
    inv_flag: bool = False,
    fill_flag: bool = False,
    overlay: list[InputPathType] | None = None,
    inclusion_mask: list[InputPathType] | None = None,
    exclusion_mask: list[InputPathType] | None = None,
    terminal_inclusion_mask: list[InputPathType] | None = None,
    terminal_exclusion_mask: list[InputPathType] | None = None,
    length_min: float | None = None,
    length_max: float | None = None,
    mean_flag: bool = False,
    nearmean_flag: bool = False,
    nth_streamline: float | None = None,
    every_nth_streamline: float | None = None,
    smooth_flag: bool = False,
    debug_flag: bool = False,
    check_opts: bool = False,
) -> DmriTrk2trkParametersTagged:
    """
    Build parameters.
    
    Args:
        in_trk: Input .trk file(s).
        in_asc: Input ASCII plain text file(s), as an alternative to .trk.
        in_dir: Input directory (optional).
        out_trk: Output .trk file(s), as many as inputs (or 1 to merge inputs).
        out_asc: Output ASCII plain text file(s), as many as inputs (or 1 to\
            merge inputs).
        out_vol: Output volume(s), as many as inputs (or 1 to merge inputs).
        out_dir: Output directory (optional).
        in_ref: Input reference volume (needed for --reg/--regnl).
        out_ref: Output reference volume (needed for --reg/--regnl/--outvol).
        reg_file: Affine registration file (.lta or .mat), applied first.
        regnl_file: Nonlinear registration file (.m3z), applied second.
        inv_flag: Apply inverse of registration (default: no).
        fill_flag: Fill gaps b/w mapped points by linear interpolation.
        overlay: Scalar overlay 1D volume(s), applied to all input .trk files.
        inclusion_mask: Inclusion mask(s), applied to all input .trk files.
        exclusion_mask: Exclusion mask(s), applied to all input .trk files.
        terminal_inclusion_mask: Terminal inclusion mask(s), applied to all\
            input .trk files.
        terminal_exclusion_mask: Terminal exclusion mask(s), applied to all\
            input .trk files.
        length_min: Only save streamlines with length greater than this number.
        length_max: Only save streamlines with length smaller than this number.
        mean_flag: Only save the mean of the streamlines (Default: save all).
        nearmean_flag: Only save the streamline nearest to the mean (Default:\
            save all).
        nth_streamline: Only save the n-th (0-based) streamline (Default: save\
            all).
        every_nth_streamline: Only save every n-th streamline (Default: save\
            all).
        smooth_flag: Smooth streamlines (default: no).
        debug_flag: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/dmri_trk2trk",
        "in_trk": in_trk,
        "inv_flag": inv_flag,
        "fill_flag": fill_flag,
        "mean_flag": mean_flag,
        "nearmean_flag": nearmean_flag,
        "smooth_flag": smooth_flag,
        "debug_flag": debug_flag,
        "check_opts": check_opts,
    }
    if in_asc is not None:
        params["in_asc"] = in_asc
    if in_dir is not None:
        params["in_dir"] = in_dir
    if out_trk is not None:
        params["out_trk"] = out_trk
    if out_asc is not None:
        params["out_asc"] = out_asc
    if out_vol is not None:
        params["out_vol"] = out_vol
    if out_dir is not None:
        params["out_dir"] = out_dir
    if in_ref is not None:
        params["in_ref"] = in_ref
    if out_ref is not None:
        params["out_ref"] = out_ref
    if reg_file is not None:
        params["reg_file"] = reg_file
    if regnl_file is not None:
        params["regnl_file"] = regnl_file
    if overlay is not None:
        params["overlay"] = overlay
    if inclusion_mask is not None:
        params["inclusion_mask"] = inclusion_mask
    if exclusion_mask is not None:
        params["exclusion_mask"] = exclusion_mask
    if terminal_inclusion_mask is not None:
        params["terminal_inclusion_mask"] = terminal_inclusion_mask
    if terminal_exclusion_mask is not None:
        params["terminal_exclusion_mask"] = terminal_exclusion_mask
    if length_min is not None:
        params["length_min"] = length_min
    if length_max is not None:
        params["length_max"] = length_max
    if nth_streamline is not None:
        params["nth_streamline"] = nth_streamline
    if every_nth_streamline is not None:
        params["every_nth_streamline"] = every_nth_streamline
    return params


def dmri_trk2trk_cargs(
    params: DmriTrk2trkParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dmri_trk2trk")
    cargs.extend([
        "--in",
        *[execution.input_file(f) for f in params.get("in_trk", None)]
    ])
    if params.get("in_asc", None) is not None:
        cargs.extend([
            "--inasc",
            *[execution.input_file(f) for f in params.get("in_asc", None)]
        ])
    if params.get("in_dir", None) is not None:
        cargs.extend([
            "--indir",
            params.get("in_dir", None)
        ])
    if params.get("out_trk", None) is not None:
        cargs.extend([
            "--out",
            params.get("out_trk", None)
        ])
    if params.get("out_asc", None) is not None:
        cargs.extend([
            "--outasc",
            params.get("out_asc", None)
        ])
    if params.get("out_vol", None) is not None:
        cargs.extend([
            "--outvol",
            params.get("out_vol", None)
        ])
    if params.get("out_dir", None) is not None:
        cargs.extend([
            "--outdir",
            params.get("out_dir", None)
        ])
    if params.get("in_ref", None) is not None:
        cargs.extend([
            "--inref",
            execution.input_file(params.get("in_ref", None))
        ])
    if params.get("out_ref", None) is not None:
        cargs.extend([
            "--outref",
            execution.input_file(params.get("out_ref", None))
        ])
    if params.get("reg_file", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("reg_file", None))
        ])
    if params.get("regnl_file", None) is not None:
        cargs.extend([
            "--regnl",
            execution.input_file(params.get("regnl_file", None))
        ])
    if params.get("inv_flag", False):
        cargs.append("--inv")
    if params.get("fill_flag", False):
        cargs.append("--fill")
    if params.get("overlay", None) is not None:
        cargs.extend([
            "--over",
            *[execution.input_file(f) for f in params.get("overlay", None)]
        ])
    if params.get("inclusion_mask", None) is not None:
        cargs.extend([
            "--imask",
            *[execution.input_file(f) for f in params.get("inclusion_mask", None)]
        ])
    if params.get("exclusion_mask", None) is not None:
        cargs.extend([
            "--emask",
            *[execution.input_file(f) for f in params.get("exclusion_mask", None)]
        ])
    if params.get("terminal_inclusion_mask", None) is not None:
        cargs.extend([
            "--itmask",
            *[execution.input_file(f) for f in params.get("terminal_inclusion_mask", None)]
        ])
    if params.get("terminal_exclusion_mask", None) is not None:
        cargs.extend([
            "--etmask",
            *[execution.input_file(f) for f in params.get("terminal_exclusion_mask", None)]
        ])
    if params.get("length_min", None) is not None:
        cargs.extend([
            "--lmin",
            str(params.get("length_min", None))
        ])
    if params.get("length_max", None) is not None:
        cargs.extend([
            "--lmax",
            str(params.get("length_max", None))
        ])
    if params.get("mean_flag", False):
        cargs.append("--mean")
    if params.get("nearmean_flag", False):
        cargs.append("--nearmean")
    if params.get("nth_streamline", None) is not None:
        cargs.extend([
            "--nth",
            str(params.get("nth_streamline", None))
        ])
    if params.get("every_nth_streamline", None) is not None:
        cargs.extend([
            "--every",
            str(params.get("every_nth_streamline", None))
        ])
    if params.get("smooth_flag", False):
        cargs.append("--smooth")
    if params.get("debug_flag", False):
        cargs.append("--debug")
    if params.get("check_opts", False):
        cargs.append("--checkopts")
    return cargs


def dmri_trk2trk_outputs(
    params: DmriTrk2trkParameters,
    execution: Execution,
) -> DmriTrk2trkOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DmriTrk2trkOutputs(
        root=execution.output_file("."),
        out_trk_file=execution.output_file(params.get("out_trk", None)) if (params.get("out_trk") is not None) else None,
        out_asc_file=execution.output_file(params.get("out_asc", None)) if (params.get("out_asc") is not None) else None,
        out_vol_file=execution.output_file(params.get("out_vol", None)) if (params.get("out_vol") is not None) else None,
    )
    return ret


def dmri_trk2trk_execute(
    params: DmriTrk2trkParameters,
    runner: Runner | None = None,
) -> DmriTrk2trkOutputs:
    """
    dmri_trk2trk
    
    A tool for transforming and analyzing tractography data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriTrk2trkOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DMRI_TRK2TRK_METADATA)
    params = execution.params(params)
    cargs = dmri_trk2trk_cargs(params, execution)
    ret = dmri_trk2trk_outputs(params, execution)
    execution.run(cargs)
    return ret


def dmri_trk2trk(
    in_trk: list[InputPathType],
    in_asc: list[InputPathType] | None = None,
    in_dir: str | None = None,
    out_trk: str | None = None,
    out_asc: str | None = None,
    out_vol: str | None = None,
    out_dir: str | None = None,
    in_ref: InputPathType | None = None,
    out_ref: InputPathType | None = None,
    reg_file: InputPathType | None = None,
    regnl_file: InputPathType | None = None,
    inv_flag: bool = False,
    fill_flag: bool = False,
    overlay: list[InputPathType] | None = None,
    inclusion_mask: list[InputPathType] | None = None,
    exclusion_mask: list[InputPathType] | None = None,
    terminal_inclusion_mask: list[InputPathType] | None = None,
    terminal_exclusion_mask: list[InputPathType] | None = None,
    length_min: float | None = None,
    length_max: float | None = None,
    mean_flag: bool = False,
    nearmean_flag: bool = False,
    nth_streamline: float | None = None,
    every_nth_streamline: float | None = None,
    smooth_flag: bool = False,
    debug_flag: bool = False,
    check_opts: bool = False,
    runner: Runner | None = None,
) -> DmriTrk2trkOutputs:
    """
    dmri_trk2trk
    
    A tool for transforming and analyzing tractography data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        in_trk: Input .trk file(s).
        in_asc: Input ASCII plain text file(s), as an alternative to .trk.
        in_dir: Input directory (optional).
        out_trk: Output .trk file(s), as many as inputs (or 1 to merge inputs).
        out_asc: Output ASCII plain text file(s), as many as inputs (or 1 to\
            merge inputs).
        out_vol: Output volume(s), as many as inputs (or 1 to merge inputs).
        out_dir: Output directory (optional).
        in_ref: Input reference volume (needed for --reg/--regnl).
        out_ref: Output reference volume (needed for --reg/--regnl/--outvol).
        reg_file: Affine registration file (.lta or .mat), applied first.
        regnl_file: Nonlinear registration file (.m3z), applied second.
        inv_flag: Apply inverse of registration (default: no).
        fill_flag: Fill gaps b/w mapped points by linear interpolation.
        overlay: Scalar overlay 1D volume(s), applied to all input .trk files.
        inclusion_mask: Inclusion mask(s), applied to all input .trk files.
        exclusion_mask: Exclusion mask(s), applied to all input .trk files.
        terminal_inclusion_mask: Terminal inclusion mask(s), applied to all\
            input .trk files.
        terminal_exclusion_mask: Terminal exclusion mask(s), applied to all\
            input .trk files.
        length_min: Only save streamlines with length greater than this number.
        length_max: Only save streamlines with length smaller than this number.
        mean_flag: Only save the mean of the streamlines (Default: save all).
        nearmean_flag: Only save the streamline nearest to the mean (Default:\
            save all).
        nth_streamline: Only save the n-th (0-based) streamline (Default: save\
            all).
        every_nth_streamline: Only save every n-th streamline (Default: save\
            all).
        smooth_flag: Smooth streamlines (default: no).
        debug_flag: Turn on debugging.
        check_opts: Don't run anything, just check options and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DmriTrk2trkOutputs`).
    """
    params = dmri_trk2trk_params(
        in_trk=in_trk,
        in_asc=in_asc,
        in_dir=in_dir,
        out_trk=out_trk,
        out_asc=out_asc,
        out_vol=out_vol,
        out_dir=out_dir,
        in_ref=in_ref,
        out_ref=out_ref,
        reg_file=reg_file,
        regnl_file=regnl_file,
        inv_flag=inv_flag,
        fill_flag=fill_flag,
        overlay=overlay,
        inclusion_mask=inclusion_mask,
        exclusion_mask=exclusion_mask,
        terminal_inclusion_mask=terminal_inclusion_mask,
        terminal_exclusion_mask=terminal_exclusion_mask,
        length_min=length_min,
        length_max=length_max,
        mean_flag=mean_flag,
        nearmean_flag=nearmean_flag,
        nth_streamline=nth_streamline,
        every_nth_streamline=every_nth_streamline,
        smooth_flag=smooth_flag,
        debug_flag=debug_flag,
        check_opts=check_opts,
    )
    return dmri_trk2trk_execute(params, runner)


__all__ = [
    "DMRI_TRK2TRK_METADATA",
    "DmriTrk2trkOutputs",
    "dmri_trk2trk",
    "dmri_trk2trk_execute",
    "dmri_trk2trk_params",
]
