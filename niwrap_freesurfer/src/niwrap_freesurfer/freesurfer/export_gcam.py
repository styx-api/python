# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

EXPORT_GCAM_METADATA = Metadata(
    id="3b19d60cb17d730d36308a8cf56655ae554738ff.boutiques",
    name="exportGcam",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ExportGcamParameters = typing.TypedDict('ExportGcamParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/exportGcam"]],
    "fixed": InputPathType,
    "moving": InputPathType,
    "morph": InputPathType,
    "out_gcam": str,
    "zlib_buffer": typing.NotRequired[float | None],
    "bbox_threshold": typing.NotRequired[float | None],
    "interp_method": typing.NotRequired[typing.Literal["linear", "nearest"] | None],
    "test": bool,
})
ExportGcamParametersTagged = typing.TypedDict('ExportGcamParametersTagged', {
    "@type": typing.Literal["freesurfer/exportGcam"],
    "fixed": InputPathType,
    "moving": InputPathType,
    "morph": InputPathType,
    "out_gcam": str,
    "zlib_buffer": typing.NotRequired[float | None],
    "bbox_threshold": typing.NotRequired[float | None],
    "interp_method": typing.NotRequired[typing.Literal["linear", "nearest"] | None],
    "test": bool,
})


class ExportGcamOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ExportGcamParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_gcam_file: OutputPathType
    """Output GCAM file."""


def export_gcam_params(
    fixed: InputPathType,
    moving: InputPathType,
    morph: InputPathType,
    out_gcam: str,
    zlib_buffer: float | None = None,
    bbox_threshold: float | None = None,
    interp_method: typing.Literal["linear", "nearest"] | None = None,
    test: bool = False,
) -> ExportGcamParametersTagged:
    """
    Build parameters.
    
    Args:
        fixed: Fixed volume.
        moving: Moving volume.
        morph: Morph.
        out_gcam: Output GCAM (Geodesic Coordinate-based Anatomic Mapping).
        zlib_buffer: Zlib buffer pre-allocation multiplier.
        bbox_threshold: Threshold for bounding box. If absent, no bbox will be\
            used.
        interp_method: Interpolation method. Choices: linear, nearest. Default\
            is linear.
        test: Write out test files to verify the equivalence of tm3d and gcam\
            morphs.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/exportGcam",
        "fixed": fixed,
        "moving": moving,
        "morph": morph,
        "out_gcam": out_gcam,
        "test": test,
    }
    if zlib_buffer is not None:
        params["zlib_buffer"] = zlib_buffer
    if bbox_threshold is not None:
        params["bbox_threshold"] = bbox_threshold
    if interp_method is not None:
        params["interp_method"] = interp_method
    return params


def export_gcam_cargs(
    params: ExportGcamParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("exportGcam")
    cargs.extend([
        "--fixed",
        execution.input_file(params.get("fixed", None))
    ])
    cargs.extend([
        "--moving",
        execution.input_file(params.get("moving", None))
    ])
    cargs.extend([
        "--morph",
        execution.input_file(params.get("morph", None))
    ])
    cargs.extend([
        "--out_gcam",
        params.get("out_gcam", None)
    ])
    if params.get("zlib_buffer", None) is not None:
        cargs.extend([
            "--zlib_buffer",
            str(params.get("zlib_buffer", None))
        ])
    if params.get("bbox_threshold", None) is not None:
        cargs.extend([
            "--bbox_threshold",
            str(params.get("bbox_threshold", None))
        ])
    if params.get("interp_method", None) is not None:
        cargs.extend([
            "--interp",
            params.get("interp_method", None)
        ])
    if params.get("test", False):
        cargs.append("--test")
    return cargs


def export_gcam_outputs(
    params: ExportGcamParameters,
    execution: Execution,
) -> ExportGcamOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ExportGcamOutputs(
        root=execution.output_file("."),
        output_gcam_file=execution.output_file(params.get("out_gcam", None)),
    )
    return ret


def export_gcam_execute(
    params: ExportGcamParameters,
    runner: Runner | None = None,
) -> ExportGcamOutputs:
    """
    exportGcam
    
    A tool for exporting GCAM (Geodesic Coordinate-based Anatomic Mapping)
    morphs.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ExportGcamOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(EXPORT_GCAM_METADATA)
    params = execution.params(params)
    cargs = export_gcam_cargs(params, execution)
    ret = export_gcam_outputs(params, execution)
    execution.run(cargs)
    return ret


def export_gcam(
    fixed: InputPathType,
    moving: InputPathType,
    morph: InputPathType,
    out_gcam: str,
    zlib_buffer: float | None = None,
    bbox_threshold: float | None = None,
    interp_method: typing.Literal["linear", "nearest"] | None = None,
    test: bool = False,
    runner: Runner | None = None,
) -> ExportGcamOutputs:
    """
    exportGcam
    
    A tool for exporting GCAM (Geodesic Coordinate-based Anatomic Mapping)
    morphs.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        fixed: Fixed volume.
        moving: Moving volume.
        morph: Morph.
        out_gcam: Output GCAM (Geodesic Coordinate-based Anatomic Mapping).
        zlib_buffer: Zlib buffer pre-allocation multiplier.
        bbox_threshold: Threshold for bounding box. If absent, no bbox will be\
            used.
        interp_method: Interpolation method. Choices: linear, nearest. Default\
            is linear.
        test: Write out test files to verify the equivalence of tm3d and gcam\
            morphs.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ExportGcamOutputs`).
    """
    params = export_gcam_params(
        fixed=fixed,
        moving=moving,
        morph=morph,
        out_gcam=out_gcam,
        zlib_buffer=zlib_buffer,
        bbox_threshold=bbox_threshold,
        interp_method=interp_method,
        test=test,
    )
    return export_gcam_execute(params, runner)


__all__ = [
    "EXPORT_GCAM_METADATA",
    "ExportGcamOutputs",
    "export_gcam",
    "export_gcam_execute",
    "export_gcam_params",
]
