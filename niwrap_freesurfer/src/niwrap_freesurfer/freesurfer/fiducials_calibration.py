# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIDUCIALS_CALIBRATION_METADATA = Metadata(
    id="2fbae70c4a6a0306f48287ffefda752f7458bd36.boutiques",
    name="fiducials_calibration",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FiducialsCalibrationParameters = typing.TypedDict('FiducialsCalibrationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fiducials_calibration"]],
    "qt_plugin_installation": typing.NotRequired[str | None],
})
FiducialsCalibrationParametersTagged = typing.TypedDict('FiducialsCalibrationParametersTagged', {
    "@type": typing.Literal["freesurfer/fiducials_calibration"],
    "qt_plugin_installation": typing.NotRequired[str | None],
})


class FiducialsCalibrationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FiducialsCalibrationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fiducials_calibration_params(
    qt_plugin_installation: str | None = None,
) -> FiducialsCalibrationParametersTagged:
    """
    Build parameters.
    
    Args:
        qt_plugin_installation: This application requires a functional Qt\
            installation. If it fails to start, reinstalling the application might\
            fix the problem.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fiducials_calibration",
    }
    if qt_plugin_installation is not None:
        params["qt_plugin_installation"] = qt_plugin_installation
    return params


def fiducials_calibration_cargs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fiducials_calibration")
    if params.get("qt_plugin_installation", None) is not None:
        cargs.append(params.get("qt_plugin_installation", None))
    return cargs


def fiducials_calibration_outputs(
    params: FiducialsCalibrationParameters,
    execution: Execution,
) -> FiducialsCalibrationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FiducialsCalibrationOutputs(
        root=execution.output_file("."),
    )
    return ret


def fiducials_calibration_execute(
    params: FiducialsCalibrationParameters,
    runner: Runner | None = None,
) -> FiducialsCalibrationOutputs:
    """
    fiducials_calibration
    
    A tool used for calibrating fiducials.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIDUCIALS_CALIBRATION_METADATA)
    params = execution.params(params)
    cargs = fiducials_calibration_cargs(params, execution)
    ret = fiducials_calibration_outputs(params, execution)
    execution.run(cargs)
    return ret


def fiducials_calibration(
    qt_plugin_installation: str | None = None,
    runner: Runner | None = None,
) -> FiducialsCalibrationOutputs:
    """
    fiducials_calibration
    
    A tool used for calibrating fiducials.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        qt_plugin_installation: This application requires a functional Qt\
            installation. If it fails to start, reinstalling the application might\
            fix the problem.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FiducialsCalibrationOutputs`).
    """
    params = fiducials_calibration_params(
        qt_plugin_installation=qt_plugin_installation,
    )
    return fiducials_calibration_execute(params, runner)


__all__ = [
    "FIDUCIALS_CALIBRATION_METADATA",
    "FiducialsCalibrationOutputs",
    "fiducials_calibration",
    "fiducials_calibration_execute",
    "fiducials_calibration_params",
]
