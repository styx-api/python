# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FLIP_4DFP_METADATA = Metadata(
    id="72aeaef961cef1989aa2360038200c45341617ae.boutiques",
    name="flip_4dfp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Flip4dfpParameters = typing.TypedDict('Flip4dfpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/flip_4dfp"]],
    "input_image": InputPathType,
    "output_image": typing.NotRequired[str | None],
    "flip_x": bool,
    "flip_y": bool,
    "flip_z": bool,
    "endianness": typing.NotRequired[typing.Literal["b", "l"] | None],
})
Flip4dfpParametersTagged = typing.TypedDict('Flip4dfpParametersTagged', {
    "@type": typing.Literal["freesurfer/flip_4dfp"],
    "input_image": InputPathType,
    "output_image": typing.NotRequired[str | None],
    "flip_x": bool,
    "flip_y": bool,
    "flip_z": bool,
    "endianness": typing.NotRequired[typing.Literal["b", "l"] | None],
})


class Flip4dfpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Flip4dfpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    flipped_image: OutputPathType | None
    """Flipped output 4dfp image"""


def flip_4dfp_params(
    input_image: InputPathType,
    output_image: str | None = None,
    flip_x: bool = False,
    flip_y: bool = False,
    flip_z: bool = False,
    endianness: typing.Literal["b", "l"] | None = None,
) -> Flip4dfpParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input 4dfp image file.
        output_image: Output 4dfp image file. Default is input image root with\
            '_flip' suffix.
        flip_x: Flip along x-axis.
        flip_y: Flip along y-axis.
        flip_z: Flip along z-axis.
        endianness: Specify output endianness: 'b' for big endian, 'l' for\
            little endian. Default is input endianness.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/flip_4dfp",
        "input_image": input_image,
        "flip_x": flip_x,
        "flip_y": flip_y,
        "flip_z": flip_z,
    }
    if output_image is not None:
        params["output_image"] = output_image
    if endianness is not None:
        params["endianness"] = endianness
    return params


def flip_4dfp_cargs(
    params: Flip4dfpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("flip_4dfp")
    cargs.append(execution.input_file(params.get("input_image", None)))
    if params.get("output_image", None) is not None:
        cargs.append(params.get("output_image", None))
    if params.get("flip_x", False):
        cargs.append("-x")
    if params.get("flip_y", False):
        cargs.append("-y")
    if params.get("flip_z", False):
        cargs.append("-z")
    if params.get("endianness", None) is not None:
        cargs.extend([
            "-@",
            params.get("endianness", None)
        ])
    return cargs


def flip_4dfp_outputs(
    params: Flip4dfpParameters,
    execution: Execution,
) -> Flip4dfpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Flip4dfpOutputs(
        root=execution.output_file("."),
        flipped_image=execution.output_file(params.get("output_image", None) + ".4dfp.img") if (params.get("output_image") is not None) else None,
    )
    return ret


def flip_4dfp_execute(
    params: Flip4dfpParameters,
    runner: Runner | None = None,
) -> Flip4dfpOutputs:
    """
    flip_4dfp
    
    A tool to flip 4dfp images along specified axes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Flip4dfpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FLIP_4DFP_METADATA)
    params = execution.params(params)
    cargs = flip_4dfp_cargs(params, execution)
    ret = flip_4dfp_outputs(params, execution)
    execution.run(cargs)
    return ret


def flip_4dfp(
    input_image: InputPathType,
    output_image: str | None = None,
    flip_x: bool = False,
    flip_y: bool = False,
    flip_z: bool = False,
    endianness: typing.Literal["b", "l"] | None = None,
    runner: Runner | None = None,
) -> Flip4dfpOutputs:
    """
    flip_4dfp
    
    A tool to flip 4dfp images along specified axes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Input 4dfp image file.
        output_image: Output 4dfp image file. Default is input image root with\
            '_flip' suffix.
        flip_x: Flip along x-axis.
        flip_y: Flip along y-axis.
        flip_z: Flip along z-axis.
        endianness: Specify output endianness: 'b' for big endian, 'l' for\
            little endian. Default is input endianness.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Flip4dfpOutputs`).
    """
    params = flip_4dfp_params(
        input_image=input_image,
        output_image=output_image,
        flip_x=flip_x,
        flip_y=flip_y,
        flip_z=flip_z,
        endianness=endianness,
    )
    return flip_4dfp_execute(params, runner)


__all__ = [
    "FLIP_4DFP_METADATA",
    "Flip4dfpOutputs",
    "flip_4dfp",
    "flip_4dfp_execute",
    "flip_4dfp_params",
]
