# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FNAME2EXT_METADATA = Metadata(
    id="39a88dee540ee5afde8c4b7b82afdc6f01ed6a37.boutiques",
    name="fname2ext",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Fname2extParameters = typing.TypedDict('Fname2extParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fname2ext"]],
    "filename": str,
})
Fname2extParametersTagged = typing.TypedDict('Fname2extParametersTagged', {
    "@type": typing.Literal["freesurfer/fname2ext"],
    "filename": str,
})


class Fname2extOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Fname2extParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    file_extension: OutputPathType
    """Extracted file extension"""


def fname2ext_params(
    filename: str,
) -> Fname2extParametersTagged:
    """
    Build parameters.
    
    Args:
        filename: The name of the file for which to extract the extension. The\
            file does not need to exist.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fname2ext",
        "filename": filename,
    }
    return params


def fname2ext_cargs(
    params: Fname2extParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fname2ext")
    cargs.append(params.get("filename", None))
    return cargs


def fname2ext_outputs(
    params: Fname2extParameters,
    execution: Execution,
) -> Fname2extOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Fname2extOutputs(
        root=execution.output_file("."),
        file_extension=execution.output_file("extension.txt"),
    )
    return ret


def fname2ext_execute(
    params: Fname2extParameters,
    runner: Runner | None = None,
) -> Fname2extOutputs:
    """
    fname2ext
    
    Converts the name of a file to its extension.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fname2extOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FNAME2EXT_METADATA)
    params = execution.params(params)
    cargs = fname2ext_cargs(params, execution)
    ret = fname2ext_outputs(params, execution)
    execution.run(cargs)
    return ret


def fname2ext(
    filename: str,
    runner: Runner | None = None,
) -> Fname2extOutputs:
    """
    fname2ext
    
    Converts the name of a file to its extension.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        filename: The name of the file for which to extract the extension. The\
            file does not need to exist.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fname2extOutputs`).
    """
    params = fname2ext_params(
        filename=filename,
    )
    return fname2ext_execute(params, runner)


__all__ = [
    "FNAME2EXT_METADATA",
    "Fname2extOutputs",
    "fname2ext",
    "fname2ext_execute",
    "fname2ext_params",
]
