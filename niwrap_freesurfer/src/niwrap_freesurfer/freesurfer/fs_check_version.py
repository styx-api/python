# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_CHECK_VERSION_METADATA = Metadata(
    id="64bf79bdbdbb8ec6bf819241f1e5d3ea6e450803.boutiques",
    name="fs-check-version",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsCheckVersionParameters = typing.TypedDict('FsCheckVersionParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs-check-version"]],
    "subjects_dir": str,
    "outfile": str,
    "subject": typing.NotRequired[str | None],
    "require_match": bool,
    "no_require_match": bool,
    "test": bool,
    "test_debug": bool,
})
FsCheckVersionParametersTagged = typing.TypedDict('FsCheckVersionParametersTagged', {
    "@type": typing.Literal["freesurfer/fs-check-version"],
    "subjects_dir": str,
    "outfile": str,
    "subject": typing.NotRequired[str | None],
    "require_match": bool,
    "no_require_match": bool,
    "test": bool,
    "test_debug": bool,
})


class FsCheckVersionOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsCheckVersionParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output text file with a 1 if the version matches, otherwise 0"""


def fs_check_version_params(
    subjects_dir: str,
    outfile: str,
    subject: str | None = None,
    require_match: bool = False,
    no_require_match: bool = False,
    test: bool = False,
    test_debug: bool = False,
) -> FsCheckVersionParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects_dir: Subjects directory path.
        outfile: Output file path where result of version check will be written.
        subject: Subject name (optional).
        require_match: Set REQUIRE_FS_MATCH for testing.
        no_require_match: Unset REQUIRE_FS_MATCH for testing.
        test: Go through permutations for testing.
        test_debug: Go through permutations for debugging.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs-check-version",
        "subjects_dir": subjects_dir,
        "outfile": outfile,
        "require_match": require_match,
        "no_require_match": no_require_match,
        "test": test,
        "test_debug": test_debug,
    }
    if subject is not None:
        params["subject"] = subject
    return params


def fs_check_version_cargs(
    params: FsCheckVersionParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs-check-version")
    cargs.extend([
        "--sd",
        params.get("subjects_dir", None)
    ])
    cargs.extend([
        "--o",
        params.get("outfile", None)
    ])
    if params.get("subject", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject", None)
        ])
    if params.get("require_match", False):
        cargs.append("--require-match")
    if params.get("no_require_match", False):
        cargs.append("--no-require-match")
    if params.get("test", False):
        cargs.append("--test")
    if params.get("test_debug", False):
        cargs.append("--test-debug")
    return cargs


def fs_check_version_outputs(
    params: FsCheckVersionParameters,
    execution: Execution,
) -> FsCheckVersionOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsCheckVersionOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("outfile", None)),
    )
    return ret


def fs_check_version_execute(
    params: FsCheckVersionParameters,
    runner: Runner | None = None,
) -> FsCheckVersionOutputs:
    """
    fs-check-version
    
    Script to manage which version of FreeSurfer can be used to analyze data
    ensuring consistency with the desired version.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsCheckVersionOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_CHECK_VERSION_METADATA)
    params = execution.params(params)
    cargs = fs_check_version_cargs(params, execution)
    ret = fs_check_version_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_check_version(
    subjects_dir: str,
    outfile: str,
    subject: str | None = None,
    require_match: bool = False,
    no_require_match: bool = False,
    test: bool = False,
    test_debug: bool = False,
    runner: Runner | None = None,
) -> FsCheckVersionOutputs:
    """
    fs-check-version
    
    Script to manage which version of FreeSurfer can be used to analyze data
    ensuring consistency with the desired version.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects_dir: Subjects directory path.
        outfile: Output file path where result of version check will be written.
        subject: Subject name (optional).
        require_match: Set REQUIRE_FS_MATCH for testing.
        no_require_match: Unset REQUIRE_FS_MATCH for testing.
        test: Go through permutations for testing.
        test_debug: Go through permutations for debugging.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsCheckVersionOutputs`).
    """
    params = fs_check_version_params(
        subjects_dir=subjects_dir,
        outfile=outfile,
        subject=subject,
        require_match=require_match,
        no_require_match=no_require_match,
        test=test,
        test_debug=test_debug,
    )
    return fs_check_version_execute(params, runner)


__all__ = [
    "FS_CHECK_VERSION_METADATA",
    "FsCheckVersionOutputs",
    "fs_check_version",
    "fs_check_version_execute",
    "fs_check_version_params",
]
