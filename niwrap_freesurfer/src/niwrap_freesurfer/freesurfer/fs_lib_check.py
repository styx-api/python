# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_LIB_CHECK_METADATA = Metadata(
    id="3f837527e856251fa0e17346c777a1272fc585b1.boutiques",
    name="fs_lib_check",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsLibCheckParameters = typing.TypedDict('FsLibCheckParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs_lib_check"]],
    "use_ldconfig": bool,
    "use_rpm": bool,
    "show_help": bool,
    "show_version": bool,
})
FsLibCheckParametersTagged = typing.TypedDict('FsLibCheckParametersTagged', {
    "@type": typing.Literal["freesurfer/fs_lib_check"],
    "use_ldconfig": bool,
    "use_rpm": bool,
    "show_help": bool,
    "show_version": bool,
})


class FsLibCheckOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsLibCheckParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fs_lib_check_params(
    use_ldconfig: bool = False,
    use_rpm: bool = False,
    show_help: bool = False,
    show_version: bool = False,
) -> FsLibCheckParametersTagged:
    """
    Build parameters.
    
    Args:
        use_ldconfig: Force use of 'ldconfig' to check for instances of\
            required system libraries. This is useful on rpm systems if system\
            libraries were installed from source code, and are thus not known to\
            the system rpm database.
        use_rpm: Force use of 'rpm -qa' to check for installed library\
            packages. If -r and -l are both specified concurrently, then behavior\
            is unspecified.
        show_help: Show this synopsis and exit.
        show_version: Show a version number and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs_lib_check",
        "use_ldconfig": use_ldconfig,
        "use_rpm": use_rpm,
        "show_help": show_help,
        "show_version": show_version,
    }
    return params


def fs_lib_check_cargs(
    params: FsLibCheckParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_lib_check")
    if params.get("use_ldconfig", False):
        cargs.append("-l")
    if params.get("use_rpm", False):
        cargs.append("-r")
    if params.get("show_help", False):
        cargs.append("-h")
    if params.get("show_version", False):
        cargs.append("-v")
    return cargs


def fs_lib_check_outputs(
    params: FsLibCheckParameters,
    execution: Execution,
) -> FsLibCheckOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsLibCheckOutputs(
        root=execution.output_file("."),
    )
    return ret


def fs_lib_check_execute(
    params: FsLibCheckParameters,
    runner: Runner | None = None,
) -> FsLibCheckOutputs:
    """
    fs_lib_check
    
    Checks if the operating system has the necessary system libraries required
    to run FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsLibCheckOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_LIB_CHECK_METADATA)
    params = execution.params(params)
    cargs = fs_lib_check_cargs(params, execution)
    ret = fs_lib_check_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_lib_check(
    use_ldconfig: bool = False,
    use_rpm: bool = False,
    show_help: bool = False,
    show_version: bool = False,
    runner: Runner | None = None,
) -> FsLibCheckOutputs:
    """
    fs_lib_check
    
    Checks if the operating system has the necessary system libraries required
    to run FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        use_ldconfig: Force use of 'ldconfig' to check for instances of\
            required system libraries. This is useful on rpm systems if system\
            libraries were installed from source code, and are thus not known to\
            the system rpm database.
        use_rpm: Force use of 'rpm -qa' to check for installed library\
            packages. If -r and -l are both specified concurrently, then behavior\
            is unspecified.
        show_help: Show this synopsis and exit.
        show_version: Show a version number and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsLibCheckOutputs`).
    """
    params = fs_lib_check_params(
        use_ldconfig=use_ldconfig,
        use_rpm=use_rpm,
        show_help=show_help,
        show_version=show_version,
    )
    return fs_lib_check_execute(params, runner)


__all__ = [
    "FS_LIB_CHECK_METADATA",
    "FsLibCheckOutputs",
    "fs_lib_check",
    "fs_lib_check_execute",
    "fs_lib_check_params",
]
