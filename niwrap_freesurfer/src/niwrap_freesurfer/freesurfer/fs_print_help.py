# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_PRINT_HELP_METADATA = Metadata(
    id="364e80f34823fe82c3808e9f53e3fb55c227ffda.boutiques",
    name="fsPrintHelp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsPrintHelpParameters = typing.TypedDict('FsPrintHelpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fsPrintHelp"]],
    "arguments": typing.NotRequired[str | None],
})
FsPrintHelpParametersTagged = typing.TypedDict('FsPrintHelpParametersTagged', {
    "@type": typing.Literal["freesurfer/fsPrintHelp"],
    "arguments": typing.NotRequired[str | None],
})


class FsPrintHelpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsPrintHelpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fs_print_help_params(
    arguments: str | None = None,
) -> FsPrintHelpParametersTagged:
    """
    Build parameters.
    
    Args:
        arguments: Any arguments that fsPrintHelp accepts.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fsPrintHelp",
    }
    if arguments is not None:
        params["arguments"] = arguments
    return params


def fs_print_help_cargs(
    params: FsPrintHelpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsPrintHelp")
    if params.get("arguments", None) is not None:
        cargs.append(params.get("arguments", None))
    return cargs


def fs_print_help_outputs(
    params: FsPrintHelpParameters,
    execution: Execution,
) -> FsPrintHelpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsPrintHelpOutputs(
        root=execution.output_file("."),
    )
    return ret


def fs_print_help_execute(
    params: FsPrintHelpParameters,
    runner: Runner | None = None,
) -> FsPrintHelpOutputs:
    """
    fsPrintHelp
    
    fsPrintHelp - A tool that attempts to provide help documentation for
    FreeSurfer commands.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsPrintHelpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_PRINT_HELP_METADATA)
    params = execution.params(params)
    cargs = fs_print_help_cargs(params, execution)
    ret = fs_print_help_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_print_help(
    arguments: str | None = None,
    runner: Runner | None = None,
) -> FsPrintHelpOutputs:
    """
    fsPrintHelp
    
    fsPrintHelp - A tool that attempts to provide help documentation for
    FreeSurfer commands.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        arguments: Any arguments that fsPrintHelp accepts.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsPrintHelpOutputs`).
    """
    params = fs_print_help_params(
        arguments=arguments,
    )
    return fs_print_help_execute(params, runner)


__all__ = [
    "FS_PRINT_HELP_METADATA",
    "FsPrintHelpOutputs",
    "fs_print_help",
    "fs_print_help_execute",
    "fs_print_help_params",
]
