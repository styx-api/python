# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_SPMREG_GLNXA64_METADATA = Metadata(
    id="5a9193dabec6a736cf37d773fb6396ea21a54ffa.boutiques",
    name="fs_spmreg.glnxa64",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsSpmregGlnxa64Parameters = typing.TypedDict('FsSpmregGlnxa64Parameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs_spmreg.glnxa64"]],
    "input_volume": InputPathType,
    "output_matrix": str,
})
FsSpmregGlnxa64ParametersTagged = typing.TypedDict('FsSpmregGlnxa64ParametersTagged', {
    "@type": typing.Literal["freesurfer/fs_spmreg.glnxa64"],
    "input_volume": InputPathType,
    "output_matrix": str,
})


class FsSpmregGlnxa64Outputs(typing.NamedTuple):
    """
    Output object returned when calling `FsSpmregGlnxa64Parameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_matrix_file: OutputPathType
    """Output registration matrix file"""


def fs_spmreg_glnxa64_params(
    input_volume: InputPathType,
    output_matrix: str = "output.mat",
) -> FsSpmregGlnxa64ParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input anatomical volume.
        output_matrix: Output registration matrix.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs_spmreg.glnxa64",
        "input_volume": input_volume,
        "output_matrix": output_matrix,
    }
    return params


def fs_spmreg_glnxa64_cargs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_spmreg.glnxa64")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(params.get("output_matrix", "output.mat"))
    return cargs


def fs_spmreg_glnxa64_outputs(
    params: FsSpmregGlnxa64Parameters,
    execution: Execution,
) -> FsSpmregGlnxa64Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsSpmregGlnxa64Outputs(
        root=execution.output_file("."),
        output_matrix_file=execution.output_file(params.get("output_matrix", "output.mat")),
    )
    return ret


def fs_spmreg_glnxa64_execute(
    params: FsSpmregGlnxa64Parameters,
    runner: Runner | None = None,
) -> FsSpmregGlnxa64Outputs:
    """
    fs_spmreg.glnxa64
    
    fs_spmreg is a tool for registration using SPM within FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_SPMREG_GLNXA64_METADATA)
    params = execution.params(params)
    cargs = fs_spmreg_glnxa64_cargs(params, execution)
    ret = fs_spmreg_glnxa64_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_spmreg_glnxa64(
    input_volume: InputPathType,
    output_matrix: str = "output.mat",
    runner: Runner | None = None,
) -> FsSpmregGlnxa64Outputs:
    """
    fs_spmreg.glnxa64
    
    fs_spmreg is a tool for registration using SPM within FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input anatomical volume.
        output_matrix: Output registration matrix.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsSpmregGlnxa64Outputs`).
    """
    params = fs_spmreg_glnxa64_params(
        input_volume=input_volume,
        output_matrix=output_matrix,
    )
    return fs_spmreg_glnxa64_execute(params, runner)


__all__ = [
    "FS_SPMREG_GLNXA64_METADATA",
    "FsSpmregGlnxa64Outputs",
    "fs_spmreg_glnxa64",
    "fs_spmreg_glnxa64_execute",
    "fs_spmreg_glnxa64_params",
]
