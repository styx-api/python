# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_TEMP_DIR_METADATA = Metadata(
    id="527e55a39dc28f0c9acdbccf0047fb17ab363432.boutiques",
    name="fs_temp_dir",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsTempDirParameters = typing.TypedDict('FsTempDirParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs_temp_dir"]],
    "base_directory": typing.NotRequired[str | None],
    "scratch": bool,
})
FsTempDirParametersTagged = typing.TypedDict('FsTempDirParametersTagged', {
    "@type": typing.Literal["freesurfer/fs_temp_dir"],
    "base_directory": typing.NotRequired[str | None],
    "scratch": bool,
})


class FsTempDirOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsTempDirParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_directory: OutputPathType
    """The created temporary directory path"""


def fs_temp_dir_params(
    base_directory: str | None = None,
    scratch: bool = False,
) -> FsTempDirParametersTagged:
    """
    Build parameters.
    
    Args:
        base_directory: Manually specify base temporary directory.
        scratch: Use /scratch directory if available, but FS_TMPDIR takes\
            priority.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs_temp_dir",
        "scratch": scratch,
    }
    if base_directory is not None:
        params["base_directory"] = base_directory
    return params


def fs_temp_dir_cargs(
    params: FsTempDirParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_temp_dir")
    if params.get("base_directory", None) is not None:
        cargs.extend([
            "-b",
            params.get("base_directory", None)
        ])
    if params.get("scratch", False):
        cargs.append("--scratch")
    return cargs


def fs_temp_dir_outputs(
    params: FsTempDirParameters,
    execution: Execution,
) -> FsTempDirOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsTempDirOutputs(
        root=execution.output_file("."),
        output_directory=execution.output_file("/tmp/tmp.SF5J66"),
    )
    return ret


def fs_temp_dir_execute(
    params: FsTempDirParameters,
    runner: Runner | None = None,
) -> FsTempDirOutputs:
    """
    fs_temp_dir
    
    Generates and creates an empty temporary directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTempDirOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_TEMP_DIR_METADATA)
    params = execution.params(params)
    cargs = fs_temp_dir_cargs(params, execution)
    ret = fs_temp_dir_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_temp_dir(
    base_directory: str | None = None,
    scratch: bool = False,
    runner: Runner | None = None,
) -> FsTempDirOutputs:
    """
    fs_temp_dir
    
    Generates and creates an empty temporary directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        base_directory: Manually specify base temporary directory.
        scratch: Use /scratch directory if available, but FS_TMPDIR takes\
            priority.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTempDirOutputs`).
    """
    params = fs_temp_dir_params(
        base_directory=base_directory,
        scratch=scratch,
    )
    return fs_temp_dir_execute(params, runner)


__all__ = [
    "FS_TEMP_DIR_METADATA",
    "FsTempDirOutputs",
    "fs_temp_dir",
    "fs_temp_dir_execute",
    "fs_temp_dir_params",
]
