# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_TIME_METADATA = Metadata(
    id="ebe69ebd0ffd307fd6b99269db6880b8aacee0d9.boutiques",
    name="fs_time",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsTimeParameters = typing.TypedDict('FsTimeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs_time"]],
    "output_file": typing.NotRequired[str | None],
    "key": typing.NotRequired[str | None],
    "load_avg": bool,
    "command": str,
    "args": typing.NotRequired[list[str] | None],
})
FsTimeParametersTagged = typing.TypedDict('FsTimeParametersTagged', {
    "@type": typing.Literal["freesurfer/fs_time"],
    "output_file": typing.NotRequired[str | None],
    "key": typing.NotRequired[str | None],
    "load_avg": bool,
    "command": str,
    "args": typing.NotRequired[list[str] | None],
})


class FsTimeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsTimeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    resource_output: OutputPathType | None
    """File containing resource usage information."""


def fs_time_params(
    command: str,
    output_file: str | None = None,
    key: str | None = None,
    load_avg: bool = False,
    args: list[str] | None = None,
) -> FsTimeParametersTagged:
    """
    Build parameters.
    
    Args:
        command: The command to be timed with fs_time.
        output_file: Save resource info into output file.
        key: Specify a key for the resource information.
        load_avg: Report on load averages as from uptime.
        args: Arguments for the command.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs_time",
        "load_avg": load_avg,
        "command": command,
    }
    if output_file is not None:
        params["output_file"] = output_file
    if key is not None:
        params["key"] = key
    if args is not None:
        params["args"] = args
    return params


def fs_time_cargs(
    params: FsTimeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_time")
    if params.get("output_file", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_file", None)
        ])
    if params.get("key", None) is not None:
        cargs.extend([
            "-k",
            params.get("key", None)
        ])
    if params.get("load_avg", False):
        cargs.append("-l")
    cargs.append(params.get("command", None))
    if params.get("args", None) is not None:
        cargs.extend(params.get("args", None))
    return cargs


def fs_time_outputs(
    params: FsTimeParameters,
    execution: Execution,
) -> FsTimeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsTimeOutputs(
        root=execution.output_file("."),
        resource_output=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def fs_time_execute(
    params: FsTimeParameters,
    runner: Runner | None = None,
) -> FsTimeOutputs:
    """
    fs_time
    
    A frontend for the unix /usr/bin/time program to track resource usage by a
    process.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTimeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_TIME_METADATA)
    params = execution.params(params)
    cargs = fs_time_cargs(params, execution)
    ret = fs_time_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_time(
    command: str,
    output_file: str | None = None,
    key: str | None = None,
    load_avg: bool = False,
    args: list[str] | None = None,
    runner: Runner | None = None,
) -> FsTimeOutputs:
    """
    fs_time
    
    A frontend for the unix /usr/bin/time program to track resource usage by a
    process.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        command: The command to be timed with fs_time.
        output_file: Save resource info into output file.
        key: Specify a key for the resource information.
        load_avg: Report on load averages as from uptime.
        args: Arguments for the command.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTimeOutputs`).
    """
    params = fs_time_params(
        output_file=output_file,
        key=key,
        load_avg=load_avg,
        command=command,
        args=args,
    )
    return fs_time_execute(params, runner)


__all__ = [
    "FS_TIME_METADATA",
    "FsTimeOutputs",
    "fs_time",
    "fs_time_execute",
    "fs_time_params",
]
