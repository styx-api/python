# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FS_TUTORIAL_DATA_METADATA = Metadata(
    id="57fbe6fd6f6adb6dc73c2b2a53ea70fb27a95b17.boutiques",
    name="fs_tutorial_data",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsTutorialDataParameters = typing.TypedDict('FsTutorialDataParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fs_tutorial_data"]],
    "rsync_options": typing.NotRequired[list[str] | None],
})
FsTutorialDataParametersTagged = typing.TypedDict('FsTutorialDataParametersTagged', {
    "@type": typing.Literal["freesurfer/fs_tutorial_data"],
    "rsync_options": typing.NotRequired[list[str] | None],
})


class FsTutorialDataOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsTutorialDataParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tutorial_data_dir: OutputPathType
    """Directory where tutorial data will be downloaded and installed."""


def fs_tutorial_data_params(
    rsync_options: list[str] | None = None,
) -> FsTutorialDataParametersTagged:
    """
    Build parameters.
    
    Args:
        rsync_options: Additional rsync options for downloading tutorial data.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fs_tutorial_data",
    }
    if rsync_options is not None:
        params["rsync_options"] = rsync_options
    return params


def fs_tutorial_data_cargs(
    params: FsTutorialDataParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fs_tutorial_data")
    if params.get("rsync_options", None) is not None:
        cargs.extend(params.get("rsync_options", None))
    return cargs


def fs_tutorial_data_outputs(
    params: FsTutorialDataParameters,
    execution: Execution,
) -> FsTutorialDataOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsTutorialDataOutputs(
        root=execution.output_file("."),
        tutorial_data_dir=execution.output_file("/usr/local/freesurfer/subjects/tutorial_data"),
    )
    return ret


def fs_tutorial_data_execute(
    params: FsTutorialDataParameters,
    runner: Runner | None = None,
) -> FsTutorialDataOutputs:
    """
    fs_tutorial_data
    
    Tool to download and install FreeSurfer tutorial data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTutorialDataOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FS_TUTORIAL_DATA_METADATA)
    params = execution.params(params)
    cargs = fs_tutorial_data_cargs(params, execution)
    ret = fs_tutorial_data_outputs(params, execution)
    execution.run(cargs)
    return ret


def fs_tutorial_data(
    rsync_options: list[str] | None = None,
    runner: Runner | None = None,
) -> FsTutorialDataOutputs:
    """
    fs_tutorial_data
    
    Tool to download and install FreeSurfer tutorial data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        rsync_options: Additional rsync options for downloading tutorial data.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsTutorialDataOutputs`).
    """
    params = fs_tutorial_data_params(
        rsync_options=rsync_options,
    )
    return fs_tutorial_data_execute(params, runner)


__all__ = [
    "FS_TUTORIAL_DATA_METADATA",
    "FsTutorialDataOutputs",
    "fs_tutorial_data",
    "fs_tutorial_data_execute",
    "fs_tutorial_data_params",
]
