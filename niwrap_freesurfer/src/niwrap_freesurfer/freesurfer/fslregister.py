# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLREGISTER_METADATA = Metadata(
    id="6bd3805871440ca11998e2002e3f8711494bc7d6.boutiques",
    name="fslregister",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FslregisterParameters = typing.TypedDict('FslregisterParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fslregister"]],
    "subjid": str,
    "mov_vol": str,
    "reg_file": str,
    "fsl_matrix": typing.NotRequired[str | None],
    "init_fsl_matrix": typing.NotRequired[str | None],
    "no_init_xfm": bool,
    "niters": typing.NotRequired[float | None],
    "dof": typing.NotRequired[float | None],
    "bins": typing.NotRequired[float | None],
    "cost": typing.NotRequired[str | None],
    "max_angle": typing.NotRequired[float | None],
    "no_new_schedule": bool,
    "no_allow_swap": bool,
    "no_trans": bool,
    "bet_mov": bool,
    "bet_fvalue": typing.NotRequired[float | None],
    "bet_func": bool,
    "bet_ref": bool,
    "frame": typing.NotRequired[float | None],
    "mid_frame": bool,
    "freesurfer_volume": typing.NotRequired[str | None],
    "template_output": typing.NotRequired[str | None],
    "output_volume": typing.NotRequired[str | None],
    "verbose": typing.NotRequired[float | None],
    "tmp_dir": typing.NotRequired[str | None],
    "no_cleanup": bool,
    "no_log": bool,
    "version": bool,
    "help": bool,
    "lta_format": typing.NotRequired[str | None],
})
FslregisterParametersTagged = typing.TypedDict('FslregisterParametersTagged', {
    "@type": typing.Literal["freesurfer/fslregister"],
    "subjid": str,
    "mov_vol": str,
    "reg_file": str,
    "fsl_matrix": typing.NotRequired[str | None],
    "init_fsl_matrix": typing.NotRequired[str | None],
    "no_init_xfm": bool,
    "niters": typing.NotRequired[float | None],
    "dof": typing.NotRequired[float | None],
    "bins": typing.NotRequired[float | None],
    "cost": typing.NotRequired[str | None],
    "max_angle": typing.NotRequired[float | None],
    "no_new_schedule": bool,
    "no_allow_swap": bool,
    "no_trans": bool,
    "bet_mov": bool,
    "bet_fvalue": typing.NotRequired[float | None],
    "bet_func": bool,
    "bet_ref": bool,
    "frame": typing.NotRequired[float | None],
    "mid_frame": bool,
    "freesurfer_volume": typing.NotRequired[str | None],
    "template_output": typing.NotRequired[str | None],
    "output_volume": typing.NotRequired[str | None],
    "verbose": typing.NotRequired[float | None],
    "tmp_dir": typing.NotRequired[str | None],
    "no_cleanup": bool,
    "no_log": bool,
    "version": bool,
    "help": bool,
    "lta_format": typing.NotRequired[str | None],
})


class FslregisterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslregisterParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_reg_file: OutputPathType
    """Output registration file."""
    output_resliced_volume: OutputPathType | None
    """Resliced output volume."""
    output_fsl_matrix: OutputPathType | None
    """FSL format output registration matrix."""
    lta_output: OutputPathType | None
    """Registration output in LTA format."""
    output_template: OutputPathType | None
    """Output template."""


def fslregister_params(
    subjid: str,
    mov_vol: str,
    reg_file: str,
    fsl_matrix: str | None = None,
    init_fsl_matrix: str | None = None,
    no_init_xfm: bool = False,
    niters: float | None = None,
    dof: float | None = None,
    bins: float | None = None,
    cost: str | None = None,
    max_angle: float | None = None,
    no_new_schedule: bool = False,
    no_allow_swap: bool = False,
    no_trans: bool = False,
    bet_mov: bool = False,
    bet_fvalue: float | None = None,
    bet_func: bool = False,
    bet_ref: bool = False,
    frame: float | None = None,
    mid_frame: bool = False,
    freesurfer_volume: str | None = None,
    template_output: str | None = None,
    output_volume: str | None = None,
    verbose: float | None = None,
    tmp_dir: str | None = None,
    no_cleanup: bool = False,
    no_log: bool = False,
    version: bool = False,
    help_: bool = False,
    lta_format: str | None = None,
) -> FslregisterParametersTagged:
    """
    Build parameters.
    
    Args:
        subjid: Id of the subject as found in SUBJECTS_DIR.
        mov_vol: Volume identifier of the movable volume.
        reg_file: Output registration file.
        fsl_matrix: Output registration matrix in FSL format.
        init_fsl_matrix: Supply initial FSL matrix file.
        no_init_xfm: Do not initialize based on header geometry.
        niters: Number of iterations for FLIRT.
        dof: Degrees of freedom in the FLIRT registration.
        bins: Number of bins for FLIRT.
        cost: Cost function for FLIRT.
        max_angle: Maximum search angle for FLIRT.
        no_new_schedule: Disable new schedule in FLIRT.
        no_allow_swap: Do not allow swap dimension of positive determinant\
            input volumes.
        no_trans: Do not perform translation-only registration prior to full.
        bet_mov: Perform brain extraction on movable volume.
        bet_fvalue: f value for BET.
        bet_func: Run betfunc instead of bet.
        bet_ref: Perform brain extraction on reference volume.
        frame: Frame number for registration.
        mid_frame: Use the middle frame of the volume.
        freesurfer_volume: Use FreeSurfer volid as reference volume.
        template_output: Save template.
        output_volume: Have FLIRT reslice movable volume to target.
        verbose: FLIRT verbosity level.
        tmp_dir: Temporary directory to use.
        no_cleanup: Do not delete temporary files.
        no_log: Do not produce a log file.
        version: Print version and exit.
        help_: Print help and exit.
        lta_format: Output registration in LTA format.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fslregister",
        "subjid": subjid,
        "mov_vol": mov_vol,
        "reg_file": reg_file,
        "no_init_xfm": no_init_xfm,
        "no_new_schedule": no_new_schedule,
        "no_allow_swap": no_allow_swap,
        "no_trans": no_trans,
        "bet_mov": bet_mov,
        "bet_func": bet_func,
        "bet_ref": bet_ref,
        "mid_frame": mid_frame,
        "no_cleanup": no_cleanup,
        "no_log": no_log,
        "version": version,
        "help": help_,
    }
    if fsl_matrix is not None:
        params["fsl_matrix"] = fsl_matrix
    if init_fsl_matrix is not None:
        params["init_fsl_matrix"] = init_fsl_matrix
    if niters is not None:
        params["niters"] = niters
    if dof is not None:
        params["dof"] = dof
    if bins is not None:
        params["bins"] = bins
    if cost is not None:
        params["cost"] = cost
    if max_angle is not None:
        params["max_angle"] = max_angle
    if bet_fvalue is not None:
        params["bet_fvalue"] = bet_fvalue
    if frame is not None:
        params["frame"] = frame
    if freesurfer_volume is not None:
        params["freesurfer_volume"] = freesurfer_volume
    if template_output is not None:
        params["template_output"] = template_output
    if output_volume is not None:
        params["output_volume"] = output_volume
    if verbose is not None:
        params["verbose"] = verbose
    if tmp_dir is not None:
        params["tmp_dir"] = tmp_dir
    if lta_format is not None:
        params["lta_format"] = lta_format
    return params


def fslregister_cargs(
    params: FslregisterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslregister")
    cargs.extend([
        "--s",
        params.get("subjid", None)
    ])
    cargs.extend([
        "--mov",
        params.get("mov_vol", None)
    ])
    cargs.extend([
        "--reg",
        params.get("reg_file", None)
    ])
    if params.get("fsl_matrix", None) is not None:
        cargs.extend([
            "--fslmat",
            params.get("fsl_matrix", None)
        ])
    if params.get("init_fsl_matrix", None) is not None:
        cargs.extend([
            "--initfslmat",
            params.get("init_fsl_matrix", None)
        ])
    if params.get("no_init_xfm", False):
        cargs.append("--noinitxfm")
    if params.get("niters", None) is not None:
        cargs.extend([
            "--niters",
            str(params.get("niters", None))
        ])
    if params.get("dof", None) is not None:
        cargs.extend([
            "--dof",
            str(params.get("dof", None))
        ])
    if params.get("bins", None) is not None:
        cargs.extend([
            "--bins",
            str(params.get("bins", None))
        ])
    if params.get("cost", None) is not None:
        cargs.extend([
            "--cost",
            params.get("cost", None)
        ])
    if params.get("max_angle", None) is not None:
        cargs.extend([
            "--maxangle",
            str(params.get("max_angle", None))
        ])
    if params.get("no_new_schedule", False):
        cargs.append("--no-new-schedule")
    if params.get("no_allow_swap", False):
        cargs.append("--no-allow-swap")
    if params.get("no_trans", False):
        cargs.append("--no-trans")
    if params.get("bet_mov", False):
        cargs.append("--betmov")
    if params.get("bet_fvalue", None) is not None:
        cargs.extend([
            "--betfvalue",
            str(params.get("bet_fvalue", None))
        ])
    if params.get("bet_func", False):
        cargs.append("--betfunc")
    if params.get("bet_ref", False):
        cargs.append("--betref")
    if params.get("frame", None) is not None:
        cargs.extend([
            "--frame",
            str(params.get("frame", None))
        ])
    if params.get("mid_frame", False):
        cargs.append("--mid-frame")
    if params.get("freesurfer_volume", None) is not None:
        cargs.extend([
            "--fsvol",
            params.get("freesurfer_volume", None)
        ])
    if params.get("template_output", None) is not None:
        cargs.extend([
            "--template-out",
            params.get("template_output", None)
        ])
    if params.get("output_volume", None) is not None:
        cargs.extend([
            "--out",
            params.get("output_volume", None)
        ])
    if params.get("verbose", None) is not None:
        cargs.extend([
            "--verbose",
            str(params.get("verbose", None))
        ])
    if params.get("tmp_dir", None) is not None:
        cargs.extend([
            "--tmp",
            params.get("tmp_dir", None)
        ])
    if params.get("no_cleanup", False):
        cargs.append("--nocleanup")
    if params.get("no_log", False):
        cargs.append("--nolog")
    if params.get("version", False):
        cargs.append("--version")
    if params.get("help", False):
        cargs.append("--help")
    if params.get("lta_format", None) is not None:
        cargs.extend([
            "--lta",
            params.get("lta_format", None)
        ])
    return cargs


def fslregister_outputs(
    params: FslregisterParameters,
    execution: Execution,
) -> FslregisterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslregisterOutputs(
        root=execution.output_file("."),
        output_reg_file=execution.output_file(params.get("reg_file", None)),
        output_resliced_volume=execution.output_file(params.get("output_volume", None)) if (params.get("output_volume") is not None) else None,
        output_fsl_matrix=execution.output_file(params.get("fsl_matrix", None)) if (params.get("fsl_matrix") is not None) else None,
        lta_output=execution.output_file(params.get("lta_format", None)) if (params.get("lta_format") is not None) else None,
        output_template=execution.output_file(params.get("template_output", None)) if (params.get("template_output") is not None) else None,
    )
    return ret


def fslregister_execute(
    params: FslregisterParameters,
    runner: Runner | None = None,
) -> FslregisterOutputs:
    """
    fslregister
    
    Registers a volume to its FreeSurfer anatomical using FSL's FLIRT and
    creates a FreeSurfer register.dat file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslregisterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLREGISTER_METADATA)
    params = execution.params(params)
    cargs = fslregister_cargs(params, execution)
    ret = fslregister_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslregister(
    subjid: str,
    mov_vol: str,
    reg_file: str,
    fsl_matrix: str | None = None,
    init_fsl_matrix: str | None = None,
    no_init_xfm: bool = False,
    niters: float | None = None,
    dof: float | None = None,
    bins: float | None = None,
    cost: str | None = None,
    max_angle: float | None = None,
    no_new_schedule: bool = False,
    no_allow_swap: bool = False,
    no_trans: bool = False,
    bet_mov: bool = False,
    bet_fvalue: float | None = None,
    bet_func: bool = False,
    bet_ref: bool = False,
    frame: float | None = None,
    mid_frame: bool = False,
    freesurfer_volume: str | None = None,
    template_output: str | None = None,
    output_volume: str | None = None,
    verbose: float | None = None,
    tmp_dir: str | None = None,
    no_cleanup: bool = False,
    no_log: bool = False,
    version: bool = False,
    help_: bool = False,
    lta_format: str | None = None,
    runner: Runner | None = None,
) -> FslregisterOutputs:
    """
    fslregister
    
    Registers a volume to its FreeSurfer anatomical using FSL's FLIRT and
    creates a FreeSurfer register.dat file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjid: Id of the subject as found in SUBJECTS_DIR.
        mov_vol: Volume identifier of the movable volume.
        reg_file: Output registration file.
        fsl_matrix: Output registration matrix in FSL format.
        init_fsl_matrix: Supply initial FSL matrix file.
        no_init_xfm: Do not initialize based on header geometry.
        niters: Number of iterations for FLIRT.
        dof: Degrees of freedom in the FLIRT registration.
        bins: Number of bins for FLIRT.
        cost: Cost function for FLIRT.
        max_angle: Maximum search angle for FLIRT.
        no_new_schedule: Disable new schedule in FLIRT.
        no_allow_swap: Do not allow swap dimension of positive determinant\
            input volumes.
        no_trans: Do not perform translation-only registration prior to full.
        bet_mov: Perform brain extraction on movable volume.
        bet_fvalue: f value for BET.
        bet_func: Run betfunc instead of bet.
        bet_ref: Perform brain extraction on reference volume.
        frame: Frame number for registration.
        mid_frame: Use the middle frame of the volume.
        freesurfer_volume: Use FreeSurfer volid as reference volume.
        template_output: Save template.
        output_volume: Have FLIRT reslice movable volume to target.
        verbose: FLIRT verbosity level.
        tmp_dir: Temporary directory to use.
        no_cleanup: Do not delete temporary files.
        no_log: Do not produce a log file.
        version: Print version and exit.
        help_: Print help and exit.
        lta_format: Output registration in LTA format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslregisterOutputs`).
    """
    params = fslregister_params(
        subjid=subjid,
        mov_vol=mov_vol,
        reg_file=reg_file,
        fsl_matrix=fsl_matrix,
        init_fsl_matrix=init_fsl_matrix,
        no_init_xfm=no_init_xfm,
        niters=niters,
        dof=dof,
        bins=bins,
        cost=cost,
        max_angle=max_angle,
        no_new_schedule=no_new_schedule,
        no_allow_swap=no_allow_swap,
        no_trans=no_trans,
        bet_mov=bet_mov,
        bet_fvalue=bet_fvalue,
        bet_func=bet_func,
        bet_ref=bet_ref,
        frame=frame,
        mid_frame=mid_frame,
        freesurfer_volume=freesurfer_volume,
        template_output=template_output,
        output_volume=output_volume,
        verbose=verbose,
        tmp_dir=tmp_dir,
        no_cleanup=no_cleanup,
        no_log=no_log,
        version=version,
        help_=help_,
        lta_format=lta_format,
    )
    return fslregister_execute(params, runner)


__all__ = [
    "FSLREGISTER_METADATA",
    "FslregisterOutputs",
    "fslregister",
    "fslregister_execute",
    "fslregister_params",
]
