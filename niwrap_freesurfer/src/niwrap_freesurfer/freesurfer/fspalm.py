# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSPALM_METADATA = Metadata(
    id="cf8e3d88104ed079f77f6b32ec9e15dfe608166a.boutiques",
    name="fspalm",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FspalmParameters = typing.TypedDict('FspalmParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fspalm"]],
    "glmdir": str,
    "cft": float,
    "cwp": float,
    "onetail": bool,
    "twotail": bool,
    "name": typing.NotRequired[str | None],
    "iters": typing.NotRequired[float | None],
    "monly": bool,
    "pponly": bool,
    "octave": bool,
    "centroid": bool,
    "2spaces": bool,
    "3spaces": bool,
    "pargs": typing.NotRequired[str | None],
})
FspalmParametersTagged = typing.TypedDict('FspalmParametersTagged', {
    "@type": typing.Literal["freesurfer/fspalm"],
    "glmdir": str,
    "cft": float,
    "cwp": float,
    "onetail": bool,
    "twotail": bool,
    "name": typing.NotRequired[str | None],
    "iters": typing.NotRequired[float | None],
    "monly": bool,
    "pponly": bool,
    "octave": bool,
    "centroid": bool,
    "2spaces": bool,
    "3spaces": bool,
    "pargs": typing.NotRequired[str | None],
})


class FspalmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FspalmParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fspalm_params(
    glmdir: str,
    cft: float,
    cwp: float,
    onetail: bool = False,
    twotail: bool = False,
    name: str | None = None,
    iters: float | None = None,
    monly: bool = False,
    pponly: bool = False,
    octave: bool = False,
    centroid: bool = False,
    v_2spaces: bool = False,
    v_3spaces: bool = False,
    pargs: str | None = None,
) -> FspalmParametersTagged:
    """
    Build parameters.
    
    Args:
        glmdir: The mri_glmfit directory to prepare.
        cft: Voxel-wise cluster forming threshold (CFT), -log10(p).
        cwp: Clusterwise p-value threshold.
        onetail: Perform a one-tailed test.
        twotail: Perform a two-tailed test. NOTE: changes CFT.
        name: Name of palm subdirectory (default="palm").
        iters: Number of iterations.
        monly: Only create matlab file, do not run.
        pponly: Only perform post-processing.
        octave: Run with octave, not matlab.
        centroid: Add --centroid flag to mri_surfcluster post-processing.
        v_2spaces: Bonferroni-correct for 2 spaces.
        v_3spaces: Bonferroni-correct for 3 spaces.
        pargs: Supply additional args to be passed to the palm function.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fspalm",
        "glmdir": glmdir,
        "cft": cft,
        "cwp": cwp,
        "onetail": onetail,
        "twotail": twotail,
        "monly": monly,
        "pponly": pponly,
        "octave": octave,
        "centroid": centroid,
        "2spaces": v_2spaces,
        "3spaces": v_3spaces,
    }
    if name is not None:
        params["name"] = name
    if iters is not None:
        params["iters"] = iters
    if pargs is not None:
        params["pargs"] = pargs
    return params


def fspalm_cargs(
    params: FspalmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fspalm")
    cargs.extend([
        "--glmdir",
        params.get("glmdir", None)
    ])
    cargs.extend([
        "--cft",
        str(params.get("cft", None))
    ])
    cargs.extend([
        "--cwp",
        str(params.get("cwp", None))
    ])
    if params.get("onetail", False):
        cargs.append("--onetail")
    if params.get("twotail", False):
        cargs.append("--twotail")
    if params.get("name", None) is not None:
        cargs.extend([
            "--name",
            params.get("name", None)
        ])
    if params.get("iters", None) is not None:
        cargs.extend([
            "--iters",
            str(params.get("iters", None))
        ])
    if params.get("monly", False):
        cargs.append("--monly")
    if params.get("pponly", False):
        cargs.append("--pponly")
    if params.get("octave", False):
        cargs.append("--octave")
    if params.get("centroid", False):
        cargs.append("--centroid")
    if params.get("2spaces", False):
        cargs.append("--2spaces")
    if params.get("3spaces", False):
        cargs.append("--3spaces")
    if params.get("pargs", None) is not None:
        cargs.extend([
            "--pargs",
            params.get("pargs", None)
        ])
    return cargs


def fspalm_outputs(
    params: FspalmParameters,
    execution: Execution,
) -> FspalmOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FspalmOutputs(
        root=execution.output_file("."),
    )
    return ret


def fspalm_execute(
    params: FspalmParameters,
    runner: Runner | None = None,
) -> FspalmOutputs:
    """
    fspalm
    
    Prepares and analyzes the output of mri_glmfit for Permutation Analysis of
    Linear Models (PALM) to correct for multiple comparisons.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FspalmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSPALM_METADATA)
    params = execution.params(params)
    cargs = fspalm_cargs(params, execution)
    ret = fspalm_outputs(params, execution)
    execution.run(cargs)
    return ret


def fspalm(
    glmdir: str,
    cft: float,
    cwp: float,
    onetail: bool = False,
    twotail: bool = False,
    name: str | None = None,
    iters: float | None = None,
    monly: bool = False,
    pponly: bool = False,
    octave: bool = False,
    centroid: bool = False,
    v_2spaces: bool = False,
    v_3spaces: bool = False,
    pargs: str | None = None,
    runner: Runner | None = None,
) -> FspalmOutputs:
    """
    fspalm
    
    Prepares and analyzes the output of mri_glmfit for Permutation Analysis of
    Linear Models (PALM) to correct for multiple comparisons.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        glmdir: The mri_glmfit directory to prepare.
        cft: Voxel-wise cluster forming threshold (CFT), -log10(p).
        cwp: Clusterwise p-value threshold.
        onetail: Perform a one-tailed test.
        twotail: Perform a two-tailed test. NOTE: changes CFT.
        name: Name of palm subdirectory (default="palm").
        iters: Number of iterations.
        monly: Only create matlab file, do not run.
        pponly: Only perform post-processing.
        octave: Run with octave, not matlab.
        centroid: Add --centroid flag to mri_surfcluster post-processing.
        v_2spaces: Bonferroni-correct for 2 spaces.
        v_3spaces: Bonferroni-correct for 3 spaces.
        pargs: Supply additional args to be passed to the palm function.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FspalmOutputs`).
    """
    params = fspalm_params(
        glmdir=glmdir,
        cft=cft,
        cwp=cwp,
        onetail=onetail,
        twotail=twotail,
        name=name,
        iters=iters,
        monly=monly,
        pponly=pponly,
        octave=octave,
        centroid=centroid,
        v_2spaces=v_2spaces,
        v_3spaces=v_3spaces,
        pargs=pargs,
    )
    return fspalm_execute(params, runner)


__all__ = [
    "FSPALM_METADATA",
    "FspalmOutputs",
    "fspalm",
    "fspalm_execute",
    "fspalm_params",
]
