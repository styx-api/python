# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSR_COREG_METADATA = Metadata(
    id="68ee39ecf693d112ce9b553262afcc9d6d2b5b02.boutiques",
    name="fsr-coreg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


FsrCoregParameters = typing.TypedDict('FsrCoregParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/fsr-coreg"]],
    "import_dir": str,
    "reference_mode": str,
    "num_threads": typing.NotRequired[float | None],
    "force_update": bool,
    "output_dir": typing.NotRequired[str | None],
    "expert_options": typing.NotRequired[InputPathType | None],
})
FsrCoregParametersTagged = typing.TypedDict('FsrCoregParametersTagged', {
    "@type": typing.Literal["freesurfer/fsr-coreg"],
    "import_dir": str,
    "reference_mode": str,
    "num_threads": typing.NotRequired[float | None],
    "force_update": bool,
    "output_dir": typing.NotRequired[str | None],
    "expert_options": typing.NotRequired[InputPathType | None],
})


class FsrCoregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FsrCoregParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    aligned_volume: OutputPathType | None
    """Volume produced for each mode in alignment with the reference mode"""
    registration_transform: OutputPathType | None
    """Registration transform file for mode to reference mode"""


def fsr_coreg_params(
    import_dir: str,
    reference_mode: str,
    num_threads: float | None = None,
    force_update: bool = False,
    output_dir: str | None = None,
    expert_options: InputPathType | None = None,
) -> FsrCoregParametersTagged:
    """
    Build parameters.
    
    Args:
        import_dir: Data directory created by fsr-import.
        reference_mode: Mode to use as a reference (all modes register to this\
            mode).
        num_threads: Number of threads to use.
        force_update: Force update of files regardless of time stamp.
        output_dir: Set the output directory, default is importdir.
        expert_options: Expert options file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/fsr-coreg",
        "import_dir": import_dir,
        "reference_mode": reference_mode,
        "force_update": force_update,
    }
    if num_threads is not None:
        params["num_threads"] = num_threads
    if output_dir is not None:
        params["output_dir"] = output_dir
    if expert_options is not None:
        params["expert_options"] = expert_options
    return params


def fsr_coreg_cargs(
    params: FsrCoregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsr-coreg")
    cargs.extend([
        "--i",
        params.get("import_dir", None)
    ])
    cargs.extend([
        "--ref",
        params.get("reference_mode", None)
    ])
    if params.get("num_threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("num_threads", None))
        ])
    if params.get("force_update", False):
        cargs.append("--force-update")
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "--o",
            params.get("output_dir", None)
        ])
    if params.get("expert_options", None) is not None:
        cargs.extend([
            "--expert",
            execution.input_file(params.get("expert_options", None))
        ])
    return cargs


def fsr_coreg_outputs(
    params: FsrCoregParameters,
    execution: Execution,
) -> FsrCoregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FsrCoregOutputs(
        root=execution.output_file("."),
        aligned_volume=execution.output_file(params.get("output_dir", None) + "/mode.mgz") if (params.get("output_dir") is not None) else None,
        registration_transform=execution.output_file(params.get("output_dir", None) + "/mode.reg-to-ref.lta") if (params.get("output_dir") is not None) else None,
    )
    return ret


def fsr_coreg_execute(
    params: FsrCoregParameters,
    runner: Runner | None = None,
) -> FsrCoregOutputs:
    """
    fsr-coreg
    
    Co-registers input data in preparation for FreeSurfer analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsrCoregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSR_COREG_METADATA)
    params = execution.params(params)
    cargs = fsr_coreg_cargs(params, execution)
    ret = fsr_coreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def fsr_coreg(
    import_dir: str,
    reference_mode: str,
    num_threads: float | None = None,
    force_update: bool = False,
    output_dir: str | None = None,
    expert_options: InputPathType | None = None,
    runner: Runner | None = None,
) -> FsrCoregOutputs:
    """
    fsr-coreg
    
    Co-registers input data in preparation for FreeSurfer analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        import_dir: Data directory created by fsr-import.
        reference_mode: Mode to use as a reference (all modes register to this\
            mode).
        num_threads: Number of threads to use.
        force_update: Force update of files regardless of time stamp.
        output_dir: Set the output directory, default is importdir.
        expert_options: Expert options file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsrCoregOutputs`).
    """
    params = fsr_coreg_params(
        import_dir=import_dir,
        reference_mode=reference_mode,
        num_threads=num_threads,
        force_update=force_update,
        output_dir=output_dir,
        expert_options=expert_options,
    )
    return fsr_coreg_execute(params, runner)


__all__ = [
    "FSR_COREG_METADATA",
    "FsrCoregOutputs",
    "fsr_coreg",
    "fsr_coreg_execute",
    "fsr_coreg_params",
]
