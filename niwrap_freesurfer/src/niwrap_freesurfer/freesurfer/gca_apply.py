# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

GCA_APPLY_METADATA = Metadata(
    id="694182fb584f9038ebca1a169c46117c3e0d43c0.boutiques",
    name="gca-apply",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


GcaApplyParameters = typing.TypedDict('GcaApplyParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/gca-apply"]],
    "gcafile": InputPathType,
    "subject": str,
    "nthreads": typing.NotRequired[float | None],
    "base": typing.NotRequired[str | None],
    "no_segstats": bool,
    "subjects_dir": typing.NotRequired[str | None],
    "dice_seg": typing.NotRequired[str | None],
    "dice_file": typing.NotRequired[str | None],
    "lta": typing.NotRequired[InputPathType | None],
    "norm": typing.NotRequired[InputPathType | None],
    "input_mgz": typing.NotRequired[InputPathType | None],
    "brainmask": typing.NotRequired[InputPathType | None],
    "output_dir": typing.NotRequired[str | None],
    "no_v6labopts": bool,
    "m3z_file": typing.NotRequired[InputPathType | None],
    "gca_rb_2016": bool,
    "force_update": bool,
    "gcareg_iters": typing.NotRequired[float | None],
})
GcaApplyParametersTagged = typing.TypedDict('GcaApplyParametersTagged', {
    "@type": typing.Literal["freesurfer/gca-apply"],
    "gcafile": InputPathType,
    "subject": str,
    "nthreads": typing.NotRequired[float | None],
    "base": typing.NotRequired[str | None],
    "no_segstats": bool,
    "subjects_dir": typing.NotRequired[str | None],
    "dice_seg": typing.NotRequired[str | None],
    "dice_file": typing.NotRequired[str | None],
    "lta": typing.NotRequired[InputPathType | None],
    "norm": typing.NotRequired[InputPathType | None],
    "input_mgz": typing.NotRequired[InputPathType | None],
    "brainmask": typing.NotRequired[InputPathType | None],
    "output_dir": typing.NotRequired[str | None],
    "no_v6labopts": bool,
    "m3z_file": typing.NotRequired[InputPathType | None],
    "gca_rb_2016": bool,
    "force_update": bool,
    "gcareg_iters": typing.NotRequired[float | None],
})


class GcaApplyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `GcaApplyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_lta: OutputPathType | None
    """Output LTA file"""
    output_m3z: OutputPathType | None
    """Output M3Z file"""
    normalized_gca: OutputPathType | None
    """Normalized GCA base MGZ file"""
    segmented_gca: OutputPathType | None
    """Segmented GCA base MGZ file"""
    stats_output: OutputPathType | None
    """Statistical output file"""


def gca_apply_params(
    gcafile: InputPathType,
    subject: str,
    nthreads: float | None = None,
    base: str | None = None,
    no_segstats: bool = False,
    subjects_dir: str | None = None,
    dice_seg: str | None = None,
    dice_file: str | None = None,
    lta: InputPathType | None = None,
    norm: InputPathType | None = None,
    input_mgz: InputPathType | None = None,
    brainmask: InputPathType | None = None,
    output_dir: str | None = None,
    no_v6labopts: bool = False,
    m3z_file: InputPathType | None = None,
    gca_rb_2016: bool = False,
    force_update: bool = False,
    gcareg_iters: float | None = None,
) -> GcaApplyParametersTagged:
    """
    Build parameters.
    
    Args:
        gcafile: GCA file.
        subject: Subject.
        nthreads: Number of OMP threads.
        base: Use gcabase for naming output files (default is basename gcafile).
        no_segstats: Do not compute segstats.
        subjects_dir: Subjects directory.
        dice_seg: Specify dice coefficient computation parameters.
        dice_file: Specify dice coefficient computation file.
        lta: Use SrcLTA instead of running mri_em_register.
        norm: Use SrcNorm instead of running mri_ca_normalize.
        input_mgz: Input file, default is nu.mgz.
        brainmask: Brainmask file, default is brainmask.mgz.
        output_dir: Output directory (default: SUBJECTS_DIR/subject).
        no_v6labopts: Do not include v6 command line options.
        m3z_file: M3Z file.
        gca_rb_2016: Use RB_all_2016-05-10.vc700.gca.
        force_update: Force recreation of a file even if it is younger than its\
            parents.
        gcareg_iters: Set to 1, only for testing.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/gca-apply",
        "gcafile": gcafile,
        "subject": subject,
        "no_segstats": no_segstats,
        "no_v6labopts": no_v6labopts,
        "gca_rb_2016": gca_rb_2016,
        "force_update": force_update,
    }
    if nthreads is not None:
        params["nthreads"] = nthreads
    if base is not None:
        params["base"] = base
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if dice_seg is not None:
        params["dice_seg"] = dice_seg
    if dice_file is not None:
        params["dice_file"] = dice_file
    if lta is not None:
        params["lta"] = lta
    if norm is not None:
        params["norm"] = norm
    if input_mgz is not None:
        params["input_mgz"] = input_mgz
    if brainmask is not None:
        params["brainmask"] = brainmask
    if output_dir is not None:
        params["output_dir"] = output_dir
    if m3z_file is not None:
        params["m3z_file"] = m3z_file
    if gcareg_iters is not None:
        params["gcareg_iters"] = gcareg_iters
    return params


def gca_apply_cargs(
    params: GcaApplyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("gca-apply")
    cargs.extend([
        "-apply",
        execution.input_file(params.get("gcafile", None))
    ])
    cargs.append(params.get("subject", None))
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "--nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("base", None) is not None:
        cargs.extend([
            "--base",
            params.get("base", None)
        ])
    if params.get("no_segstats", False):
        cargs.append("--no-segstats")
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_dir", None)
        ])
    if params.get("dice_seg", None) is not None:
        cargs.extend([
            "--dice",
            params.get("dice_seg", None)
        ])
    if params.get("dice_file", None) is not None:
        cargs.append(params.get("dice_file", None))
    if params.get("lta", None) is not None:
        cargs.extend([
            "--lta",
            execution.input_file(params.get("lta", None))
        ])
    if params.get("norm", None) is not None:
        cargs.extend([
            "--norm",
            execution.input_file(params.get("norm", None))
        ])
    if params.get("input_mgz", None) is not None:
        cargs.extend([
            "--input",
            execution.input_file(params.get("input_mgz", None))
        ])
    if params.get("brainmask", None) is not None:
        cargs.extend([
            "--brainmask",
            execution.input_file(params.get("brainmask", None))
        ])
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "--o",
            params.get("output_dir", None)
        ])
    if params.get("no_v6labopts", False):
        cargs.append("--no-v6labopts")
    if params.get("m3z_file", None) is not None:
        cargs.extend([
            "--m3z",
            execution.input_file(params.get("m3z_file", None))
        ])
    if params.get("gca_rb_2016", False):
        cargs.append("--gca-rb-2016")
    if params.get("force_update", False):
        cargs.append("--force-update")
    if params.get("gcareg_iters", None) is not None:
        cargs.extend([
            "--gcareg-iters",
            str(params.get("gcareg_iters", None))
        ])
    return cargs


def gca_apply_outputs(
    params: GcaApplyParameters,
    execution: Execution,
) -> GcaApplyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = GcaApplyOutputs(
        root=execution.output_file("."),
        output_lta=execution.output_file(params.get("base", None) + ".lta") if (params.get("base") is not None) else None,
        output_m3z=execution.output_file(params.get("base", None) + ".m3z") if (params.get("base") is not None) else None,
        normalized_gca=execution.output_file("norm." + params.get("base", None) + ".mgz") if (params.get("base") is not None) else None,
        segmented_gca=execution.output_file(params.get("base", None) + ".aseg.mgz") if (params.get("base") is not None) else None,
        stats_output=execution.output_file(params.get("base", None) + ".stats") if (params.get("base") is not None) else None,
    )
    return ret


def gca_apply_execute(
    params: GcaApplyParameters,
    runner: Runner | None = None,
) -> GcaApplyOutputs:
    """
    gca-apply
    
    Applies a GCA, performing the steps of mri_em_register, mri_ca_normalize,
    mri_ca_register, and mri_ca_label. This script replicates the stages in
    recon-all without overwriting files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GcaApplyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GCA_APPLY_METADATA)
    params = execution.params(params)
    cargs = gca_apply_cargs(params, execution)
    ret = gca_apply_outputs(params, execution)
    execution.run(cargs)
    return ret


def gca_apply(
    gcafile: InputPathType,
    subject: str,
    nthreads: float | None = None,
    base: str | None = None,
    no_segstats: bool = False,
    subjects_dir: str | None = None,
    dice_seg: str | None = None,
    dice_file: str | None = None,
    lta: InputPathType | None = None,
    norm: InputPathType | None = None,
    input_mgz: InputPathType | None = None,
    brainmask: InputPathType | None = None,
    output_dir: str | None = None,
    no_v6labopts: bool = False,
    m3z_file: InputPathType | None = None,
    gca_rb_2016: bool = False,
    force_update: bool = False,
    gcareg_iters: float | None = None,
    runner: Runner | None = None,
) -> GcaApplyOutputs:
    """
    gca-apply
    
    Applies a GCA, performing the steps of mri_em_register, mri_ca_normalize,
    mri_ca_register, and mri_ca_label. This script replicates the stages in
    recon-all without overwriting files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        gcafile: GCA file.
        subject: Subject.
        nthreads: Number of OMP threads.
        base: Use gcabase for naming output files (default is basename gcafile).
        no_segstats: Do not compute segstats.
        subjects_dir: Subjects directory.
        dice_seg: Specify dice coefficient computation parameters.
        dice_file: Specify dice coefficient computation file.
        lta: Use SrcLTA instead of running mri_em_register.
        norm: Use SrcNorm instead of running mri_ca_normalize.
        input_mgz: Input file, default is nu.mgz.
        brainmask: Brainmask file, default is brainmask.mgz.
        output_dir: Output directory (default: SUBJECTS_DIR/subject).
        no_v6labopts: Do not include v6 command line options.
        m3z_file: M3Z file.
        gca_rb_2016: Use RB_all_2016-05-10.vc700.gca.
        force_update: Force recreation of a file even if it is younger than its\
            parents.
        gcareg_iters: Set to 1, only for testing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GcaApplyOutputs`).
    """
    params = gca_apply_params(
        gcafile=gcafile,
        subject=subject,
        nthreads=nthreads,
        base=base,
        no_segstats=no_segstats,
        subjects_dir=subjects_dir,
        dice_seg=dice_seg,
        dice_file=dice_file,
        lta=lta,
        norm=norm,
        input_mgz=input_mgz,
        brainmask=brainmask,
        output_dir=output_dir,
        no_v6labopts=no_v6labopts,
        m3z_file=m3z_file,
        gca_rb_2016=gca_rb_2016,
        force_update=force_update,
        gcareg_iters=gcareg_iters,
    )
    return gca_apply_execute(params, runner)


__all__ = [
    "GCA_APPLY_METADATA",
    "GcaApplyOutputs",
    "gca_apply",
    "gca_apply_execute",
    "gca_apply_params",
]
