# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

GCATRAIN_METADATA = Metadata(
    id="75583f5bb61b5d186dab3b53e5c1fde169f86d48.boutiques",
    name="gcatrain",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


GcatrainParameters = typing.TypedDict('GcatrainParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/gcatrain"]],
    "gcadir": str,
    "subjectlistfile": InputPathType,
    "init_subject_transform": list[str],
    "seg_file": InputPathType,
    "source_subjects_dir": str,
    "num_iters": typing.NotRequired[float | None],
    "num_threads": typing.NotRequired[float | None],
    "exclude_file": typing.NotRequired[InputPathType | None],
    "exclude_subject": typing.NotRequired[str | None],
    "symmetric_atlas": bool,
    "color_table": typing.NotRequired[InputPathType | None],
    "no_submit": bool,
    "mail_flag": bool,
    "no_strict": bool,
    "gcareg_iters": bool,
    "prep_only": bool,
    "nu10_flag": bool,
    "nu12_flag": bool,
    "no_emreg": bool,
})
GcatrainParametersTagged = typing.TypedDict('GcatrainParametersTagged', {
    "@type": typing.Literal["freesurfer/gcatrain"],
    "gcadir": str,
    "subjectlistfile": InputPathType,
    "init_subject_transform": list[str],
    "seg_file": InputPathType,
    "source_subjects_dir": str,
    "num_iters": typing.NotRequired[float | None],
    "num_threads": typing.NotRequired[float | None],
    "exclude_file": typing.NotRequired[InputPathType | None],
    "exclude_subject": typing.NotRequired[str | None],
    "symmetric_atlas": bool,
    "color_table": typing.NotRequired[InputPathType | None],
    "no_submit": bool,
    "mail_flag": bool,
    "no_strict": bool,
    "gcareg_iters": bool,
    "prep_only": bool,
    "nu10_flag": bool,
    "nu12_flag": bool,
    "no_emreg": bool,
})


class GcatrainOutputs(typing.NamedTuple):
    """
    Output object returned when calling `GcatrainParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def gcatrain_params(
    gcadir: str,
    subjectlistfile: InputPathType,
    init_subject_transform: list[str],
    seg_file: InputPathType,
    source_subjects_dir: str,
    num_iters: float | None = None,
    num_threads: float | None = None,
    exclude_file: InputPathType | None = None,
    exclude_subject: str | None = None,
    symmetric_atlas: bool = False,
    color_table: InputPathType | None = None,
    no_submit: bool = False,
    mail_flag: bool = False,
    no_strict: bool = False,
    gcareg_iters: bool = False,
    prep_only: bool = False,
    nu10_flag: bool = False,
    nu12_flag: bool = False,
    no_emreg: bool = False,
) -> GcatrainParametersTagged:
    """
    Build parameters.
    
    Args:
        gcadir: Directory for the new SUBJECTS_DIR.
        subjectlistfile: The list of subjects to include.
        init_subject_transform: Initialization subject and its talairach\
            transform.
        seg_file: Segmentation file (e.g. seg_edited.mgz).
        source_subjects_dir: Source SUBJECTS_DIR for data.
        num_iters: Number of iterations.
        num_threads: Number of threads to use.
        exclude_file: File listing subjects to exclude, useful for jackknifing.
        exclude_subject: Exclude a single subject, useful for jackknifing.
        symmetric_atlas: Create a symmetric atlas.
        color_table: Colortable for segmentation labels (not needed).
        no_submit: Run serially without pbsubmit.
        mail_flag: Mail to user when jobs are pbsubmitted or finished.
        no_strict: Do not require FS build stamps to match across iterations.
        gcareg_iters: Set to 1 for testing.
        prep_only: Execute preparation steps only.
        nu10_flag: Run with nu10 settings.
        nu12_flag: Run with nu12 settings (default).
        no_emreg: Do not use mri_em_register.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/gcatrain",
        "gcadir": gcadir,
        "subjectlistfile": subjectlistfile,
        "init_subject_transform": init_subject_transform,
        "seg_file": seg_file,
        "source_subjects_dir": source_subjects_dir,
        "symmetric_atlas": symmetric_atlas,
        "no_submit": no_submit,
        "mail_flag": mail_flag,
        "no_strict": no_strict,
        "gcareg_iters": gcareg_iters,
        "prep_only": prep_only,
        "nu10_flag": nu10_flag,
        "nu12_flag": nu12_flag,
        "no_emreg": no_emreg,
    }
    if num_iters is not None:
        params["num_iters"] = num_iters
    if num_threads is not None:
        params["num_threads"] = num_threads
    if exclude_file is not None:
        params["exclude_file"] = exclude_file
    if exclude_subject is not None:
        params["exclude_subject"] = exclude_subject
    if color_table is not None:
        params["color_table"] = color_table
    return params


def gcatrain_cargs(
    params: GcatrainParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("gcatrain")
    cargs.extend([
        "--g",
        params.get("gcadir", None)
    ])
    cargs.extend([
        "--f",
        execution.input_file(params.get("subjectlistfile", None))
    ])
    cargs.extend([
        "--init",
        *params.get("init_subject_transform", None)
    ])
    cargs.extend([
        "--seg",
        execution.input_file(params.get("seg_file", None))
    ])
    cargs.extend([
        "--sd",
        params.get("source_subjects_dir", None)
    ])
    if params.get("num_iters", None) is not None:
        cargs.extend([
            "--niters",
            str(params.get("num_iters", None))
        ])
    if params.get("num_threads", None) is not None:
        cargs.extend([
            "--nthreads",
            str(params.get("num_threads", None))
        ])
    if params.get("exclude_file", None) is not None:
        cargs.extend([
            "--x",
            execution.input_file(params.get("exclude_file", None))
        ])
    if params.get("exclude_subject", None) is not None:
        cargs.extend([
            "--xs",
            params.get("exclude_subject", None)
        ])
    if params.get("symmetric_atlas", False):
        cargs.append("--sym")
    if params.get("color_table", None) is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("color_table", None))
        ])
    if params.get("no_submit", False):
        cargs.append("--no-submit")
    if params.get("mail_flag", False):
        cargs.append("--pb-m")
    if params.get("no_strict", False):
        cargs.append("--no-strict")
    if params.get("gcareg_iters", False):
        cargs.append("--gcareg-iters")
    if params.get("prep_only", False):
        cargs.append("--prep-only")
    if params.get("nu10_flag", False):
        cargs.append("--nu10")
    if params.get("nu12_flag", False):
        cargs.append("--nu12")
    if params.get("no_emreg", False):
        cargs.append("--no-emreg")
    return cargs


def gcatrain_outputs(
    params: GcatrainParameters,
    execution: Execution,
) -> GcatrainOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = GcatrainOutputs(
        root=execution.output_file("."),
    )
    return ret


def gcatrain_execute(
    params: GcatrainParameters,
    runner: Runner | None = None,
) -> GcatrainOutputs:
    """
    gcatrain
    
    GCA training tool for building a GCA from a group of manually labeled
    subjects.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GcatrainOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GCATRAIN_METADATA)
    params = execution.params(params)
    cargs = gcatrain_cargs(params, execution)
    ret = gcatrain_outputs(params, execution)
    execution.run(cargs)
    return ret


def gcatrain(
    gcadir: str,
    subjectlistfile: InputPathType,
    init_subject_transform: list[str],
    seg_file: InputPathType,
    source_subjects_dir: str,
    num_iters: float | None = None,
    num_threads: float | None = None,
    exclude_file: InputPathType | None = None,
    exclude_subject: str | None = None,
    symmetric_atlas: bool = False,
    color_table: InputPathType | None = None,
    no_submit: bool = False,
    mail_flag: bool = False,
    no_strict: bool = False,
    gcareg_iters: bool = False,
    prep_only: bool = False,
    nu10_flag: bool = False,
    nu12_flag: bool = False,
    no_emreg: bool = False,
    runner: Runner | None = None,
) -> GcatrainOutputs:
    """
    gcatrain
    
    GCA training tool for building a GCA from a group of manually labeled
    subjects.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        gcadir: Directory for the new SUBJECTS_DIR.
        subjectlistfile: The list of subjects to include.
        init_subject_transform: Initialization subject and its talairach\
            transform.
        seg_file: Segmentation file (e.g. seg_edited.mgz).
        source_subjects_dir: Source SUBJECTS_DIR for data.
        num_iters: Number of iterations.
        num_threads: Number of threads to use.
        exclude_file: File listing subjects to exclude, useful for jackknifing.
        exclude_subject: Exclude a single subject, useful for jackknifing.
        symmetric_atlas: Create a symmetric atlas.
        color_table: Colortable for segmentation labels (not needed).
        no_submit: Run serially without pbsubmit.
        mail_flag: Mail to user when jobs are pbsubmitted or finished.
        no_strict: Do not require FS build stamps to match across iterations.
        gcareg_iters: Set to 1 for testing.
        prep_only: Execute preparation steps only.
        nu10_flag: Run with nu10 settings.
        nu12_flag: Run with nu12 settings (default).
        no_emreg: Do not use mri_em_register.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GcatrainOutputs`).
    """
    params = gcatrain_params(
        gcadir=gcadir,
        subjectlistfile=subjectlistfile,
        init_subject_transform=init_subject_transform,
        seg_file=seg_file,
        source_subjects_dir=source_subjects_dir,
        num_iters=num_iters,
        num_threads=num_threads,
        exclude_file=exclude_file,
        exclude_subject=exclude_subject,
        symmetric_atlas=symmetric_atlas,
        color_table=color_table,
        no_submit=no_submit,
        mail_flag=mail_flag,
        no_strict=no_strict,
        gcareg_iters=gcareg_iters,
        prep_only=prep_only,
        nu10_flag=nu10_flag,
        nu12_flag=nu12_flag,
        no_emreg=no_emreg,
    )
    return gcatrain_execute(params, runner)


__all__ = [
    "GCATRAIN_METADATA",
    "GcatrainOutputs",
    "gcatrain",
    "gcatrain_execute",
    "gcatrain_params",
]
