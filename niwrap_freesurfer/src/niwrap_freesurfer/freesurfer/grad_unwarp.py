# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

GRAD_UNWARP_METADATA = Metadata(
    id="df3fd775da58b9f83cf4ac32afc89aee8cace983.boutiques",
    name="grad_unwarp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


GradUnwarpParameters = typing.TypedDict('GradUnwarpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/grad_unwarp"]],
    "infile": InputPathType,
    "seriesno": typing.NotRequired[str | None],
    "unwarp_type": typing.NotRequired[str | None],
    "nojac": bool,
    "corfov": bool,
    "cor": bool,
    "interp": typing.NotRequired[str | None],
    "outfile": str,
    "matlab_binary": typing.NotRequired[str | None],
})
GradUnwarpParametersTagged = typing.TypedDict('GradUnwarpParametersTagged', {
    "@type": typing.Literal["freesurfer/grad_unwarp"],
    "infile": InputPathType,
    "seriesno": typing.NotRequired[str | None],
    "unwarp_type": typing.NotRequired[str | None],
    "nojac": bool,
    "corfov": bool,
    "cor": bool,
    "interp": typing.NotRequired[str | None],
    "outfile": str,
    "matlab_binary": typing.NotRequired[str | None],
})


class GradUnwarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `GradUnwarpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    mgh_output: OutputPathType
    """Output file in MGH format"""
    cor_output: OutputPathType
    """Output directory in COR format"""


def grad_unwarp_params(
    infile: InputPathType,
    outfile: str,
    seriesno: str | None = None,
    unwarp_type: str | None = None,
    nojac: bool = False,
    corfov: bool = False,
    cor: bool = False,
    interp: str | None = None,
    matlab_binary: str | None = None,
) -> GradUnwarpParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input file or directory (dcmfile, dcmdir, or mghfile).
        outfile: Output file in MGH format.
        seriesno: DICOM series number, required if input is a directory.
        unwarp_type: Gradient unwarping displacement type or map file (required\
            for MGH file).
        nojac: Do not perform jacobian correction when unwarping.
        corfov: Resample to Coronal FOV.
        cor: Output in COR format instead of MGH.
        interp: Interpolation method (cubic, linear, nearest, spline).
        matlab_binary: Path to the Matlab binary, version 6.5 or higher\
            required.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/grad_unwarp",
        "infile": infile,
        "nojac": nojac,
        "corfov": corfov,
        "cor": cor,
        "outfile": outfile,
    }
    if seriesno is not None:
        params["seriesno"] = seriesno
    if unwarp_type is not None:
        params["unwarp_type"] = unwarp_type
    if interp is not None:
        params["interp"] = interp
    if matlab_binary is not None:
        params["matlab_binary"] = matlab_binary
    return params


def grad_unwarp_cargs(
    params: GradUnwarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("grad_unwarp")
    cargs.append(execution.input_file(params.get("infile", None)))
    if params.get("seriesno", None) is not None:
        cargs.extend([
            "-s",
            params.get("seriesno", None)
        ])
    if params.get("unwarp_type", None) is not None:
        cargs.extend([
            "-unwarp",
            params.get("unwarp_type", None)
        ])
    if params.get("nojac", False):
        cargs.append("-nojac")
    if params.get("corfov", False):
        cargs.append("-corfov")
    if params.get("cor", False):
        cargs.append("-cor")
    if params.get("interp", None) is not None:
        cargs.extend([
            "-interp",
            params.get("interp", None)
        ])
    cargs.extend([
        "-o",
        params.get("outfile", None)
    ])
    if params.get("matlab_binary", None) is not None:
        cargs.extend([
            "-matlab",
            params.get("matlab_binary", None)
        ])
    return cargs


def grad_unwarp_outputs(
    params: GradUnwarpParameters,
    execution: Execution,
) -> GradUnwarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = GradUnwarpOutputs(
        root=execution.output_file("."),
        mgh_output=execution.output_file(params.get("outfile", None)),
        cor_output=execution.output_file(params.get("outfile", None) + "/"),
    )
    return ret


def grad_unwarp_execute(
    params: GradUnwarpParameters,
    runner: Runner | None = None,
) -> GradUnwarpOutputs:
    """
    grad_unwarp
    
    Convert, dewarp, and resample DICOM files to MGH files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GradUnwarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GRAD_UNWARP_METADATA)
    params = execution.params(params)
    cargs = grad_unwarp_cargs(params, execution)
    ret = grad_unwarp_outputs(params, execution)
    execution.run(cargs)
    return ret


def grad_unwarp(
    infile: InputPathType,
    outfile: str,
    seriesno: str | None = None,
    unwarp_type: str | None = None,
    nojac: bool = False,
    corfov: bool = False,
    cor: bool = False,
    interp: str | None = None,
    matlab_binary: str | None = None,
    runner: Runner | None = None,
) -> GradUnwarpOutputs:
    """
    grad_unwarp
    
    Convert, dewarp, and resample DICOM files to MGH files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        infile: Input file or directory (dcmfile, dcmdir, or mghfile).
        outfile: Output file in MGH format.
        seriesno: DICOM series number, required if input is a directory.
        unwarp_type: Gradient unwarping displacement type or map file (required\
            for MGH file).
        nojac: Do not perform jacobian correction when unwarping.
        corfov: Resample to Coronal FOV.
        cor: Output in COR format instead of MGH.
        interp: Interpolation method (cubic, linear, nearest, spline).
        matlab_binary: Path to the Matlab binary, version 6.5 or higher\
            required.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GradUnwarpOutputs`).
    """
    params = grad_unwarp_params(
        infile=infile,
        seriesno=seriesno,
        unwarp_type=unwarp_type,
        nojac=nojac,
        corfov=corfov,
        cor=cor,
        interp=interp,
        outfile=outfile,
        matlab_binary=matlab_binary,
    )
    return grad_unwarp_execute(params, runner)


__all__ = [
    "GRAD_UNWARP_METADATA",
    "GradUnwarpOutputs",
    "grad_unwarp",
    "grad_unwarp_execute",
    "grad_unwarp_params",
]
