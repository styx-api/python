# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

HIAM_MAKE_SURFACES_METADATA = Metadata(
    id="82017efb059d0d3b2c38801127d8932b282aaa78.boutiques",
    name="hiam_make_surfaces",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


HiamMakeSurfacesParameters = typing.TypedDict('HiamMakeSurfacesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/hiam_make_surfaces"]],
    "subject_name": str,
    "structure": typing.Literal["RA", "LA", "RH", "LH"],
})
HiamMakeSurfacesParametersTagged = typing.TypedDict('HiamMakeSurfacesParametersTagged', {
    "@type": typing.Literal["freesurfer/hiam_make_surfaces"],
    "subject_name": str,
    "structure": typing.Literal["RA", "LA", "RH", "LH"],
})


class HiamMakeSurfacesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `HiamMakeSurfacesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def hiam_make_surfaces_params(
    subject_name: str,
    structure: typing.Literal["RA", "LA", "RH", "LH"],
) -> HiamMakeSurfacesParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_name: Subject name for which surfaces are to be created.
        structure: Structure for which surfaces will be created. Valid values\
            are RA, LA, RH, and LH.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/hiam_make_surfaces",
        "subject_name": subject_name,
        "structure": structure,
    }
    return params


def hiam_make_surfaces_cargs(
    params: HiamMakeSurfacesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("hiam_make_surfaces")
    cargs.append(params.get("subject_name", None))
    cargs.append(params.get("structure", None))
    return cargs


def hiam_make_surfaces_outputs(
    params: HiamMakeSurfacesParameters,
    execution: Execution,
) -> HiamMakeSurfacesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = HiamMakeSurfacesOutputs(
        root=execution.output_file("."),
    )
    return ret


def hiam_make_surfaces_execute(
    params: HiamMakeSurfacesParameters,
    runner: Runner | None = None,
) -> HiamMakeSurfacesOutputs:
    """
    hiam_make_surfaces
    
    Surface creation tool for specified brain structures.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HiamMakeSurfacesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HIAM_MAKE_SURFACES_METADATA)
    params = execution.params(params)
    cargs = hiam_make_surfaces_cargs(params, execution)
    ret = hiam_make_surfaces_outputs(params, execution)
    execution.run(cargs)
    return ret


def hiam_make_surfaces(
    subject_name: str,
    structure: typing.Literal["RA", "LA", "RH", "LH"],
    runner: Runner | None = None,
) -> HiamMakeSurfacesOutputs:
    """
    hiam_make_surfaces
    
    Surface creation tool for specified brain structures.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_name: Subject name for which surfaces are to be created.
        structure: Structure for which surfaces will be created. Valid values\
            are RA, LA, RH, and LH.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HiamMakeSurfacesOutputs`).
    """
    params = hiam_make_surfaces_params(
        subject_name=subject_name,
        structure=structure,
    )
    return hiam_make_surfaces_execute(params, runner)


__all__ = [
    "HIAM_MAKE_SURFACES_METADATA",
    "HiamMakeSurfacesOutputs",
    "hiam_make_surfaces",
    "hiam_make_surfaces_execute",
    "hiam_make_surfaces_params",
]
