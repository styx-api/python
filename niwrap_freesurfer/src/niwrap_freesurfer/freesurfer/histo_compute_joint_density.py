# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

HISTO_COMPUTE_JOINT_DENSITY_METADATA = Metadata(
    id="9857329ef1b21eee18875ab3ee1f848987d7ec86.boutiques",
    name="histo_compute_joint_density",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


HistoComputeJointDensityParameters = typing.TypedDict('HistoComputeJointDensityParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/histo_compute_joint_density"]],
    "volume1": InputPathType,
    "volume2": InputPathType,
    "joint_density_file": str,
})
HistoComputeJointDensityParametersTagged = typing.TypedDict('HistoComputeJointDensityParametersTagged', {
    "@type": typing.Literal["freesurfer/histo_compute_joint_density"],
    "volume1": InputPathType,
    "volume2": InputPathType,
    "joint_density_file": str,
})


class HistoComputeJointDensityOutputs(typing.NamedTuple):
    """
    Output object returned when calling `HistoComputeJointDensityParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_joint_density: OutputPathType
    """Computed joint density output file"""


def histo_compute_joint_density_params(
    volume1: InputPathType,
    volume2: InputPathType,
    joint_density_file: str,
) -> HistoComputeJointDensityParametersTagged:
    """
    Build parameters.
    
    Args:
        volume1: Input volume 1.
        volume2: Input volume 2.
        joint_density_file: Output joint density file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/histo_compute_joint_density",
        "volume1": volume1,
        "volume2": volume2,
        "joint_density_file": joint_density_file,
    }
    return params


def histo_compute_joint_density_cargs(
    params: HistoComputeJointDensityParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("histo_compute_joint_density")
    cargs.append(execution.input_file(params.get("volume1", None)))
    cargs.append(execution.input_file(params.get("volume2", None)))
    cargs.append(params.get("joint_density_file", None))
    return cargs


def histo_compute_joint_density_outputs(
    params: HistoComputeJointDensityParameters,
    execution: Execution,
) -> HistoComputeJointDensityOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = HistoComputeJointDensityOutputs(
        root=execution.output_file("."),
        output_joint_density=execution.output_file(params.get("joint_density_file", None)),
    )
    return ret


def histo_compute_joint_density_execute(
    params: HistoComputeJointDensityParameters,
    runner: Runner | None = None,
) -> HistoComputeJointDensityOutputs:
    """
    histo_compute_joint_density
    
    A tool to compute the joint density of two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoComputeJointDensityOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HISTO_COMPUTE_JOINT_DENSITY_METADATA)
    params = execution.params(params)
    cargs = histo_compute_joint_density_cargs(params, execution)
    ret = histo_compute_joint_density_outputs(params, execution)
    execution.run(cargs)
    return ret


def histo_compute_joint_density(
    volume1: InputPathType,
    volume2: InputPathType,
    joint_density_file: str,
    runner: Runner | None = None,
) -> HistoComputeJointDensityOutputs:
    """
    histo_compute_joint_density
    
    A tool to compute the joint density of two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        volume1: Input volume 1.
        volume2: Input volume 2.
        joint_density_file: Output joint density file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoComputeJointDensityOutputs`).
    """
    params = histo_compute_joint_density_params(
        volume1=volume1,
        volume2=volume2,
        joint_density_file=joint_density_file,
    )
    return histo_compute_joint_density_execute(params, runner)


__all__ = [
    "HISTO_COMPUTE_JOINT_DENSITY_METADATA",
    "HistoComputeJointDensityOutputs",
    "histo_compute_joint_density",
    "histo_compute_joint_density_execute",
    "histo_compute_joint_density_params",
]
