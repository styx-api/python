# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

HISTO_SYNTHESIZE_METADATA = Metadata(
    id="22328b0a53f00b2d16b4d4c6b5dab0dfb12a1d70.boutiques",
    name="histo_synthesize",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


HistoSynthesizeParameters = typing.TypedDict('HistoSynthesizeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/histo_synthesize"]],
    "mri_volume": InputPathType,
    "histo_volume": InputPathType,
    "synthetic_histo": str,
})
HistoSynthesizeParametersTagged = typing.TypedDict('HistoSynthesizeParametersTagged', {
    "@type": typing.Literal["freesurfer/histo_synthesize"],
    "mri_volume": InputPathType,
    "histo_volume": InputPathType,
    "synthetic_histo": str,
})


class HistoSynthesizeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `HistoSynthesizeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_synthetic_histo: OutputPathType
    """Output file of the synthetic histo volume."""


def histo_synthesize_params(
    mri_volume: InputPathType,
    histo_volume: InputPathType,
    synthetic_histo: str,
) -> HistoSynthesizeParametersTagged:
    """
    Build parameters.
    
    Args:
        mri_volume: Input MRI volume file.
        histo_volume: Input HISTO volume file.
        synthetic_histo: Output synthetic histo volume file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/histo_synthesize",
        "mri_volume": mri_volume,
        "histo_volume": histo_volume,
        "synthetic_histo": synthetic_histo,
    }
    return params


def histo_synthesize_cargs(
    params: HistoSynthesizeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("histo_synthesize")
    cargs.append(execution.input_file(params.get("mri_volume", None)))
    cargs.append(execution.input_file(params.get("histo_volume", None)))
    cargs.append(params.get("synthetic_histo", None))
    return cargs


def histo_synthesize_outputs(
    params: HistoSynthesizeParameters,
    execution: Execution,
) -> HistoSynthesizeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = HistoSynthesizeOutputs(
        root=execution.output_file("."),
        output_synthetic_histo=execution.output_file(params.get("synthetic_histo", None)),
    )
    return ret


def histo_synthesize_execute(
    params: HistoSynthesizeParameters,
    runner: Runner | None = None,
) -> HistoSynthesizeOutputs:
    """
    histo_synthesize
    
    Tool for synthesizing histology-like volumes from MRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoSynthesizeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HISTO_SYNTHESIZE_METADATA)
    params = execution.params(params)
    cargs = histo_synthesize_cargs(params, execution)
    ret = histo_synthesize_outputs(params, execution)
    execution.run(cargs)
    return ret


def histo_synthesize(
    mri_volume: InputPathType,
    histo_volume: InputPathType,
    synthetic_histo: str,
    runner: Runner | None = None,
) -> HistoSynthesizeOutputs:
    """
    histo_synthesize
    
    Tool for synthesizing histology-like volumes from MRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        mri_volume: Input MRI volume file.
        histo_volume: Input HISTO volume file.
        synthetic_histo: Output synthetic histo volume file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoSynthesizeOutputs`).
    """
    params = histo_synthesize_params(
        mri_volume=mri_volume,
        histo_volume=histo_volume,
        synthetic_histo=synthetic_histo,
    )
    return histo_synthesize_execute(params, runner)


__all__ = [
    "HISTO_SYNTHESIZE_METADATA",
    "HistoSynthesizeOutputs",
    "histo_synthesize",
    "histo_synthesize_execute",
    "histo_synthesize_params",
]
