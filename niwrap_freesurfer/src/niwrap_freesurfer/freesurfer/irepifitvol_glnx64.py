# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

IREPIFITVOL_GLNX64_METADATA = Metadata(
    id="a086fe8ba3cbfd5163cdfddf0cd873ea526cb155.boutiques",
    name="irepifitvol.glnx64",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


IrepifitvolGlnx64Parameters = typing.TypedDict('IrepifitvolGlnx64Parameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/irepifitvol.glnx64"]],
    "input_file": InputPathType,
    "output_file": str,
})
IrepifitvolGlnx64ParametersTagged = typing.TypedDict('IrepifitvolGlnx64ParametersTagged', {
    "@type": typing.Literal["freesurfer/irepifitvol.glnx64"],
    "input_file": InputPathType,
    "output_file": str,
})


class IrepifitvolGlnx64Outputs(typing.NamedTuple):
    """
    Output object returned when calling `IrepifitvolGlnx64Parameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume: OutputPathType
    """The fitted volume output from the irepifitvol process."""


def irepifitvol_glnx64_params(
    input_file: InputPathType,
    output_file: str,
) -> IrepifitvolGlnx64ParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: The input volume file to be processed.
        output_file: The path to save the output volume file after fitting.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/irepifitvol.glnx64",
        "input_file": input_file,
        "output_file": output_file,
    }
    return params


def irepifitvol_glnx64_cargs(
    params: IrepifitvolGlnx64Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("irepifitvol.glnx64")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def irepifitvol_glnx64_outputs(
    params: IrepifitvolGlnx64Parameters,
    execution: Execution,
) -> IrepifitvolGlnx64Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = IrepifitvolGlnx64Outputs(
        root=execution.output_file("."),
        output_volume=execution.output_file(params.get("output_file", None)),
    )
    return ret


def irepifitvol_glnx64_execute(
    params: IrepifitvolGlnx64Parameters,
    runner: Runner | None = None,
) -> IrepifitvolGlnx64Outputs:
    """
    irepifitvol.glnx64
    
    This tool is a part of the FreeSurfer toolkit, designed for certain volume
    fitting tasks.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IrepifitvolGlnx64Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(IREPIFITVOL_GLNX64_METADATA)
    params = execution.params(params)
    cargs = irepifitvol_glnx64_cargs(params, execution)
    ret = irepifitvol_glnx64_outputs(params, execution)
    execution.run(cargs)
    return ret


def irepifitvol_glnx64(
    input_file: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> IrepifitvolGlnx64Outputs:
    """
    irepifitvol.glnx64
    
    This tool is a part of the FreeSurfer toolkit, designed for certain volume
    fitting tasks.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: The input volume file to be processed.
        output_file: The path to save the output volume file after fitting.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IrepifitvolGlnx64Outputs`).
    """
    params = irepifitvol_glnx64_params(
        input_file=input_file,
        output_file=output_file,
    )
    return irepifitvol_glnx64_execute(params, runner)


__all__ = [
    "IREPIFITVOL_GLNX64_METADATA",
    "IrepifitvolGlnx64Outputs",
    "irepifitvol_glnx64",
    "irepifitvol_glnx64_execute",
    "irepifitvol_glnx64_params",
]
