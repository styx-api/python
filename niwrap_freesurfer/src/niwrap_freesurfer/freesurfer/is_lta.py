# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

IS_LTA_METADATA = Metadata(
    id="5b9882c3525933a7e40833c3e89a1444ba13a395.boutiques",
    name="IsLTA",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


IsLtaParameters = typing.TypedDict('IsLtaParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/IsLTA"]],
    "candidate_file": InputPathType,
    "outfile": str,
})
IsLtaParametersTagged = typing.TypedDict('IsLtaParametersTagged', {
    "@type": typing.Literal["freesurfer/IsLTA"],
    "candidate_file": InputPathType,
    "outfile": str,
})


class IsLtaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `IsLtaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """File containing 1 if the candidate file is an LTA, otherwise 0"""


def is_lta_params(
    candidate_file: InputPathType,
    outfile: str,
) -> IsLtaParametersTagged:
    """
    Build parameters.
    
    Args:
        candidate_file: Candidate file to check if it is an LTA.
        outfile: Output file to write the result.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/IsLTA",
        "candidate_file": candidate_file,
        "outfile": outfile,
    }
    return params


def is_lta_cargs(
    params: IsLtaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("IsLTA")
    cargs.extend([
        "--r",
        execution.input_file(params.get("candidate_file", None))
    ])
    cargs.extend([
        "--o",
        params.get("outfile", None)
    ])
    return cargs


def is_lta_outputs(
    params: IsLtaParameters,
    execution: Execution,
) -> IsLtaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = IsLtaOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("outfile", None)),
    )
    return ret


def is_lta_execute(
    params: IsLtaParameters,
    runner: Runner | None = None,
) -> IsLtaOutputs:
    """
    IsLTA
    
    Determines if a given file is an LTA (Linear Transform Array) file. Outputs
    1 if true, otherwise outputs 0.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IsLtaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(IS_LTA_METADATA)
    params = execution.params(params)
    cargs = is_lta_cargs(params, execution)
    ret = is_lta_outputs(params, execution)
    execution.run(cargs)
    return ret


def is_lta(
    candidate_file: InputPathType,
    outfile: str,
    runner: Runner | None = None,
) -> IsLtaOutputs:
    """
    IsLTA
    
    Determines if a given file is an LTA (Linear Transform Array) file. Outputs
    1 if true, otherwise outputs 0.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        candidate_file: Candidate file to check if it is an LTA.
        outfile: Output file to write the result.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IsLtaOutputs`).
    """
    params = is_lta_params(
        candidate_file=candidate_file,
        outfile=outfile,
    )
    return is_lta_execute(params, runner)


__all__ = [
    "IS_LTA_METADATA",
    "IsLtaOutputs",
    "is_lta",
    "is_lta_execute",
    "is_lta_params",
]
