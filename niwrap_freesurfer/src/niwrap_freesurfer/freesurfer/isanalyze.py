# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ISANALYZE_METADATA = Metadata(
    id="aa58d8228bd180bd56d730927dfa201442c71e68.boutiques",
    name="isanalyze",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


IsanalyzeParameters = typing.TypedDict('IsanalyzeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/isanalyze"]],
    "input_file": InputPathType,
})
IsanalyzeParametersTagged = typing.TypedDict('IsanalyzeParametersTagged', {
    "@type": typing.Literal["freesurfer/isanalyze"],
    "input_file": InputPathType,
})


class IsanalyzeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `IsanalyzeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def isanalyze_params(
    input_file: InputPathType,
) -> IsanalyzeParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input file for IS analysis.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/isanalyze",
        "input_file": input_file,
    }
    return params


def isanalyze_cargs(
    params: IsanalyzeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("isanalyze")
    cargs.append(execution.input_file(params.get("input_file", None)))
    return cargs


def isanalyze_outputs(
    params: IsanalyzeParameters,
    execution: Execution,
) -> IsanalyzeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = IsanalyzeOutputs(
        root=execution.output_file("."),
    )
    return ret


def isanalyze_execute(
    params: IsanalyzeParameters,
    runner: Runner | None = None,
) -> IsanalyzeOutputs:
    """
    isanalyze
    
    A tool to analyze and process IS files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IsanalyzeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ISANALYZE_METADATA)
    params = execution.params(params)
    cargs = isanalyze_cargs(params, execution)
    ret = isanalyze_outputs(params, execution)
    execution.run(cargs)
    return ret


def isanalyze(
    input_file: InputPathType,
    runner: Runner | None = None,
) -> IsanalyzeOutputs:
    """
    isanalyze
    
    A tool to analyze and process IS files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input file for IS analysis.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `IsanalyzeOutputs`).
    """
    params = isanalyze_params(
        input_file=input_file,
    )
    return isanalyze_execute(params, runner)


__all__ = [
    "ISANALYZE_METADATA",
    "IsanalyzeOutputs",
    "isanalyze",
    "isanalyze_execute",
    "isanalyze_params",
]
