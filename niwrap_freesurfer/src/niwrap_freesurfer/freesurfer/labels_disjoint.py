# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LABELS_DISJOINT_METADATA = Metadata(
    id="86418874c210febfd9899f1bd03f4fd4b41547fb.boutiques",
    name="labels_disjoint",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LabelsDisjointParameters = typing.TypedDict('LabelsDisjointParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/labels_disjoint"]],
    "label1": InputPathType,
    "label2": InputPathType,
    "outputname": str,
})
LabelsDisjointParametersTagged = typing.TypedDict('LabelsDisjointParametersTagged', {
    "@type": typing.Literal["freesurfer/labels_disjoint"],
    "label1": InputPathType,
    "label2": InputPathType,
    "outputname": str,
})


class LabelsDisjointOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LabelsDisjointParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Resulting output label file after subtraction."""


def labels_disjoint_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
) -> LabelsDisjointParametersTagged:
    """
    Build parameters.
    
    Args:
        label1: First label file (e.g., rh.Occ.label).
        label2: Second label file to subtract from the first (e.g.,\
            rh.V1.label).
        outputname: Output label file name where the result will be saved\
            (e.g., rh.Occ_V1.label).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/labels_disjoint",
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    }
    return params


def labels_disjoint_cargs(
    params: LabelsDisjointParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("labels_disjoint")
    cargs.append(execution.input_file(params.get("label1", None)))
    cargs.append(execution.input_file(params.get("label2", None)))
    cargs.append(params.get("outputname", None))
    return cargs


def labels_disjoint_outputs(
    params: LabelsDisjointParameters,
    execution: Execution,
) -> LabelsDisjointOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LabelsDisjointOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("outputname", None)),
    )
    return ret


def labels_disjoint_execute(
    params: LabelsDisjointParameters,
    runner: Runner | None = None,
) -> LabelsDisjointOutputs:
    """
    labels_disjoint
    
    Subtracts one label file from another, effectively creating a label that
    represents label1 minus label2.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelsDisjointOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABELS_DISJOINT_METADATA)
    params = execution.params(params)
    cargs = labels_disjoint_cargs(params, execution)
    ret = labels_disjoint_outputs(params, execution)
    execution.run(cargs)
    return ret


def labels_disjoint(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
    runner: Runner | None = None,
) -> LabelsDisjointOutputs:
    """
    labels_disjoint
    
    Subtracts one label file from another, effectively creating a label that
    represents label1 minus label2.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        label1: First label file (e.g., rh.Occ.label).
        label2: Second label file to subtract from the first (e.g.,\
            rh.V1.label).
        outputname: Output label file name where the result will be saved\
            (e.g., rh.Occ_V1.label).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelsDisjointOutputs`).
    """
    params = labels_disjoint_params(
        label1=label1,
        label2=label2,
        outputname=outputname,
    )
    return labels_disjoint_execute(params, runner)


__all__ = [
    "LABELS_DISJOINT_METADATA",
    "LabelsDisjointOutputs",
    "labels_disjoint",
    "labels_disjoint_execute",
    "labels_disjoint_params",
]
