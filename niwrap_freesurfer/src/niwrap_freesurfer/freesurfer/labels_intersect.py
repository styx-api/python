# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LABELS_INTERSECT_METADATA = Metadata(
    id="5d639bbfd162e906e9059ca104ed147ca988037e.boutiques",
    name="labels_intersect",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LabelsIntersectParameters = typing.TypedDict('LabelsIntersectParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/labels_intersect"]],
    "label1": InputPathType,
    "label2": InputPathType,
    "outputname": str,
})
LabelsIntersectParametersTagged = typing.TypedDict('LabelsIntersectParametersTagged', {
    "@type": typing.Literal["freesurfer/labels_intersect"],
    "label1": InputPathType,
    "label2": InputPathType,
    "outputname": str,
})


class LabelsIntersectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LabelsIntersectParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_label: OutputPathType
    """The resulting intersected label file"""


def labels_intersect_params(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
) -> LabelsIntersectParametersTagged:
    """
    Build parameters.
    
    Args:
        label1: First input label file.
        label2: Second input label file.
        outputname: Output label file name.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/labels_intersect",
        "label1": label1,
        "label2": label2,
        "outputname": outputname,
    }
    return params


def labels_intersect_cargs(
    params: LabelsIntersectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("labels_intersect")
    cargs.append(execution.input_file(params.get("label1", None)))
    cargs.append(execution.input_file(params.get("label2", None)))
    cargs.append(params.get("outputname", None))
    return cargs


def labels_intersect_outputs(
    params: LabelsIntersectParameters,
    execution: Execution,
) -> LabelsIntersectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LabelsIntersectOutputs(
        root=execution.output_file("."),
        output_label=execution.output_file(params.get("outputname", None)),
    )
    return ret


def labels_intersect_execute(
    params: LabelsIntersectParameters,
    runner: Runner | None = None,
) -> LabelsIntersectOutputs:
    """
    labels_intersect
    
    Tool to find the intersection of two label files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelsIntersectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABELS_INTERSECT_METADATA)
    params = execution.params(params)
    cargs = labels_intersect_cargs(params, execution)
    ret = labels_intersect_outputs(params, execution)
    execution.run(cargs)
    return ret


def labels_intersect(
    label1: InputPathType,
    label2: InputPathType,
    outputname: str,
    runner: Runner | None = None,
) -> LabelsIntersectOutputs:
    """
    labels_intersect
    
    Tool to find the intersection of two label files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        label1: First input label file.
        label2: Second input label file.
        outputname: Output label file name.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelsIntersectOutputs`).
    """
    params = labels_intersect_params(
        label1=label1,
        label2=label2,
        outputname=outputname,
    )
    return labels_intersect_execute(params, runner)


__all__ = [
    "LABELS_INTERSECT_METADATA",
    "LabelsIntersectOutputs",
    "labels_intersect",
    "labels_intersect_execute",
    "labels_intersect_params",
]
