# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LONG_CREATE_ORIG_METADATA = Metadata(
    id="ab4e59774c02e65ea0d6e83e65869f67ba49bb38.boutiques",
    name="long_create_orig",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LongCreateOrigParameters = typing.TypedDict('LongCreateOrigParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/long_create_orig"]],
    "base_id": str,
    "tp_id": typing.NotRequired[str | None],
})
LongCreateOrigParametersTagged = typing.TypedDict('LongCreateOrigParametersTagged', {
    "@type": typing.Literal["freesurfer/long_create_orig"],
    "base_id": str,
    "tp_id": typing.NotRequired[str | None],
})


class LongCreateOrigOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LongCreateOrigParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_directory: OutputPathType | None
    """Output directory within <SUBJECTS_DIR> for processed time point data."""


def long_create_orig_params(
    base_id: str,
    tp_id: str | None = None,
) -> LongCreateOrigParametersTagged:
    """
    Build parameters.
    
    Args:
        base_id: Base ID to be utilized in the process.
        tp_id: Time point ID. If omitted, operates on all time points in base.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/long_create_orig",
        "base_id": base_id,
    }
    if tp_id is not None:
        params["tp_id"] = tp_id
    return params


def long_create_orig_cargs(
    params: LongCreateOrigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("long_create_orig")
    cargs.append(params.get("base_id", None))
    if params.get("tp_id", None) is not None:
        cargs.append(params.get("tp_id", None))
    return cargs


def long_create_orig_outputs(
    params: LongCreateOrigParameters,
    execution: Execution,
) -> LongCreateOrigOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LongCreateOrigOutputs(
        root=execution.output_file("."),
        output_directory=execution.output_file(params.get("base_id", None) + "/longtp/" + params.get("tp_id", None)) if (params.get("tp_id") is not None) else None,
    )
    return ret


def long_create_orig_execute(
    params: LongCreateOrigParameters,
    runner: Runner | None = None,
) -> LongCreateOrigOutputs:
    """
    long_create_orig
    
    Maps, conforms and averages (motioncorrect) raw inputs from cross-sectional
    directory to base space in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongCreateOrigOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LONG_CREATE_ORIG_METADATA)
    params = execution.params(params)
    cargs = long_create_orig_cargs(params, execution)
    ret = long_create_orig_outputs(params, execution)
    execution.run(cargs)
    return ret


def long_create_orig(
    base_id: str,
    tp_id: str | None = None,
    runner: Runner | None = None,
) -> LongCreateOrigOutputs:
    """
    long_create_orig
    
    Maps, conforms and averages (motioncorrect) raw inputs from cross-sectional
    directory to base space in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        base_id: Base ID to be utilized in the process.
        tp_id: Time point ID. If omitted, operates on all time points in base.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongCreateOrigOutputs`).
    """
    params = long_create_orig_params(
        base_id=base_id,
        tp_id=tp_id,
    )
    return long_create_orig_execute(params, runner)


__all__ = [
    "LONG_CREATE_ORIG_METADATA",
    "LongCreateOrigOutputs",
    "long_create_orig",
    "long_create_orig_execute",
    "long_create_orig_params",
]
