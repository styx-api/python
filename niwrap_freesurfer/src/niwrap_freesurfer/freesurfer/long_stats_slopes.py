# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LONG_STATS_SLOPES_METADATA = Metadata(
    id="d64386d393c03eaef387719a9babd66fe150124b.boutiques",
    name="long_stats_slopes",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LongStatsSlopesParameters = typing.TypedDict('LongStatsSlopesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/long_stats_slopes"]],
    "qdec_table": InputPathType,
    "stats_file": InputPathType,
    "measure": str,
    "subjects_dir": str,
    "do_avg": bool,
    "do_rate": bool,
    "do_pc1fit": bool,
    "do_pc1": bool,
    "do_spc": bool,
    "do_stack": bool,
    "resid": typing.NotRequired[float | None],
    "time_var": typing.NotRequired[str | None],
    "generic_time": bool,
    "cross_sectional": bool,
    "out_avg": typing.NotRequired[str | None],
    "out_rate": typing.NotRequired[str | None],
    "out_pc1fit": typing.NotRequired[str | None],
    "out_pc1": typing.NotRequired[str | None],
    "out_spc": typing.NotRequired[str | None],
    "out_resid": typing.NotRequired[str | None],
    "out_stack": typing.NotRequired[str | None],
    "stack_avg": typing.NotRequired[str | None],
    "stack_rate": typing.NotRequired[str | None],
    "stack_pc1fit": typing.NotRequired[str | None],
    "stack_pc1": typing.NotRequired[str | None],
    "stack_spc": typing.NotRequired[str | None],
    "stack_resid": typing.NotRequired[str | None],
})
LongStatsSlopesParametersTagged = typing.TypedDict('LongStatsSlopesParametersTagged', {
    "@type": typing.Literal["freesurfer/long_stats_slopes"],
    "qdec_table": InputPathType,
    "stats_file": InputPathType,
    "measure": str,
    "subjects_dir": str,
    "do_avg": bool,
    "do_rate": bool,
    "do_pc1fit": bool,
    "do_pc1": bool,
    "do_spc": bool,
    "do_stack": bool,
    "resid": typing.NotRequired[float | None],
    "time_var": typing.NotRequired[str | None],
    "generic_time": bool,
    "cross_sectional": bool,
    "out_avg": typing.NotRequired[str | None],
    "out_rate": typing.NotRequired[str | None],
    "out_pc1fit": typing.NotRequired[str | None],
    "out_pc1": typing.NotRequired[str | None],
    "out_spc": typing.NotRequired[str | None],
    "out_resid": typing.NotRequired[str | None],
    "out_stack": typing.NotRequired[str | None],
    "stack_avg": typing.NotRequired[str | None],
    "stack_rate": typing.NotRequired[str | None],
    "stack_pc1fit": typing.NotRequired[str | None],
    "stack_pc1": typing.NotRequired[str | None],
    "stack_spc": typing.NotRequired[str | None],
    "stack_resid": typing.NotRequired[str | None],
})


class LongStatsSlopesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LongStatsSlopesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def long_stats_slopes_params(
    qdec_table: InputPathType,
    stats_file: InputPathType,
    measure: str,
    subjects_dir: str,
    do_avg: bool = False,
    do_rate: bool = False,
    do_pc1fit: bool = False,
    do_pc1: bool = False,
    do_spc: bool = False,
    do_stack: bool = False,
    resid: float | None = None,
    time_var: str | None = None,
    generic_time: bool = False,
    cross_sectional: bool = False,
    out_avg: str | None = None,
    out_rate: str | None = None,
    out_pc1fit: str | None = None,
    out_pc1: str | None = None,
    out_spc: str | None = None,
    out_resid: str | None = None,
    out_stack: str | None = None,
    stack_avg: str | None = None,
    stack_rate: str | None = None,
    stack_pc1fit: str | None = None,
    stack_pc1: str | None = None,
    stack_spc: str | None = None,
    stack_resid: str | None = None,
) -> LongStatsSlopesParametersTagged:
    """
    Build parameters.
    
    Args:
        qdec_table: QDEC table file specifying the subjects and time points.
        stats_file: The stats file, e.g. aseg.stats or lh.aparc.stats.
        measure: The stats measure (e.g. volume, thickness, mean, std).
        subjects_dir: Full path to FreeSurfer subjects directory.
        do_avg: Compute and output the temporal average.
        do_rate: Compute and output the rate.
        do_pc1fit: Compute and output the percent change with respect to tp1\
            from linear fit.
        do_pc1: Compute and output the percent change with respect to tp1.
        do_spc: Compute and output the symmetric percent change with respect to\
            temporal average.
        do_stack: Compute and output tables showing the time series (row per\
            time point).
        resid: Residual timepoint to export (pass 1 for tp1, etc., pass 0 for\
            average).
        time_var: Variable name for time column variable (e.g., age) in QDEC\
            table.
        generic_time: Time points are ordered in QDEC file; assume\
            time=1,2,3...
        cross_sectional: Use cross-sectional results (for testing only).
        out_avg: Filename to store temporal average in\
            <template>/stats/<OUT_AVG>.
        out_rate: Filename to store rate in <template>/stats/<OUT_RATE>.
        out_pc1fit: Filename to store percent change to tp1fit in\
            <template>/stats/<OUT_PC1FIT>.
        out_pc1: Filename to store percent change to tp1 in\
            <template>/stats/<OUT_PC1>.
        out_spc: Filename to store symmetric percent change in\
            <template>/stats/<OUT_SPC>.
        out_resid: Filename to store residual in <template>/stats/<OUT_RESID>.
        out_stack: Filename to store stacked measure file in\
            <template>/stats/<OUT_STACK>.
        stack_avg: Full filename to stack temporal average tables.
        stack_rate: Full filename to stack rate tables.
        stack_pc1fit: Full filename to stack percent change to tp1fit tables.
        stack_pc1: Full filename to stack percent change to tp1 tables.
        stack_spc: Full filename to stack symmetric percent change tables.
        stack_resid: Full filename to stack residual tables.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/long_stats_slopes",
        "qdec_table": qdec_table,
        "stats_file": stats_file,
        "measure": measure,
        "subjects_dir": subjects_dir,
        "do_avg": do_avg,
        "do_rate": do_rate,
        "do_pc1fit": do_pc1fit,
        "do_pc1": do_pc1,
        "do_spc": do_spc,
        "do_stack": do_stack,
        "generic_time": generic_time,
        "cross_sectional": cross_sectional,
    }
    if resid is not None:
        params["resid"] = resid
    if time_var is not None:
        params["time_var"] = time_var
    if out_avg is not None:
        params["out_avg"] = out_avg
    if out_rate is not None:
        params["out_rate"] = out_rate
    if out_pc1fit is not None:
        params["out_pc1fit"] = out_pc1fit
    if out_pc1 is not None:
        params["out_pc1"] = out_pc1
    if out_spc is not None:
        params["out_spc"] = out_spc
    if out_resid is not None:
        params["out_resid"] = out_resid
    if out_stack is not None:
        params["out_stack"] = out_stack
    if stack_avg is not None:
        params["stack_avg"] = stack_avg
    if stack_rate is not None:
        params["stack_rate"] = stack_rate
    if stack_pc1fit is not None:
        params["stack_pc1fit"] = stack_pc1fit
    if stack_pc1 is not None:
        params["stack_pc1"] = stack_pc1
    if stack_spc is not None:
        params["stack_spc"] = stack_spc
    if stack_resid is not None:
        params["stack_resid"] = stack_resid
    return params


def long_stats_slopes_cargs(
    params: LongStatsSlopesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("long_stats_slopes")
    cargs.extend([
        "--qdec",
        execution.input_file(params.get("qdec_table", None))
    ])
    cargs.extend([
        "--stats",
        execution.input_file(params.get("stats_file", None))
    ])
    cargs.extend([
        "--meas",
        params.get("measure", None)
    ])
    cargs.extend([
        "--sd",
        params.get("subjects_dir", None)
    ])
    if params.get("do_avg", False):
        cargs.append("--do-avg")
    if params.get("do_rate", False):
        cargs.append("--do-rate")
    if params.get("do_pc1fit", False):
        cargs.append("--do-pc1fit")
    if params.get("do_pc1", False):
        cargs.append("--do-pc1")
    if params.get("do_spc", False):
        cargs.append("--do-spc")
    if params.get("do_stack", False):
        cargs.append("--do-stack")
    if params.get("resid", None) is not None:
        cargs.extend([
            "--resid",
            str(params.get("resid", None))
        ])
    if params.get("time_var", None) is not None:
        cargs.extend([
            "--time",
            params.get("time_var", None)
        ])
    if params.get("generic_time", False):
        cargs.append("--generic-time")
    if params.get("cross_sectional", False):
        cargs.append("--cross")
    if params.get("out_avg", None) is not None:
        cargs.extend([
            "--out-avg",
            params.get("out_avg", None)
        ])
    if params.get("out_rate", None) is not None:
        cargs.extend([
            "--out-rate",
            params.get("out_rate", None)
        ])
    if params.get("out_pc1fit", None) is not None:
        cargs.extend([
            "--out-pc1fit",
            params.get("out_pc1fit", None)
        ])
    if params.get("out_pc1", None) is not None:
        cargs.extend([
            "--out-pc1",
            params.get("out_pc1", None)
        ])
    if params.get("out_spc", None) is not None:
        cargs.extend([
            "--out-spc",
            params.get("out_spc", None)
        ])
    if params.get("out_resid", None) is not None:
        cargs.extend([
            "--out-resid",
            params.get("out_resid", None)
        ])
    if params.get("out_stack", None) is not None:
        cargs.extend([
            "--out-stack",
            params.get("out_stack", None)
        ])
    if params.get("stack_avg", None) is not None:
        cargs.extend([
            "--stack-avg",
            params.get("stack_avg", None)
        ])
    if params.get("stack_rate", None) is not None:
        cargs.extend([
            "--stack-rate",
            params.get("stack_rate", None)
        ])
    if params.get("stack_pc1fit", None) is not None:
        cargs.extend([
            "--stack-pc1fit",
            params.get("stack_pc1fit", None)
        ])
    if params.get("stack_pc1", None) is not None:
        cargs.extend([
            "--stack-pc1",
            params.get("stack_pc1", None)
        ])
    if params.get("stack_spc", None) is not None:
        cargs.extend([
            "--stack-spc",
            params.get("stack_spc", None)
        ])
    if params.get("stack_resid", None) is not None:
        cargs.extend([
            "--stack-resid",
            params.get("stack_resid", None)
        ])
    return cargs


def long_stats_slopes_outputs(
    params: LongStatsSlopesParameters,
    execution: Execution,
) -> LongStatsSlopesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LongStatsSlopesOutputs(
        root=execution.output_file("."),
    )
    return ret


def long_stats_slopes_execute(
    params: LongStatsSlopesParameters,
    runner: Runner | None = None,
) -> LongStatsSlopesOutputs:
    """
    long_stats_slopes
    
    Computes slopes of statistics in a longitudinal study for each subject from
    processed results, outputting to designated directories for further
    analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongStatsSlopesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LONG_STATS_SLOPES_METADATA)
    params = execution.params(params)
    cargs = long_stats_slopes_cargs(params, execution)
    ret = long_stats_slopes_outputs(params, execution)
    execution.run(cargs)
    return ret


def long_stats_slopes(
    qdec_table: InputPathType,
    stats_file: InputPathType,
    measure: str,
    subjects_dir: str,
    do_avg: bool = False,
    do_rate: bool = False,
    do_pc1fit: bool = False,
    do_pc1: bool = False,
    do_spc: bool = False,
    do_stack: bool = False,
    resid: float | None = None,
    time_var: str | None = None,
    generic_time: bool = False,
    cross_sectional: bool = False,
    out_avg: str | None = None,
    out_rate: str | None = None,
    out_pc1fit: str | None = None,
    out_pc1: str | None = None,
    out_spc: str | None = None,
    out_resid: str | None = None,
    out_stack: str | None = None,
    stack_avg: str | None = None,
    stack_rate: str | None = None,
    stack_pc1fit: str | None = None,
    stack_pc1: str | None = None,
    stack_spc: str | None = None,
    stack_resid: str | None = None,
    runner: Runner | None = None,
) -> LongStatsSlopesOutputs:
    """
    long_stats_slopes
    
    Computes slopes of statistics in a longitudinal study for each subject from
    processed results, outputting to designated directories for further
    analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        qdec_table: QDEC table file specifying the subjects and time points.
        stats_file: The stats file, e.g. aseg.stats or lh.aparc.stats.
        measure: The stats measure (e.g. volume, thickness, mean, std).
        subjects_dir: Full path to FreeSurfer subjects directory.
        do_avg: Compute and output the temporal average.
        do_rate: Compute and output the rate.
        do_pc1fit: Compute and output the percent change with respect to tp1\
            from linear fit.
        do_pc1: Compute and output the percent change with respect to tp1.
        do_spc: Compute and output the symmetric percent change with respect to\
            temporal average.
        do_stack: Compute and output tables showing the time series (row per\
            time point).
        resid: Residual timepoint to export (pass 1 for tp1, etc., pass 0 for\
            average).
        time_var: Variable name for time column variable (e.g., age) in QDEC\
            table.
        generic_time: Time points are ordered in QDEC file; assume\
            time=1,2,3...
        cross_sectional: Use cross-sectional results (for testing only).
        out_avg: Filename to store temporal average in\
            <template>/stats/<OUT_AVG>.
        out_rate: Filename to store rate in <template>/stats/<OUT_RATE>.
        out_pc1fit: Filename to store percent change to tp1fit in\
            <template>/stats/<OUT_PC1FIT>.
        out_pc1: Filename to store percent change to tp1 in\
            <template>/stats/<OUT_PC1>.
        out_spc: Filename to store symmetric percent change in\
            <template>/stats/<OUT_SPC>.
        out_resid: Filename to store residual in <template>/stats/<OUT_RESID>.
        out_stack: Filename to store stacked measure file in\
            <template>/stats/<OUT_STACK>.
        stack_avg: Full filename to stack temporal average tables.
        stack_rate: Full filename to stack rate tables.
        stack_pc1fit: Full filename to stack percent change to tp1fit tables.
        stack_pc1: Full filename to stack percent change to tp1 tables.
        stack_spc: Full filename to stack symmetric percent change tables.
        stack_resid: Full filename to stack residual tables.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongStatsSlopesOutputs`).
    """
    params = long_stats_slopes_params(
        qdec_table=qdec_table,
        stats_file=stats_file,
        measure=measure,
        subjects_dir=subjects_dir,
        do_avg=do_avg,
        do_rate=do_rate,
        do_pc1fit=do_pc1fit,
        do_pc1=do_pc1,
        do_spc=do_spc,
        do_stack=do_stack,
        resid=resid,
        time_var=time_var,
        generic_time=generic_time,
        cross_sectional=cross_sectional,
        out_avg=out_avg,
        out_rate=out_rate,
        out_pc1fit=out_pc1fit,
        out_pc1=out_pc1,
        out_spc=out_spc,
        out_resid=out_resid,
        out_stack=out_stack,
        stack_avg=stack_avg,
        stack_rate=stack_rate,
        stack_pc1fit=stack_pc1fit,
        stack_pc1=stack_pc1,
        stack_spc=stack_spc,
        stack_resid=stack_resid,
    )
    return long_stats_slopes_execute(params, runner)


__all__ = [
    "LONG_STATS_SLOPES_METADATA",
    "LongStatsSlopesOutputs",
    "long_stats_slopes",
    "long_stats_slopes_execute",
    "long_stats_slopes_params",
]
