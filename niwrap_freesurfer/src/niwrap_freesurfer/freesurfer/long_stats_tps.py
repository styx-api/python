# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LONG_STATS_TPS_METADATA = Metadata(
    id="3f40c800d9afacf20579a53c52fdd58307c8abdb.boutiques",
    name="long_stats_tps",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


LongStatsTpsParameters = typing.TypedDict('LongStatsTpsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/long_stats_tps"]],
    "qdec_table": InputPathType,
    "stats_file": str,
    "measure": str,
    "subjects_dir": str,
    "time_point": float,
    "output_file": str,
    "qcolumn": typing.NotRequired[str | None],
    "cross_sectional": bool,
})
LongStatsTpsParametersTagged = typing.TypedDict('LongStatsTpsParametersTagged', {
    "@type": typing.Literal["freesurfer/long_stats_tps"],
    "qdec_table": InputPathType,
    "stats_file": str,
    "measure": str,
    "subjects_dir": str,
    "time_point": float,
    "output_file": str,
    "qcolumn": typing.NotRequired[str | None],
    "cross_sectional": bool,
})


class LongStatsTpsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LongStatsTpsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    stacked_results: OutputPathType
    """File containing stacked results for individual time points."""


def long_stats_tps_params(
    qdec_table: InputPathType,
    stats_file: str,
    measure: str,
    subjects_dir: str,
    time_point: float,
    output_file: str,
    qcolumn: str | None = None,
    cross_sectional: bool = False,
) -> LongStatsTpsParametersTagged:
    """
    Build parameters.
    
    Args:
        qdec_table: qdec.table.dat file with first columns: fsid fsid-base.
        stats_file: Stats file without path: e.g. aseg.stats or lh.aparc.stats.
        measure: Stats measure, e.g. volume, thickness, mean, std.
        subjects_dir: Full path to FreeSurfer subjects directory.
        time_point: Time point number.
        output_file: File name of output.
        qcolumn: Select a column from the qdec table itself (then --stats,\
            --meas and --sd are not necessary).
        cross_sectional: Use cross sectional results (for testing only).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/long_stats_tps",
        "qdec_table": qdec_table,
        "stats_file": stats_file,
        "measure": measure,
        "subjects_dir": subjects_dir,
        "time_point": time_point,
        "output_file": output_file,
        "cross_sectional": cross_sectional,
    }
    if qcolumn is not None:
        params["qcolumn"] = qcolumn
    return params


def long_stats_tps_cargs(
    params: LongStatsTpsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("long_stats_tps")
    cargs.extend([
        "--qdec",
        execution.input_file(params.get("qdec_table", None))
    ])
    cargs.extend([
        "--stats",
        params.get("stats_file", None)
    ])
    cargs.extend([
        "--meas",
        params.get("measure", None)
    ])
    cargs.extend([
        "--sd",
        params.get("subjects_dir", None)
    ])
    cargs.extend([
        "--tp",
        str(params.get("time_point", None))
    ])
    cargs.extend([
        "--out",
        params.get("output_file", None)
    ])
    if params.get("qcolumn", None) is not None:
        cargs.extend([
            "--qcol",
            params.get("qcolumn", None)
        ])
    if params.get("cross_sectional", False):
        cargs.append("--cross")
    return cargs


def long_stats_tps_outputs(
    params: LongStatsTpsParameters,
    execution: Execution,
) -> LongStatsTpsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LongStatsTpsOutputs(
        root=execution.output_file("."),
        stacked_results=execution.output_file(params.get("output_file", None)),
    )
    return ret


def long_stats_tps_execute(
    params: LongStatsTpsParameters,
    runner: Runner | None = None,
) -> LongStatsTpsOutputs:
    """
    long_stats_tps
    
    Stack results for individual time points based on longitudinal qdec table.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongStatsTpsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LONG_STATS_TPS_METADATA)
    params = execution.params(params)
    cargs = long_stats_tps_cargs(params, execution)
    ret = long_stats_tps_outputs(params, execution)
    execution.run(cargs)
    return ret


def long_stats_tps(
    qdec_table: InputPathType,
    stats_file: str,
    measure: str,
    subjects_dir: str,
    time_point: float,
    output_file: str,
    qcolumn: str | None = None,
    cross_sectional: bool = False,
    runner: Runner | None = None,
) -> LongStatsTpsOutputs:
    """
    long_stats_tps
    
    Stack results for individual time points based on longitudinal qdec table.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        qdec_table: qdec.table.dat file with first columns: fsid fsid-base.
        stats_file: Stats file without path: e.g. aseg.stats or lh.aparc.stats.
        measure: Stats measure, e.g. volume, thickness, mean, std.
        subjects_dir: Full path to FreeSurfer subjects directory.
        time_point: Time point number.
        output_file: File name of output.
        qcolumn: Select a column from the qdec table itself (then --stats,\
            --meas and --sd are not necessary).
        cross_sectional: Use cross sectional results (for testing only).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LongStatsTpsOutputs`).
    """
    params = long_stats_tps_params(
        qdec_table=qdec_table,
        stats_file=stats_file,
        measure=measure,
        subjects_dir=subjects_dir,
        time_point=time_point,
        output_file=output_file,
        qcolumn=qcolumn,
        cross_sectional=cross_sectional,
    )
    return long_stats_tps_execute(params, runner)


__all__ = [
    "LONG_STATS_TPS_METADATA",
    "LongStatsTpsOutputs",
    "long_stats_tps",
    "long_stats_tps_execute",
    "long_stats_tps_params",
]
