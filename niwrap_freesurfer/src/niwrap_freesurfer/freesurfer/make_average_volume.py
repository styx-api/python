# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKE_AVERAGE_VOLUME_METADATA = Metadata(
    id="6f40ff65943cb8e7db2c3bba2a4245dae06bf55e.boutiques",
    name="make_average_volume",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MakeAverageVolumeParameters = typing.TypedDict('MakeAverageVolumeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/make_average_volume"]],
    "subjects": list[str],
    "fsgd": typing.NotRequired[InputPathType | None],
    "out": typing.NotRequired[str | None],
    "topdir": typing.NotRequired[str | None],
    "xform": typing.NotRequired[str | None],
    "sdir": typing.NotRequired[str | None],
    "sd_flag": bool,
    "force_flag": bool,
    "keep_all_orig_flag": bool,
    "no_aseg_flag": bool,
    "ctab": typing.NotRequired[str | None],
    "ctab_default_flag": bool,
    "echo_flag": bool,
    "debug_flag": bool,
    "nocleanup_flag": bool,
})
MakeAverageVolumeParametersTagged = typing.TypedDict('MakeAverageVolumeParametersTagged', {
    "@type": typing.Literal["freesurfer/make_average_volume"],
    "subjects": list[str],
    "fsgd": typing.NotRequired[InputPathType | None],
    "out": typing.NotRequired[str | None],
    "topdir": typing.NotRequired[str | None],
    "xform": typing.NotRequired[str | None],
    "sdir": typing.NotRequired[str | None],
    "sd_flag": bool,
    "force_flag": bool,
    "keep_all_orig_flag": bool,
    "no_aseg_flag": bool,
    "ctab": typing.NotRequired[str | None],
    "ctab_default_flag": bool,
    "echo_flag": bool,
    "debug_flag": bool,
    "nocleanup_flag": bool,
})


class MakeAverageVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakeAverageVolumeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def make_average_volume_params(
    subjects: list[str],
    fsgd: InputPathType | None = None,
    out: str | None = None,
    topdir: str | None = None,
    xform: str | None = None,
    sdir: str | None = None,
    sd_flag: bool = False,
    force_flag: bool = False,
    keep_all_orig_flag: bool = False,
    no_aseg_flag: bool = False,
    ctab: str | None = None,
    ctab_default_flag: bool = False,
    echo_flag: bool = False,
    debug_flag: bool = False,
    nocleanup_flag: bool = False,
) -> MakeAverageVolumeParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects: List of subjects to include in the average.
        fsgd: File containing subject list for averaging.
        out: Output average subject name. Default is 'average'.
        topdir: Directory to put data and link to SUBJECTS_DIR.
        xform: Transformation name to use, default is talairach.xfm.
        sdir: Use specified SUBJECTS_DIR instead of the environment's one.
        sd_flag: Same as --sdir.
        force_flag: Overwrite existing average subject data.
        keep_all_orig_flag: Concatenate all original volumes into\
            mri/orig.all.mgz.
        no_aseg_flag: Do not create 'average' aseg.
        ctab: Embed colortable into segmentations.
        ctab_default_flag: Embed FreeSurferColorLUT.txt into segmentations.
        echo_flag: Enable command echo for debugging.
        debug_flag: Same as --echo for debugging.
        nocleanup_flag: Do not delete temporary files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/make_average_volume",
        "subjects": subjects,
        "sd_flag": sd_flag,
        "force_flag": force_flag,
        "keep_all_orig_flag": keep_all_orig_flag,
        "no_aseg_flag": no_aseg_flag,
        "ctab_default_flag": ctab_default_flag,
        "echo_flag": echo_flag,
        "debug_flag": debug_flag,
        "nocleanup_flag": nocleanup_flag,
    }
    if fsgd is not None:
        params["fsgd"] = fsgd
    if out is not None:
        params["out"] = out
    if topdir is not None:
        params["topdir"] = topdir
    if xform is not None:
        params["xform"] = xform
    if sdir is not None:
        params["sdir"] = sdir
    if ctab is not None:
        params["ctab"] = ctab
    return params


def make_average_volume_cargs(
    params: MakeAverageVolumeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("make_average_volume")
    cargs.extend([
        "--subjects",
        *params.get("subjects", None)
    ])
    if params.get("fsgd", None) is not None:
        cargs.extend([
            "--fsgd",
            execution.input_file(params.get("fsgd", None))
        ])
    if params.get("out", None) is not None:
        cargs.extend([
            "--out",
            params.get("out", None)
        ])
    if params.get("topdir", None) is not None:
        cargs.extend([
            "--topdir",
            params.get("topdir", None)
        ])
    if params.get("xform", None) is not None:
        cargs.extend([
            "--xform",
            params.get("xform", None)
        ])
    if params.get("sdir", None) is not None:
        cargs.extend([
            "--sdir",
            params.get("sdir", None)
        ])
    if params.get("sd_flag", False):
        cargs.append("--sd")
    if params.get("force_flag", False):
        cargs.append("--force")
    if params.get("keep_all_orig_flag", False):
        cargs.append("--keep-all-orig")
    if params.get("no_aseg_flag", False):
        cargs.append("--no-aseg")
    if params.get("ctab", None) is not None:
        cargs.extend([
            "--ctab",
            params.get("ctab", None)
        ])
    if params.get("ctab_default_flag", False):
        cargs.append("--ctab-default")
    if params.get("echo_flag", False):
        cargs.append("--echo")
    if params.get("debug_flag", False):
        cargs.append("--debug")
    if params.get("nocleanup_flag", False):
        cargs.append("--nocleanup")
    return cargs


def make_average_volume_outputs(
    params: MakeAverageVolumeParameters,
    execution: Execution,
) -> MakeAverageVolumeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakeAverageVolumeOutputs(
        root=execution.output_file("."),
    )
    return ret


def make_average_volume_execute(
    params: MakeAverageVolumeParameters,
    runner: Runner | None = None,
) -> MakeAverageVolumeOutputs:
    """
    make_average_volume
    
    Creates average volumes from a set of subjects.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeAverageVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKE_AVERAGE_VOLUME_METADATA)
    params = execution.params(params)
    cargs = make_average_volume_cargs(params, execution)
    ret = make_average_volume_outputs(params, execution)
    execution.run(cargs)
    return ret


def make_average_volume(
    subjects: list[str],
    fsgd: InputPathType | None = None,
    out: str | None = None,
    topdir: str | None = None,
    xform: str | None = None,
    sdir: str | None = None,
    sd_flag: bool = False,
    force_flag: bool = False,
    keep_all_orig_flag: bool = False,
    no_aseg_flag: bool = False,
    ctab: str | None = None,
    ctab_default_flag: bool = False,
    echo_flag: bool = False,
    debug_flag: bool = False,
    nocleanup_flag: bool = False,
    runner: Runner | None = None,
) -> MakeAverageVolumeOutputs:
    """
    make_average_volume
    
    Creates average volumes from a set of subjects.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: List of subjects to include in the average.
        fsgd: File containing subject list for averaging.
        out: Output average subject name. Default is 'average'.
        topdir: Directory to put data and link to SUBJECTS_DIR.
        xform: Transformation name to use, default is talairach.xfm.
        sdir: Use specified SUBJECTS_DIR instead of the environment's one.
        sd_flag: Same as --sdir.
        force_flag: Overwrite existing average subject data.
        keep_all_orig_flag: Concatenate all original volumes into\
            mri/orig.all.mgz.
        no_aseg_flag: Do not create 'average' aseg.
        ctab: Embed colortable into segmentations.
        ctab_default_flag: Embed FreeSurferColorLUT.txt into segmentations.
        echo_flag: Enable command echo for debugging.
        debug_flag: Same as --echo for debugging.
        nocleanup_flag: Do not delete temporary files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeAverageVolumeOutputs`).
    """
    params = make_average_volume_params(
        subjects=subjects,
        fsgd=fsgd,
        out=out,
        topdir=topdir,
        xform=xform,
        sdir=sdir,
        sd_flag=sd_flag,
        force_flag=force_flag,
        keep_all_orig_flag=keep_all_orig_flag,
        no_aseg_flag=no_aseg_flag,
        ctab=ctab,
        ctab_default_flag=ctab_default_flag,
        echo_flag=echo_flag,
        debug_flag=debug_flag,
        nocleanup_flag=nocleanup_flag,
    )
    return make_average_volume_execute(params, runner)


__all__ = [
    "MAKE_AVERAGE_VOLUME_METADATA",
    "MakeAverageVolumeOutputs",
    "make_average_volume",
    "make_average_volume_execute",
    "make_average_volume_params",
]
