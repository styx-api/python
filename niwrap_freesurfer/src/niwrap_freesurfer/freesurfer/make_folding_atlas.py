# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKE_FOLDING_ATLAS_METADATA = Metadata(
    id="153fb163dd26597740f452df478d4ac29c867616.boutiques",
    name="make_folding_atlas",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MakeFoldingAtlasParameters = typing.TypedDict('MakeFoldingAtlasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/make_folding_atlas"]],
    "subjlistfile": typing.NotRequired[InputPathType | None],
    "fsgdfile": typing.NotRequired[InputPathType | None],
    "subjects": typing.NotRequired[list[str] | None],
    "output_base": typing.NotRequired[str | None],
    "max_iterations": typing.NotRequired[float | None],
    "xhemi": bool,
    "init_surf_reg": typing.NotRequired[str | None],
    "init_subject": typing.NotRequired[str | None],
    "no_annot_template": bool,
    "left_hemisphere": bool,
    "right_hemisphere": bool,
    "lhrh": bool,
    "ico_order": typing.NotRequired[float | None],
    "no_vol_on_last": bool,
    "vol": bool,
    "init": bool,
    "short_sleep": bool,
    "no_template_only": bool,
    "threads": typing.NotRequired[float | None],
    "slurm_account": typing.NotRequired[str | None],
})
MakeFoldingAtlasParametersTagged = typing.TypedDict('MakeFoldingAtlasParametersTagged', {
    "@type": typing.Literal["freesurfer/make_folding_atlas"],
    "subjlistfile": typing.NotRequired[InputPathType | None],
    "fsgdfile": typing.NotRequired[InputPathType | None],
    "subjects": typing.NotRequired[list[str] | None],
    "output_base": typing.NotRequired[str | None],
    "max_iterations": typing.NotRequired[float | None],
    "xhemi": bool,
    "init_surf_reg": typing.NotRequired[str | None],
    "init_subject": typing.NotRequired[str | None],
    "no_annot_template": bool,
    "left_hemisphere": bool,
    "right_hemisphere": bool,
    "lhrh": bool,
    "ico_order": typing.NotRequired[float | None],
    "no_vol_on_last": bool,
    "vol": bool,
    "init": bool,
    "short_sleep": bool,
    "no_template_only": bool,
    "threads": typing.NotRequired[float | None],
    "slurm_account": typing.NotRequired[str | None],
})


class MakeFoldingAtlasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakeFoldingAtlasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def make_folding_atlas_params(
    subjlistfile: InputPathType | None = None,
    fsgdfile: InputPathType | None = None,
    subjects: list[str] | None = None,
    output_base: str | None = None,
    max_iterations: float | None = None,
    xhemi: bool = False,
    init_surf_reg: str | None = None,
    init_subject: str | None = None,
    no_annot_template: bool = False,
    left_hemisphere: bool = False,
    right_hemisphere: bool = False,
    lhrh: bool = False,
    ico_order: float | None = None,
    no_vol_on_last: bool = False,
    vol: bool = False,
    init: bool = False,
    short_sleep: bool = False,
    no_template_only: bool = False,
    threads: float | None = None,
    slurm_account: str | None = None,
) -> MakeFoldingAtlasParametersTagged:
    """
    Build parameters.
    
    Args:
        subjlistfile: Subject list file.
        fsgdfile: FS Gradient Design file.
        subjects: Subjects to be included.
        output_base: Output base; the subject will be named based on this.
        max_iterations: Maximum number of iterations.
        xhemi: Do xhemi (sets hemilist to lh only, use --lhrh after if both are\
            wanted).
        init_surf_reg: Registration used to make template on first iteration\
            (default sphere.reg).
        init_subject: Create first atlas from subject instead of all subjects.
        no_annot_template: Disable annotation template (good for monkeys).
        left_hemisphere: Process left hemisphere.
        right_hemisphere: Process right hemisphere.
        lhrh: Process both left and right hemispheres (default).
        ico_order: Icosahedron order; default is 7.
        no_vol_on_last: Do not run make_average_volume on the last iteration.
        vol: Run make_average_volume on each iteration.
        init: Use previous iteration registration to initialize\
            mris_register/surfreg.
        short_sleep: Sleep for a shorter time before polling.
        no_template_only: Make average surface files even with a single hemi or\
            --no-vol.
        threads: Number of threads to use.
        slurm_account: SLURM account or set FS_BATCH_ACCOUNT environment\
            variable.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/make_folding_atlas",
        "xhemi": xhemi,
        "no_annot_template": no_annot_template,
        "left_hemisphere": left_hemisphere,
        "right_hemisphere": right_hemisphere,
        "lhrh": lhrh,
        "no_vol_on_last": no_vol_on_last,
        "vol": vol,
        "init": init,
        "short_sleep": short_sleep,
        "no_template_only": no_template_only,
    }
    if subjlistfile is not None:
        params["subjlistfile"] = subjlistfile
    if fsgdfile is not None:
        params["fsgdfile"] = fsgdfile
    if subjects is not None:
        params["subjects"] = subjects
    if output_base is not None:
        params["output_base"] = output_base
    if max_iterations is not None:
        params["max_iterations"] = max_iterations
    if init_surf_reg is not None:
        params["init_surf_reg"] = init_surf_reg
    if init_subject is not None:
        params["init_subject"] = init_subject
    if ico_order is not None:
        params["ico_order"] = ico_order
    if threads is not None:
        params["threads"] = threads
    if slurm_account is not None:
        params["slurm_account"] = slurm_account
    return params


def make_folding_atlas_cargs(
    params: MakeFoldingAtlasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("make_folding_atlas")
    if params.get("subjlistfile", None) is not None:
        cargs.extend([
            "--f",
            execution.input_file(params.get("subjlistfile", None))
        ])
    if params.get("fsgdfile", None) is not None:
        cargs.extend([
            "--fsgd",
            execution.input_file(params.get("fsgdfile", None))
        ])
    if params.get("subjects", None) is not None:
        cargs.extend([
            "--s",
            *params.get("subjects", None)
        ])
    if params.get("output_base", None) is not None:
        cargs.extend([
            "--b",
            params.get("output_base", None)
        ])
    if params.get("max_iterations", None) is not None:
        cargs.extend([
            "--nmax",
            str(params.get("max_iterations", None))
        ])
    if params.get("xhemi", False):
        cargs.append("--xhemi")
    if params.get("init_surf_reg", None) is not None:
        cargs.extend([
            "--init-surf-reg",
            params.get("init_surf_reg", None)
        ])
    if params.get("init_subject", None) is not None:
        cargs.extend([
            "--init-subject",
            params.get("init_subject", None)
        ])
    if params.get("no_annot_template", False):
        cargs.append("--no-annot-template")
    if params.get("left_hemisphere", False):
        cargs.append("--lh")
    if params.get("right_hemisphere", False):
        cargs.append("--rh")
    if params.get("lhrh", False):
        cargs.append("--lhrh")
    if params.get("ico_order", None) is not None:
        cargs.extend([
            "--ico",
            str(params.get("ico_order", None))
        ])
    if params.get("no_vol_on_last", False):
        cargs.append("--no-vol-on-last")
    if params.get("vol", False):
        cargs.append("--vol")
    if params.get("init", False):
        cargs.append("--init")
    if params.get("short_sleep", False):
        cargs.append("--short-sleep")
    if params.get("no_template_only", False):
        cargs.append("--no-template-only")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("slurm_account", None) is not None:
        cargs.extend([
            "--account",
            params.get("slurm_account", None)
        ])
    return cargs


def make_folding_atlas_outputs(
    params: MakeFoldingAtlasParameters,
    execution: Execution,
) -> MakeFoldingAtlasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakeFoldingAtlasOutputs(
        root=execution.output_file("."),
    )
    return ret


def make_folding_atlas_execute(
    params: MakeFoldingAtlasParameters,
    runner: Runner | None = None,
) -> MakeFoldingAtlasOutputs:
    """
    make_folding_atlas
    
    Script to iteratively create a cortical folding atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeFoldingAtlasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKE_FOLDING_ATLAS_METADATA)
    params = execution.params(params)
    cargs = make_folding_atlas_cargs(params, execution)
    ret = make_folding_atlas_outputs(params, execution)
    execution.run(cargs)
    return ret


def make_folding_atlas(
    subjlistfile: InputPathType | None = None,
    fsgdfile: InputPathType | None = None,
    subjects: list[str] | None = None,
    output_base: str | None = None,
    max_iterations: float | None = None,
    xhemi: bool = False,
    init_surf_reg: str | None = None,
    init_subject: str | None = None,
    no_annot_template: bool = False,
    left_hemisphere: bool = False,
    right_hemisphere: bool = False,
    lhrh: bool = False,
    ico_order: float | None = None,
    no_vol_on_last: bool = False,
    vol: bool = False,
    init: bool = False,
    short_sleep: bool = False,
    no_template_only: bool = False,
    threads: float | None = None,
    slurm_account: str | None = None,
    runner: Runner | None = None,
) -> MakeFoldingAtlasOutputs:
    """
    make_folding_atlas
    
    Script to iteratively create a cortical folding atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjlistfile: Subject list file.
        fsgdfile: FS Gradient Design file.
        subjects: Subjects to be included.
        output_base: Output base; the subject will be named based on this.
        max_iterations: Maximum number of iterations.
        xhemi: Do xhemi (sets hemilist to lh only, use --lhrh after if both are\
            wanted).
        init_surf_reg: Registration used to make template on first iteration\
            (default sphere.reg).
        init_subject: Create first atlas from subject instead of all subjects.
        no_annot_template: Disable annotation template (good for monkeys).
        left_hemisphere: Process left hemisphere.
        right_hemisphere: Process right hemisphere.
        lhrh: Process both left and right hemispheres (default).
        ico_order: Icosahedron order; default is 7.
        no_vol_on_last: Do not run make_average_volume on the last iteration.
        vol: Run make_average_volume on each iteration.
        init: Use previous iteration registration to initialize\
            mris_register/surfreg.
        short_sleep: Sleep for a shorter time before polling.
        no_template_only: Make average surface files even with a single hemi or\
            --no-vol.
        threads: Number of threads to use.
        slurm_account: SLURM account or set FS_BATCH_ACCOUNT environment\
            variable.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeFoldingAtlasOutputs`).
    """
    params = make_folding_atlas_params(
        subjlistfile=subjlistfile,
        fsgdfile=fsgdfile,
        subjects=subjects,
        output_base=output_base,
        max_iterations=max_iterations,
        xhemi=xhemi,
        init_surf_reg=init_surf_reg,
        init_subject=init_subject,
        no_annot_template=no_annot_template,
        left_hemisphere=left_hemisphere,
        right_hemisphere=right_hemisphere,
        lhrh=lhrh,
        ico_order=ico_order,
        no_vol_on_last=no_vol_on_last,
        vol=vol,
        init=init,
        short_sleep=short_sleep,
        no_template_only=no_template_only,
        threads=threads,
        slurm_account=slurm_account,
    )
    return make_folding_atlas_execute(params, runner)


__all__ = [
    "MAKE_FOLDING_ATLAS_METADATA",
    "MakeFoldingAtlasOutputs",
    "make_folding_atlas",
    "make_folding_atlas_execute",
    "make_folding_atlas_params",
]
