# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKE_HEMI_MASK_METADATA = Metadata(
    id="4b94a6ae8c0d8d637191b874a8b7d772a046b018.boutiques",
    name="make_hemi_mask",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MakeHemiMaskParameters = typing.TypedDict('MakeHemiMaskParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/make_hemi_mask"]],
    "hemi": str,
    "input_file": InputPathType,
    "output_file": str,
})
MakeHemiMaskParametersTagged = typing.TypedDict('MakeHemiMaskParametersTagged', {
    "@type": typing.Literal["freesurfer/make_hemi_mask"],
    "hemi": str,
    "input_file": InputPathType,
    "output_file": str,
})


class MakeHemiMaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakeHemiMaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Hemisphere masked MRI volume output"""


def make_hemi_mask_params(
    hemi: str,
    input_file: InputPathType,
    output_file: str,
) -> MakeHemiMaskParametersTagged:
    """
    Build parameters.
    
    Args:
        hemi: Hemisphere to keep ('lh' for left hemisphere, 'rh' for right\
            hemisphere).
        input_file: Input MRI volume file (e.g. input.mgz).
        output_file: Output masked MRI volume file (e.g. output.mgz).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/make_hemi_mask",
        "hemi": hemi,
        "input_file": input_file,
        "output_file": output_file,
    }
    return params


def make_hemi_mask_cargs(
    params: MakeHemiMaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("make_hemi_mask")
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def make_hemi_mask_outputs(
    params: MakeHemiMaskParameters,
    execution: Execution,
) -> MakeHemiMaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakeHemiMaskOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_file", None)),
    )
    return ret


def make_hemi_mask_execute(
    params: MakeHemiMaskParameters,
    runner: Runner | None = None,
) -> MakeHemiMaskOutputs:
    """
    make_hemi_mask
    
    Generates a hemisphere mask by registering input to the left/right reversed
    version using mri_robust_register, then keeps only the selected hemisphere.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeHemiMaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKE_HEMI_MASK_METADATA)
    params = execution.params(params)
    cargs = make_hemi_mask_cargs(params, execution)
    ret = make_hemi_mask_outputs(params, execution)
    execution.run(cargs)
    return ret


def make_hemi_mask(
    hemi: str,
    input_file: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> MakeHemiMaskOutputs:
    """
    make_hemi_mask
    
    Generates a hemisphere mask by registering input to the left/right reversed
    version using mri_robust_register, then keeps only the selected hemisphere.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        hemi: Hemisphere to keep ('lh' for left hemisphere, 'rh' for right\
            hemisphere).
        input_file: Input MRI volume file (e.g. input.mgz).
        output_file: Output masked MRI volume file (e.g. output.mgz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeHemiMaskOutputs`).
    """
    params = make_hemi_mask_params(
        hemi=hemi,
        input_file=input_file,
        output_file=output_file,
    )
    return make_hemi_mask_execute(params, runner)


__all__ = [
    "MAKE_HEMI_MASK_METADATA",
    "MakeHemiMaskOutputs",
    "make_hemi_mask",
    "make_hemi_mask_execute",
    "make_hemi_mask_params",
]
