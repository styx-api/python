# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKE_SYMMETRIC_METADATA = Metadata(
    id="f7911ae43f7d52c0040da49b8674456c4206f174.boutiques",
    name="make_symmetric",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MakeSymmetricParameters = typing.TypedDict('MakeSymmetricParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/make_symmetric"]],
    "hemi": str,
    "input_file": InputPathType,
    "output_file": str,
    "transform_map": str,
})
MakeSymmetricParametersTagged = typing.TypedDict('MakeSymmetricParametersTagged', {
    "@type": typing.Literal["freesurfer/make_symmetric"],
    "hemi": str,
    "input_file": InputPathType,
    "output_file": str,
    "transform_map": str,
})


class MakeSymmetricOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakeSymmetricParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    processed_output: OutputPathType
    """Output image file after processing."""
    map_output: OutputPathType
    """Transformation map file mapping the input to the upright space."""


def make_symmetric_params(
    hemi: str,
    input_file: InputPathType,
    output_file: str,
    transform_map: str,
) -> MakeSymmetricParametersTagged:
    """
    Build parameters.
    
    Args:
        hemi: The hemisphere to mirror; accepted values are 'lh' for left\
            hemisphere or 'rh' for right hemisphere.
        input_file: Input image in .mgz format.
        output_file: Output image in .mgz format resulting from the symmetric\
            processing.
        transform_map: Transformation map in .lta format mapping the input to\
            the upright space.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/make_symmetric",
        "hemi": hemi,
        "input_file": input_file,
        "output_file": output_file,
        "transform_map": transform_map,
    }
    return params


def make_symmetric_cargs(
    params: MakeSymmetricParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("make_symmetric")
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    cargs.append(params.get("transform_map", None))
    return cargs


def make_symmetric_outputs(
    params: MakeSymmetricParameters,
    execution: Execution,
) -> MakeSymmetricOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakeSymmetricOutputs(
        root=execution.output_file("."),
        processed_output=execution.output_file(params.get("output_file", None)),
        map_output=execution.output_file(params.get("transform_map", None)),
    )
    return ret


def make_symmetric_execute(
    params: MakeSymmetricParameters,
    runner: Runner | None = None,
) -> MakeSymmetricOutputs:
    """
    make_symmetric
    
    Registers an input image to its left/right reversed version using
    mri_robust_register in a half-way space and mirrors the selected hemisphere.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeSymmetricOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKE_SYMMETRIC_METADATA)
    params = execution.params(params)
    cargs = make_symmetric_cargs(params, execution)
    ret = make_symmetric_outputs(params, execution)
    execution.run(cargs)
    return ret


def make_symmetric(
    hemi: str,
    input_file: InputPathType,
    output_file: str,
    transform_map: str,
    runner: Runner | None = None,
) -> MakeSymmetricOutputs:
    """
    make_symmetric
    
    Registers an input image to its left/right reversed version using
    mri_robust_register in a half-way space and mirrors the selected hemisphere.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        hemi: The hemisphere to mirror; accepted values are 'lh' for left\
            hemisphere or 'rh' for right hemisphere.
        input_file: Input image in .mgz format.
        output_file: Output image in .mgz format resulting from the symmetric\
            processing.
        transform_map: Transformation map in .lta format mapping the input to\
            the upright space.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeSymmetricOutputs`).
    """
    params = make_symmetric_params(
        hemi=hemi,
        input_file=input_file,
        output_file=output_file,
        transform_map=transform_map,
    )
    return make_symmetric_execute(params, runner)


__all__ = [
    "MAKE_SYMMETRIC_METADATA",
    "MakeSymmetricOutputs",
    "make_symmetric",
    "make_symmetric_execute",
    "make_symmetric_params",
]
