# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKEVOL_METADATA = Metadata(
    id="8802efdad5a767387b2e4e04a7189b59ea97e217.boutiques",
    name="makevol",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MakevolParameters = typing.TypedDict('MakevolParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/makevol"]],
    "filename": typing.NotRequired[str | None],
    "width": typing.NotRequired[int | None],
    "height": typing.NotRequired[int | None],
    "depth": typing.NotRequired[int | None],
    "sizex": typing.NotRequired[float | None],
    "sizey": typing.NotRequired[float | None],
    "sizez": typing.NotRequired[float | None],
    "set_method": typing.NotRequired[str | None],
})
MakevolParametersTagged = typing.TypedDict('MakevolParametersTagged', {
    "@type": typing.Literal["freesurfer/makevol"],
    "filename": typing.NotRequired[str | None],
    "width": typing.NotRequired[int | None],
    "height": typing.NotRequired[int | None],
    "depth": typing.NotRequired[int | None],
    "sizex": typing.NotRequired[float | None],
    "sizey": typing.NotRequired[float | None],
    "sizez": typing.NotRequired[float | None],
    "set_method": typing.NotRequired[str | None],
})


class MakevolOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakevolParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """The created volume file."""


def makevol_params(
    filename: str | None = None,
    width: int | None = None,
    height: int | None = None,
    depth: int | None = None,
    sizex: float | None = None,
    sizey: float | None = None,
    sizez: float | None = None,
    set_method: str | None = None,
) -> MakevolParametersTagged:
    """
    Build parameters.
    
    Args:
        filename: Write volume to the given file name, implying type.
        width: Use integer WIDTH as the x dimension.
        height: Use integer HEIGHT as the y dimension.
        depth: Use integer DEPTH as the z dimension.
        sizex: Use float SIZEX as the x resolution.
        sizey: Use float SIZEY as the y resolution.
        sizez: Use float SIZEZ as the z resolution.
        set_method: Use METHOD to fill the values. Methods: xyz, random,\
            constant.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/makevol",
    }
    if filename is not None:
        params["filename"] = filename
    if width is not None:
        params["width"] = width
    if height is not None:
        params["height"] = height
    if depth is not None:
        params["depth"] = depth
    if sizex is not None:
        params["sizex"] = sizex
    if sizey is not None:
        params["sizey"] = sizey
    if sizez is not None:
        params["sizez"] = sizez
    if set_method is not None:
        params["set_method"] = set_method
    return params


def makevol_cargs(
    params: MakevolParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("makevol")
    if params.get("filename", None) is not None:
        cargs.extend([
            "-f",
            params.get("filename", None)
        ])
    if params.get("width", None) is not None:
        cargs.extend([
            "-x",
            str(params.get("width", None))
        ])
    if params.get("height", None) is not None:
        cargs.extend([
            "-y",
            str(params.get("height", None))
        ])
    if params.get("depth", None) is not None:
        cargs.extend([
            "-z",
            str(params.get("depth", None))
        ])
    if params.get("sizex", None) is not None:
        cargs.extend([
            "--sizex",
            str(params.get("sizex", None))
        ])
    if params.get("sizey", None) is not None:
        cargs.extend([
            "--sizey",
            str(params.get("sizey", None))
        ])
    if params.get("sizez", None) is not None:
        cargs.extend([
            "--sizez",
            str(params.get("sizez", None))
        ])
    if params.get("set_method", None) is not None:
        cargs.extend([
            "--set-method",
            params.get("set_method", None)
        ])
    return cargs


def makevol_outputs(
    params: MakevolParameters,
    execution: Execution,
) -> MakevolOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakevolOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("filename", None)) if (params.get("filename") is not None) else None,
    )
    return ret


def makevol_execute(
    params: MakevolParameters,
    runner: Runner | None = None,
) -> MakevolOutputs:
    """
    makevol
    
    A tool to create a volume with given parameters.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakevolOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKEVOL_METADATA)
    params = execution.params(params)
    cargs = makevol_cargs(params, execution)
    ret = makevol_outputs(params, execution)
    execution.run(cargs)
    return ret


def makevol(
    filename: str | None = None,
    width: int | None = None,
    height: int | None = None,
    depth: int | None = None,
    sizex: float | None = None,
    sizey: float | None = None,
    sizez: float | None = None,
    set_method: str | None = None,
    runner: Runner | None = None,
) -> MakevolOutputs:
    """
    makevol
    
    A tool to create a volume with given parameters.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        filename: Write volume to the given file name, implying type.
        width: Use integer WIDTH as the x dimension.
        height: Use integer HEIGHT as the y dimension.
        depth: Use integer DEPTH as the z dimension.
        sizex: Use float SIZEX as the x resolution.
        sizey: Use float SIZEY as the y resolution.
        sizez: Use float SIZEZ as the z resolution.
        set_method: Use METHOD to fill the values. Methods: xyz, random,\
            constant.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakevolOutputs`).
    """
    params = makevol_params(
        filename=filename,
        width=width,
        height=height,
        depth=depth,
        sizex=sizex,
        sizey=sizey,
        sizez=sizez,
        set_method=set_method,
    )
    return makevol_execute(params, runner)


__all__ = [
    "MAKEVOL_METADATA",
    "MakevolOutputs",
    "makevol",
    "makevol_execute",
    "makevol_params",
]
