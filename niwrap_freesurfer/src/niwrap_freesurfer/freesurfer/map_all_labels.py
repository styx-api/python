# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAP_ALL_LABELS_METADATA = Metadata(
    id="7cdcb00ab943b88a9ec66dbd3667e475feba5e19.boutiques",
    name="map_all_labels",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MapAllLabelsParameters = typing.TypedDict('MapAllLabelsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/map_all_labels"]],
    "which": str,
    "fname": str,
    "hemi": str,
    "spherical_surf": str,
    "subjects": list[str],
    "output": str,
})
MapAllLabelsParametersTagged = typing.TypedDict('MapAllLabelsParametersTagged', {
    "@type": typing.Literal["freesurfer/map_all_labels"],
    "which": str,
    "fname": str,
    "hemi": str,
    "spherical_surf": str,
    "subjects": list[str],
    "output": str,
})


class MapAllLabelsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MapAllLabelsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """The output of the mapping process"""


def map_all_labels_params(
    which: str,
    fname: str,
    hemi: str,
    spherical_surf: str,
    subjects: list[str],
    output: str,
) -> MapAllLabelsParametersTagged:
    """
    Build parameters.
    
    Args:
        which: Select what to map (e.g. coords, label, vals, curv, area).
        fname: Filename related to the mapping.
        hemi: Hemisphere to process (e.g. lh, rh).
        spherical_surf: Spherical surface to use.
        subjects: List of subject identifiers.
        output: Output path.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/map_all_labels",
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
    }
    return params


def map_all_labels_cargs(
    params: MapAllLabelsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("map_all_labels")
    cargs.append(params.get("which", None))
    cargs.append(params.get("fname", None))
    cargs.append(params.get("hemi", None))
    cargs.append(params.get("spherical_surf", None))
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output", None))
    return cargs


def map_all_labels_outputs(
    params: MapAllLabelsParameters,
    execution: Execution,
) -> MapAllLabelsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MapAllLabelsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output", None)),
    )
    return ret


def map_all_labels_execute(
    params: MapAllLabelsParameters,
    runner: Runner | None = None,
) -> MapAllLabelsOutputs:
    """
    map_all_labels
    
    Tool for mapping labels onto subject surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapAllLabelsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAP_ALL_LABELS_METADATA)
    params = execution.params(params)
    cargs = map_all_labels_cargs(params, execution)
    ret = map_all_labels_outputs(params, execution)
    execution.run(cargs)
    return ret


def map_all_labels(
    which: str,
    fname: str,
    hemi: str,
    spherical_surf: str,
    subjects: list[str],
    output: str,
    runner: Runner | None = None,
) -> MapAllLabelsOutputs:
    """
    map_all_labels
    
    Tool for mapping labels onto subject surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        which: Select what to map (e.g. coords, label, vals, curv, area).
        fname: Filename related to the mapping.
        hemi: Hemisphere to process (e.g. lh, rh).
        spherical_surf: Spherical surface to use.
        subjects: List of subject identifiers.
        output: Output path.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapAllLabelsOutputs`).
    """
    params = map_all_labels_params(
        which=which,
        fname=fname,
        hemi=hemi,
        spherical_surf=spherical_surf,
        subjects=subjects,
        output=output,
    )
    return map_all_labels_execute(params, runner)


__all__ = [
    "MAP_ALL_LABELS_METADATA",
    "MapAllLabelsOutputs",
    "map_all_labels",
    "map_all_labels_execute",
    "map_all_labels_params",
]
