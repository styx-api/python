# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAP_ALL_LABELS_LH_METADATA = Metadata(
    id="d60dcd142e58b80b388e74af2a6ed3f6ea0f85aa.boutiques",
    name="map_all_labels-lh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MapAllLabelsLhParameters = typing.TypedDict('MapAllLabelsLhParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/map_all_labels-lh"]],
    "which": str,
    "fname": str,
    "hemi": str,
    "spherical_surf": InputPathType,
    "subjects": list[str],
    "output": str,
})
MapAllLabelsLhParametersTagged = typing.TypedDict('MapAllLabelsLhParametersTagged', {
    "@type": typing.Literal["freesurfer/map_all_labels-lh"],
    "which": str,
    "fname": str,
    "hemi": str,
    "spherical_surf": InputPathType,
    "subjects": list[str],
    "output": str,
})


class MapAllLabelsLhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MapAllLabelsLhParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file generated after processing."""


def map_all_labels_lh_params(
    which: str,
    fname: str,
    hemi: str,
    spherical_surf: InputPathType,
    subjects: list[str],
    output: str,
) -> MapAllLabelsLhParametersTagged:
    """
    Build parameters.
    
    Args:
        which: Which type of data to process. Options are: coords, label, vals,\
            curv, area.
        fname: The file name to process.
        hemi: The hemisphere to process (usually 'lh' for left hemisphere).
        spherical_surf: The spherical surface file.
        subjects: List of subjects to process.
        output: Output file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/map_all_labels-lh",
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
    }
    return params


def map_all_labels_lh_cargs(
    params: MapAllLabelsLhParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("map_all_labels-lh")
    cargs.extend([
        "-lh",
        params.get("which", None)
    ])
    cargs.append(params.get("fname", None))
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("spherical_surf", None)))
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output", None))
    return cargs


def map_all_labels_lh_outputs(
    params: MapAllLabelsLhParameters,
    execution: Execution,
) -> MapAllLabelsLhOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MapAllLabelsLhOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output", None)),
    )
    return ret


def map_all_labels_lh_execute(
    params: MapAllLabelsLhParameters,
    runner: Runner | None = None,
) -> MapAllLabelsLhOutputs:
    """
    map_all_labels-lh
    
    Paints output onto a subject's left hemisphere using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapAllLabelsLhOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAP_ALL_LABELS_LH_METADATA)
    params = execution.params(params)
    cargs = map_all_labels_lh_cargs(params, execution)
    ret = map_all_labels_lh_outputs(params, execution)
    execution.run(cargs)
    return ret


def map_all_labels_lh(
    which: str,
    fname: str,
    hemi: str,
    spherical_surf: InputPathType,
    subjects: list[str],
    output: str,
    runner: Runner | None = None,
) -> MapAllLabelsLhOutputs:
    """
    map_all_labels-lh
    
    Paints output onto a subject's left hemisphere using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        which: Which type of data to process. Options are: coords, label, vals,\
            curv, area.
        fname: The file name to process.
        hemi: The hemisphere to process (usually 'lh' for left hemisphere).
        spherical_surf: The spherical surface file.
        subjects: List of subjects to process.
        output: Output file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapAllLabelsLhOutputs`).
    """
    params = map_all_labels_lh_params(
        which=which,
        fname=fname,
        hemi=hemi,
        spherical_surf=spherical_surf,
        subjects=subjects,
        output=output,
    )
    return map_all_labels_lh_execute(params, runner)


__all__ = [
    "MAP_ALL_LABELS_LH_METADATA",
    "MapAllLabelsLhOutputs",
    "map_all_labels_lh",
    "map_all_labels_lh_execute",
    "map_all_labels_lh_params",
]
