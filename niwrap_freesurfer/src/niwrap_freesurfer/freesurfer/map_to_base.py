# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAP_TO_BASE_METADATA = Metadata(
    id="9b2dd3e9ec97c3554ea3c04d77396bf3aabbcebf.boutiques",
    name="map_to_base",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MapToBaseParameters = typing.TypedDict('MapToBaseParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/map_to_base"]],
    "baseid": str,
    "tpid": str,
    "input_image": str,
    "resample_type": str,
    "cross": typing.NotRequired[str | None],
})
MapToBaseParametersTagged = typing.TypedDict('MapToBaseParametersTagged', {
    "@type": typing.Literal["freesurfer/map_to_base"],
    "baseid": str,
    "tpid": str,
    "input_image": str,
    "resample_type": str,
    "cross": typing.NotRequired[str | None],
})


class MapToBaseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MapToBaseParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_long_mri: OutputPathType
    """Output in base/mri directory when mapped from a longitudinal
    directory."""
    output_long_surf: OutputPathType
    """Output in base/surf directory when mapped from a longitudinal
    directory."""
    output_cross_mri: OutputPathType
    """Output in base/mri directory when mapped from a cross-sectional
    directory."""
    output_cross_surf: OutputPathType
    """Output in base/surf directory when mapped from a cross-sectional
    directory."""


def map_to_base_params(
    baseid: str,
    tpid: str,
    input_image: str,
    resample_type: str,
    cross: str | None = None,
) -> MapToBaseParametersTagged:
    """
    Build parameters.
    
    Args:
        baseid: Identifier of the base.
        tpid: Identifier of the time point, without the '.long.baseid' suffix.
        input_image: Input image, e.g., norm.mgz, aseg.mgz, lh.white.
        resample_type: Resample type. 'interpolate' for norm, T1, orig;\
            'nearest' for aseg; 'surface' for surfaces.
        cross: If '1', input is from cross sectionals; default is to use\
            longitudinal directories.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/map_to_base",
        "baseid": baseid,
        "tpid": tpid,
        "input_image": input_image,
        "resample_type": resample_type,
    }
    if cross is not None:
        params["cross"] = cross
    return params


def map_to_base_cargs(
    params: MapToBaseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("map_to_base")
    cargs.append(params.get("baseid", None))
    cargs.append(params.get("tpid", None))
    cargs.append(params.get("input_image", None))
    cargs.append(params.get("resample_type", None))
    if params.get("cross", None) is not None:
        cargs.append(params.get("cross", None))
    return cargs


def map_to_base_outputs(
    params: MapToBaseParameters,
    execution: Execution,
) -> MapToBaseOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MapToBaseOutputs(
        root=execution.output_file("."),
        output_long_mri=execution.output_file(params.get("baseid", None) + "/mri/" + params.get("tpid", None) + "-long." + params.get("input_image", None)),
        output_long_surf=execution.output_file(params.get("baseid", None) + "/surf/" + params.get("tpid", None) + "-long." + params.get("input_image", None)),
        output_cross_mri=execution.output_file(params.get("baseid", None) + "/mri/" + params.get("tpid", None) + "-cross." + params.get("input_image", None)),
        output_cross_surf=execution.output_file(params.get("baseid", None) + "/surf/" + params.get("tpid", None) + "-cross." + params.get("input_image", None)),
    )
    return ret


def map_to_base_execute(
    params: MapToBaseParameters,
    runner: Runner | None = None,
) -> MapToBaseOutputs:
    """
    map_to_base
    
    Maps an image or surface from a time point directory (either cross-sectional
    or longitudinal) to the base space and outputs it in the appropriate base
    directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapToBaseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAP_TO_BASE_METADATA)
    params = execution.params(params)
    cargs = map_to_base_cargs(params, execution)
    ret = map_to_base_outputs(params, execution)
    execution.run(cargs)
    return ret


def map_to_base(
    baseid: str,
    tpid: str,
    input_image: str,
    resample_type: str,
    cross: str | None = None,
    runner: Runner | None = None,
) -> MapToBaseOutputs:
    """
    map_to_base
    
    Maps an image or surface from a time point directory (either cross-sectional
    or longitudinal) to the base space and outputs it in the appropriate base
    directory.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        baseid: Identifier of the base.
        tpid: Identifier of the time point, without the '.long.baseid' suffix.
        input_image: Input image, e.g., norm.mgz, aseg.mgz, lh.white.
        resample_type: Resample type. 'interpolate' for norm, T1, orig;\
            'nearest' for aseg; 'surface' for surfaces.
        cross: If '1', input is from cross sectionals; default is to use\
            longitudinal directories.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MapToBaseOutputs`).
    """
    params = map_to_base_params(
        baseid=baseid,
        tpid=tpid,
        input_image=input_image,
        resample_type=resample_type,
        cross=cross,
    )
    return map_to_base_execute(params, runner)


__all__ = [
    "MAP_TO_BASE_METADATA",
    "MapToBaseOutputs",
    "map_to_base",
    "map_to_base_execute",
    "map_to_base_params",
]
