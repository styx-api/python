# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MEANVAL_METADATA = Metadata(
    id="26ed631dfd8a79a0f878fcf7adc5c3c7373c6d16.boutiques",
    name="meanval",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MeanvalParameters = typing.TypedDict('MeanvalParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/meanval"]],
    "input_file": InputPathType,
    "mask_file": InputPathType,
    "output_file": str,
    "avgwf_flag": bool,
})
MeanvalParametersTagged = typing.TypedDict('MeanvalParametersTagged', {
    "@type": typing.Literal["freesurfer/meanval"],
    "input_file": InputPathType,
    "mask_file": InputPathType,
    "output_file": str,
    "avgwf_flag": bool,
})


class MeanvalOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MeanvalParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    mean_output_file: OutputPathType
    """File containing the mean value calculated"""


def meanval_params(
    input_file: InputPathType,
    mask_file: InputPathType,
    output_file: str,
    avgwf_flag: bool = False,
) -> MeanvalParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input volume file.
        mask_file: Mask file.
        output_file: Output file where mean value will be stored.
        avgwf_flag: Flag to calculate the average waveform.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/meanval",
        "input_file": input_file,
        "mask_file": mask_file,
        "output_file": output_file,
        "avgwf_flag": avgwf_flag,
    }
    return params


def meanval_cargs(
    params: MeanvalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("meanval")
    cargs.extend([
        "--i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "--m",
        execution.input_file(params.get("mask_file", None))
    ])
    cargs.extend([
        "--o",
        params.get("output_file", None)
    ])
    if params.get("avgwf_flag", False):
        cargs.append("--avgwf")
    return cargs


def meanval_outputs(
    params: MeanvalParameters,
    execution: Execution,
) -> MeanvalOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MeanvalOutputs(
        root=execution.output_file("."),
        mean_output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def meanval_execute(
    params: MeanvalParameters,
    runner: Runner | None = None,
) -> MeanvalOutputs:
    """
    meanval
    
    Tool to calculate the mean value of an image within a mask.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MeanvalOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MEANVAL_METADATA)
    params = execution.params(params)
    cargs = meanval_cargs(params, execution)
    ret = meanval_outputs(params, execution)
    execution.run(cargs)
    return ret


def meanval(
    input_file: InputPathType,
    mask_file: InputPathType,
    output_file: str,
    avgwf_flag: bool = False,
    runner: Runner | None = None,
) -> MeanvalOutputs:
    """
    meanval
    
    Tool to calculate the mean value of an image within a mask.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input volume file.
        mask_file: Mask file.
        output_file: Output file where mean value will be stored.
        avgwf_flag: Flag to calculate the average waveform.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MeanvalOutputs`).
    """
    params = meanval_params(
        input_file=input_file,
        mask_file=mask_file,
        output_file=output_file,
        avgwf_flag=avgwf_flag,
    )
    return meanval_execute(params, runner)


__all__ = [
    "MEANVAL_METADATA",
    "MeanvalOutputs",
    "meanval",
    "meanval_execute",
    "meanval_params",
]
