# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MERGESEG_METADATA = Metadata(
    id="c13fa35219d8f22307e0e12231dd7d64c0be3c71.boutiques",
    name="mergeseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MergesegParameters = typing.TypedDict('MergesegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mergeseg"]],
    "src_seg": InputPathType,
    "merge_seg": InputPathType,
    "out_seg": str,
    "segid": typing.NotRequired[float | None],
    "segid_only": typing.NotRequired[float | None],
    "segid_erode": typing.NotRequired[float | None],
    "ctab": typing.NotRequired[InputPathType | None],
})
MergesegParametersTagged = typing.TypedDict('MergesegParametersTagged', {
    "@type": typing.Literal["freesurfer/mergeseg"],
    "src_seg": InputPathType,
    "merge_seg": InputPathType,
    "out_seg": str,
    "segid": typing.NotRequired[float | None],
    "segid_only": typing.NotRequired[float | None],
    "segid_erode": typing.NotRequired[float | None],
    "ctab": typing.NotRequired[InputPathType | None],
})


class MergesegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MergesegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_seg: OutputPathType
    """Output merged segmentation result."""


def mergeseg_params(
    src_seg: InputPathType,
    merge_seg: InputPathType,
    out_seg: str,
    segid: float | None = None,
    segid_only: float | None = None,
    segid_erode: float | None = None,
    ctab: InputPathType | None = None,
) -> MergesegParametersTagged:
    """
    Build parameters.
    
    Args:
        src_seg: Source segmentation image file.
        merge_seg: Merge segmentation volume file.
        out_seg: Output merged segmentation.
        segid: Segmentation index (optional). If specified, all the voxels in\
            the merge seg will be set to segindex.
        segid_only: Only take segindex from merge and use it for merging.
        segid_erode: Erode seg-only segindex before merge. Specify the number\
            of erosion iterations.
        ctab: Color table to embed in the output segmentation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mergeseg",
        "src_seg": src_seg,
        "merge_seg": merge_seg,
        "out_seg": out_seg,
    }
    if segid is not None:
        params["segid"] = segid
    if segid_only is not None:
        params["segid_only"] = segid_only
    if segid_erode is not None:
        params["segid_erode"] = segid_erode
    if ctab is not None:
        params["ctab"] = ctab
    return params


def mergeseg_cargs(
    params: MergesegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mergeseg")
    cargs.append(execution.input_file(params.get("src_seg", None)))
    cargs.append(execution.input_file(params.get("merge_seg", None)))
    cargs.extend([
        "--o",
        params.get("out_seg", None)
    ])
    if params.get("segid", None) is not None:
        cargs.extend([
            "--segid",
            str(params.get("segid", None))
        ])
    if params.get("segid_only", None) is not None:
        cargs.extend([
            "--segid-only",
            str(params.get("segid_only", None))
        ])
    if params.get("segid_erode", None) is not None:
        cargs.extend([
            "--segid-erode",
            str(params.get("segid_erode", None))
        ])
    if params.get("ctab", None) is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("ctab", None))
        ])
    return cargs


def mergeseg_outputs(
    params: MergesegParameters,
    execution: Execution,
) -> MergesegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MergesegOutputs(
        root=execution.output_file("."),
        output_seg=execution.output_file(params.get("out_seg", None)),
    )
    return ret


def mergeseg_execute(
    params: MergesegParameters,
    runner: Runner | None = None,
) -> MergesegOutputs:
    """
    mergeseg
    
    Merges one segmentation into another, replacing the source voxels with those
    from the merge segmentation where non-zero.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MergesegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MERGESEG_METADATA)
    params = execution.params(params)
    cargs = mergeseg_cargs(params, execution)
    ret = mergeseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mergeseg(
    src_seg: InputPathType,
    merge_seg: InputPathType,
    out_seg: str,
    segid: float | None = None,
    segid_only: float | None = None,
    segid_erode: float | None = None,
    ctab: InputPathType | None = None,
    runner: Runner | None = None,
) -> MergesegOutputs:
    """
    mergeseg
    
    Merges one segmentation into another, replacing the source voxels with those
    from the merge segmentation where non-zero.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        src_seg: Source segmentation image file.
        merge_seg: Merge segmentation volume file.
        out_seg: Output merged segmentation.
        segid: Segmentation index (optional). If specified, all the voxels in\
            the merge seg will be set to segindex.
        segid_only: Only take segindex from merge and use it for merging.
        segid_erode: Erode seg-only segindex before merge. Specify the number\
            of erosion iterations.
        ctab: Color table to embed in the output segmentation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MergesegOutputs`).
    """
    params = mergeseg_params(
        src_seg=src_seg,
        merge_seg=merge_seg,
        out_seg=out_seg,
        segid=segid,
        segid_only=segid_only,
        segid_erode=segid_erode,
        ctab=ctab,
    )
    return mergeseg_execute(params, runner)


__all__ = [
    "MERGESEG_METADATA",
    "MergesegOutputs",
    "mergeseg",
    "mergeseg_execute",
    "mergeseg_params",
]
