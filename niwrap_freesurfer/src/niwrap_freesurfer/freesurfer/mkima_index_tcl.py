# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MKIMA_INDEX_TCL_METADATA = Metadata(
    id="86be0aef995f956ba52b06d4b0b72917946939dd.boutiques",
    name="mkima_index.tcl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MkimaIndexTclParameters = typing.TypedDict('MkimaIndexTclParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mkima_index.tcl"]],
    "input_file": InputPathType,
    "output_flag": bool,
})
MkimaIndexTclParametersTagged = typing.TypedDict('MkimaIndexTclParametersTagged', {
    "@type": typing.Literal["freesurfer/mkima_index.tcl"],
    "input_file": InputPathType,
    "output_flag": bool,
})


class MkimaIndexTclOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MkimaIndexTclParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file resulting from mkima index operations."""


def mkima_index_tcl_params(
    input_file: InputPathType,
    output_flag: bool = False,
) -> MkimaIndexTclParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input file for mkima index operations.
        output_flag: Flag to specify output for mkima index operation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mkima_index.tcl",
        "input_file": input_file,
        "output_flag": output_flag,
    }
    return params


def mkima_index_tcl_cargs(
    params: MkimaIndexTclParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mkima_index.tcl")
    cargs.append(execution.input_file(params.get("input_file", None)))
    if params.get("output_flag", False):
        cargs.append("-o")
    return cargs


def mkima_index_tcl_outputs(
    params: MkimaIndexTclParameters,
    execution: Execution,
) -> MkimaIndexTclOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MkimaIndexTclOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(pathlib.Path(params.get("input_file", None)).name + "_index_output"),
    )
    return ret


def mkima_index_tcl_execute(
    params: MkimaIndexTclParameters,
    runner: Runner | None = None,
) -> MkimaIndexTclOutputs:
    """
    mkima_index.tcl
    
    A command-line tool for handling mkima index operations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MkimaIndexTclOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MKIMA_INDEX_TCL_METADATA)
    params = execution.params(params)
    cargs = mkima_index_tcl_cargs(params, execution)
    ret = mkima_index_tcl_outputs(params, execution)
    execution.run(cargs)
    return ret


def mkima_index_tcl(
    input_file: InputPathType,
    output_flag: bool = False,
    runner: Runner | None = None,
) -> MkimaIndexTclOutputs:
    """
    mkima_index.tcl
    
    A command-line tool for handling mkima index operations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input file for mkima index operations.
        output_flag: Flag to specify output for mkima index operation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MkimaIndexTclOutputs`).
    """
    params = mkima_index_tcl_params(
        input_file=input_file,
        output_flag=output_flag,
    )
    return mkima_index_tcl_execute(params, runner)


__all__ = [
    "MKIMA_INDEX_TCL_METADATA",
    "MkimaIndexTclOutputs",
    "mkima_index_tcl",
    "mkima_index_tcl_execute",
    "mkima_index_tcl_params",
]
