# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MKMNC_INDEX_TCL_METADATA = Metadata(
    id="a3e1a6ec38b7ba691a9575b1adcc081ab15b3fda.boutiques",
    name="mkmnc_index.tcl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MkmncIndexTclParameters = typing.TypedDict('MkmncIndexTclParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mkmnc_index.tcl"]],
    "infile": InputPathType,
    "outfile": str,
})
MkmncIndexTclParametersTagged = typing.TypedDict('MkmncIndexTclParametersTagged', {
    "@type": typing.Literal["freesurfer/mkmnc_index.tcl"],
    "infile": InputPathType,
    "outfile": str,
})


class MkmncIndexTclOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MkmncIndexTclParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    indexfile: OutputPathType
    """Generated index file"""


def mkmnc_index_tcl_params(
    infile: InputPathType,
    outfile: str,
) -> MkmncIndexTclParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input MINC file.
        outfile: Output index file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mkmnc_index.tcl",
        "infile": infile,
        "outfile": outfile,
    }
    return params


def mkmnc_index_tcl_cargs(
    params: MkmncIndexTclParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mkmnc_index.tcl")
    cargs.append(execution.input_file(params.get("infile", None)))
    cargs.append(params.get("outfile", None))
    return cargs


def mkmnc_index_tcl_outputs(
    params: MkmncIndexTclParameters,
    execution: Execution,
) -> MkmncIndexTclOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MkmncIndexTclOutputs(
        root=execution.output_file("."),
        indexfile=execution.output_file(params.get("outfile", None)),
    )
    return ret


def mkmnc_index_tcl_execute(
    params: MkmncIndexTclParameters,
    runner: Runner | None = None,
) -> MkmncIndexTclOutputs:
    """
    mkmnc_index.tcl
    
    A tool for creating MINC indices.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MkmncIndexTclOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MKMNC_INDEX_TCL_METADATA)
    params = execution.params(params)
    cargs = mkmnc_index_tcl_cargs(params, execution)
    ret = mkmnc_index_tcl_outputs(params, execution)
    execution.run(cargs)
    return ret


def mkmnc_index_tcl(
    infile: InputPathType,
    outfile: str,
    runner: Runner | None = None,
) -> MkmncIndexTclOutputs:
    """
    mkmnc_index.tcl
    
    A tool for creating MINC indices.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        infile: Input MINC file.
        outfile: Output index file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MkmncIndexTclOutputs`).
    """
    params = mkmnc_index_tcl_params(
        infile=infile,
        outfile=outfile,
    )
    return mkmnc_index_tcl_execute(params, runner)


__all__ = [
    "MKMNC_INDEX_TCL_METADATA",
    "MkmncIndexTclOutputs",
    "mkmnc_index_tcl",
    "mkmnc_index_tcl_execute",
    "mkmnc_index_tcl_params",
]
