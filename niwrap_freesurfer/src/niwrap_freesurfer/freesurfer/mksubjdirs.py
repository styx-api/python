# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MKSUBJDIRS_METADATA = Metadata(
    id="5a4b4fa4ad4e76639de872219fc283fdb7e306a6.boutiques",
    name="mksubjdirs",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MksubjdirsParameters = typing.TypedDict('MksubjdirsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mksubjdirs"]],
    "subj_name": str,
    "mode": typing.NotRequired[str | None],
    "parents": bool,
    "verbose": bool,
    "selinux_context": bool,
    "help": bool,
    "version": bool,
})
MksubjdirsParametersTagged = typing.TypedDict('MksubjdirsParametersTagged', {
    "@type": typing.Literal["freesurfer/mksubjdirs"],
    "subj_name": str,
    "mode": typing.NotRequired[str | None],
    "parents": bool,
    "verbose": bool,
    "selinux_context": bool,
    "help": bool,
    "version": bool,
})


class MksubjdirsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MksubjdirsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mksubjdirs_params(
    subj_name: str,
    mode: str | None = None,
    parents: bool = False,
    verbose: bool = False,
    selinux_context: bool = False,
    help_: bool = False,
    version: bool = False,
) -> MksubjdirsParametersTagged:
    """
    Build parameters.
    
    Args:
        subj_name: Name of the subject directory to create.
        mode: Set file mode (as in chmod), not a=rwx - umask.
        parents: No error if existing, make parent directories as needed.
        verbose: Print a message for each created directory.
        selinux_context: Set SELinux security context of each created directory\
            to the default type.
        help_: Display help and exit.
        version: Output version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mksubjdirs",
        "subj_name": subj_name,
        "parents": parents,
        "verbose": verbose,
        "selinux_context": selinux_context,
        "help": help_,
        "version": version,
    }
    if mode is not None:
        params["mode"] = mode
    return params


def mksubjdirs_cargs(
    params: MksubjdirsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mksubjdirs")
    cargs.append(params.get("subj_name", None))
    if params.get("mode", None) is not None:
        cargs.extend([
            "-m",
            params.get("mode", None)
        ])
    if params.get("parents", False):
        cargs.append("-p")
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("selinux_context", False):
        cargs.append("-Z")
    if params.get("help", False):
        cargs.append("--help")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mksubjdirs_outputs(
    params: MksubjdirsParameters,
    execution: Execution,
) -> MksubjdirsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MksubjdirsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mksubjdirs_execute(
    params: MksubjdirsParameters,
    runner: Runner | None = None,
) -> MksubjdirsOutputs:
    """
    mksubjdirs
    
    A command-line tool to create subject directories.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MksubjdirsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MKSUBJDIRS_METADATA)
    params = execution.params(params)
    cargs = mksubjdirs_cargs(params, execution)
    ret = mksubjdirs_outputs(params, execution)
    execution.run(cargs)
    return ret


def mksubjdirs(
    subj_name: str,
    mode: str | None = None,
    parents: bool = False,
    verbose: bool = False,
    selinux_context: bool = False,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MksubjdirsOutputs:
    """
    mksubjdirs
    
    A command-line tool to create subject directories.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subj_name: Name of the subject directory to create.
        mode: Set file mode (as in chmod), not a=rwx - umask.
        parents: No error if existing, make parent directories as needed.
        verbose: Print a message for each created directory.
        selinux_context: Set SELinux security context of each created directory\
            to the default type.
        help_: Display help and exit.
        version: Output version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MksubjdirsOutputs`).
    """
    params = mksubjdirs_params(
        subj_name=subj_name,
        mode=mode,
        parents=parents,
        verbose=verbose,
        selinux_context=selinux_context,
        help_=help_,
        version=version,
    )
    return mksubjdirs_execute(params, runner)


__all__ = [
    "MKSUBJDIRS_METADATA",
    "MksubjdirsOutputs",
    "mksubjdirs",
    "mksubjdirs_execute",
    "mksubjdirs_params",
]
