# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MKSURFATLAS_METADATA = Metadata(
    id="e10d98c6c732c2691141d0c7ae1e1069fa4646aa.boutiques",
    name="mksurfatlas",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MksurfatlasParameters = typing.TypedDict('MksurfatlasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mksurfatlas"]],
    "atlas": str,
    "hemi": str,
    "subjects": list[str],
    "surfval": str,
    "surfvaldir": typing.NotRequired[str | None],
    "regsurf": typing.NotRequired[str | None],
    "debug": bool,
    "version": bool,
    "help": bool,
})
MksurfatlasParametersTagged = typing.TypedDict('MksurfatlasParametersTagged', {
    "@type": typing.Literal["freesurfer/mksurfatlas"],
    "atlas": str,
    "hemi": str,
    "subjects": list[str],
    "surfval": str,
    "surfvaldir": typing.NotRequired[str | None],
    "regsurf": typing.NotRequired[str | None],
    "debug": bool,
    "version": bool,
    "help": bool,
})


class MksurfatlasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MksurfatlasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_atlas: OutputPathType
    """Resulting atlas file in TIFF format."""


def mksurfatlas_params(
    atlas: str,
    hemi: str,
    subjects: list[str],
    surfval: str,
    surfvaldir: str | None = None,
    regsurf: str | None = None,
    debug: bool = False,
    version: bool = False,
    help_: bool = False,
) -> MksurfatlasParametersTagged:
    """
    Build parameters.
    
    Args:
        atlas: Save results to this file (tif file).
        hemi: Hemisphere to process.
        subjects: Subject(s) to process. Multiple subjects can be specified by\
            repeating the flag.
        surfval: Surface values file. Looks for\
            subject/surfvaldir/hemi.surfval.
        surfvaldir: Directory for surface values; default is 'label'.
        regsurf: Registration surface; default is 'sphere'.
        debug: Turn on debugging.
        version: Print version and exit.
        help_: Print help and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mksurfatlas",
        "atlas": atlas,
        "hemi": hemi,
        "subjects": subjects,
        "surfval": surfval,
        "debug": debug,
        "version": version,
        "help": help_,
    }
    if surfvaldir is not None:
        params["surfvaldir"] = surfvaldir
    if regsurf is not None:
        params["regsurf"] = regsurf
    return params


def mksurfatlas_cargs(
    params: MksurfatlasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mksurfatlas")
    cargs.extend([
        "--a",
        params.get("atlas", None)
    ])
    cargs.extend([
        "--h",
        params.get("hemi", None)
    ])
    cargs.extend([
        "--s",
        *params.get("subjects", None)
    ])
    cargs.extend([
        "--v",
        params.get("surfval", None)
    ])
    if params.get("surfvaldir", None) is not None:
        cargs.extend([
            "--d",
            params.get("surfvaldir", None)
        ])
    if params.get("regsurf", None) is not None:
        cargs.extend([
            "--r",
            params.get("regsurf", None)
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("version", False):
        cargs.append("--version")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def mksurfatlas_outputs(
    params: MksurfatlasParameters,
    execution: Execution,
) -> MksurfatlasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MksurfatlasOutputs(
        root=execution.output_file("."),
        output_atlas=execution.output_file(params.get("atlas", None)),
    )
    return ret


def mksurfatlas_execute(
    params: MksurfatlasParameters,
    runner: Runner | None = None,
) -> MksurfatlasOutputs:
    """
    mksurfatlas
    
    Creates an atlas using mris_make_template. The atlas can then be used to
    create the surface registration for each subject based on this atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MksurfatlasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MKSURFATLAS_METADATA)
    params = execution.params(params)
    cargs = mksurfatlas_cargs(params, execution)
    ret = mksurfatlas_outputs(params, execution)
    execution.run(cargs)
    return ret


def mksurfatlas(
    atlas: str,
    hemi: str,
    subjects: list[str],
    surfval: str,
    surfvaldir: str | None = None,
    regsurf: str | None = None,
    debug: bool = False,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> MksurfatlasOutputs:
    """
    mksurfatlas
    
    Creates an atlas using mris_make_template. The atlas can then be used to
    create the surface registration for each subject based on this atlas.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        atlas: Save results to this file (tif file).
        hemi: Hemisphere to process.
        subjects: Subject(s) to process. Multiple subjects can be specified by\
            repeating the flag.
        surfval: Surface values file. Looks for\
            subject/surfvaldir/hemi.surfval.
        surfvaldir: Directory for surface values; default is 'label'.
        regsurf: Registration surface; default is 'sphere'.
        debug: Turn on debugging.
        version: Print version and exit.
        help_: Print help and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MksurfatlasOutputs`).
    """
    params = mksurfatlas_params(
        atlas=atlas,
        hemi=hemi,
        subjects=subjects,
        surfval=surfval,
        surfvaldir=surfvaldir,
        regsurf=regsurf,
        debug=debug,
        version=version,
        help_=help_,
    )
    return mksurfatlas_execute(params, runner)


__all__ = [
    "MKSURFATLAS_METADATA",
    "MksurfatlasOutputs",
    "mksurfatlas",
    "mksurfatlas_execute",
    "mksurfatlas_params",
]
