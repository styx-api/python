# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MMPPSP_METADATA = Metadata(
    id="a458598bfb10337a371df949596a84de46846b3b.boutiques",
    name="mmppsp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MmppspParameters = typing.TypedDict('MmppspParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mmppsp"]],
    "samseg_dir": str,
    "outdir": str,
    "lh_flag": bool,
    "rh_flag": bool,
    "likelihood_flag": bool,
    "posterior_flag": bool,
    "force_update_flag": bool,
    "threads": typing.NotRequired[float | None],
    "no_initsphreg_flag": bool,
    "stop_after": typing.NotRequired[str | None],
    "wexpanddist": typing.NotRequired[float | None],
})
MmppspParametersTagged = typing.TypedDict('MmppspParametersTagged', {
    "@type": typing.Literal["freesurfer/mmppsp"],
    "samseg_dir": str,
    "outdir": str,
    "lh_flag": bool,
    "rh_flag": bool,
    "likelihood_flag": bool,
    "posterior_flag": bool,
    "force_update_flag": bool,
    "threads": typing.NotRequired[float | None],
    "no_initsphreg_flag": bool,
    "stop_after": typing.NotRequired[str | None],
    "wexpanddist": typing.NotRequired[float | None],
})


class MmppspOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MmppspParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType
    """Output surface files"""


def mmppsp_params(
    samseg_dir: str,
    outdir: str,
    lh_flag: bool = False,
    rh_flag: bool = False,
    likelihood_flag: bool = False,
    posterior_flag: bool = False,
    force_update_flag: bool = False,
    threads: float | None = None,
    no_initsphreg_flag: bool = False,
    stop_after: str | None = None,
    wexpanddist: float | None = None,
) -> MmppspParametersTagged:
    """
    Build parameters.
    
    Args:
        samseg_dir: Directory containing Samseg output.
        outdir: Output directory for the results.
        lh_flag: Process left hemisphere.
        rh_flag: Process right hemisphere.
        likelihood_flag: Use likelihood for surface placement.
        posterior_flag: Use posteriors instead of likelihood for surface\
            placement.
        force_update_flag: Force update the surface placement.
        threads: Number of threads to use.
        no_initsphreg_flag: Do not use talairach.lta to initialize rotation.
        stop_after: Stop the processing after a specified step.
        wexpanddist: Distance to expand white surface to initialize pial (in\
            mm).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mmppsp",
        "samseg_dir": samseg_dir,
        "outdir": outdir,
        "lh_flag": lh_flag,
        "rh_flag": rh_flag,
        "likelihood_flag": likelihood_flag,
        "posterior_flag": posterior_flag,
        "force_update_flag": force_update_flag,
        "no_initsphreg_flag": no_initsphreg_flag,
    }
    if threads is not None:
        params["threads"] = threads
    if stop_after is not None:
        params["stop_after"] = stop_after
    if wexpanddist is not None:
        params["wexpanddist"] = wexpanddist
    return params


def mmppsp_cargs(
    params: MmppspParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mmppsp")
    cargs.extend([
        "--samseg",
        params.get("samseg_dir", None)
    ])
    cargs.extend([
        "--o",
        params.get("outdir", None)
    ])
    if params.get("lh_flag", False):
        cargs.append("--lh")
    if params.get("rh_flag", False):
        cargs.append("--rh")
    if params.get("likelihood_flag", False):
        cargs.append("--likelihood")
    if params.get("posterior_flag", False):
        cargs.append("--posterior")
    if params.get("force_update_flag", False):
        cargs.append("--force-update")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("no_initsphreg_flag", False):
        cargs.append("--no-initsphreg")
    if params.get("stop_after", None) is not None:
        cargs.extend([
            "--stop-after",
            params.get("stop_after", None)
        ])
    if params.get("wexpanddist", None) is not None:
        cargs.extend([
            "--wexpanddist",
            str(params.get("wexpanddist", None))
        ])
    return cargs


def mmppsp_outputs(
    params: MmppspParameters,
    execution: Execution,
) -> MmppspOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MmppspOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file(params.get("outdir", None) + "/surf"),
    )
    return ret


def mmppsp_execute(
    params: MmppspParameters,
    runner: Runner | None = None,
) -> MmppspOutputs:
    """
    mmppsp
    
    MultiModal Posterior Probability Surface Placement.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MmppspOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MMPPSP_METADATA)
    params = execution.params(params)
    cargs = mmppsp_cargs(params, execution)
    ret = mmppsp_outputs(params, execution)
    execution.run(cargs)
    return ret


def mmppsp(
    samseg_dir: str,
    outdir: str,
    lh_flag: bool = False,
    rh_flag: bool = False,
    likelihood_flag: bool = False,
    posterior_flag: bool = False,
    force_update_flag: bool = False,
    threads: float | None = None,
    no_initsphreg_flag: bool = False,
    stop_after: str | None = None,
    wexpanddist: float | None = None,
    runner: Runner | None = None,
) -> MmppspOutputs:
    """
    mmppsp
    
    MultiModal Posterior Probability Surface Placement.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        samseg_dir: Directory containing Samseg output.
        outdir: Output directory for the results.
        lh_flag: Process left hemisphere.
        rh_flag: Process right hemisphere.
        likelihood_flag: Use likelihood for surface placement.
        posterior_flag: Use posteriors instead of likelihood for surface\
            placement.
        force_update_flag: Force update the surface placement.
        threads: Number of threads to use.
        no_initsphreg_flag: Do not use talairach.lta to initialize rotation.
        stop_after: Stop the processing after a specified step.
        wexpanddist: Distance to expand white surface to initialize pial (in\
            mm).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MmppspOutputs`).
    """
    params = mmppsp_params(
        samseg_dir=samseg_dir,
        outdir=outdir,
        lh_flag=lh_flag,
        rh_flag=rh_flag,
        likelihood_flag=likelihood_flag,
        posterior_flag=posterior_flag,
        force_update_flag=force_update_flag,
        threads=threads,
        no_initsphreg_flag=no_initsphreg_flag,
        stop_after=stop_after,
        wexpanddist=wexpanddist,
    )
    return mmppsp_execute(params, runner)


__all__ = [
    "MMPPSP_METADATA",
    "MmppspOutputs",
    "mmppsp",
    "mmppsp_execute",
    "mmppsp_params",
]
