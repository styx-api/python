# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MORPH_SUBJECT_METADATA = Metadata(
    id="dab11133f0d14ca55b5d68228d09dee883987b8a.boutiques",
    name="morph_subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MorphSubjectParameters = typing.TypedDict('MorphSubjectParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/morph_subject"]],
    "subjid": str,
})
MorphSubjectParametersTagged = typing.TypedDict('MorphSubjectParametersTagged', {
    "@type": typing.Literal["freesurfer/morph_subject"],
    "subjid": str,
})


class MorphSubjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MorphSubjectParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def morph_subject_params(
    subjid: str,
) -> MorphSubjectParametersTagged:
    """
    Build parameters.
    
    Args:
        subjid: Subject ID for processing.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/morph_subject",
        "subjid": subjid,
    }
    return params


def morph_subject_cargs(
    params: MorphSubjectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("morph_subject")
    cargs.append(params.get("subjid", None))
    return cargs


def morph_subject_outputs(
    params: MorphSubjectParameters,
    execution: Execution,
) -> MorphSubjectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MorphSubjectOutputs(
        root=execution.output_file("."),
    )
    return ret


def morph_subject_execute(
    params: MorphSubjectParameters,
    runner: Runner | None = None,
) -> MorphSubjectOutputs:
    """
    morph_subject
    
    A morphological processing tool for Freesurfer subjects. The specific
    operations and options are not documented in the available help text.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MorphSubjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MORPH_SUBJECT_METADATA)
    params = execution.params(params)
    cargs = morph_subject_cargs(params, execution)
    ret = morph_subject_outputs(params, execution)
    execution.run(cargs)
    return ret


def morph_subject(
    subjid: str,
    runner: Runner | None = None,
) -> MorphSubjectOutputs:
    """
    morph_subject
    
    A morphological processing tool for Freesurfer subjects. The specific
    operations and options are not documented in the available help text.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjid: Subject ID for processing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MorphSubjectOutputs`).
    """
    params = morph_subject_params(
        subjid=subjid,
    )
    return morph_subject_execute(params, runner)


__all__ = [
    "MORPH_SUBJECT_METADATA",
    "MorphSubjectOutputs",
    "morph_subject",
    "morph_subject_execute",
    "morph_subject_params",
]
