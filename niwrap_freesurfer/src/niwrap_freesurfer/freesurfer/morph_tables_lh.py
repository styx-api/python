# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MORPH_TABLES_LH_METADATA = Metadata(
    id="2822ee9534bad8b98be9bcfe634df7548fd6891c.boutiques",
    name="morph_tables-lh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MorphTablesLhParameters = typing.TypedDict('MorphTablesLhParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/morph_tables-lh"]],
    "input_file": InputPathType,
    "some_flag": bool,
})
MorphTablesLhParametersTagged = typing.TypedDict('MorphTablesLhParametersTagged', {
    "@type": typing.Literal["freesurfer/morph_tables-lh"],
    "input_file": InputPathType,
    "some_flag": bool,
})


class MorphTablesLhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MorphTablesLhParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output results from morphological analysis (example, adjust as needed)"""


def morph_tables_lh_params(
    input_file: InputPathType,
    some_flag: bool = False,
) -> MorphTablesLhParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input file for morphological analysis.
        some_flag: Example flag (replace with actual options from tool if\
            known).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/morph_tables-lh",
        "input_file": input_file,
        "some_flag": some_flag,
    }
    return params


def morph_tables_lh_cargs(
    params: MorphTablesLhParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("morph_tables-lh")
    cargs.extend([
        "-lh",
        execution.input_file(params.get("input_file", None))
    ])
    if params.get("some_flag", False):
        cargs.append("--some-flag")
    return cargs


def morph_tables_lh_outputs(
    params: MorphTablesLhParameters,
    execution: Execution,
) -> MorphTablesLhOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MorphTablesLhOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(pathlib.Path(params.get("input_file", None)).name + "_output.txt"),
    )
    return ret


def morph_tables_lh_execute(
    params: MorphTablesLhParameters,
    runner: Runner | None = None,
) -> MorphTablesLhOutputs:
    """
    morph_tables-lh
    
    Morphological analysis tool for left hemisphere in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MorphTablesLhOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MORPH_TABLES_LH_METADATA)
    params = execution.params(params)
    cargs = morph_tables_lh_cargs(params, execution)
    ret = morph_tables_lh_outputs(params, execution)
    execution.run(cargs)
    return ret


def morph_tables_lh(
    input_file: InputPathType,
    some_flag: bool = False,
    runner: Runner | None = None,
) -> MorphTablesLhOutputs:
    """
    morph_tables-lh
    
    Morphological analysis tool for left hemisphere in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input file for morphological analysis.
        some_flag: Example flag (replace with actual options from tool if\
            known).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MorphTablesLhOutputs`).
    """
    params = morph_tables_lh_params(
        input_file=input_file,
        some_flag=some_flag,
    )
    return morph_tables_lh_execute(params, runner)


__all__ = [
    "MORPH_TABLES_LH_METADATA",
    "MorphTablesLhOutputs",
    "morph_tables_lh",
    "morph_tables_lh_execute",
    "morph_tables_lh_params",
]
