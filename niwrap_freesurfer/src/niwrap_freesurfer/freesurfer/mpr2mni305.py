# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MPR2MNI305_METADATA = Metadata(
    id="06578c48b79fc7cf0a25d7f90572e339f54dc80e.boutiques",
    name="mpr2mni305",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Mpr2mni305Parameters = typing.TypedDict('Mpr2mni305Parameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mpr2mni305"]],
    "mpr_anat": str,
})
Mpr2mni305ParametersTagged = typing.TypedDict('Mpr2mni305ParametersTagged', {
    "@type": typing.Literal["freesurfer/mpr2mni305"],
    "mpr_anat": str,
})


class Mpr2mni305Outputs(typing.NamedTuple):
    """
    Output object returned when calling `Mpr2mni305Parameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mpr2mni305_params(
    mpr_anat: str,
) -> Mpr2mni305ParametersTagged:
    """
    Build parameters.
    
    Args:
        mpr_anat: MPRAGE anatomical input file (e.g., 131).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mpr2mni305",
        "mpr_anat": mpr_anat,
    }
    return params


def mpr2mni305_cargs(
    params: Mpr2mni305Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mpr2mni305")
    cargs.append(params.get("mpr_anat", None))
    return cargs


def mpr2mni305_outputs(
    params: Mpr2mni305Parameters,
    execution: Execution,
) -> Mpr2mni305Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Mpr2mni305Outputs(
        root=execution.output_file("."),
    )
    return ret


def mpr2mni305_execute(
    params: Mpr2mni305Parameters,
    runner: Runner | None = None,
) -> Mpr2mni305Outputs:
    """
    mpr2mni305
    
    Tool for transforming MPRAGE dataset to MNI305 coordinate space.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Mpr2mni305Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MPR2MNI305_METADATA)
    params = execution.params(params)
    cargs = mpr2mni305_cargs(params, execution)
    ret = mpr2mni305_outputs(params, execution)
    execution.run(cargs)
    return ret


def mpr2mni305(
    mpr_anat: str,
    runner: Runner | None = None,
) -> Mpr2mni305Outputs:
    """
    mpr2mni305
    
    Tool for transforming MPRAGE dataset to MNI305 coordinate space.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        mpr_anat: MPRAGE anatomical input file (e.g., 131).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Mpr2mni305Outputs`).
    """
    params = mpr2mni305_params(
        mpr_anat=mpr_anat,
    )
    return mpr2mni305_execute(params, runner)


__all__ = [
    "MPR2MNI305_METADATA",
    "Mpr2mni305Outputs",
    "mpr2mni305",
    "mpr2mni305_execute",
    "mpr2mni305_params",
]
