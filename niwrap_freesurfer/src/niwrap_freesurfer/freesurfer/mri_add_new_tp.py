# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_ADD_NEW_TP_METADATA = Metadata(
    id="1cba05d89df7914334369b19d68a4c6b3c2c3c76.boutiques",
    name="mri_add_new_tp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriAddNewTpParameters = typing.TypedDict('MriAddNewTpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_add_new_tp"]],
    "base_id": str,
    "newtp_id": str,
})
MriAddNewTpParametersTagged = typing.TypedDict('MriAddNewTpParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_add_new_tp"],
    "base_id": str,
    "newtp_id": str,
})


class MriAddNewTpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriAddNewTpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_add_new_tp_params(
    base_id: str,
    newtp_id: str,
) -> MriAddNewTpParametersTagged:
    """
    Build parameters.
    
    Args:
        base_id: The ID of the base template.
        newtp_id: The ID of the new time point to be added.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_add_new_tp",
        "base_id": base_id,
        "newtp_id": newtp_id,
    }
    return params


def mri_add_new_tp_cargs(
    params: MriAddNewTpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_add_new_tp")
    cargs.append(params.get("base_id", None))
    cargs.append(params.get("newtp_id", None))
    return cargs


def mri_add_new_tp_outputs(
    params: MriAddNewTpParameters,
    execution: Execution,
) -> MriAddNewTpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriAddNewTpOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_add_new_tp_execute(
    params: MriAddNewTpParameters,
    runner: Runner | None = None,
) -> MriAddNewTpOutputs:
    """
    mri_add_new_tp
    
    Adds a new time point to the base/template without re-creating the base.
    Only the new time point needs to be run longitudinally.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAddNewTpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_ADD_NEW_TP_METADATA)
    params = execution.params(params)
    cargs = mri_add_new_tp_cargs(params, execution)
    ret = mri_add_new_tp_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_add_new_tp(
    base_id: str,
    newtp_id: str,
    runner: Runner | None = None,
) -> MriAddNewTpOutputs:
    """
    mri_add_new_tp
    
    Adds a new time point to the base/template without re-creating the base.
    Only the new time point needs to be run longitudinally.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        base_id: The ID of the base template.
        newtp_id: The ID of the new time point to be added.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAddNewTpOutputs`).
    """
    params = mri_add_new_tp_params(
        base_id=base_id,
        newtp_id=newtp_id,
    )
    return mri_add_new_tp_execute(params, runner)


__all__ = [
    "MRI_ADD_NEW_TP_METADATA",
    "MriAddNewTpOutputs",
    "mri_add_new_tp",
    "mri_add_new_tp_execute",
    "mri_add_new_tp_params",
]
