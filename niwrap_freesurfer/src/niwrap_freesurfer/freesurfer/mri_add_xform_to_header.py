# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_ADD_XFORM_TO_HEADER_METADATA = Metadata(
    id="122da7d2edb5739b2f91a1edcbbad33a9e6828bc.boutiques",
    name="mri_add_xform_to_header",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriAddXformToHeaderParameters = typing.TypedDict('MriAddXformToHeaderParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_add_xform_to_header"]],
    "xfm_file": InputPathType,
    "input_volume": InputPathType,
    "output_volume": str,
    "verbose": bool,
    "copy_name": bool,
})
MriAddXformToHeaderParametersTagged = typing.TypedDict('MriAddXformToHeaderParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_add_xform_to_header"],
    "xfm_file": InputPathType,
    "input_volume": InputPathType,
    "output_volume": str,
    "verbose": bool,
    "copy_name": bool,
})


class MriAddXformToHeaderOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriAddXformToHeaderParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """Volume output with added transformation."""


def mri_add_xform_to_header_params(
    xfm_file: InputPathType,
    input_volume: InputPathType,
    output_volume: str,
    verbose: bool = False,
    copy_name: bool = False,
) -> MriAddXformToHeaderParametersTagged:
    """
    Build parameters.
    
    Args:
        xfm_file: Transformation file to be added to the volume header.
        input_volume: Input volume to which the transformation is added.
        output_volume: Output volume with the transformation included.
        verbose: Enable verbose output for more detailed logging.
        copy_name: Copy the name of the xfm file without loading it.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_add_xform_to_header",
        "xfm_file": xfm_file,
        "input_volume": input_volume,
        "output_volume": output_volume,
        "verbose": verbose,
        "copy_name": copy_name,
    }
    return params


def mri_add_xform_to_header_cargs(
    params: MriAddXformToHeaderParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_add_xform_to_header")
    cargs.append(execution.input_file(params.get("xfm_file", None)))
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(params.get("output_volume", None))
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("copy_name", False):
        cargs.append("-c")
    return cargs


def mri_add_xform_to_header_outputs(
    params: MriAddXformToHeaderParameters,
    execution: Execution,
) -> MriAddXformToHeaderOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriAddXformToHeaderOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_add_xform_to_header_execute(
    params: MriAddXformToHeaderParameters,
    runner: Runner | None = None,
) -> MriAddXformToHeaderOutputs:
    """
    mri_add_xform_to_header
    
    Program to add specified transformation to the volume header.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAddXformToHeaderOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_ADD_XFORM_TO_HEADER_METADATA)
    params = execution.params(params)
    cargs = mri_add_xform_to_header_cargs(params, execution)
    ret = mri_add_xform_to_header_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_add_xform_to_header(
    xfm_file: InputPathType,
    input_volume: InputPathType,
    output_volume: str,
    verbose: bool = False,
    copy_name: bool = False,
    runner: Runner | None = None,
) -> MriAddXformToHeaderOutputs:
    """
    mri_add_xform_to_header
    
    Program to add specified transformation to the volume header.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        xfm_file: Transformation file to be added to the volume header.
        input_volume: Input volume to which the transformation is added.
        output_volume: Output volume with the transformation included.
        verbose: Enable verbose output for more detailed logging.
        copy_name: Copy the name of the xfm file without loading it.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAddXformToHeaderOutputs`).
    """
    params = mri_add_xform_to_header_params(
        xfm_file=xfm_file,
        input_volume=input_volume,
        output_volume=output_volume,
        verbose=verbose,
        copy_name=copy_name,
    )
    return mri_add_xform_to_header_execute(params, runner)


__all__ = [
    "MRI_ADD_XFORM_TO_HEADER_METADATA",
    "MriAddXformToHeaderOutputs",
    "mri_add_xform_to_header",
    "mri_add_xform_to_header_execute",
    "mri_add_xform_to_header_params",
]
