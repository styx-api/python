# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_APPLY_BIAS_METADATA = Metadata(
    id="46b5e2a3948d9f2b59a26ae51155880173698a3f.boutiques",
    name="mri_apply_bias",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriApplyBiasParameters = typing.TypedDict('MriApplyBiasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_apply_bias"]],
    "input_volume": InputPathType,
    "bias_volume": InputPathType,
    "output_volume": str,
})
MriApplyBiasParametersTagged = typing.TypedDict('MriApplyBiasParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_apply_bias"],
    "input_volume": InputPathType,
    "bias_volume": InputPathType,
    "output_volume": str,
})


class MriApplyBiasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriApplyBiasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """Output volume after applying bias"""


def mri_apply_bias_params(
    input_volume: InputPathType,
    bias_volume: InputPathType,
    output_volume: str,
) -> MriApplyBiasParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: The input volume file.
        bias_volume: The bias volume file.
        output_volume: The output volume file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_apply_bias",
        "input_volume": input_volume,
        "bias_volume": bias_volume,
        "output_volume": output_volume,
    }
    return params


def mri_apply_bias_cargs(
    params: MriApplyBiasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_apply_bias")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(execution.input_file(params.get("bias_volume", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_apply_bias_outputs(
    params: MriApplyBiasParameters,
    execution: Execution,
) -> MriApplyBiasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriApplyBiasOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_apply_bias_execute(
    params: MriApplyBiasParameters,
    runner: Runner | None = None,
) -> MriApplyBiasOutputs:
    """
    mri_apply_bias
    
    A tool for applying a bias volume to an input volume to produce an output
    volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriApplyBiasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_APPLY_BIAS_METADATA)
    params = execution.params(params)
    cargs = mri_apply_bias_cargs(params, execution)
    ret = mri_apply_bias_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_apply_bias(
    input_volume: InputPathType,
    bias_volume: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MriApplyBiasOutputs:
    """
    mri_apply_bias
    
    A tool for applying a bias volume to an input volume to produce an output
    volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: The input volume file.
        bias_volume: The bias volume file.
        output_volume: The output volume file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriApplyBiasOutputs`).
    """
    params = mri_apply_bias_params(
        input_volume=input_volume,
        bias_volume=bias_volume,
        output_volume=output_volume,
    )
    return mri_apply_bias_execute(params, runner)


__all__ = [
    "MRI_APPLY_BIAS_METADATA",
    "MriApplyBiasOutputs",
    "mri_apply_bias",
    "mri_apply_bias_execute",
    "mri_apply_bias_params",
]
