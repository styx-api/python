# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_BRAIN_VOLUME_METADATA = Metadata(
    id="4be3c86e17ca2931addb34d2054686074f5623e5.boutiques",
    name="mri_brain_volume",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriBrainVolumeParameters = typing.TypedDict('MriBrainVolumeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_brain_volume"]],
    "input_file": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "force_param": typing.NotRequired[float | None],
    "version": bool,
})
MriBrainVolumeParametersTagged = typing.TypedDict('MriBrainVolumeParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_brain_volume"],
    "input_file": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "force_param": typing.NotRequired[float | None],
    "version": bool,
})


class MriBrainVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriBrainVolumeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType | None
    """Output file containing brain volume information"""


def mri_brain_volume_params(
    input_file: InputPathType,
    output_file: str | None = None,
    force_param: float | None = None,
    version: bool = False,
) -> MriBrainVolumeParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input MRI file.
        output_file: Output file for brain volume.
        force_param: Change pushout force (default 1.0).
        version: Show the current version.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_brain_volume",
        "input_file": input_file,
        "version": version,
    }
    if output_file is not None:
        params["output_file"] = output_file
    if force_param is not None:
        params["force_param"] = force_param
    return params


def mri_brain_volume_cargs(
    params: MriBrainVolumeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_brain_volume")
    cargs.append(execution.input_file(params.get("input_file", None)))
    if params.get("output_file", None) is not None:
        cargs.append(params.get("output_file", None))
    if params.get("force_param", None) is not None:
        cargs.extend([
            "-forceParam",
            str(params.get("force_param", None))
        ])
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mri_brain_volume_outputs(
    params: MriBrainVolumeParameters,
    execution: Execution,
) -> MriBrainVolumeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriBrainVolumeOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def mri_brain_volume_execute(
    params: MriBrainVolumeParameters,
    runner: Runner | None = None,
) -> MriBrainVolumeOutputs:
    """
    mri_brain_volume
    
    Tool to calculate brain volume from MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriBrainVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_BRAIN_VOLUME_METADATA)
    params = execution.params(params)
    cargs = mri_brain_volume_cargs(params, execution)
    ret = mri_brain_volume_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_brain_volume(
    input_file: InputPathType,
    output_file: str | None = None,
    force_param: float | None = None,
    version: bool = False,
    runner: Runner | None = None,
) -> MriBrainVolumeOutputs:
    """
    mri_brain_volume
    
    Tool to calculate brain volume from MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input MRI file.
        output_file: Output file for brain volume.
        force_param: Change pushout force (default 1.0).
        version: Show the current version.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriBrainVolumeOutputs`).
    """
    params = mri_brain_volume_params(
        input_file=input_file,
        output_file=output_file,
        force_param=force_param,
        version=version,
    )
    return mri_brain_volume_execute(params, runner)


__all__ = [
    "MRI_BRAIN_VOLUME_METADATA",
    "MriBrainVolumeOutputs",
    "mri_brain_volume",
    "mri_brain_volume_execute",
    "mri_brain_volume_params",
]
