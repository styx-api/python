# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CA_LABEL_METADATA = Metadata(
    id="ef9e9f33a6cf8c8a4e6bd6eb8417ebe770e5d2e7.boutiques",
    name="mri_ca_label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCaLabelParameters = typing.TypedDict('MriCaLabelParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_ca_label"]],
    "input_volumes": list[InputPathType],
    "transform_file": InputPathType,
    "gca_file": InputPathType,
    "output_volume": str,
    "cross_sequence": bool,
    "no_gibbs": bool,
    "wm_segmentation": typing.NotRequired[str | None],
    "conform": bool,
    "topo_dist_thresh": typing.NotRequired[float | None],
    "topo_volume_thresh1": typing.NotRequired[float | None],
    "topo_volume_thresh2": typing.NotRequired[float | None],
    "norm_pd": bool,
    "thin_temporal_lobe": typing.NotRequired[str | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
    "debug_node": typing.NotRequired[list[float] | None],
    "debug_label": typing.NotRequired[float | None],
    "tr": typing.NotRequired[float | None],
    "te": typing.NotRequired[float | None],
    "alpha": typing.NotRequired[float | None],
    "example": typing.NotRequired[list[InputPathType] | None],
    "pthresh": typing.NotRequired[float | None],
    "niter": typing.NotRequired[float | None],
    "write_probs": typing.NotRequired[str | None],
    "novar": bool,
    "regularize": typing.NotRequired[float | None],
    "nohippo": bool,
    "fixed_white_matter": typing.NotRequired[str | None],
    "mri": typing.NotRequired[InputPathType | None],
    "histogram_equalization": typing.NotRequired[InputPathType | None],
    "renorm": typing.NotRequired[InputPathType | None],
    "flash": bool,
    "flash_params": typing.NotRequired[InputPathType | None],
    "renormalize": typing.NotRequired[str | None],
    "set_input_volume": typing.NotRequired[InputPathType | None],
    "histogram_normalize": bool,
    "mean_filter": typing.NotRequired[float | None],
    "write_snapshots": typing.NotRequired[str | None],
    "mask_final_labeling": typing.NotRequired[InputPathType | None],
    "expand": typing.NotRequired[float | None],
    "max_iterations": typing.NotRequired[float | None],
    "filter_labeled_volume": typing.NotRequired[str | None],
    "longitudinal_processing": typing.NotRequired[str | None],
    "relabel_unlikely": typing.NotRequired[str | None],
    "disables_wmsa": bool,
    "fix_ventricle": typing.NotRequired[str | None],
    "insert_wm_bet_putctx": typing.NotRequired[str | None],
    "sa_insert_wm_bet_putctx": typing.NotRequired[str | None],
    "insert_from_seg": typing.NotRequired[str | None],
    "sa_insert_from_seg": typing.NotRequired[str | None],
    "cblum_from_seg": typing.NotRequired[str | None],
    "sa_cblum_from_seg": typing.NotRequired[str | None],
    "threads": typing.NotRequired[int | None],
})
MriCaLabelParametersTagged = typing.TypedDict('MriCaLabelParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_ca_label"],
    "input_volumes": list[InputPathType],
    "transform_file": InputPathType,
    "gca_file": InputPathType,
    "output_volume": str,
    "cross_sequence": bool,
    "no_gibbs": bool,
    "wm_segmentation": typing.NotRequired[str | None],
    "conform": bool,
    "topo_dist_thresh": typing.NotRequired[float | None],
    "topo_volume_thresh1": typing.NotRequired[float | None],
    "topo_volume_thresh2": typing.NotRequired[float | None],
    "norm_pd": bool,
    "thin_temporal_lobe": typing.NotRequired[str | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
    "debug_node": typing.NotRequired[list[float] | None],
    "debug_label": typing.NotRequired[float | None],
    "tr": typing.NotRequired[float | None],
    "te": typing.NotRequired[float | None],
    "alpha": typing.NotRequired[float | None],
    "example": typing.NotRequired[list[InputPathType] | None],
    "pthresh": typing.NotRequired[float | None],
    "niter": typing.NotRequired[float | None],
    "write_probs": typing.NotRequired[str | None],
    "novar": bool,
    "regularize": typing.NotRequired[float | None],
    "nohippo": bool,
    "fixed_white_matter": typing.NotRequired[str | None],
    "mri": typing.NotRequired[InputPathType | None],
    "histogram_equalization": typing.NotRequired[InputPathType | None],
    "renorm": typing.NotRequired[InputPathType | None],
    "flash": bool,
    "flash_params": typing.NotRequired[InputPathType | None],
    "renormalize": typing.NotRequired[str | None],
    "set_input_volume": typing.NotRequired[InputPathType | None],
    "histogram_normalize": bool,
    "mean_filter": typing.NotRequired[float | None],
    "write_snapshots": typing.NotRequired[str | None],
    "mask_final_labeling": typing.NotRequired[InputPathType | None],
    "expand": typing.NotRequired[float | None],
    "max_iterations": typing.NotRequired[float | None],
    "filter_labeled_volume": typing.NotRequired[str | None],
    "longitudinal_processing": typing.NotRequired[str | None],
    "relabel_unlikely": typing.NotRequired[str | None],
    "disables_wmsa": bool,
    "fix_ventricle": typing.NotRequired[str | None],
    "insert_wm_bet_putctx": typing.NotRequired[str | None],
    "sa_insert_wm_bet_putctx": typing.NotRequired[str | None],
    "insert_from_seg": typing.NotRequired[str | None],
    "sa_insert_from_seg": typing.NotRequired[str | None],
    "cblum_from_seg": typing.NotRequired[str | None],
    "sa_cblum_from_seg": typing.NotRequired[str | None],
    "threads": typing.NotRequired[int | None],
})


class MriCaLabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCaLabelParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_vol: OutputPathType
    """Output labeled volume."""


def mri_ca_label_params(
    input_volumes: list[InputPathType],
    transform_file: InputPathType,
    gca_file: InputPathType,
    output_volume: str,
    cross_sequence: bool = False,
    no_gibbs: bool = False,
    wm_segmentation: str | None = None,
    conform: bool = False,
    topo_dist_thresh: float | None = None,
    topo_volume_thresh1: float | None = None,
    topo_volume_thresh2: float | None = None,
    norm_pd: bool = False,
    thin_temporal_lobe: str | None = None,
    debug_voxel: list[float] | None = None,
    debug_node: list[float] | None = None,
    debug_label: float | None = None,
    tr: float | None = None,
    te: float | None = None,
    alpha: float | None = None,
    example: list[InputPathType] | None = None,
    pthresh: float | None = None,
    niter: float | None = None,
    write_probs: str | None = None,
    novar: bool = False,
    regularize: float | None = None,
    nohippo: bool = False,
    fixed_white_matter: str | None = None,
    mri: InputPathType | None = None,
    histogram_equalization: InputPathType | None = None,
    renorm: InputPathType | None = None,
    flash: bool = False,
    flash_params: InputPathType | None = None,
    renormalize: str | None = None,
    set_input_volume: InputPathType | None = None,
    histogram_normalize: bool = False,
    mean_filter: float | None = None,
    write_snapshots: str | None = None,
    mask_final_labeling: InputPathType | None = None,
    expand: float | None = None,
    max_iterations: float | None = None,
    filter_labeled_volume: str | None = None,
    longitudinal_processing: str | None = None,
    relabel_unlikely: str | None = None,
    disables_wmsa: bool = False,
    fix_ventricle: str | None = None,
    insert_wm_bet_putctx: str | None = None,
    sa_insert_wm_bet_putctx: str | None = None,
    insert_from_seg: str | None = None,
    sa_insert_from_seg: str | None = None,
    cblum_from_seg: str | None = None,
    sa_cblum_from_seg: str | None = None,
    threads: int | None = None,
) -> MriCaLabelParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volumes: Input MRI volumes.
        transform_file: Transform file for the registration.
        gca_file: GCA file for the atlas.
        output_volume: Output labeled volume.
        cross_sequence: Label a volume acquired with sequence different than\
            atlas.
        no_gibbs: Disable gibbs priors.
        wm_segmentation: Use wm segmentation.
        conform: Interpolate volume to be isotropic 1mm^3.
        topo_dist_thresh: Ventricle segments distance threshold.
        topo_volume_thresh1: First ventricle segments volume threshold.
        topo_volume_thresh2: Second ventricle segments volume threshold.
        norm_pd: Normalize PD image to GCA means.
        thin_temporal_lobe: Use file to label thin temporal lobe.
        debug_voxel: Debug voxel coordinates.
        debug_node: Debug node coordinates.
        debug_label: Debug label.
        tr: Set TR in msec.
        te: Set TE in msec.
        alpha: Set alpha in radians.
        example: Use T1 and segmentation as example.
        pthresh: P threshold for adaptive renormalization.
        niter: Number of iterations for max likelihood.
        write_probs: Write label probabilities to filename.
        novar: Do not use variance in classification.
        regularize: Regularize variance to be sigma+nC(noise).
        nohippo: Do not auto-edit hippocampus.
        fixed_white_matter: Use fixed white matter segmentation.
        mri: Write most likely MR volume to file.
        histogram_equalization: Use histogram equalization from volume.
        renorm: Renormalize using predicted intensity values.
        flash: Use FLASH forward model to predict intensity values.
        flash_params: Use FLASH forward model and tissue params to predict.
        renormalize: Renormalize class means iter times after initial label\
            with window of wsize.
        set_input_volume: Set input volume.
        histogram_normalize: Use GCA to histogram normalize input image.
        mean_filter: Mean filter n time to conditional densities.
        write_snapshots: Write snapshots of gibbs process every n times to\
            filename.
        mask_final_labeling: Use mri_vol to mask final labeling.
        expand: Expand.
        max_iterations: Set max iterations.
        filter_labeled_volume: Filter labeled volume with threshold t.
        longitudinal_processing: Longitudinal processing with registrations.
        relabel_unlikely: Reclassify unlikely voxels.
        disables_wmsa: Disables WMSA labels.
        fix_ventricle: Fix underlabeled ventricle.
        insert_wm_bet_putctx: Insert WM between putamen and cortex.
        sa_insert_wm_bet_putctx: Stand-alone operation to insert WM between\
            putamen and cortex.
        insert_from_seg: Insert given indices from segmentation volume.
        sa_insert_from_seg: Stand-alone insert given indices from segmentation\
            volume.
        cblum_from_seg: Insert indices into segmentation volume with default\
            label set.
        sa_cblum_from_seg: Stand-alone operation to insert indices into\
            segmentation with default label set.
        threads: Set the number of open mp threads.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_ca_label",
        "input_volumes": input_volumes,
        "transform_file": transform_file,
        "gca_file": gca_file,
        "output_volume": output_volume,
        "cross_sequence": cross_sequence,
        "no_gibbs": no_gibbs,
        "conform": conform,
        "norm_pd": norm_pd,
        "novar": novar,
        "nohippo": nohippo,
        "flash": flash,
        "histogram_normalize": histogram_normalize,
        "disables_wmsa": disables_wmsa,
    }
    if wm_segmentation is not None:
        params["wm_segmentation"] = wm_segmentation
    if topo_dist_thresh is not None:
        params["topo_dist_thresh"] = topo_dist_thresh
    if topo_volume_thresh1 is not None:
        params["topo_volume_thresh1"] = topo_volume_thresh1
    if topo_volume_thresh2 is not None:
        params["topo_volume_thresh2"] = topo_volume_thresh2
    if thin_temporal_lobe is not None:
        params["thin_temporal_lobe"] = thin_temporal_lobe
    if debug_voxel is not None:
        params["debug_voxel"] = debug_voxel
    if debug_node is not None:
        params["debug_node"] = debug_node
    if debug_label is not None:
        params["debug_label"] = debug_label
    if tr is not None:
        params["tr"] = tr
    if te is not None:
        params["te"] = te
    if alpha is not None:
        params["alpha"] = alpha
    if example is not None:
        params["example"] = example
    if pthresh is not None:
        params["pthresh"] = pthresh
    if niter is not None:
        params["niter"] = niter
    if write_probs is not None:
        params["write_probs"] = write_probs
    if regularize is not None:
        params["regularize"] = regularize
    if fixed_white_matter is not None:
        params["fixed_white_matter"] = fixed_white_matter
    if mri is not None:
        params["mri"] = mri
    if histogram_equalization is not None:
        params["histogram_equalization"] = histogram_equalization
    if renorm is not None:
        params["renorm"] = renorm
    if flash_params is not None:
        params["flash_params"] = flash_params
    if renormalize is not None:
        params["renormalize"] = renormalize
    if set_input_volume is not None:
        params["set_input_volume"] = set_input_volume
    if mean_filter is not None:
        params["mean_filter"] = mean_filter
    if write_snapshots is not None:
        params["write_snapshots"] = write_snapshots
    if mask_final_labeling is not None:
        params["mask_final_labeling"] = mask_final_labeling
    if expand is not None:
        params["expand"] = expand
    if max_iterations is not None:
        params["max_iterations"] = max_iterations
    if filter_labeled_volume is not None:
        params["filter_labeled_volume"] = filter_labeled_volume
    if longitudinal_processing is not None:
        params["longitudinal_processing"] = longitudinal_processing
    if relabel_unlikely is not None:
        params["relabel_unlikely"] = relabel_unlikely
    if fix_ventricle is not None:
        params["fix_ventricle"] = fix_ventricle
    if insert_wm_bet_putctx is not None:
        params["insert_wm_bet_putctx"] = insert_wm_bet_putctx
    if sa_insert_wm_bet_putctx is not None:
        params["sa_insert_wm_bet_putctx"] = sa_insert_wm_bet_putctx
    if insert_from_seg is not None:
        params["insert_from_seg"] = insert_from_seg
    if sa_insert_from_seg is not None:
        params["sa_insert_from_seg"] = sa_insert_from_seg
    if cblum_from_seg is not None:
        params["cblum_from_seg"] = cblum_from_seg
    if sa_cblum_from_seg is not None:
        params["sa_cblum_from_seg"] = sa_cblum_from_seg
    if threads is not None:
        params["threads"] = threads
    return params


def mri_ca_label_cargs(
    params: MriCaLabelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_ca_label")
    cargs.extend([execution.input_file(f) for f in params.get("input_volumes", None)])
    cargs.append(execution.input_file(params.get("transform_file", None)))
    cargs.append(execution.input_file(params.get("gca_file", None)))
    cargs.append(params.get("output_volume", None))
    if params.get("cross_sequence", False):
        cargs.append("-cross-sequence")
    if params.get("no_gibbs", False):
        cargs.append("-nogibbs")
    if params.get("wm_segmentation", None) is not None:
        cargs.extend([
            "-wm",
            params.get("wm_segmentation", None)
        ])
    if params.get("conform", False):
        cargs.append("-conform")
    if params.get("topo_dist_thresh", None) is not None:
        cargs.extend([
            "-topo_dist_thresh",
            str(params.get("topo_dist_thresh", None))
        ])
    if params.get("topo_volume_thresh1", None) is not None:
        cargs.extend([
            "-topo_volume_thresh1",
            str(params.get("topo_volume_thresh1", None))
        ])
    if params.get("topo_volume_thresh2", None) is not None:
        cargs.extend([
            "-topo_volume_thresh2",
            str(params.get("topo_volume_thresh2", None))
        ])
    if params.get("norm_pd", False):
        cargs.append("-normpd")
    if params.get("thin_temporal_lobe", None) is not None:
        cargs.extend([
            "-tl",
            params.get("thin_temporal_lobe", None)
        ])
    if params.get("debug_voxel", None) is not None:
        cargs.extend([
            "-debug_voxel",
            *map(str, params.get("debug_voxel", None))
        ])
    if params.get("debug_node", None) is not None:
        cargs.extend([
            "-debug_node",
            *map(str, params.get("debug_node", None))
        ])
    if params.get("debug_label", None) is not None:
        cargs.extend([
            "-debug_label",
            str(params.get("debug_label", None))
        ])
    if params.get("tr", None) is not None:
        cargs.extend([
            "-tr",
            str(params.get("tr", None))
        ])
    if params.get("te", None) is not None:
        cargs.extend([
            "-te",
            str(params.get("te", None))
        ])
    if params.get("alpha", None) is not None:
        cargs.extend([
            "-alpha",
            str(params.get("alpha", None))
        ])
    if params.get("example", None) is not None:
        cargs.extend([
            "-example",
            *[execution.input_file(f) for f in params.get("example", None)]
        ])
    if params.get("pthresh", None) is not None:
        cargs.extend([
            "-pthresh",
            str(params.get("pthresh", None))
        ])
    if params.get("niter", None) is not None:
        cargs.extend([
            "-niter",
            str(params.get("niter", None))
        ])
    if params.get("write_probs", None) is not None:
        cargs.extend([
            "-write_probs",
            params.get("write_probs", None)
        ])
    if params.get("novar", False):
        cargs.append("-novar")
    if params.get("regularize", None) is not None:
        cargs.extend([
            "-regularize",
            str(params.get("regularize", None))
        ])
    if params.get("nohippo", False):
        cargs.append("-nohippo")
    if params.get("fixed_white_matter", None) is not None:
        cargs.extend([
            "-fwm",
            params.get("fixed_white_matter", None)
        ])
    if params.get("mri", None) is not None:
        cargs.extend([
            "-mri",
            execution.input_file(params.get("mri", None))
        ])
    if params.get("histogram_equalization", None) is not None:
        cargs.extend([
            "-heq",
            execution.input_file(params.get("histogram_equalization", None))
        ])
    if params.get("renorm", None) is not None:
        cargs.extend([
            "-renorm",
            execution.input_file(params.get("renorm", None))
        ])
    if params.get("flash", False):
        cargs.append("-flash")
    if params.get("flash_params", None) is not None:
        cargs.extend([
            "-flash_params",
            execution.input_file(params.get("flash_params", None))
        ])
    if params.get("renormalize", None) is not None:
        cargs.extend([
            "-renormalize",
            params.get("renormalize", None)
        ])
    if params.get("set_input_volume", None) is not None:
        cargs.extend([
            "-r",
            execution.input_file(params.get("set_input_volume", None))
        ])
    if params.get("histogram_normalize", False):
        cargs.append("-h")
    if params.get("mean_filter", None) is not None:
        cargs.extend([
            "-a",
            str(params.get("mean_filter", None))
        ])
    if params.get("write_snapshots", None) is not None:
        cargs.extend([
            "-w",
            params.get("write_snapshots", None)
        ])
    if params.get("mask_final_labeling", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask_final_labeling", None))
        ])
    if params.get("expand", None) is not None:
        cargs.extend([
            "-e",
            str(params.get("expand", None))
        ])
    if params.get("max_iterations", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("max_iterations", None))
        ])
    if params.get("filter_labeled_volume", None) is not None:
        cargs.extend([
            "-f",
            params.get("filter_labeled_volume", None)
        ])
    if params.get("longitudinal_processing", None) is not None:
        cargs.extend([
            "-L",
            params.get("longitudinal_processing", None)
        ])
    if params.get("relabel_unlikely", None) is not None:
        cargs.extend([
            "-RELABEL_UNLIKELY",
            params.get("relabel_unlikely", None)
        ])
    if params.get("disables_wmsa", False):
        cargs.append("-nowmsa")
    if params.get("fix_ventricle", None) is not None:
        cargs.extend([
            "-vent-fix",
            params.get("fix_ventricle", None)
        ])
    if params.get("insert_wm_bet_putctx", None) is not None:
        cargs.extend([
            "-insert-wm-bet-putctx",
            params.get("insert_wm_bet_putctx", None)
        ])
    if params.get("sa_insert_wm_bet_putctx", None) is not None:
        cargs.extend([
            "-sa-insert-wm-bet-putctx",
            params.get("sa_insert_wm_bet_putctx", None)
        ])
    if params.get("insert_from_seg", None) is not None:
        cargs.extend([
            "-insert-from-seg",
            params.get("insert_from_seg", None)
        ])
    if params.get("sa_insert_from_seg", None) is not None:
        cargs.extend([
            "-sa-insert-from-seg",
            params.get("sa_insert_from_seg", None)
        ])
    if params.get("cblum_from_seg", None) is not None:
        cargs.extend([
            "-cblum-from-seg",
            params.get("cblum_from_seg", None)
        ])
    if params.get("sa_cblum_from_seg", None) is not None:
        cargs.extend([
            "-sa-cblum-from-seg",
            params.get("sa_cblum_from_seg", None)
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "-threads",
            str(params.get("threads", None))
        ])
    return cargs


def mri_ca_label_outputs(
    params: MriCaLabelParameters,
    execution: Execution,
) -> MriCaLabelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCaLabelOutputs(
        root=execution.output_file("."),
        output_vol=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_ca_label_execute(
    params: MriCaLabelParameters,
    runner: Runner | None = None,
) -> MriCaLabelOutputs:
    """
    mri_ca_label
    
    MRI cortical annotation labeler using atlas prior (GCA).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCaLabelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CA_LABEL_METADATA)
    params = execution.params(params)
    cargs = mri_ca_label_cargs(params, execution)
    ret = mri_ca_label_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_ca_label(
    input_volumes: list[InputPathType],
    transform_file: InputPathType,
    gca_file: InputPathType,
    output_volume: str,
    cross_sequence: bool = False,
    no_gibbs: bool = False,
    wm_segmentation: str | None = None,
    conform: bool = False,
    topo_dist_thresh: float | None = None,
    topo_volume_thresh1: float | None = None,
    topo_volume_thresh2: float | None = None,
    norm_pd: bool = False,
    thin_temporal_lobe: str | None = None,
    debug_voxel: list[float] | None = None,
    debug_node: list[float] | None = None,
    debug_label: float | None = None,
    tr: float | None = None,
    te: float | None = None,
    alpha: float | None = None,
    example: list[InputPathType] | None = None,
    pthresh: float | None = None,
    niter: float | None = None,
    write_probs: str | None = None,
    novar: bool = False,
    regularize: float | None = None,
    nohippo: bool = False,
    fixed_white_matter: str | None = None,
    mri: InputPathType | None = None,
    histogram_equalization: InputPathType | None = None,
    renorm: InputPathType | None = None,
    flash: bool = False,
    flash_params: InputPathType | None = None,
    renormalize: str | None = None,
    set_input_volume: InputPathType | None = None,
    histogram_normalize: bool = False,
    mean_filter: float | None = None,
    write_snapshots: str | None = None,
    mask_final_labeling: InputPathType | None = None,
    expand: float | None = None,
    max_iterations: float | None = None,
    filter_labeled_volume: str | None = None,
    longitudinal_processing: str | None = None,
    relabel_unlikely: str | None = None,
    disables_wmsa: bool = False,
    fix_ventricle: str | None = None,
    insert_wm_bet_putctx: str | None = None,
    sa_insert_wm_bet_putctx: str | None = None,
    insert_from_seg: str | None = None,
    sa_insert_from_seg: str | None = None,
    cblum_from_seg: str | None = None,
    sa_cblum_from_seg: str | None = None,
    threads: int | None = None,
    runner: Runner | None = None,
) -> MriCaLabelOutputs:
    """
    mri_ca_label
    
    MRI cortical annotation labeler using atlas prior (GCA).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volumes: Input MRI volumes.
        transform_file: Transform file for the registration.
        gca_file: GCA file for the atlas.
        output_volume: Output labeled volume.
        cross_sequence: Label a volume acquired with sequence different than\
            atlas.
        no_gibbs: Disable gibbs priors.
        wm_segmentation: Use wm segmentation.
        conform: Interpolate volume to be isotropic 1mm^3.
        topo_dist_thresh: Ventricle segments distance threshold.
        topo_volume_thresh1: First ventricle segments volume threshold.
        topo_volume_thresh2: Second ventricle segments volume threshold.
        norm_pd: Normalize PD image to GCA means.
        thin_temporal_lobe: Use file to label thin temporal lobe.
        debug_voxel: Debug voxel coordinates.
        debug_node: Debug node coordinates.
        debug_label: Debug label.
        tr: Set TR in msec.
        te: Set TE in msec.
        alpha: Set alpha in radians.
        example: Use T1 and segmentation as example.
        pthresh: P threshold for adaptive renormalization.
        niter: Number of iterations for max likelihood.
        write_probs: Write label probabilities to filename.
        novar: Do not use variance in classification.
        regularize: Regularize variance to be sigma+nC(noise).
        nohippo: Do not auto-edit hippocampus.
        fixed_white_matter: Use fixed white matter segmentation.
        mri: Write most likely MR volume to file.
        histogram_equalization: Use histogram equalization from volume.
        renorm: Renormalize using predicted intensity values.
        flash: Use FLASH forward model to predict intensity values.
        flash_params: Use FLASH forward model and tissue params to predict.
        renormalize: Renormalize class means iter times after initial label\
            with window of wsize.
        set_input_volume: Set input volume.
        histogram_normalize: Use GCA to histogram normalize input image.
        mean_filter: Mean filter n time to conditional densities.
        write_snapshots: Write snapshots of gibbs process every n times to\
            filename.
        mask_final_labeling: Use mri_vol to mask final labeling.
        expand: Expand.
        max_iterations: Set max iterations.
        filter_labeled_volume: Filter labeled volume with threshold t.
        longitudinal_processing: Longitudinal processing with registrations.
        relabel_unlikely: Reclassify unlikely voxels.
        disables_wmsa: Disables WMSA labels.
        fix_ventricle: Fix underlabeled ventricle.
        insert_wm_bet_putctx: Insert WM between putamen and cortex.
        sa_insert_wm_bet_putctx: Stand-alone operation to insert WM between\
            putamen and cortex.
        insert_from_seg: Insert given indices from segmentation volume.
        sa_insert_from_seg: Stand-alone insert given indices from segmentation\
            volume.
        cblum_from_seg: Insert indices into segmentation volume with default\
            label set.
        sa_cblum_from_seg: Stand-alone operation to insert indices into\
            segmentation with default label set.
        threads: Set the number of open mp threads.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCaLabelOutputs`).
    """
    params = mri_ca_label_params(
        input_volumes=input_volumes,
        transform_file=transform_file,
        gca_file=gca_file,
        output_volume=output_volume,
        cross_sequence=cross_sequence,
        no_gibbs=no_gibbs,
        wm_segmentation=wm_segmentation,
        conform=conform,
        topo_dist_thresh=topo_dist_thresh,
        topo_volume_thresh1=topo_volume_thresh1,
        topo_volume_thresh2=topo_volume_thresh2,
        norm_pd=norm_pd,
        thin_temporal_lobe=thin_temporal_lobe,
        debug_voxel=debug_voxel,
        debug_node=debug_node,
        debug_label=debug_label,
        tr=tr,
        te=te,
        alpha=alpha,
        example=example,
        pthresh=pthresh,
        niter=niter,
        write_probs=write_probs,
        novar=novar,
        regularize=regularize,
        nohippo=nohippo,
        fixed_white_matter=fixed_white_matter,
        mri=mri,
        histogram_equalization=histogram_equalization,
        renorm=renorm,
        flash=flash,
        flash_params=flash_params,
        renormalize=renormalize,
        set_input_volume=set_input_volume,
        histogram_normalize=histogram_normalize,
        mean_filter=mean_filter,
        write_snapshots=write_snapshots,
        mask_final_labeling=mask_final_labeling,
        expand=expand,
        max_iterations=max_iterations,
        filter_labeled_volume=filter_labeled_volume,
        longitudinal_processing=longitudinal_processing,
        relabel_unlikely=relabel_unlikely,
        disables_wmsa=disables_wmsa,
        fix_ventricle=fix_ventricle,
        insert_wm_bet_putctx=insert_wm_bet_putctx,
        sa_insert_wm_bet_putctx=sa_insert_wm_bet_putctx,
        insert_from_seg=insert_from_seg,
        sa_insert_from_seg=sa_insert_from_seg,
        cblum_from_seg=cblum_from_seg,
        sa_cblum_from_seg=sa_cblum_from_seg,
        threads=threads,
    )
    return mri_ca_label_execute(params, runner)


__all__ = [
    "MRI_CA_LABEL_METADATA",
    "MriCaLabelOutputs",
    "mri_ca_label",
    "mri_ca_label_execute",
    "mri_ca_label_params",
]
