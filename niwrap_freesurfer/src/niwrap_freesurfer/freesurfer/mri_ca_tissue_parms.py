# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CA_TISSUE_PARMS_METADATA = Metadata(
    id="13f761fa3817d0b843fd3c3f10a0c8c9f3620ba8.boutiques",
    name="mri_ca_tissue_parms",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCaTissueParmsParameters = typing.TypedDict('MriCaTissueParmsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_ca_tissue_parms"]],
    "subjects": list[str],
    "output_file": str,
    "spacing_flag": bool,
    "gradient_flag": bool,
})
MriCaTissueParmsParametersTagged = typing.TypedDict('MriCaTissueParmsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_ca_tissue_parms"],
    "subjects": list[str],
    "output_file": str,
    "spacing_flag": bool,
    "gradient_flag": bool,
})


class MriCaTissueParmsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCaTissueParmsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """File containing the computed tissue parameters."""


def mri_ca_tissue_parms_params(
    subjects: list[str],
    output_file: str,
    spacing_flag: bool = False,
    gradient_flag: bool = False,
) -> MriCaTissueParmsParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects: List of subjects for processing.
        output_file: Output file for storing results.
        spacing_flag: Specify spacing of classifiers in canonical space.
        gradient_flag: Use intensity gradient as input to classifier.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_ca_tissue_parms",
        "subjects": subjects,
        "output_file": output_file,
        "spacing_flag": spacing_flag,
        "gradient_flag": gradient_flag,
    }
    return params


def mri_ca_tissue_parms_cargs(
    params: MriCaTissueParmsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_ca_tissue_parms")
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output_file", None))
    if params.get("spacing_flag", False):
        cargs.append("-spacing")
    if params.get("gradient_flag", False):
        cargs.append("-gradient")
    return cargs


def mri_ca_tissue_parms_outputs(
    params: MriCaTissueParmsParameters,
    execution: Execution,
) -> MriCaTissueParmsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCaTissueParmsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mri_ca_tissue_parms_execute(
    params: MriCaTissueParmsParameters,
    runner: Runner | None = None,
) -> MriCaTissueParmsOutputs:
    """
    mri_ca_tissue_parms
    
    Tool for computing tissue parameters in canonical space.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCaTissueParmsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CA_TISSUE_PARMS_METADATA)
    params = execution.params(params)
    cargs = mri_ca_tissue_parms_cargs(params, execution)
    ret = mri_ca_tissue_parms_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_ca_tissue_parms(
    subjects: list[str],
    output_file: str,
    spacing_flag: bool = False,
    gradient_flag: bool = False,
    runner: Runner | None = None,
) -> MriCaTissueParmsOutputs:
    """
    mri_ca_tissue_parms
    
    Tool for computing tissue parameters in canonical space.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: List of subjects for processing.
        output_file: Output file for storing results.
        spacing_flag: Specify spacing of classifiers in canonical space.
        gradient_flag: Use intensity gradient as input to classifier.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCaTissueParmsOutputs`).
    """
    params = mri_ca_tissue_parms_params(
        subjects=subjects,
        output_file=output_file,
        spacing_flag=spacing_flag,
        gradient_flag=gradient_flag,
    )
    return mri_ca_tissue_parms_execute(params, runner)


__all__ = [
    "MRI_CA_TISSUE_PARMS_METADATA",
    "MriCaTissueParmsOutputs",
    "mri_ca_tissue_parms",
    "mri_ca_tissue_parms_execute",
    "mri_ca_tissue_parms_params",
]
