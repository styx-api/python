# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_COMPUTE_VOLUME_INTENSITIES_METADATA = Metadata(
    id="223a282c55d0dc7fb7079cb3ae30f18a27d0bf1d.boutiques",
    name="mri_compute_volume_intensities",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriComputeVolumeIntensitiesParameters = typing.TypedDict('MriComputeVolumeIntensitiesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_compute_volume_intensities"]],
    "input_intensity": InputPathType,
    "volume_fraction_stem": str,
    "output_volume": str,
})
MriComputeVolumeIntensitiesParametersTagged = typing.TypedDict('MriComputeVolumeIntensitiesParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_compute_volume_intensities"],
    "input_intensity": InputPathType,
    "volume_fraction_stem": str,
    "output_volume": str,
})


class MriComputeVolumeIntensitiesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriComputeVolumeIntensitiesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """Computed output volume file"""


def mri_compute_volume_intensities_params(
    input_intensity: InputPathType,
    volume_fraction_stem: str,
    output_volume: str,
) -> MriComputeVolumeIntensitiesParametersTagged:
    """
    Build parameters.
    
    Args:
        input_intensity: Input intensity volume.
        volume_fraction_stem: Volume fraction stem.
        output_volume: Output volume file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_compute_volume_intensities",
        "input_intensity": input_intensity,
        "volume_fraction_stem": volume_fraction_stem,
        "output_volume": output_volume,
    }
    return params


def mri_compute_volume_intensities_cargs(
    params: MriComputeVolumeIntensitiesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_compute_volume_intensities")
    cargs.append(execution.input_file(params.get("input_intensity", None)))
    cargs.append(params.get("volume_fraction_stem", None))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_compute_volume_intensities_outputs(
    params: MriComputeVolumeIntensitiesParameters,
    execution: Execution,
) -> MriComputeVolumeIntensitiesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriComputeVolumeIntensitiesOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_compute_volume_intensities_execute(
    params: MriComputeVolumeIntensitiesParameters,
    runner: Runner | None = None,
) -> MriComputeVolumeIntensitiesOutputs:
    """
    mri_compute_volume_intensities
    
    A tool to compute volume intensities for a given input intensity volume and
    volume fraction stem.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriComputeVolumeIntensitiesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_COMPUTE_VOLUME_INTENSITIES_METADATA)
    params = execution.params(params)
    cargs = mri_compute_volume_intensities_cargs(params, execution)
    ret = mri_compute_volume_intensities_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_compute_volume_intensities(
    input_intensity: InputPathType,
    volume_fraction_stem: str,
    output_volume: str,
    runner: Runner | None = None,
) -> MriComputeVolumeIntensitiesOutputs:
    """
    mri_compute_volume_intensities
    
    A tool to compute volume intensities for a given input intensity volume and
    volume fraction stem.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_intensity: Input intensity volume.
        volume_fraction_stem: Volume fraction stem.
        output_volume: Output volume file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriComputeVolumeIntensitiesOutputs`).
    """
    params = mri_compute_volume_intensities_params(
        input_intensity=input_intensity,
        volume_fraction_stem=volume_fraction_stem,
        output_volume=output_volume,
    )
    return mri_compute_volume_intensities_execute(params, runner)


__all__ = [
    "MRI_COMPUTE_VOLUME_INTENSITIES_METADATA",
    "MriComputeVolumeIntensitiesOutputs",
    "mri_compute_volume_intensities",
    "mri_compute_volume_intensities_execute",
    "mri_compute_volume_intensities_params",
]
