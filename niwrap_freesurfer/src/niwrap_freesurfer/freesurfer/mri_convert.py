# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CONVERT_METADATA = Metadata(
    id="9406949087be72683c99241b992dfb378a7af3d7.boutiques",
    name="mri_convert",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriConvertParameters = typing.TypedDict('MriConvertParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_convert"]],
    "inp_volume": InputPathType,
    "out_volume": str,
    "read_only": bool,
    "no_write": bool,
    "in_info": bool,
    "out_info": bool,
    "in_stats": bool,
    "out_stats": bool,
    "upsample": typing.NotRequired[float | None],
    "force_ras_good": bool,
    "apply_transform": typing.NotRequired[InputPathType | None],
    "apply_inverse_transform": typing.NotRequired[InputPathType | None],
    "in_type": typing.NotRequired[str | None],
    "out_type": typing.NotRequired[str | None],
    "in_orientation": typing.NotRequired[str | None],
    "out_orientation": typing.NotRequired[str | None],
    "scale_factor": typing.NotRequired[float | None],
    "bfile_little_endian": bool,
    "sphinx": bool,
})
MriConvertParametersTagged = typing.TypedDict('MriConvertParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_convert"],
    "inp_volume": InputPathType,
    "out_volume": str,
    "read_only": bool,
    "no_write": bool,
    "in_info": bool,
    "out_info": bool,
    "in_stats": bool,
    "out_stats": bool,
    "upsample": typing.NotRequired[float | None],
    "force_ras_good": bool,
    "apply_transform": typing.NotRequired[InputPathType | None],
    "apply_inverse_transform": typing.NotRequired[InputPathType | None],
    "in_type": typing.NotRequired[str | None],
    "out_type": typing.NotRequired[str | None],
    "in_orientation": typing.NotRequired[str | None],
    "out_orientation": typing.NotRequired[str | None],
    "scale_factor": typing.NotRequired[float | None],
    "bfile_little_endian": bool,
    "sphinx": bool,
})


class MriConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriConvertParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    converted_volume: OutputPathType
    """Converted volume output file"""


def mri_convert_params(
    inp_volume: InputPathType,
    out_volume: str,
    read_only: bool = False,
    no_write: bool = False,
    in_info: bool = False,
    out_info: bool = False,
    in_stats: bool = False,
    out_stats: bool = False,
    upsample: float | None = None,
    force_ras_good: bool = False,
    apply_transform: InputPathType | None = None,
    apply_inverse_transform: InputPathType | None = None,
    in_type: str | None = None,
    out_type: str | None = None,
    in_orientation: str | None = None,
    out_orientation: str | None = None,
    scale_factor: float | None = None,
    bfile_little_endian: bool = False,
    sphinx: bool = False,
) -> MriConvertParametersTagged:
    """
    Build parameters.
    
    Args:
        inp_volume: The input volume file.
        out_volume: The output volume file.
        read_only: Open in read-only mode.
        no_write: Do not write output.
        in_info: Print input volume information.
        out_info: Print output volume information.
        in_stats: Print statistics on input volume.
        out_stats: Print statistics on output volume.
        upsample: Reduce voxel size by a factor in all dimensions.
        force_ras_good: Use default when orientation info absent.
        apply_transform: Apply transform given by xfm or m3z file.
        apply_inverse_transform: Apply inverse of transform given by xfm or m3z\
            file.
        in_type: Specify input file type.
        out_type: Specify output file type.
        in_orientation: Specify input orientation.
        out_orientation: Specify output orientation.
        scale_factor: Input intensity scale factor.
        bfile_little_endian: Write out bshort/bfloat files in little endian.
        sphinx: Reorient to sphinx position.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_convert",
        "inp_volume": inp_volume,
        "out_volume": out_volume,
        "read_only": read_only,
        "no_write": no_write,
        "in_info": in_info,
        "out_info": out_info,
        "in_stats": in_stats,
        "out_stats": out_stats,
        "force_ras_good": force_ras_good,
        "bfile_little_endian": bfile_little_endian,
        "sphinx": sphinx,
    }
    if upsample is not None:
        params["upsample"] = upsample
    if apply_transform is not None:
        params["apply_transform"] = apply_transform
    if apply_inverse_transform is not None:
        params["apply_inverse_transform"] = apply_inverse_transform
    if in_type is not None:
        params["in_type"] = in_type
    if out_type is not None:
        params["out_type"] = out_type
    if in_orientation is not None:
        params["in_orientation"] = in_orientation
    if out_orientation is not None:
        params["out_orientation"] = out_orientation
    if scale_factor is not None:
        params["scale_factor"] = scale_factor
    return params


def mri_convert_cargs(
    params: MriConvertParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_convert")
    cargs.append(execution.input_file(params.get("inp_volume", None)))
    cargs.append(params.get("out_volume", None))
    if params.get("read_only", False):
        cargs.append("-ro")
    if params.get("no_write", False):
        cargs.append("-nw")
    if params.get("in_info", False):
        cargs.append("-ii")
    if params.get("out_info", False):
        cargs.append("-oi")
    if params.get("in_stats", False):
        cargs.append("-is")
    if params.get("out_stats", False):
        cargs.append("-os")
    if params.get("upsample", None) is not None:
        cargs.extend([
            "--upsample",
            str(params.get("upsample", None))
        ])
    if params.get("force_ras_good", False):
        cargs.append("--force_ras_good")
    if params.get("apply_transform", None) is not None:
        cargs.extend([
            "--apply_transform",
            execution.input_file(params.get("apply_transform", None))
        ])
    if params.get("apply_inverse_transform", None) is not None:
        cargs.extend([
            "--apply_inverse_transform",
            execution.input_file(params.get("apply_inverse_transform", None))
        ])
    if params.get("in_type", None) is not None:
        cargs.extend([
            "--in_type",
            params.get("in_type", None)
        ])
    if params.get("out_type", None) is not None:
        cargs.extend([
            "--out_type",
            params.get("out_type", None)
        ])
    if params.get("in_orientation", None) is not None:
        cargs.extend([
            "--in_orientation",
            params.get("in_orientation", None)
        ])
    if params.get("out_orientation", None) is not None:
        cargs.extend([
            "--out_orientation",
            params.get("out_orientation", None)
        ])
    if params.get("scale_factor", None) is not None:
        cargs.extend([
            "--scale",
            str(params.get("scale_factor", None))
        ])
    if params.get("bfile_little_endian", False):
        cargs.append("--bfile-little-endian")
    if params.get("sphinx", False):
        cargs.append("--sphinx")
    return cargs


def mri_convert_outputs(
    params: MriConvertParameters,
    execution: Execution,
) -> MriConvertOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriConvertOutputs(
        root=execution.output_file("."),
        converted_volume=execution.output_file(params.get("out_volume", None)),
    )
    return ret


def mri_convert_execute(
    params: MriConvertParameters,
    runner: Runner | None = None,
) -> MriConvertOutputs:
    """
    mri_convert
    
    A general purpose utility for converting between different file formats
    supported by FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriConvertOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CONVERT_METADATA)
    params = execution.params(params)
    cargs = mri_convert_cargs(params, execution)
    ret = mri_convert_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_convert(
    inp_volume: InputPathType,
    out_volume: str,
    read_only: bool = False,
    no_write: bool = False,
    in_info: bool = False,
    out_info: bool = False,
    in_stats: bool = False,
    out_stats: bool = False,
    upsample: float | None = None,
    force_ras_good: bool = False,
    apply_transform: InputPathType | None = None,
    apply_inverse_transform: InputPathType | None = None,
    in_type: str | None = None,
    out_type: str | None = None,
    in_orientation: str | None = None,
    out_orientation: str | None = None,
    scale_factor: float | None = None,
    bfile_little_endian: bool = False,
    sphinx: bool = False,
    runner: Runner | None = None,
) -> MriConvertOutputs:
    """
    mri_convert
    
    A general purpose utility for converting between different file formats
    supported by FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        inp_volume: The input volume file.
        out_volume: The output volume file.
        read_only: Open in read-only mode.
        no_write: Do not write output.
        in_info: Print input volume information.
        out_info: Print output volume information.
        in_stats: Print statistics on input volume.
        out_stats: Print statistics on output volume.
        upsample: Reduce voxel size by a factor in all dimensions.
        force_ras_good: Use default when orientation info absent.
        apply_transform: Apply transform given by xfm or m3z file.
        apply_inverse_transform: Apply inverse of transform given by xfm or m3z\
            file.
        in_type: Specify input file type.
        out_type: Specify output file type.
        in_orientation: Specify input orientation.
        out_orientation: Specify output orientation.
        scale_factor: Input intensity scale factor.
        bfile_little_endian: Write out bshort/bfloat files in little endian.
        sphinx: Reorient to sphinx position.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriConvertOutputs`).
    """
    params = mri_convert_params(
        inp_volume=inp_volume,
        out_volume=out_volume,
        read_only=read_only,
        no_write=no_write,
        in_info=in_info,
        out_info=out_info,
        in_stats=in_stats,
        out_stats=out_stats,
        upsample=upsample,
        force_ras_good=force_ras_good,
        apply_transform=apply_transform,
        apply_inverse_transform=apply_inverse_transform,
        in_type=in_type,
        out_type=out_type,
        in_orientation=in_orientation,
        out_orientation=out_orientation,
        scale_factor=scale_factor,
        bfile_little_endian=bfile_little_endian,
        sphinx=sphinx,
    )
    return mri_convert_execute(params, runner)


__all__ = [
    "MRI_CONVERT_METADATA",
    "MriConvertOutputs",
    "mri_convert",
    "mri_convert_execute",
    "mri_convert_params",
]
