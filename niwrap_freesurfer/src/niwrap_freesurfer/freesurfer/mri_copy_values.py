# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_COPY_VALUES_METADATA = Metadata(
    id="ca01b98dca19e8345094a99ee54bffa84703d3e7.boutiques",
    name="mri_copy_values",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCopyValuesParameters = typing.TypedDict('MriCopyValuesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_copy_values"]],
    "source_volume": InputPathType,
    "target_volume": InputPathType,
    "output_volume": str,
})
MriCopyValuesParametersTagged = typing.TypedDict('MriCopyValuesParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_copy_values"],
    "source_volume": InputPathType,
    "target_volume": InputPathType,
    "output_volume": str,
})


class MriCopyValuesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCopyValuesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume with copied values from source."""


def mri_copy_values_params(
    source_volume: InputPathType,
    target_volume: InputPathType,
    output_volume: str,
) -> MriCopyValuesParametersTagged:
    """
    Build parameters.
    
    Args:
        source_volume: Source volume from which values are copied.
        target_volume: Target volume to which values are copied.
        output_volume: Output volume where the result will be stored.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_copy_values",
        "source_volume": source_volume,
        "target_volume": target_volume,
        "output_volume": output_volume,
    }
    return params


def mri_copy_values_cargs(
    params: MriCopyValuesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_copy_values")
    cargs.append(execution.input_file(params.get("source_volume", None)))
    cargs.append(execution.input_file(params.get("target_volume", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_copy_values_outputs(
    params: MriCopyValuesParameters,
    execution: Execution,
) -> MriCopyValuesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCopyValuesOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_copy_values_execute(
    params: MriCopyValuesParameters,
    runner: Runner | None = None,
) -> MriCopyValuesOutputs:
    """
    mri_copy_values
    
    No description.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCopyValuesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_COPY_VALUES_METADATA)
    params = execution.params(params)
    cargs = mri_copy_values_cargs(params, execution)
    ret = mri_copy_values_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_copy_values(
    source_volume: InputPathType,
    target_volume: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MriCopyValuesOutputs:
    """
    mri_copy_values
    
    No description.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source_volume: Source volume from which values are copied.
        target_volume: Target volume to which values are copied.
        output_volume: Output volume where the result will be stored.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCopyValuesOutputs`).
    """
    params = mri_copy_values_params(
        source_volume=source_volume,
        target_volume=target_volume,
        output_volume=output_volume,
    )
    return mri_copy_values_execute(params, runner)


__all__ = [
    "MRI_COPY_VALUES_METADATA",
    "MriCopyValuesOutputs",
    "mri_copy_values",
    "mri_copy_values_execute",
    "mri_copy_values_params",
]
