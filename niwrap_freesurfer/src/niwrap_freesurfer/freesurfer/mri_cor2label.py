# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_COR2LABEL_METADATA = Metadata(
    id="528fd5cc76f6e4c7b75d95c11139c16bb6c02c4d.boutiques",
    name="mri_cor2label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCor2labelParameters = typing.TypedDict('MriCor2labelParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_cor2label"]],
    "input_file": InputPathType,
    "label_id": float,
    "label_file": str,
    "threshold": typing.NotRequired[float | None],
    "volume_file": typing.NotRequired[str | None],
    "surface_overlay": typing.NotRequired[list[str] | None],
    "surface_path": typing.NotRequired[str | None],
    "optimize": typing.NotRequired[list[str] | None],
    "remove_holes_islands": bool,
    "dilate": typing.NotRequired[float | None],
    "erode": typing.NotRequired[float | None],
    "help": bool,
})
MriCor2labelParametersTagged = typing.TypedDict('MriCor2labelParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_cor2label"],
    "input_file": InputPathType,
    "label_id": float,
    "label_file": str,
    "threshold": typing.NotRequired[float | None],
    "volume_file": typing.NotRequired[str | None],
    "surface_overlay": typing.NotRequired[list[str] | None],
    "surface_path": typing.NotRequired[str | None],
    "optimize": typing.NotRequired[list[str] | None],
    "remove_holes_islands": bool,
    "dilate": typing.NotRequired[float | None],
    "erode": typing.NotRequired[float | None],
    "help": bool,
})


class MriCor2labelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCor2labelParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_label_file: OutputPathType
    """Generated label file."""
    output_volume_file: OutputPathType | None
    """Written volume label if specified."""


def mri_cor2label_params(
    input_file: InputPathType,
    label_id: float,
    label_file: str,
    threshold: float | None = None,
    volume_file: str | None = None,
    surface_overlay: list[str] | None = None,
    surface_path: str | None = None,
    optimize: list[str] | None = None,
    remove_holes_islands: bool = False,
    dilate: float | None = None,
    erode: float | None = None,
    help_: bool = False,
) -> MriCor2labelParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input volume or surface overlay file.
        label_id: Value to match in the input data.
        label_file: Name of the output label file.
        threshold: Threshold the input to make label, e.g., input values must\
            be greater than the threshold.
        volume_file: Write the label volume to a file.
        surface_overlay: Interpret input as a surface overlay, specifying\
            subject, hemisphere, and surface.
        surface_path: Specify surface path rather than subject/hemisphere.
        optimize: Treat input as a probability map and optimize thresholding.
        remove_holes_islands: Remove holes in label and islands (only valid\
            with --surf).
        dilate: Dilate label with specified number of dilations (only valid\
            with --surf).
        erode: Erode label with specified number of erosions (only valid with\
            --surf).
        help_: Display help information.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_cor2label",
        "input_file": input_file,
        "label_id": label_id,
        "label_file": label_file,
        "remove_holes_islands": remove_holes_islands,
        "help": help_,
    }
    if threshold is not None:
        params["threshold"] = threshold
    if volume_file is not None:
        params["volume_file"] = volume_file
    if surface_overlay is not None:
        params["surface_overlay"] = surface_overlay
    if surface_path is not None:
        params["surface_path"] = surface_path
    if optimize is not None:
        params["optimize"] = optimize
    if dilate is not None:
        params["dilate"] = dilate
    if erode is not None:
        params["erode"] = erode
    return params


def mri_cor2label_cargs(
    params: MriCor2labelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_cor2label")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-id",
        str(params.get("label_id", None))
    ])
    cargs.extend([
        "-l",
        params.get("label_file", None)
    ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "--thresh",
            str(params.get("threshold", None))
        ])
    if params.get("volume_file", None) is not None:
        cargs.extend([
            "--v",
            params.get("volume_file", None)
        ])
    if params.get("surface_overlay", None) is not None:
        cargs.extend([
            "--surf",
            *params.get("surface_overlay", None)
        ])
    if params.get("surface_path", None) is not None:
        cargs.extend([
            "--surf-path",
            params.get("surface_path", None)
        ])
    if params.get("optimize", None) is not None:
        cargs.extend([
            "--opt",
            *params.get("optimize", None)
        ])
    if params.get("remove_holes_islands", False):
        cargs.append("--remove-holes-islands")
    if params.get("dilate", None) is not None:
        cargs.extend([
            "--dilate",
            str(params.get("dilate", None))
        ])
    if params.get("erode", None) is not None:
        cargs.extend([
            "--erode",
            str(params.get("erode", None))
        ])
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def mri_cor2label_outputs(
    params: MriCor2labelParameters,
    execution: Execution,
) -> MriCor2labelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCor2labelOutputs(
        root=execution.output_file("."),
        output_label_file=execution.output_file(params.get("label_file", None)),
        output_volume_file=execution.output_file(params.get("volume_file", None)) if (params.get("volume_file") is not None) else None,
    )
    return ret


def mri_cor2label_execute(
    params: MriCor2labelParameters,
    runner: Runner | None = None,
) -> MriCor2labelOutputs:
    """
    mri_cor2label
    
    Converts values in a volume or surface overlay to a label. Designed to
    convert parcellation volumes stored in mri format.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCor2labelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_COR2LABEL_METADATA)
    params = execution.params(params)
    cargs = mri_cor2label_cargs(params, execution)
    ret = mri_cor2label_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_cor2label(
    input_file: InputPathType,
    label_id: float,
    label_file: str,
    threshold: float | None = None,
    volume_file: str | None = None,
    surface_overlay: list[str] | None = None,
    surface_path: str | None = None,
    optimize: list[str] | None = None,
    remove_holes_islands: bool = False,
    dilate: float | None = None,
    erode: float | None = None,
    help_: bool = False,
    runner: Runner | None = None,
) -> MriCor2labelOutputs:
    """
    mri_cor2label
    
    Converts values in a volume or surface overlay to a label. Designed to
    convert parcellation volumes stored in mri format.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input volume or surface overlay file.
        label_id: Value to match in the input data.
        label_file: Name of the output label file.
        threshold: Threshold the input to make label, e.g., input values must\
            be greater than the threshold.
        volume_file: Write the label volume to a file.
        surface_overlay: Interpret input as a surface overlay, specifying\
            subject, hemisphere, and surface.
        surface_path: Specify surface path rather than subject/hemisphere.
        optimize: Treat input as a probability map and optimize thresholding.
        remove_holes_islands: Remove holes in label and islands (only valid\
            with --surf).
        dilate: Dilate label with specified number of dilations (only valid\
            with --surf).
        erode: Erode label with specified number of erosions (only valid with\
            --surf).
        help_: Display help information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCor2labelOutputs`).
    """
    params = mri_cor2label_params(
        input_file=input_file,
        label_id=label_id,
        label_file=label_file,
        threshold=threshold,
        volume_file=volume_file,
        surface_overlay=surface_overlay,
        surface_path=surface_path,
        optimize=optimize,
        remove_holes_islands=remove_holes_islands,
        dilate=dilate,
        erode=erode,
        help_=help_,
    )
    return mri_cor2label_execute(params, runner)


__all__ = [
    "MRI_COR2LABEL_METADATA",
    "MriCor2labelOutputs",
    "mri_cor2label",
    "mri_cor2label_execute",
    "mri_cor2label_params",
]
