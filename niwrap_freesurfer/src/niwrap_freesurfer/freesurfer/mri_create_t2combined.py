# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CREATE_T2COMBINED_METADATA = Metadata(
    id="945b3bcb0237a042ad16be5a380e962f8c04a08e.boutiques",
    name="mri_create_t2combined",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCreateT2combinedParameters = typing.TypedDict('MriCreateT2combinedParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_create_t2combined"]],
    "subjid": str,
    "t1wb": InputPathType,
    "t2upper": InputPathType,
    "t2middle": typing.NotRequired[InputPathType | None],
    "t2lower": InputPathType,
    "t2combined": str,
    "show": bool,
})
MriCreateT2combinedParametersTagged = typing.TypedDict('MriCreateT2combinedParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_create_t2combined"],
    "subjid": str,
    "t1wb": InputPathType,
    "t2upper": InputPathType,
    "t2middle": typing.NotRequired[InputPathType | None],
    "t2lower": InputPathType,
    "t2combined": str,
    "show": bool,
})


class MriCreateT2combinedOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCreateT2combinedParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    logfile: OutputPathType
    """Log file generated by the command"""
    t2combined_output: OutputPathType
    """The T2* 7T combined partial-brain halves output file"""


def mri_create_t2combined_params(
    subjid: str,
    t1wb: InputPathType,
    t2upper: InputPathType,
    t2lower: InputPathType,
    t2combined: str,
    t2middle: InputPathType | None = None,
    show: bool = False,
) -> MriCreateT2combinedParametersTagged:
    """
    Build parameters.
    
    Args:
        subjid: Subject ID of the FreeSurfer anatomical.
        t1wb: T1 7T whole-brain image.
        t2upper: T2* 7T partial-brain upper half image.
        t2lower: T2* 7T partial-brain lower half image.
        t2combined: Output file for T2* 7T combined partial-brain halves.
        t2middle: T2* 7T partial-brain middle half image, or enter 'none'.
        show: If the last argument is 'show', then the commands that will run\
            are shown but not executed.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_create_t2combined",
        "subjid": subjid,
        "t1wb": t1wb,
        "t2upper": t2upper,
        "t2lower": t2lower,
        "t2combined": t2combined,
        "show": show,
    }
    if t2middle is not None:
        params["t2middle"] = t2middle
    return params


def mri_create_t2combined_cargs(
    params: MriCreateT2combinedParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_create_t2combined")
    cargs.append(params.get("subjid", None))
    cargs.append(execution.input_file(params.get("t1wb", None)))
    cargs.append(execution.input_file(params.get("t2upper", None)))
    if params.get("t2middle", None) is not None:
        cargs.append(execution.input_file(params.get("t2middle", None)))
    cargs.append(execution.input_file(params.get("t2lower", None)))
    cargs.append(params.get("t2combined", None))
    if params.get("show", False):
        cargs.append("show")
    return cargs


def mri_create_t2combined_outputs(
    params: MriCreateT2combinedParameters,
    execution: Execution,
) -> MriCreateT2combinedOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCreateT2combinedOutputs(
        root=execution.output_file("."),
        logfile=execution.output_file("/root/mri_create_t2combined.log"),
        t2combined_output=execution.output_file(params.get("t2combined", None)),
    )
    return ret


def mri_create_t2combined_execute(
    params: MriCreateT2combinedParameters,
    runner: Runner | None = None,
) -> MriCreateT2combinedOutputs:
    """
    mri_create_t2combined
    
    Utility to combine two or three T2* 7T partial-brain volumes into one
    volume, retaining resolution and registered to the MPRAGE anatomical.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCreateT2combinedOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CREATE_T2COMBINED_METADATA)
    params = execution.params(params)
    cargs = mri_create_t2combined_cargs(params, execution)
    ret = mri_create_t2combined_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_create_t2combined(
    subjid: str,
    t1wb: InputPathType,
    t2upper: InputPathType,
    t2lower: InputPathType,
    t2combined: str,
    t2middle: InputPathType | None = None,
    show: bool = False,
    runner: Runner | None = None,
) -> MriCreateT2combinedOutputs:
    """
    mri_create_t2combined
    
    Utility to combine two or three T2* 7T partial-brain volumes into one
    volume, retaining resolution and registered to the MPRAGE anatomical.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjid: Subject ID of the FreeSurfer anatomical.
        t1wb: T1 7T whole-brain image.
        t2upper: T2* 7T partial-brain upper half image.
        t2lower: T2* 7T partial-brain lower half image.
        t2combined: Output file for T2* 7T combined partial-brain halves.
        t2middle: T2* 7T partial-brain middle half image, or enter 'none'.
        show: If the last argument is 'show', then the commands that will run\
            are shown but not executed.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCreateT2combinedOutputs`).
    """
    params = mri_create_t2combined_params(
        subjid=subjid,
        t1wb=t1wb,
        t2upper=t2upper,
        t2middle=t2middle,
        t2lower=t2lower,
        t2combined=t2combined,
        show=show,
    )
    return mri_create_t2combined_execute(params, runner)


__all__ = [
    "MRI_CREATE_T2COMBINED_METADATA",
    "MriCreateT2combinedOutputs",
    "mri_create_t2combined",
    "mri_create_t2combined_execute",
    "mri_create_t2combined_params",
]
