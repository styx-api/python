# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_CVS_DATA_COPY_METADATA = Metadata(
    id="d8deb3fb7cffe550ef0b8e7af287a572a9fad494.boutiques",
    name="mri_cvs_data_copy",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriCvsDataCopyParameters = typing.TypedDict('MriCvsDataCopyParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_cvs_data_copy"]],
    "subjid": str,
    "olddir": str,
    "newdir": str,
    "version": bool,
    "help": bool,
})
MriCvsDataCopyParametersTagged = typing.TypedDict('MriCvsDataCopyParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_cvs_data_copy"],
    "subjid": str,
    "olddir": str,
    "newdir": str,
    "version": bool,
    "help": bool,
})


class MriCvsDataCopyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriCvsDataCopyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_cvs_data_copy_params(
    subjid: str,
    olddir: str,
    newdir: str,
    version: bool = False,
    help_: bool = False,
) -> MriCvsDataCopyParametersTagged:
    """
    Build parameters.
    
    Args:
        subjid: Subject ID of the subject to be moved/registered.
        olddir: Directory where data (FS reconned output files for the subject)\
            is currently located. Use full path.
        newdir: Directory where data (FS reconned output files for the subject)\
            should be moved to. Use full path.
        version: Print version and exit.
        help_: Print help and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_cvs_data_copy",
        "subjid": subjid,
        "olddir": olddir,
        "newdir": newdir,
        "version": version,
        "help": help_,
    }
    return params


def mri_cvs_data_copy_cargs(
    params: MriCvsDataCopyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_cvs_data_copy")
    cargs.extend([
        "--subjid",
        params.get("subjid", None)
    ])
    cargs.extend([
        "--olddir",
        params.get("olddir", None)
    ])
    cargs.extend([
        "--newdir",
        params.get("newdir", None)
    ])
    if params.get("version", False):
        cargs.append("--version")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def mri_cvs_data_copy_outputs(
    params: MriCvsDataCopyParameters,
    execution: Execution,
) -> MriCvsDataCopyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriCvsDataCopyOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_cvs_data_copy_execute(
    params: MriCvsDataCopyParameters,
    runner: Runner | None = None,
) -> MriCvsDataCopyOutputs:
    """
    mri_cvs_data_copy
    
    Packs and copies files that are required for mri_cvs_register.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCvsDataCopyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_CVS_DATA_COPY_METADATA)
    params = execution.params(params)
    cargs = mri_cvs_data_copy_cargs(params, execution)
    ret = mri_cvs_data_copy_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_cvs_data_copy(
    subjid: str,
    olddir: str,
    newdir: str,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> MriCvsDataCopyOutputs:
    """
    mri_cvs_data_copy
    
    Packs and copies files that are required for mri_cvs_register.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjid: Subject ID of the subject to be moved/registered.
        olddir: Directory where data (FS reconned output files for the subject)\
            is currently located. Use full path.
        newdir: Directory where data (FS reconned output files for the subject)\
            should be moved to. Use full path.
        version: Print version and exit.
        help_: Print help and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriCvsDataCopyOutputs`).
    """
    params = mri_cvs_data_copy_params(
        subjid=subjid,
        olddir=olddir,
        newdir=newdir,
        version=version,
        help_=help_,
    )
    return mri_cvs_data_copy_execute(params, runner)


__all__ = [
    "MRI_CVS_DATA_COPY_METADATA",
    "MriCvsDataCopyOutputs",
    "mri_cvs_data_copy",
    "mri_cvs_data_copy_execute",
    "mri_cvs_data_copy_params",
]
