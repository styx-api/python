# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_DEFACER_METADATA = Metadata(
    id="9a76bd7cdcb71bdf4008e0ef5d9f6b52b2c77e7e.boutiques",
    name="mri_defacer",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriDefacerParameters = typing.TypedDict('MriDefacerParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_defacer"]],
    "input_volume": InputPathType,
    "headmask": InputPathType,
    "tempsurf": InputPathType,
    "templabel": typing.NotRequired[list[InputPathType] | None],
    "watermark": typing.NotRequired[float | None],
    "defaced_volume": str,
    "facemask": typing.NotRequired[str | None],
    "fill_constants": typing.NotRequired[list[float] | None],
    "exclude_mask": typing.NotRequired[InputPathType | None],
    "tempreg": typing.NotRequired[InputPathType | None],
    "minsurfpath": typing.NotRequired[str | None],
    "maxsurfpath": typing.NotRequired[str | None],
    "distbounds": typing.NotRequired[InputPathType | None],
    "distoverlay": typing.NotRequired[InputPathType | None],
    "distdat": typing.NotRequired[InputPathType | None],
    "statspath": typing.NotRequired[InputPathType | None],
    "output_tempsurf": typing.NotRequired[InputPathType | None],
    "apply_to_volume": typing.NotRequired[list[str] | None],
    "ripple_center": typing.NotRequired[list[float] | None],
    "apply_ripple": typing.NotRequired[list[str] | None],
    "diagnostic_level": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
    "version": bool,
})
MriDefacerParametersTagged = typing.TypedDict('MriDefacerParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_defacer"],
    "input_volume": InputPathType,
    "headmask": InputPathType,
    "tempsurf": InputPathType,
    "templabel": typing.NotRequired[list[InputPathType] | None],
    "watermark": typing.NotRequired[float | None],
    "defaced_volume": str,
    "facemask": typing.NotRequired[str | None],
    "fill_constants": typing.NotRequired[list[float] | None],
    "exclude_mask": typing.NotRequired[InputPathType | None],
    "tempreg": typing.NotRequired[InputPathType | None],
    "minsurfpath": typing.NotRequired[str | None],
    "maxsurfpath": typing.NotRequired[str | None],
    "distbounds": typing.NotRequired[InputPathType | None],
    "distoverlay": typing.NotRequired[InputPathType | None],
    "distdat": typing.NotRequired[InputPathType | None],
    "statspath": typing.NotRequired[InputPathType | None],
    "output_tempsurf": typing.NotRequired[InputPathType | None],
    "apply_to_volume": typing.NotRequired[list[str] | None],
    "ripple_center": typing.NotRequired[list[float] | None],
    "apply_ripple": typing.NotRequired[list[str] | None],
    "diagnostic_level": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
    "version": bool,
})


class MriDefacerOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriDefacerParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_defacer_params(
    input_volume: InputPathType,
    headmask: InputPathType,
    tempsurf: InputPathType,
    defaced_volume: str,
    templabel: list[InputPathType] | None = None,
    watermark: float | None = None,
    facemask: str | None = None,
    fill_constants: list[float] | None = None,
    exclude_mask: InputPathType | None = None,
    tempreg: InputPathType | None = None,
    minsurfpath: str | None = None,
    maxsurfpath: str | None = None,
    distbounds: InputPathType | None = None,
    distoverlay: InputPathType | None = None,
    distdat: InputPathType | None = None,
    statspath: InputPathType | None = None,
    output_tempsurf: InputPathType | None = None,
    apply_to_volume: list[str] | None = None,
    ripple_center: list[float] | None = None,
    apply_ripple: list[str] | None = None,
    diagnostic_level: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
) -> MriDefacerParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume.
        headmask: Head mask volume.
        tempsurf: Template surface file.
        defaced_volume: Output defaced volume.
        templabel: Template label, specify one or multiple labels.
        watermark: Watermark density.
        facemask: Face mask volume.
        fill_constants: Constants for filling within/outside the mask.
        exclude_mask: Mask to exclude from defacing.
        tempreg: Registration file to apply to surface.
        minsurfpath: Output minimum surface path.
        maxsurfpath: Output maximum surface path.
        distbounds: File with distance bounds for each label.
        distoverlay: Overlay file showing distance for each vertex.
        distdat: File with distances for each vertex.
        statspath: Statistics path for nxmask with means and modes.
        output_tempsurf: Output template surface after watermark/ripple.
        apply_to_volume: Apply face mask and registration to another volume.
        ripple_center: Center of ripple effect.
        apply_ripple: Apply ripple effect on surface.
        diagnostic_level: Set diagnostic level.
        debug: Turn on debugging.
        checkopts: Check options and exit without executing.
        version: Print version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_defacer",
        "input_volume": input_volume,
        "headmask": headmask,
        "tempsurf": tempsurf,
        "defaced_volume": defaced_volume,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    }
    if templabel is not None:
        params["templabel"] = templabel
    if watermark is not None:
        params["watermark"] = watermark
    if facemask is not None:
        params["facemask"] = facemask
    if fill_constants is not None:
        params["fill_constants"] = fill_constants
    if exclude_mask is not None:
        params["exclude_mask"] = exclude_mask
    if tempreg is not None:
        params["tempreg"] = tempreg
    if minsurfpath is not None:
        params["minsurfpath"] = minsurfpath
    if maxsurfpath is not None:
        params["maxsurfpath"] = maxsurfpath
    if distbounds is not None:
        params["distbounds"] = distbounds
    if distoverlay is not None:
        params["distoverlay"] = distoverlay
    if distdat is not None:
        params["distdat"] = distdat
    if statspath is not None:
        params["statspath"] = statspath
    if output_tempsurf is not None:
        params["output_tempsurf"] = output_tempsurf
    if apply_to_volume is not None:
        params["apply_to_volume"] = apply_to_volume
    if ripple_center is not None:
        params["ripple_center"] = ripple_center
    if apply_ripple is not None:
        params["apply_ripple"] = apply_ripple
    if diagnostic_level is not None:
        params["diagnostic_level"] = diagnostic_level
    return params


def mri_defacer_cargs(
    params: MriDefacerParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_defacer")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_volume", None))
    ])
    cargs.extend([
        "-hm",
        execution.input_file(params.get("headmask", None))
    ])
    cargs.extend([
        "-ts",
        execution.input_file(params.get("tempsurf", None))
    ])
    if params.get("templabel", None) is not None:
        cargs.extend([
            "--l",
            *[execution.input_file(f) for f in params.get("templabel", None)]
        ])
    if params.get("watermark", None) is not None:
        cargs.extend([
            "--w",
            str(params.get("watermark", None))
        ])
    cargs.extend([
        "-o",
        params.get("defaced_volume", None)
    ])
    if params.get("facemask", None) is not None:
        cargs.extend([
            "--m",
            params.get("facemask", None)
        ])
    if params.get("fill_constants", None) is not None:
        cargs.extend([
            "--fill-const",
            *map(str, params.get("fill_constants", None))
        ])
    if params.get("exclude_mask", None) is not None:
        cargs.extend([
            "--xmask",
            execution.input_file(params.get("exclude_mask", None))
        ])
    if params.get("tempreg", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("tempreg", None))
        ])
    if params.get("minsurfpath", None) is not None:
        cargs.extend([
            "--min",
            params.get("minsurfpath", None)
        ])
    if params.get("maxsurfpath", None) is not None:
        cargs.extend([
            "--max",
            params.get("maxsurfpath", None)
        ])
    if params.get("distbounds", None) is not None:
        cargs.extend([
            "--distbounds",
            execution.input_file(params.get("distbounds", None))
        ])
    if params.get("distoverlay", None) is not None:
        cargs.extend([
            "--distoverlay",
            execution.input_file(params.get("distoverlay", None))
        ])
    if params.get("distdat", None) is not None:
        cargs.extend([
            "--distdat",
            execution.input_file(params.get("distdat", None))
        ])
    if params.get("statspath", None) is not None:
        cargs.extend([
            "--stats",
            execution.input_file(params.get("statspath", None))
        ])
    if params.get("output_tempsurf", None) is not None:
        cargs.extend([
            "--ots",
            execution.input_file(params.get("output_tempsurf", None))
        ])
    if params.get("apply_to_volume", None) is not None:
        cargs.extend([
            "--apply",
            *params.get("apply_to_volume", None)
        ])
    if params.get("ripple_center", None) is not None:
        cargs.extend([
            "--ripple-center",
            *map(str, params.get("ripple_center", None))
        ])
    if params.get("apply_ripple", None) is not None:
        cargs.extend([
            "--apply-ripple",
            *params.get("apply_ripple", None)
        ])
    if params.get("diagnostic_level", None) is not None:
        cargs.extend([
            "--gdiag",
            str(params.get("diagnostic_level", None))
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("checkopts", False):
        cargs.append("--checkopts")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mri_defacer_outputs(
    params: MriDefacerParameters,
    execution: Execution,
) -> MriDefacerOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriDefacerOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_defacer_execute(
    params: MriDefacerParameters,
    runner: Runner | None = None,
) -> MriDefacerOutputs:
    """
    mri_defacer
    
    Tool for defacing MRI images to remove facial features.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriDefacerOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_DEFACER_METADATA)
    params = execution.params(params)
    cargs = mri_defacer_cargs(params, execution)
    ret = mri_defacer_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_defacer(
    input_volume: InputPathType,
    headmask: InputPathType,
    tempsurf: InputPathType,
    defaced_volume: str,
    templabel: list[InputPathType] | None = None,
    watermark: float | None = None,
    facemask: str | None = None,
    fill_constants: list[float] | None = None,
    exclude_mask: InputPathType | None = None,
    tempreg: InputPathType | None = None,
    minsurfpath: str | None = None,
    maxsurfpath: str | None = None,
    distbounds: InputPathType | None = None,
    distoverlay: InputPathType | None = None,
    distdat: InputPathType | None = None,
    statspath: InputPathType | None = None,
    output_tempsurf: InputPathType | None = None,
    apply_to_volume: list[str] | None = None,
    ripple_center: list[float] | None = None,
    apply_ripple: list[str] | None = None,
    diagnostic_level: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MriDefacerOutputs:
    """
    mri_defacer
    
    Tool for defacing MRI images to remove facial features.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume.
        headmask: Head mask volume.
        tempsurf: Template surface file.
        defaced_volume: Output defaced volume.
        templabel: Template label, specify one or multiple labels.
        watermark: Watermark density.
        facemask: Face mask volume.
        fill_constants: Constants for filling within/outside the mask.
        exclude_mask: Mask to exclude from defacing.
        tempreg: Registration file to apply to surface.
        minsurfpath: Output minimum surface path.
        maxsurfpath: Output maximum surface path.
        distbounds: File with distance bounds for each label.
        distoverlay: Overlay file showing distance for each vertex.
        distdat: File with distances for each vertex.
        statspath: Statistics path for nxmask with means and modes.
        output_tempsurf: Output template surface after watermark/ripple.
        apply_to_volume: Apply face mask and registration to another volume.
        ripple_center: Center of ripple effect.
        apply_ripple: Apply ripple effect on surface.
        diagnostic_level: Set diagnostic level.
        debug: Turn on debugging.
        checkopts: Check options and exit without executing.
        version: Print version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriDefacerOutputs`).
    """
    params = mri_defacer_params(
        input_volume=input_volume,
        headmask=headmask,
        tempsurf=tempsurf,
        templabel=templabel,
        watermark=watermark,
        defaced_volume=defaced_volume,
        facemask=facemask,
        fill_constants=fill_constants,
        exclude_mask=exclude_mask,
        tempreg=tempreg,
        minsurfpath=minsurfpath,
        maxsurfpath=maxsurfpath,
        distbounds=distbounds,
        distoverlay=distoverlay,
        distdat=distdat,
        statspath=statspath,
        output_tempsurf=output_tempsurf,
        apply_to_volume=apply_to_volume,
        ripple_center=ripple_center,
        apply_ripple=apply_ripple,
        diagnostic_level=diagnostic_level,
        debug=debug,
        checkopts=checkopts,
        version=version,
    )
    return mri_defacer_execute(params, runner)


__all__ = [
    "MRI_DEFACER_METADATA",
    "MriDefacerOutputs",
    "mri_defacer",
    "mri_defacer_execute",
    "mri_defacer_params",
]
