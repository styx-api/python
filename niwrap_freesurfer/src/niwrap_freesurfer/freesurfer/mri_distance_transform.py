# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_DISTANCE_TRANSFORM_METADATA = Metadata(
    id="2b944b61d2ef9fdb67d3c850d1a11b2da816c066.boutiques",
    name="mri_distance_transform",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriDistanceTransformParameters = typing.TypedDict('MriDistanceTransformParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_distance_transform"]],
    "input_volume": InputPathType,
    "label": int,
    "max_distance": int,
    "mode": typing.NotRequired[int | None],
    "output_volume": str,
})
MriDistanceTransformParametersTagged = typing.TypedDict('MriDistanceTransformParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_distance_transform"],
    "input_volume": InputPathType,
    "label": int,
    "max_distance": int,
    "mode": typing.NotRequired[int | None],
    "output_volume": str,
})


class MriDistanceTransformOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriDistanceTransformParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume file after distance transform"""


def mri_distance_transform_params(
    input_volume: InputPathType,
    label: int,
    max_distance: int,
    output_volume: str,
    mode: int | None = None,
) -> MriDistanceTransformParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume file.
        label: Label value for distance transform calculation.
        max_distance: Maximum distance for the transform.
        output_volume: Output volume file.
        mode: Mode of the distance transform: 1 = outside, 2 = inside, 3 =\
            both, 4 = both unsigned.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_distance_transform",
        "input_volume": input_volume,
        "label": label,
        "max_distance": max_distance,
        "output_volume": output_volume,
    }
    if mode is not None:
        params["mode"] = mode
    return params


def mri_distance_transform_cargs(
    params: MriDistanceTransformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_distance_transform")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(str(params.get("label", None)))
    cargs.append(str(params.get("max_distance", None)))
    if params.get("mode", None) is not None:
        cargs.append(str(params.get("mode", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_distance_transform_outputs(
    params: MriDistanceTransformParameters,
    execution: Execution,
) -> MriDistanceTransformOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriDistanceTransformOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_distance_transform_execute(
    params: MriDistanceTransformParameters,
    runner: Runner | None = None,
) -> MriDistanceTransformOutputs:
    """
    mri_distance_transform
    
    Tool to compute distance transforms on MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriDistanceTransformOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_DISTANCE_TRANSFORM_METADATA)
    params = execution.params(params)
    cargs = mri_distance_transform_cargs(params, execution)
    ret = mri_distance_transform_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_distance_transform(
    input_volume: InputPathType,
    label: int,
    max_distance: int,
    output_volume: str,
    mode: int | None = None,
    runner: Runner | None = None,
) -> MriDistanceTransformOutputs:
    """
    mri_distance_transform
    
    Tool to compute distance transforms on MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume file.
        label: Label value for distance transform calculation.
        max_distance: Maximum distance for the transform.
        output_volume: Output volume file.
        mode: Mode of the distance transform: 1 = outside, 2 = inside, 3 =\
            both, 4 = both unsigned.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriDistanceTransformOutputs`).
    """
    params = mri_distance_transform_params(
        input_volume=input_volume,
        label=label,
        max_distance=max_distance,
        mode=mode,
        output_volume=output_volume,
    )
    return mri_distance_transform_execute(params, runner)


__all__ = [
    "MRI_DISTANCE_TRANSFORM_METADATA",
    "MriDistanceTransformOutputs",
    "mri_distance_transform",
    "mri_distance_transform_execute",
    "mri_distance_transform_params",
]
