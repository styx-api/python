# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_EDIT_WM_WITH_ASEG_METADATA = Metadata(
    id="812c15dd26820bc2fee714f6109422a18cbfbb57.boutiques",
    name="mri_edit_wm_with_aseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriEditWmWithAsegParameters = typing.TypedDict('MriEditWmWithAsegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_edit_wm_with_aseg"]],
    "input_wm": InputPathType,
    "input_t1_brain": InputPathType,
    "aseg": InputPathType,
    "output_wm": str,
    "fillven": bool,
    "fix_scm_ha": typing.NotRequired[int | None],
    "fix_scm_ha_only": typing.NotRequired[str | None],
    "keep": bool,
    "keep_in": bool,
    "lh": bool,
    "rh": bool,
    "fix_ento_wm": typing.NotRequired[str | None],
    "sa_fix_ento_wm": typing.NotRequired[str | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
})
MriEditWmWithAsegParametersTagged = typing.TypedDict('MriEditWmWithAsegParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_edit_wm_with_aseg"],
    "input_wm": InputPathType,
    "input_t1_brain": InputPathType,
    "aseg": InputPathType,
    "output_wm": str,
    "fillven": bool,
    "fix_scm_ha": typing.NotRequired[int | None],
    "fix_scm_ha_only": typing.NotRequired[str | None],
    "keep": bool,
    "keep_in": bool,
    "lh": bool,
    "rh": bool,
    "fix_ento_wm": typing.NotRequired[str | None],
    "sa_fix_ento_wm": typing.NotRequired[str | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
})


class MriEditWmWithAsegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriEditWmWithAsegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_wm_file: OutputPathType
    """Edited white matter output file"""


def mri_edit_wm_with_aseg_params(
    input_wm: InputPathType,
    input_t1_brain: InputPathType,
    aseg: InputPathType,
    output_wm: str,
    fillven: bool = False,
    fix_scm_ha: int | None = None,
    fix_scm_ha_only: str | None = None,
    keep: bool = False,
    keep_in: bool = False,
    lh: bool = False,
    rh: bool = False,
    fix_ento_wm: str | None = None,
    sa_fix_ento_wm: str | None = None,
    debug_voxel: list[float] | None = None,
) -> MriEditWmWithAsegParametersTagged:
    """
    Build parameters.
    
    Args:
        input_wm: Input white matter file.
        input_t1_brain: Input T1/brain file.
        aseg: Anatomical segmentation file.
        output_wm: Output white matter file.
        fillven: Fill ventricular system.
        fix_scm_ha: Remove voxels in amygdala, ILV, and parts of hippocampus.
        fix_scm_ha_only: Standalone: fix SCM using aseg.presurf.mgz.
        keep: Keep edits as found in output volume.
        keep_in: Keep edits as found in input volume.
        lh: Erase right hemisphere labels from output.
        rh: Erase left hemisphere labels from output.
        fix_ento_wm: Insert lhval rhval where {3,4}006 and {3,4}201 in entowm\
            volume.
        sa_fix_ento_wm: Standalone version of fix ento-WM.
        debug_voxel: Specify a voxel to edit with coordinates Gx Gy Gz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_edit_wm_with_aseg",
        "input_wm": input_wm,
        "input_t1_brain": input_t1_brain,
        "aseg": aseg,
        "output_wm": output_wm,
        "fillven": fillven,
        "keep": keep,
        "keep_in": keep_in,
        "lh": lh,
        "rh": rh,
    }
    if fix_scm_ha is not None:
        params["fix_scm_ha"] = fix_scm_ha
    if fix_scm_ha_only is not None:
        params["fix_scm_ha_only"] = fix_scm_ha_only
    if fix_ento_wm is not None:
        params["fix_ento_wm"] = fix_ento_wm
    if sa_fix_ento_wm is not None:
        params["sa_fix_ento_wm"] = sa_fix_ento_wm
    if debug_voxel is not None:
        params["debug_voxel"] = debug_voxel
    return params


def mri_edit_wm_with_aseg_cargs(
    params: MriEditWmWithAsegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_edit_wm_with_aseg")
    cargs.append(execution.input_file(params.get("input_wm", None)))
    cargs.append(execution.input_file(params.get("input_t1_brain", None)))
    cargs.append(execution.input_file(params.get("aseg", None)))
    cargs.append(params.get("output_wm", None))
    if params.get("fillven", False):
        cargs.append("-fillven")
    if params.get("fix_scm_ha", None) is not None:
        cargs.extend([
            "-fix-scm-ha",
            str(params.get("fix_scm_ha", None))
        ])
    if params.get("fix_scm_ha_only", None) is not None:
        cargs.extend([
            "-fix-scm-ha-only",
            params.get("fix_scm_ha_only", None)
        ])
    if params.get("keep", False):
        cargs.append("-keep")
    if params.get("keep_in", False):
        cargs.append("-keep-in")
    if params.get("lh", False):
        cargs.append("-lh")
    if params.get("rh", False):
        cargs.append("-rh")
    if params.get("fix_ento_wm", None) is not None:
        cargs.extend([
            "-fix-ento-wm",
            params.get("fix_ento_wm", None)
        ])
    if params.get("sa_fix_ento_wm", None) is not None:
        cargs.extend([
            "-sa-fix-ento-wm",
            params.get("sa_fix_ento_wm", None)
        ])
    if params.get("debug_voxel", None) is not None:
        cargs.extend([
            "-debug_voxel",
            *map(str, params.get("debug_voxel", None))
        ])
    return cargs


def mri_edit_wm_with_aseg_outputs(
    params: MriEditWmWithAsegParameters,
    execution: Execution,
) -> MriEditWmWithAsegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriEditWmWithAsegOutputs(
        root=execution.output_file("."),
        output_wm_file=execution.output_file(params.get("output_wm", None)),
    )
    return ret


def mri_edit_wm_with_aseg_execute(
    params: MriEditWmWithAsegParameters,
    runner: Runner | None = None,
) -> MriEditWmWithAsegOutputs:
    """
    mri_edit_wm_with_aseg
    
    A tool for editing white matter with anatomical segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriEditWmWithAsegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_EDIT_WM_WITH_ASEG_METADATA)
    params = execution.params(params)
    cargs = mri_edit_wm_with_aseg_cargs(params, execution)
    ret = mri_edit_wm_with_aseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_edit_wm_with_aseg(
    input_wm: InputPathType,
    input_t1_brain: InputPathType,
    aseg: InputPathType,
    output_wm: str,
    fillven: bool = False,
    fix_scm_ha: int | None = None,
    fix_scm_ha_only: str | None = None,
    keep: bool = False,
    keep_in: bool = False,
    lh: bool = False,
    rh: bool = False,
    fix_ento_wm: str | None = None,
    sa_fix_ento_wm: str | None = None,
    debug_voxel: list[float] | None = None,
    runner: Runner | None = None,
) -> MriEditWmWithAsegOutputs:
    """
    mri_edit_wm_with_aseg
    
    A tool for editing white matter with anatomical segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_wm: Input white matter file.
        input_t1_brain: Input T1/brain file.
        aseg: Anatomical segmentation file.
        output_wm: Output white matter file.
        fillven: Fill ventricular system.
        fix_scm_ha: Remove voxels in amygdala, ILV, and parts of hippocampus.
        fix_scm_ha_only: Standalone: fix SCM using aseg.presurf.mgz.
        keep: Keep edits as found in output volume.
        keep_in: Keep edits as found in input volume.
        lh: Erase right hemisphere labels from output.
        rh: Erase left hemisphere labels from output.
        fix_ento_wm: Insert lhval rhval where {3,4}006 and {3,4}201 in entowm\
            volume.
        sa_fix_ento_wm: Standalone version of fix ento-WM.
        debug_voxel: Specify a voxel to edit with coordinates Gx Gy Gz.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriEditWmWithAsegOutputs`).
    """
    params = mri_edit_wm_with_aseg_params(
        input_wm=input_wm,
        input_t1_brain=input_t1_brain,
        aseg=aseg,
        output_wm=output_wm,
        fillven=fillven,
        fix_scm_ha=fix_scm_ha,
        fix_scm_ha_only=fix_scm_ha_only,
        keep=keep,
        keep_in=keep_in,
        lh=lh,
        rh=rh,
        fix_ento_wm=fix_ento_wm,
        sa_fix_ento_wm=sa_fix_ento_wm,
        debug_voxel=debug_voxel,
    )
    return mri_edit_wm_with_aseg_execute(params, runner)


__all__ = [
    "MRI_EDIT_WM_WITH_ASEG_METADATA",
    "MriEditWmWithAsegOutputs",
    "mri_edit_wm_with_aseg",
    "mri_edit_wm_with_aseg_execute",
    "mri_edit_wm_with_aseg_params",
]
