# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_FIT_BIAS_METADATA = Metadata(
    id="e95edea1c7cb7312ebeb7fcbe1c320472f69a481.boutiques",
    name="mri_fit_bias",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriFitBiasParameters = typing.TypedDict('MriFitBiasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_fit_bias"]],
    "inputvol": InputPathType,
    "lpf_cutoff": typing.NotRequired[float | None],
    "segvol": InputPathType,
    "maskvol": InputPathType,
    "outvol": str,
    "biasfield": str,
    "dctvol": typing.NotRequired[str | None],
    "threshold": typing.NotRequired[float | None],
    "nerode": typing.NotRequired[float | None],
    "nthreads": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
})
MriFitBiasParametersTagged = typing.TypedDict('MriFitBiasParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_fit_bias"],
    "inputvol": InputPathType,
    "lpf_cutoff": typing.NotRequired[float | None],
    "segvol": InputPathType,
    "maskvol": InputPathType,
    "outvol": str,
    "biasfield": str,
    "dctvol": typing.NotRequired[str | None],
    "threshold": typing.NotRequired[float | None],
    "nerode": typing.NotRequired[float | None],
    "nthreads": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
})


class MriFitBiasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriFitBiasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    corrected_output: OutputPathType
    """Bias corrected output volume"""
    generated_bias_field: OutputPathType
    """Generated bias field"""


def mri_fit_bias_params(
    inputvol: InputPathType,
    segvol: InputPathType,
    maskvol: InputPathType,
    outvol: str,
    biasfield: str,
    lpf_cutoff: float | None = None,
    dctvol: str | None = None,
    threshold: float | None = None,
    nerode: float | None = None,
    nthreads: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
) -> MriFitBiasParametersTagged:
    """
    Build parameters.
    
    Args:
        inputvol: Input volume for intensity normalization.
        segvol: Segmentation volume to define WM and Cortex (e.g.,\
            aseg.presurf.mgz).
        maskvol: Mask volume; zero everything outside of the mask (e.g.,\
            brainmask.mgz).
        outvol: Bias corrected output volume.
        biasfield: Output bias field.
        lpf_cutoff: Low-pass filter cutoff in mm (default is 23.000000).
        dctvol: DCT fields file for debugging.
        threshold: Mask out anything <= threshold value.
        nerode: 3D erode segmentation by n steps (default is 1).
        nthreads: Number of threads to use.
        debug: Turn on debugging mode.
        checkopts: Don't run anything, just check options and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_fit_bias",
        "inputvol": inputvol,
        "segvol": segvol,
        "maskvol": maskvol,
        "outvol": outvol,
        "biasfield": biasfield,
        "debug": debug,
        "checkopts": checkopts,
    }
    if lpf_cutoff is not None:
        params["lpf_cutoff"] = lpf_cutoff
    if dctvol is not None:
        params["dctvol"] = dctvol
    if threshold is not None:
        params["threshold"] = threshold
    if nerode is not None:
        params["nerode"] = nerode
    if nthreads is not None:
        params["nthreads"] = nthreads
    return params


def mri_fit_bias_cargs(
    params: MriFitBiasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_fit_bias")
    cargs.extend([
        "--i",
        execution.input_file(params.get("inputvol", None))
    ])
    if params.get("lpf_cutoff", None) is not None:
        cargs.extend([
            "--cutoff",
            str(params.get("lpf_cutoff", None))
        ])
    cargs.extend([
        "--seg",
        execution.input_file(params.get("segvol", None))
    ])
    cargs.extend([
        "--mask",
        execution.input_file(params.get("maskvol", None))
    ])
    cargs.extend([
        "--o",
        params.get("outvol", None)
    ])
    cargs.extend([
        "--bias",
        params.get("biasfield", None)
    ])
    if params.get("dctvol", None) is not None:
        cargs.extend([
            "--dct",
            params.get("dctvol", None)
        ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "--thresh",
            str(params.get("threshold", None))
        ])
    if params.get("nerode", None) is not None:
        cargs.extend([
            "--erode",
            str(params.get("nerode", None))
        ])
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("nthreads", None))
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("checkopts", False):
        cargs.append("--checkopts")
    return cargs


def mri_fit_bias_outputs(
    params: MriFitBiasParameters,
    execution: Execution,
) -> MriFitBiasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriFitBiasOutputs(
        root=execution.output_file("."),
        corrected_output=execution.output_file(params.get("outvol", None)),
        generated_bias_field=execution.output_file(params.get("biasfield", None)),
    )
    return ret


def mri_fit_bias_execute(
    params: MriFitBiasParameters,
    runner: Runner | None = None,
) -> MriFitBiasOutputs:
    """
    mri_fit_bias
    
    A tool for intensity normalization and bias correction in MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFitBiasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_FIT_BIAS_METADATA)
    params = execution.params(params)
    cargs = mri_fit_bias_cargs(params, execution)
    ret = mri_fit_bias_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_fit_bias(
    inputvol: InputPathType,
    segvol: InputPathType,
    maskvol: InputPathType,
    outvol: str,
    biasfield: str,
    lpf_cutoff: float | None = None,
    dctvol: str | None = None,
    threshold: float | None = None,
    nerode: float | None = None,
    nthreads: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
    runner: Runner | None = None,
) -> MriFitBiasOutputs:
    """
    mri_fit_bias
    
    A tool for intensity normalization and bias correction in MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        inputvol: Input volume for intensity normalization.
        segvol: Segmentation volume to define WM and Cortex (e.g.,\
            aseg.presurf.mgz).
        maskvol: Mask volume; zero everything outside of the mask (e.g.,\
            brainmask.mgz).
        outvol: Bias corrected output volume.
        biasfield: Output bias field.
        lpf_cutoff: Low-pass filter cutoff in mm (default is 23.000000).
        dctvol: DCT fields file for debugging.
        threshold: Mask out anything <= threshold value.
        nerode: 3D erode segmentation by n steps (default is 1).
        nthreads: Number of threads to use.
        debug: Turn on debugging mode.
        checkopts: Don't run anything, just check options and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFitBiasOutputs`).
    """
    params = mri_fit_bias_params(
        inputvol=inputvol,
        lpf_cutoff=lpf_cutoff,
        segvol=segvol,
        maskvol=maskvol,
        outvol=outvol,
        biasfield=biasfield,
        dctvol=dctvol,
        threshold=threshold,
        nerode=nerode,
        nthreads=nthreads,
        debug=debug,
        checkopts=checkopts,
    )
    return mri_fit_bias_execute(params, runner)


__all__ = [
    "MRI_FIT_BIAS_METADATA",
    "MriFitBiasOutputs",
    "mri_fit_bias",
    "mri_fit_bias_execute",
    "mri_fit_bias_params",
]
