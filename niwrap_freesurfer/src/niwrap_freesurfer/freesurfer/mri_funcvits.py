# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_FUNCVITS_METADATA = Metadata(
    id="1540b967af27194342e796045e007f5e105616e5.boutiques",
    name="mri-funcvits",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriFuncvitsParameters = typing.TypedDict('MriFuncvitsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri-funcvits"]],
    "stem": str,
    "outdir": str,
    "reg": typing.NotRequired[str | None],
    "paintsurf": typing.NotRequired[str | None],
    "sphere": typing.NotRequired[str | None],
    "icosize": typing.NotRequired[int | None],
    "hemi": typing.NotRequired[list[str] | None],
    "svitdir": typing.NotRequired[str | None],
    "icodir": typing.NotRequired[str | None],
    "umask": typing.NotRequired[str | None],
    "mail": typing.NotRequired[str | None],
    "noforce": bool,
})
MriFuncvitsParametersTagged = typing.TypedDict('MriFuncvitsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri-funcvits"],
    "stem": str,
    "outdir": str,
    "reg": typing.NotRequired[str | None],
    "paintsurf": typing.NotRequired[str | None],
    "sphere": typing.NotRequired[str | None],
    "icosize": typing.NotRequired[int | None],
    "hemi": typing.NotRequired[list[str] | None],
    "svitdir": typing.NotRequired[str | None],
    "icodir": typing.NotRequired[str | None],
    "umask": typing.NotRequired[str | None],
    "mail": typing.NotRequired[str | None],
    "noforce": bool,
})


class MriFuncvitsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriFuncvitsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_funcvits_params(
    stem: str,
    outdir: str,
    reg: str | None = None,
    paintsurf: str | None = None,
    sphere: str | None = None,
    icosize: int | None = None,
    hemi: list[str] | None = None,
    svitdir: str | None = None,
    icodir: str | None = None,
    umask: str | None = None,
    mail: str | None = None,
    noforce: bool = False,
) -> MriFuncvitsParametersTagged:
    """
    Build parameters.
    
    Args:
        stem: Template stem.
        outdir: Output directory.
        reg: Registration file.
        paintsurf: Surface upon which to paint.
        sphere: Spherical surface.
        icosize: Icosahedron size.
        hemi: Hemifield(s).
        svitdir: SVIT directory.
        icodir: ICO directory.
        umask: New umask.
        mail: User email for notifications.
        noforce: Do not create if output already exists.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri-funcvits",
        "stem": stem,
        "outdir": outdir,
        "noforce": noforce,
    }
    if reg is not None:
        params["reg"] = reg
    if paintsurf is not None:
        params["paintsurf"] = paintsurf
    if sphere is not None:
        params["sphere"] = sphere
    if icosize is not None:
        params["icosize"] = icosize
    if hemi is not None:
        params["hemi"] = hemi
    if svitdir is not None:
        params["svitdir"] = svitdir
    if icodir is not None:
        params["icodir"] = icodir
    if umask is not None:
        params["umask"] = umask
    if mail is not None:
        params["mail"] = mail
    return params


def mri_funcvits_cargs(
    params: MriFuncvitsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri-funcvits")
    cargs.extend([
        "--stem",
        params.get("stem", None)
    ])
    cargs.extend([
        "--outdir",
        params.get("outdir", None)
    ])
    if params.get("reg", None) is not None:
        cargs.extend([
            "--reg",
            params.get("reg", None)
        ])
    if params.get("paintsurf", None) is not None:
        cargs.extend([
            "--paintsurf",
            params.get("paintsurf", None)
        ])
    if params.get("sphere", None) is not None:
        cargs.extend([
            "--sphere",
            params.get("sphere", None)
        ])
    if params.get("icosize", None) is not None:
        cargs.extend([
            "--icosize",
            str(params.get("icosize", None))
        ])
    if params.get("hemi", None) is not None:
        cargs.extend([
            "--hemi",
            *params.get("hemi", None)
        ])
    if params.get("svitdir", None) is not None:
        cargs.extend([
            "--svitdir",
            params.get("svitdir", None)
        ])
    if params.get("icodir", None) is not None:
        cargs.extend([
            "--icodir",
            params.get("icodir", None)
        ])
    if params.get("umask", None) is not None:
        cargs.extend([
            "--umask",
            params.get("umask", None)
        ])
    if params.get("mail", None) is not None:
        cargs.extend([
            "--mail",
            params.get("mail", None)
        ])
    if params.get("noforce", False):
        cargs.append("--noforce")
    return cargs


def mri_funcvits_outputs(
    params: MriFuncvitsParameters,
    execution: Execution,
) -> MriFuncvitsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriFuncvitsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_funcvits_execute(
    params: MriFuncvitsParameters,
    runner: Runner | None = None,
) -> MriFuncvitsOutputs:
    """
    mri-funcvits
    
    Tool for functional volume to surface conversion in neuroimaging analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuncvitsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_FUNCVITS_METADATA)
    params = execution.params(params)
    cargs = mri_funcvits_cargs(params, execution)
    ret = mri_funcvits_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_funcvits(
    stem: str,
    outdir: str,
    reg: str | None = None,
    paintsurf: str | None = None,
    sphere: str | None = None,
    icosize: int | None = None,
    hemi: list[str] | None = None,
    svitdir: str | None = None,
    icodir: str | None = None,
    umask: str | None = None,
    mail: str | None = None,
    noforce: bool = False,
    runner: Runner | None = None,
) -> MriFuncvitsOutputs:
    """
    mri-funcvits
    
    Tool for functional volume to surface conversion in neuroimaging analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        stem: Template stem.
        outdir: Output directory.
        reg: Registration file.
        paintsurf: Surface upon which to paint.
        sphere: Spherical surface.
        icosize: Icosahedron size.
        hemi: Hemifield(s).
        svitdir: SVIT directory.
        icodir: ICO directory.
        umask: New umask.
        mail: User email for notifications.
        noforce: Do not create if output already exists.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuncvitsOutputs`).
    """
    params = mri_funcvits_params(
        stem=stem,
        outdir=outdir,
        reg=reg,
        paintsurf=paintsurf,
        sphere=sphere,
        icosize=icosize,
        hemi=hemi,
        svitdir=svitdir,
        icodir=icodir,
        umask=umask,
        mail=mail,
        noforce=noforce,
    )
    return mri_funcvits_execute(params, runner)


__all__ = [
    "MRI_FUNCVITS_METADATA",
    "MriFuncvitsOutputs",
    "mri_funcvits",
    "mri_funcvits_execute",
    "mri_funcvits_params",
]
