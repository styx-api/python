# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_FUSE_INTENSITY_IMAGES_METADATA = Metadata(
    id="2802ec190420b6963111965b8b49d44744698bee.boutiques",
    name="mri_fuse_intensity_images",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriFuseIntensityImagesParameters = typing.TypedDict('MriFuseIntensityImagesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_fuse_intensity_images"]],
    "longitudinal_time_point_file": InputPathType,
    "input_volume": InputPathType,
    "transform_file": InputPathType,
    "output_volume": str,
})
MriFuseIntensityImagesParametersTagged = typing.TypedDict('MriFuseIntensityImagesParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_fuse_intensity_images"],
    "longitudinal_time_point_file": InputPathType,
    "input_volume": InputPathType,
    "transform_file": InputPathType,
    "output_volume": str,
})


class MriFuseIntensityImagesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriFuseIntensityImagesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fused_intensity_image: OutputPathType
    """The resulting fused intensity image"""


def mri_fuse_intensity_images_params(
    longitudinal_time_point_file: InputPathType,
    input_volume: InputPathType,
    transform_file: InputPathType,
    output_volume: str,
) -> MriFuseIntensityImagesParametersTagged:
    """
    Build parameters.
    
    Args:
        longitudinal_time_point_file: File containing the longitudinal time\
            points.
        input_volume: Input volume to be fused.
        transform_file: File containing the transforms.
        output_volume: Output fused volume.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_fuse_intensity_images",
        "longitudinal_time_point_file": longitudinal_time_point_file,
        "input_volume": input_volume,
        "transform_file": transform_file,
        "output_volume": output_volume,
    }
    return params


def mri_fuse_intensity_images_cargs(
    params: MriFuseIntensityImagesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_fuse_intensity_images")
    cargs.append(execution.input_file(params.get("longitudinal_time_point_file", None)))
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(execution.input_file(params.get("transform_file", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_fuse_intensity_images_outputs(
    params: MriFuseIntensityImagesParameters,
    execution: Execution,
) -> MriFuseIntensityImagesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriFuseIntensityImagesOutputs(
        root=execution.output_file("."),
        fused_intensity_image=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_fuse_intensity_images_execute(
    params: MriFuseIntensityImagesParameters,
    runner: Runner | None = None,
) -> MriFuseIntensityImagesOutputs:
    """
    mri_fuse_intensity_images
    
    Fuses intensity images based on given transforms.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuseIntensityImagesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_FUSE_INTENSITY_IMAGES_METADATA)
    params = execution.params(params)
    cargs = mri_fuse_intensity_images_cargs(params, execution)
    ret = mri_fuse_intensity_images_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_fuse_intensity_images(
    longitudinal_time_point_file: InputPathType,
    input_volume: InputPathType,
    transform_file: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MriFuseIntensityImagesOutputs:
    """
    mri_fuse_intensity_images
    
    Fuses intensity images based on given transforms.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        longitudinal_time_point_file: File containing the longitudinal time\
            points.
        input_volume: Input volume to be fused.
        transform_file: File containing the transforms.
        output_volume: Output fused volume.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuseIntensityImagesOutputs`).
    """
    params = mri_fuse_intensity_images_params(
        longitudinal_time_point_file=longitudinal_time_point_file,
        input_volume=input_volume,
        transform_file=transform_file,
        output_volume=output_volume,
    )
    return mri_fuse_intensity_images_execute(params, runner)


__all__ = [
    "MRI_FUSE_INTENSITY_IMAGES_METADATA",
    "MriFuseIntensityImagesOutputs",
    "mri_fuse_intensity_images",
    "mri_fuse_intensity_images_execute",
    "mri_fuse_intensity_images_params",
]
