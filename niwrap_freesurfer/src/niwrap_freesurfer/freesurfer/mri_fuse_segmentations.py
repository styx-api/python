# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_FUSE_SEGMENTATIONS_METADATA = Metadata(
    id="04388b801a4735a2e7525ce3184cca331a6ec70a.boutiques",
    name="mri_fuse_segmentations",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriFuseSegmentationsParameters = typing.TypedDict('MriFuseSegmentationsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_fuse_segmentations"]],
    "asegs": list[InputPathType],
    "nocc_asegs": list[InputPathType],
    "norm_volumes": list[InputPathType],
    "transforms": typing.NotRequired[list[InputPathType] | None],
    "sigma": typing.NotRequired[float | None],
    "input_file": InputPathType,
    "output_file": str,
})
MriFuseSegmentationsParametersTagged = typing.TypedDict('MriFuseSegmentationsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_fuse_segmentations"],
    "asegs": list[InputPathType],
    "nocc_asegs": list[InputPathType],
    "norm_volumes": list[InputPathType],
    "transforms": typing.NotRequired[list[InputPathType] | None],
    "sigma": typing.NotRequired[float | None],
    "input_file": InputPathType,
    "output_file": str,
})


class MriFuseSegmentationsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriFuseSegmentationsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Resulting fused segmentation as aseg.fused.mgz file"""


def mri_fuse_segmentations_params(
    asegs: list[InputPathType],
    nocc_asegs: list[InputPathType],
    norm_volumes: list[InputPathType],
    input_file: InputPathType,
    output_file: str,
    transforms: list[InputPathType] | None = None,
    sigma: float | None = None,
) -> MriFuseSegmentationsParametersTagged:
    """
    Build parameters.
    
    Args:
        asegs: Path to aseg.mgz files, one per TP.
        nocc_asegs: Path to aseg.auto_noCCseg.mgz files without CC labels, one\
            per TP.
        norm_volumes: Path to norm.mgz files, one per TP.
        input_file: Input norm.mgz file.
        output_file: Resulting fused segmentation as aseg.fused.mgz file.
        transforms: Transform files from each TP to the input norm.mgz, can be\
            LTA, M3Z or identity.nofile.
        sigma: Cross-time sigma (default 3.0).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_fuse_segmentations",
        "asegs": asegs,
        "nocc_asegs": nocc_asegs,
        "norm_volumes": norm_volumes,
        "input_file": input_file,
        "output_file": output_file,
    }
    if transforms is not None:
        params["transforms"] = transforms
    if sigma is not None:
        params["sigma"] = sigma
    return params


def mri_fuse_segmentations_cargs(
    params: MriFuseSegmentationsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_fuse_segmentations")
    cargs.extend([
        "-a",
        *[execution.input_file(f) for f in params.get("asegs", None)]
    ])
    cargs.extend([
        "-c",
        *[execution.input_file(f) for f in params.get("nocc_asegs", None)]
    ])
    cargs.extend([
        "-n",
        *[execution.input_file(f) for f in params.get("norm_volumes", None)]
    ])
    if params.get("transforms", None) is not None:
        cargs.extend([
            "-t",
            *[execution.input_file(f) for f in params.get("transforms", None)]
        ])
    if params.get("sigma", None) is not None:
        cargs.extend([
            "-s",
            str(params.get("sigma", None))
        ])
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def mri_fuse_segmentations_outputs(
    params: MriFuseSegmentationsParameters,
    execution: Execution,
) -> MriFuseSegmentationsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriFuseSegmentationsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mri_fuse_segmentations_execute(
    params: MriFuseSegmentationsParameters,
    runner: Runner | None = None,
) -> MriFuseSegmentationsOutputs:
    """
    mri_fuse_segmentations
    
    Fuse a set of segmentations (asegs) into an initial estimate of a
    longitudinal one.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuseSegmentationsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_FUSE_SEGMENTATIONS_METADATA)
    params = execution.params(params)
    cargs = mri_fuse_segmentations_cargs(params, execution)
    ret = mri_fuse_segmentations_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_fuse_segmentations(
    asegs: list[InputPathType],
    nocc_asegs: list[InputPathType],
    norm_volumes: list[InputPathType],
    input_file: InputPathType,
    output_file: str,
    transforms: list[InputPathType] | None = None,
    sigma: float | None = None,
    runner: Runner | None = None,
) -> MriFuseSegmentationsOutputs:
    """
    mri_fuse_segmentations
    
    Fuse a set of segmentations (asegs) into an initial estimate of a
    longitudinal one.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        asegs: Path to aseg.mgz files, one per TP.
        nocc_asegs: Path to aseg.auto_noCCseg.mgz files without CC labels, one\
            per TP.
        norm_volumes: Path to norm.mgz files, one per TP.
        input_file: Input norm.mgz file.
        output_file: Resulting fused segmentation as aseg.fused.mgz file.
        transforms: Transform files from each TP to the input norm.mgz, can be\
            LTA, M3Z or identity.nofile.
        sigma: Cross-time sigma (default 3.0).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFuseSegmentationsOutputs`).
    """
    params = mri_fuse_segmentations_params(
        asegs=asegs,
        nocc_asegs=nocc_asegs,
        norm_volumes=norm_volumes,
        transforms=transforms,
        sigma=sigma,
        input_file=input_file,
        output_file=output_file,
    )
    return mri_fuse_segmentations_execute(params, runner)


__all__ = [
    "MRI_FUSE_SEGMENTATIONS_METADATA",
    "MriFuseSegmentationsOutputs",
    "mri_fuse_segmentations",
    "mri_fuse_segmentations_execute",
    "mri_fuse_segmentations_params",
]
