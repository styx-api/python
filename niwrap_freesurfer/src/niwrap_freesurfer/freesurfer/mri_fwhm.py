# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_FWHM_METADATA = Metadata(
    id="a87036336f44e8e9e6b59e0eae6ffd84f3110fbb.boutiques",
    name="mri_fwhm",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriFwhmParameters = typing.TypedDict('MriFwhmParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_fwhm"]],
    "inputvol": InputPathType,
    "outputvol": str,
    "save_detrended": bool,
    "save_unmasked": bool,
    "smooth_only": bool,
    "mask": typing.NotRequired[InputPathType | None],
    "mask_thresh": typing.NotRequired[float | None],
    "auto_mask": typing.NotRequired[float | None],
    "nerode": typing.NotRequired[float | None],
    "mask_inv": bool,
    "out_mask": typing.NotRequired[str | None],
    "detrend_matrix": typing.NotRequired[InputPathType | None],
    "detrend_order": typing.NotRequired[float | None],
    "square_input": bool,
    "smooth_by_fwhm": typing.NotRequired[float | None],
    "smooth_by_gstd": typing.NotRequired[float | None],
    "median_filter": typing.NotRequired[float | None],
    "smooth_to_fwhm": typing.NotRequired[float | None],
    "to_fwhm_tol": typing.NotRequired[float | None],
    "to_fwhm_nmax": typing.NotRequired[float | None],
    "to_fwhm_file": typing.NotRequired[str | None],
    "summary_file": typing.NotRequired[str | None],
    "dat_file": typing.NotRequired[str | None],
    "fwhm_dat_file": typing.NotRequired[str | None],
    "fwhm_vol_mean_file": typing.NotRequired[str | None],
    "fwhm_vol": typing.NotRequired[str | None],
    "synth": bool,
    "synth_frames": typing.NotRequired[float | None],
    "nframes_min": typing.NotRequired[float | None],
    "ispm": bool,
    "nspm_zero_padding": typing.NotRequired[float | None],
    "threads": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
    "version": bool,
})
MriFwhmParametersTagged = typing.TypedDict('MriFwhmParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_fwhm"],
    "inputvol": InputPathType,
    "outputvol": str,
    "save_detrended": bool,
    "save_unmasked": bool,
    "smooth_only": bool,
    "mask": typing.NotRequired[InputPathType | None],
    "mask_thresh": typing.NotRequired[float | None],
    "auto_mask": typing.NotRequired[float | None],
    "nerode": typing.NotRequired[float | None],
    "mask_inv": bool,
    "out_mask": typing.NotRequired[str | None],
    "detrend_matrix": typing.NotRequired[InputPathType | None],
    "detrend_order": typing.NotRequired[float | None],
    "square_input": bool,
    "smooth_by_fwhm": typing.NotRequired[float | None],
    "smooth_by_gstd": typing.NotRequired[float | None],
    "median_filter": typing.NotRequired[float | None],
    "smooth_to_fwhm": typing.NotRequired[float | None],
    "to_fwhm_tol": typing.NotRequired[float | None],
    "to_fwhm_nmax": typing.NotRequired[float | None],
    "to_fwhm_file": typing.NotRequired[str | None],
    "summary_file": typing.NotRequired[str | None],
    "dat_file": typing.NotRequired[str | None],
    "fwhm_dat_file": typing.NotRequired[str | None],
    "fwhm_vol_mean_file": typing.NotRequired[str | None],
    "fwhm_vol": typing.NotRequired[str | None],
    "synth": bool,
    "synth_frames": typing.NotRequired[float | None],
    "nframes_min": typing.NotRequired[float | None],
    "ispm": bool,
    "nspm_zero_padding": typing.NotRequired[float | None],
    "threads": typing.NotRequired[float | None],
    "debug": bool,
    "checkopts": bool,
    "version": bool,
})


class MriFwhmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriFwhmParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """Output volume after smoothing."""
    final_mask_output_file: OutputPathType | None
    """Final mask volume."""
    summary_log_file: OutputPathType | None
    """Summary log file."""
    final_fwhm_estimate_file: OutputPathType | None
    """Final FWHM estimate file."""
    fwhm_of_each_dimension_file: OutputPathType | None
    """File containing the FWHM of each dimension."""
    mean_fwhm_volume_file: OutputPathType | None
    """Mean FWHM from volume file."""
    fwhm_volume_file: OutputPathType | None
    """FWHM volume file."""


def mri_fwhm_params(
    inputvol: InputPathType,
    outputvol: str,
    save_detrended: bool = False,
    save_unmasked: bool = False,
    smooth_only: bool = False,
    mask: InputPathType | None = None,
    mask_thresh: float | None = None,
    auto_mask: float | None = None,
    nerode: float | None = None,
    mask_inv: bool = False,
    out_mask: str | None = None,
    detrend_matrix: InputPathType | None = None,
    detrend_order: float | None = None,
    square_input: bool = False,
    smooth_by_fwhm: float | None = None,
    smooth_by_gstd: float | None = None,
    median_filter: float | None = None,
    smooth_to_fwhm: float | None = None,
    to_fwhm_tol: float | None = None,
    to_fwhm_nmax: float | None = None,
    to_fwhm_file: str | None = None,
    summary_file: str | None = None,
    dat_file: str | None = None,
    fwhm_dat_file: str | None = None,
    fwhm_vol_mean_file: str | None = None,
    fwhm_vol: str | None = None,
    synth: bool = False,
    synth_frames: float | None = None,
    nframes_min: float | None = None,
    ispm: bool = False,
    nspm_zero_padding: float | None = None,
    threads: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
) -> MriFwhmParametersTagged:
    """
    Build parameters.
    
    Args:
        inputvol: Input volume file. Format must be something readable by\
            mri_convert (e.g., mgh, mgz, img, nii, nii.gz).
        outputvol: Output volume file: save input after smoothing.
        save_detrended: Save input after smoothing and detrending.
        save_unmasked: Do not mask output volume.
        smooth_only: Smooth and save, do not compute fwhm.
        mask: Binary mask file.
        mask_thresh: Threshold for mask (default is 0.5).
        auto_mask: Auto compute mask based on global mean threshold.
        nerode: Erode mask n times prior to FWHM computation.
        mask_inv: Invert mask.
        out_mask: Save final mask to outmaskvol.
        detrend_matrix: Detrending matrix file in MATLAB4 format.
        detrend_order: Polynomial detrending order (default 0).
        square_input: Compute square of input before smoothing.
        smooth_by_fwhm: Smooth BY fwhm before measuring.
        smooth_by_gstd: Smooth using gstd (equivalent to --fwhm).
        median_filter: Perform median filtering instead of Gaussian.
        smooth_to_fwhm: Smooth TO this FWHM.
        to_fwhm_tol: Tolerance for smoothing to FWHM (default 0.5mm).
        to_fwhm_nmax: Maximum iterations for smoothing to FWHM (default 20).
        to_fwhm_file: Save smoothing to FWHM parameters to file.
        summary_file: Summary/log file.
        dat_file: Prints only the final FWHM estimate into this file.
        fwhm_dat_file: Compute and save the FWHM of each dimension.
        fwhm_vol_mean_file: Compute and save the FWHM of each dimension based\
            on fwhmvol.
        fwhm_vol: Save FWHM volume.
        synth: Synthesize input with white Gaussian noise.
        synth_frames: Number of frames for synthesized input (default is 10).
        nframes_min: Require at least this many frames.
        ispm: Input is SPM-analyze.
        nspm_zero_padding: Zero-padding for SPM-analyze.
        threads: Set OPEN MP threads.
        debug: Turn on debugging.
        checkopts: Check options and exit without running.
        version: Print version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_fwhm",
        "inputvol": inputvol,
        "outputvol": outputvol,
        "save_detrended": save_detrended,
        "save_unmasked": save_unmasked,
        "smooth_only": smooth_only,
        "mask_inv": mask_inv,
        "square_input": square_input,
        "synth": synth,
        "ispm": ispm,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    }
    if mask is not None:
        params["mask"] = mask
    if mask_thresh is not None:
        params["mask_thresh"] = mask_thresh
    if auto_mask is not None:
        params["auto_mask"] = auto_mask
    if nerode is not None:
        params["nerode"] = nerode
    if out_mask is not None:
        params["out_mask"] = out_mask
    if detrend_matrix is not None:
        params["detrend_matrix"] = detrend_matrix
    if detrend_order is not None:
        params["detrend_order"] = detrend_order
    if smooth_by_fwhm is not None:
        params["smooth_by_fwhm"] = smooth_by_fwhm
    if smooth_by_gstd is not None:
        params["smooth_by_gstd"] = smooth_by_gstd
    if median_filter is not None:
        params["median_filter"] = median_filter
    if smooth_to_fwhm is not None:
        params["smooth_to_fwhm"] = smooth_to_fwhm
    if to_fwhm_tol is not None:
        params["to_fwhm_tol"] = to_fwhm_tol
    if to_fwhm_nmax is not None:
        params["to_fwhm_nmax"] = to_fwhm_nmax
    if to_fwhm_file is not None:
        params["to_fwhm_file"] = to_fwhm_file
    if summary_file is not None:
        params["summary_file"] = summary_file
    if dat_file is not None:
        params["dat_file"] = dat_file
    if fwhm_dat_file is not None:
        params["fwhm_dat_file"] = fwhm_dat_file
    if fwhm_vol_mean_file is not None:
        params["fwhm_vol_mean_file"] = fwhm_vol_mean_file
    if fwhm_vol is not None:
        params["fwhm_vol"] = fwhm_vol
    if synth_frames is not None:
        params["synth_frames"] = synth_frames
    if nframes_min is not None:
        params["nframes_min"] = nframes_min
    if nspm_zero_padding is not None:
        params["nspm_zero_padding"] = nspm_zero_padding
    if threads is not None:
        params["threads"] = threads
    return params


def mri_fwhm_cargs(
    params: MriFwhmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_fwhm")
    cargs.extend([
        "--i",
        execution.input_file(params.get("inputvol", None))
    ])
    cargs.extend([
        "--o",
        params.get("outputvol", None)
    ])
    if params.get("save_detrended", False):
        cargs.append("--save-detrended")
    if params.get("save_unmasked", False):
        cargs.append("--save-unmasked")
    if params.get("smooth_only", False):
        cargs.append("--smooth-only")
    if params.get("mask", None) is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("mask_thresh", None) is not None:
        cargs.extend([
            "--mask-thresh",
            str(params.get("mask_thresh", None))
        ])
    if params.get("auto_mask", None) is not None:
        cargs.extend([
            "--auto-mask",
            str(params.get("auto_mask", None))
        ])
    if params.get("nerode", None) is not None:
        cargs.extend([
            "--nerode",
            str(params.get("nerode", None))
        ])
    if params.get("mask_inv", False):
        cargs.append("--mask-inv")
    if params.get("out_mask", None) is not None:
        cargs.extend([
            "--out-mask",
            params.get("out_mask", None)
        ])
    if params.get("detrend_matrix", None) is not None:
        cargs.extend([
            "--X",
            execution.input_file(params.get("detrend_matrix", None))
        ])
    if params.get("detrend_order", None) is not None:
        cargs.extend([
            "--detrend",
            str(params.get("detrend_order", None))
        ])
    if params.get("square_input", False):
        cargs.append("--sqr")
    if params.get("smooth_by_fwhm", None) is not None:
        cargs.extend([
            "--fwhm",
            str(params.get("smooth_by_fwhm", None))
        ])
    if params.get("smooth_by_gstd", None) is not None:
        cargs.extend([
            "--gstd",
            str(params.get("smooth_by_gstd", None))
        ])
    if params.get("median_filter", None) is not None:
        cargs.extend([
            "--median",
            str(params.get("median_filter", None))
        ])
    if params.get("smooth_to_fwhm", None) is not None:
        cargs.extend([
            "--to-fwhm",
            str(params.get("smooth_to_fwhm", None))
        ])
    if params.get("to_fwhm_tol", None) is not None:
        cargs.extend([
            "--to-fwhm-tol",
            str(params.get("to_fwhm_tol", None))
        ])
    if params.get("to_fwhm_nmax", None) is not None:
        cargs.extend([
            "--to-fwhm-nmax",
            str(params.get("to_fwhm_nmax", None))
        ])
    if params.get("to_fwhm_file", None) is not None:
        cargs.extend([
            "--to-fwhm-file",
            params.get("to_fwhm_file", None)
        ])
    if params.get("summary_file", None) is not None:
        cargs.extend([
            "--sum",
            params.get("summary_file", None)
        ])
    if params.get("dat_file", None) is not None:
        cargs.extend([
            "--dat",
            params.get("dat_file", None)
        ])
    if params.get("fwhm_dat_file", None) is not None:
        cargs.extend([
            "--fwhmdat",
            params.get("fwhm_dat_file", None)
        ])
    if params.get("fwhm_vol_mean_file", None) is not None:
        cargs.extend([
            "--fwhmvolmn",
            params.get("fwhm_vol_mean_file", None)
        ])
    if params.get("fwhm_vol", None) is not None:
        cargs.extend([
            "--fwhmvol",
            params.get("fwhm_vol", None)
        ])
    if params.get("synth", False):
        cargs.append("--synth")
    if params.get("synth_frames", None) is not None:
        cargs.extend([
            "--synth-frames",
            str(params.get("synth_frames", None))
        ])
    if params.get("nframes_min", None) is not None:
        cargs.extend([
            "--nframesmin",
            str(params.get("nframes_min", None))
        ])
    if params.get("ispm", False):
        cargs.append("--ispm")
    if params.get("nspm_zero_padding", None) is not None:
        cargs.extend([
            "--in_nspmzeropad",
            str(params.get("nspm_zero_padding", None))
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--nthreads",
            str(params.get("threads", None))
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("checkopts", False):
        cargs.append("--checkopts")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mri_fwhm_outputs(
    params: MriFwhmParameters,
    execution: Execution,
) -> MriFwhmOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriFwhmOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("outputvol", None)),
        final_mask_output_file=execution.output_file(params.get("out_mask", None)) if (params.get("out_mask") is not None) else None,
        summary_log_file=execution.output_file(params.get("summary_file", None)) if (params.get("summary_file") is not None) else None,
        final_fwhm_estimate_file=execution.output_file(params.get("dat_file", None)) if (params.get("dat_file") is not None) else None,
        fwhm_of_each_dimension_file=execution.output_file(params.get("fwhm_dat_file", None)) if (params.get("fwhm_dat_file") is not None) else None,
        mean_fwhm_volume_file=execution.output_file(params.get("fwhm_vol_mean_file", None)) if (params.get("fwhm_vol_mean_file") is not None) else None,
        fwhm_volume_file=execution.output_file(params.get("fwhm_vol", None)) if (params.get("fwhm_vol") is not None) else None,
    )
    return ret


def mri_fwhm_execute(
    params: MriFwhmParameters,
    runner: Runner | None = None,
) -> MriFwhmOutputs:
    """
    mri_fwhm
    
    FreeSurfer program to estimate the global Gaussian smoothness of a
    multi-frame, volume-based data set.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFwhmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_FWHM_METADATA)
    params = execution.params(params)
    cargs = mri_fwhm_cargs(params, execution)
    ret = mri_fwhm_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_fwhm(
    inputvol: InputPathType,
    outputvol: str,
    save_detrended: bool = False,
    save_unmasked: bool = False,
    smooth_only: bool = False,
    mask: InputPathType | None = None,
    mask_thresh: float | None = None,
    auto_mask: float | None = None,
    nerode: float | None = None,
    mask_inv: bool = False,
    out_mask: str | None = None,
    detrend_matrix: InputPathType | None = None,
    detrend_order: float | None = None,
    square_input: bool = False,
    smooth_by_fwhm: float | None = None,
    smooth_by_gstd: float | None = None,
    median_filter: float | None = None,
    smooth_to_fwhm: float | None = None,
    to_fwhm_tol: float | None = None,
    to_fwhm_nmax: float | None = None,
    to_fwhm_file: str | None = None,
    summary_file: str | None = None,
    dat_file: str | None = None,
    fwhm_dat_file: str | None = None,
    fwhm_vol_mean_file: str | None = None,
    fwhm_vol: str | None = None,
    synth: bool = False,
    synth_frames: float | None = None,
    nframes_min: float | None = None,
    ispm: bool = False,
    nspm_zero_padding: float | None = None,
    threads: float | None = None,
    debug: bool = False,
    checkopts: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MriFwhmOutputs:
    """
    mri_fwhm
    
    FreeSurfer program to estimate the global Gaussian smoothness of a
    multi-frame, volume-based data set.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        inputvol: Input volume file. Format must be something readable by\
            mri_convert (e.g., mgh, mgz, img, nii, nii.gz).
        outputvol: Output volume file: save input after smoothing.
        save_detrended: Save input after smoothing and detrending.
        save_unmasked: Do not mask output volume.
        smooth_only: Smooth and save, do not compute fwhm.
        mask: Binary mask file.
        mask_thresh: Threshold for mask (default is 0.5).
        auto_mask: Auto compute mask based on global mean threshold.
        nerode: Erode mask n times prior to FWHM computation.
        mask_inv: Invert mask.
        out_mask: Save final mask to outmaskvol.
        detrend_matrix: Detrending matrix file in MATLAB4 format.
        detrend_order: Polynomial detrending order (default 0).
        square_input: Compute square of input before smoothing.
        smooth_by_fwhm: Smooth BY fwhm before measuring.
        smooth_by_gstd: Smooth using gstd (equivalent to --fwhm).
        median_filter: Perform median filtering instead of Gaussian.
        smooth_to_fwhm: Smooth TO this FWHM.
        to_fwhm_tol: Tolerance for smoothing to FWHM (default 0.5mm).
        to_fwhm_nmax: Maximum iterations for smoothing to FWHM (default 20).
        to_fwhm_file: Save smoothing to FWHM parameters to file.
        summary_file: Summary/log file.
        dat_file: Prints only the final FWHM estimate into this file.
        fwhm_dat_file: Compute and save the FWHM of each dimension.
        fwhm_vol_mean_file: Compute and save the FWHM of each dimension based\
            on fwhmvol.
        fwhm_vol: Save FWHM volume.
        synth: Synthesize input with white Gaussian noise.
        synth_frames: Number of frames for synthesized input (default is 10).
        nframes_min: Require at least this many frames.
        ispm: Input is SPM-analyze.
        nspm_zero_padding: Zero-padding for SPM-analyze.
        threads: Set OPEN MP threads.
        debug: Turn on debugging.
        checkopts: Check options and exit without running.
        version: Print version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriFwhmOutputs`).
    """
    params = mri_fwhm_params(
        inputvol=inputvol,
        outputvol=outputvol,
        save_detrended=save_detrended,
        save_unmasked=save_unmasked,
        smooth_only=smooth_only,
        mask=mask,
        mask_thresh=mask_thresh,
        auto_mask=auto_mask,
        nerode=nerode,
        mask_inv=mask_inv,
        out_mask=out_mask,
        detrend_matrix=detrend_matrix,
        detrend_order=detrend_order,
        square_input=square_input,
        smooth_by_fwhm=smooth_by_fwhm,
        smooth_by_gstd=smooth_by_gstd,
        median_filter=median_filter,
        smooth_to_fwhm=smooth_to_fwhm,
        to_fwhm_tol=to_fwhm_tol,
        to_fwhm_nmax=to_fwhm_nmax,
        to_fwhm_file=to_fwhm_file,
        summary_file=summary_file,
        dat_file=dat_file,
        fwhm_dat_file=fwhm_dat_file,
        fwhm_vol_mean_file=fwhm_vol_mean_file,
        fwhm_vol=fwhm_vol,
        synth=synth,
        synth_frames=synth_frames,
        nframes_min=nframes_min,
        ispm=ispm,
        nspm_zero_padding=nspm_zero_padding,
        threads=threads,
        debug=debug,
        checkopts=checkopts,
        version=version,
    )
    return mri_fwhm_execute(params, runner)


__all__ = [
    "MRI_FWHM_METADATA",
    "MriFwhmOutputs",
    "mri_fwhm",
    "mri_fwhm_execute",
    "mri_fwhm_params",
]
