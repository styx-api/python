# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_GCUT_METADATA = Metadata(
    id="76b8b53c2ef0fb35e8dba1777373bd271dee5857.boutiques",
    name="mri_gcut",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriGcutParameters = typing.TypedDict('MriGcutParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_gcut"]],
    "wmmask_110": bool,
    "mult_file": typing.NotRequired[InputPathType | None],
    "threshold_value": typing.NotRequired[float | None],
    "infile": InputPathType,
    "outfile": str,
})
MriGcutParametersTagged = typing.TypedDict('MriGcutParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_gcut"],
    "wmmask_110": bool,
    "mult_file": typing.NotRequired[InputPathType | None],
    "threshold_value": typing.NotRequired[float | None],
    "infile": InputPathType,
    "outfile": str,
})


class MriGcutOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriGcutParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_mask_file: OutputPathType
    """The output file containing the skull-stripped brain volume."""


def mri_gcut_params(
    infile: InputPathType,
    outfile: str,
    wmmask_110: bool = False,
    mult_file: InputPathType | None = None,
    threshold_value: float | None = None,
) -> MriGcutParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input brain volume file, e.g. T1.mgz.
        outfile: Output file name, e.g. brainmask.auto.mgz.
        wmmask_110: Use voxels with intensity 110 as white matter mask (when\
            applied on T1.mgz, FreeSurfer only).
        mult_file: Intersect the skull-stripped 'in_filename' and an existing\
            skull-stripped volume specified by 'filename', storing the result in\
            'out_filename'.
        threshold_value: Set threshold to value (%) of WM intensity, where the\
            value should be >0 and <1; defaults to 0.40.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_gcut",
        "wmmask_110": wmmask_110,
        "infile": infile,
        "outfile": outfile,
    }
    if mult_file is not None:
        params["mult_file"] = mult_file
    if threshold_value is not None:
        params["threshold_value"] = threshold_value
    return params


def mri_gcut_cargs(
    params: MriGcutParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_gcut")
    if params.get("wmmask_110", False):
        cargs.append("-110")
    if params.get("mult_file", None) is not None:
        cargs.extend([
            "-mult",
            execution.input_file(params.get("mult_file", None))
        ])
    if params.get("threshold_value", None) is not None:
        cargs.extend([
            "-T",
            str(params.get("threshold_value", None))
        ])
    cargs.append(execution.input_file(params.get("infile", None)))
    cargs.append(params.get("outfile", None))
    return cargs


def mri_gcut_outputs(
    params: MriGcutParameters,
    execution: Execution,
) -> MriGcutOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriGcutOutputs(
        root=execution.output_file("."),
        output_mask_file=execution.output_file(params.get("outfile", None)),
    )
    return ret


def mri_gcut_execute(
    params: MriGcutParameters,
    runner: Runner | None = None,
) -> MriGcutOutputs:
    """
    mri_gcut
    
    Skull stripping algorithm based on graph cuts.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriGcutOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_GCUT_METADATA)
    params = execution.params(params)
    cargs = mri_gcut_cargs(params, execution)
    ret = mri_gcut_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_gcut(
    infile: InputPathType,
    outfile: str,
    wmmask_110: bool = False,
    mult_file: InputPathType | None = None,
    threshold_value: float | None = None,
    runner: Runner | None = None,
) -> MriGcutOutputs:
    """
    mri_gcut
    
    Skull stripping algorithm based on graph cuts.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        infile: Input brain volume file, e.g. T1.mgz.
        outfile: Output file name, e.g. brainmask.auto.mgz.
        wmmask_110: Use voxels with intensity 110 as white matter mask (when\
            applied on T1.mgz, FreeSurfer only).
        mult_file: Intersect the skull-stripped 'in_filename' and an existing\
            skull-stripped volume specified by 'filename', storing the result in\
            'out_filename'.
        threshold_value: Set threshold to value (%) of WM intensity, where the\
            value should be >0 and <1; defaults to 0.40.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriGcutOutputs`).
    """
    params = mri_gcut_params(
        wmmask_110=wmmask_110,
        mult_file=mult_file,
        threshold_value=threshold_value,
        infile=infile,
        outfile=outfile,
    )
    return mri_gcut_execute(params, runner)


__all__ = [
    "MRI_GCUT_METADATA",
    "MriGcutOutputs",
    "mri_gcut",
    "mri_gcut_execute",
    "mri_gcut_params",
]
