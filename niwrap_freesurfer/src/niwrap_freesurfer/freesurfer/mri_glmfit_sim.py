# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_GLMFIT_SIM_METADATA = Metadata(
    id="db99628afb9c4582b7884fcf4c00fba3413034c3.boutiques",
    name="mri_glmfit-sim",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriGlmfitSimParameters = typing.TypedDict('MriGlmfitSimParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_glmfit-sim"]],
    "glmdir": str,
    "cwp": typing.NotRequired[float | None],
    "mczsim": typing.NotRequired[str | None],
    "mczsim_dir": typing.NotRequired[str | None],
    "mczsim_label": typing.NotRequired[str | None],
    "perm": typing.NotRequired[str | None],
    "perm_resid": bool,
    "perm_signflip": bool,
    "grf": typing.NotRequired[str | None],
    "spaces_2": bool,
    "spaces_3": bool,
    "overwrite": bool,
    "bg": typing.NotRequired[float | None],
    "sleep": typing.NotRequired[float | None],
    "a2009s": bool,
    "annot": typing.NotRequired[str | None],
    "log": typing.NotRequired[str | None],
    "base": typing.NotRequired[str | None],
    "no_sim": typing.NotRequired[str | None],
    "seed": typing.NotRequired[float | None],
    "fwhm_override": typing.NotRequired[float | None],
    "fwhm_add": typing.NotRequired[float | None],
    "uniform": typing.NotRequired[list[float] | None],
    "no_out_annot": bool,
    "no_cluster_mean": bool,
    "y_file": typing.NotRequired[InputPathType | None],
    "centroid": bool,
    "spatial_sum": bool,
    "help": bool,
})
MriGlmfitSimParametersTagged = typing.TypedDict('MriGlmfitSimParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_glmfit-sim"],
    "glmdir": str,
    "cwp": typing.NotRequired[float | None],
    "mczsim": typing.NotRequired[str | None],
    "mczsim_dir": typing.NotRequired[str | None],
    "mczsim_label": typing.NotRequired[str | None],
    "perm": typing.NotRequired[str | None],
    "perm_resid": bool,
    "perm_signflip": bool,
    "grf": typing.NotRequired[str | None],
    "spaces_2": bool,
    "spaces_3": bool,
    "overwrite": bool,
    "bg": typing.NotRequired[float | None],
    "sleep": typing.NotRequired[float | None],
    "a2009s": bool,
    "annot": typing.NotRequired[str | None],
    "log": typing.NotRequired[str | None],
    "base": typing.NotRequired[str | None],
    "no_sim": typing.NotRequired[str | None],
    "seed": typing.NotRequired[float | None],
    "fwhm_override": typing.NotRequired[float | None],
    "fwhm_add": typing.NotRequired[float | None],
    "uniform": typing.NotRequired[list[float] | None],
    "no_out_annot": bool,
    "no_cluster_mean": bool,
    "y_file": typing.NotRequired[InputPathType | None],
    "centroid": bool,
    "spatial_sum": bool,
    "help": bool,
})


class MriGlmfitSimOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriGlmfitSimParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    sig_voxel_mgh: OutputPathType | None
    """Sig volume corrected for voxel-wise multiple comparisons."""
    sig_cluster_mgh: OutputPathType | None
    """Sig volume corrected for cluster-wise multiple comparisons."""
    sig_cluster_summary: OutputPathType | None
    """Cluster summary table."""
    y_ocn_dat: OutputPathType | None
    """Summary of the input (y) over each cluster."""
    sig_ocn_mgh: OutputPathType | None
    """Output cluster number volume."""
    sig_ocn_annot: OutputPathType | None
    """Cluster annotation for surfaces."""
    sig_masked_mgh: OutputPathType | None
    """Original sig volume masked to show only clusters."""


def mri_glmfit_sim_params(
    glmdir: str,
    cwp: float | None = None,
    mczsim: str | None = None,
    mczsim_dir: str | None = None,
    mczsim_label: str | None = None,
    perm: str | None = None,
    perm_resid: bool = False,
    perm_signflip: bool = False,
    grf: str | None = None,
    spaces_2: bool = False,
    spaces_3: bool = False,
    overwrite: bool = False,
    bg: float | None = None,
    sleep: float | None = None,
    a2009s: bool = False,
    annot: str | None = None,
    log: str | None = None,
    base: str | None = None,
    no_sim: str | None = None,
    seed: float | None = None,
    fwhm_override: float | None = None,
    fwhm_add: float | None = None,
    uniform: list[float] | None = None,
    no_out_annot: bool = False,
    no_cluster_mean: bool = False,
    y_file: InputPathType | None = None,
    centroid: bool = False,
    spatial_sum: bool = False,
    help_: bool = False,
) -> MriGlmfitSimParametersTagged:
    """
    Build parameters.
    
    Args:
        glmdir: Path to GLM directory.
        cwp: Cluster-wise p-value threshold, default is 0.05.
        mczsim: Use pre-computed z-based Monte Carlo simulations. Requires\
            vwthreshold and sign.
        mczsim_dir: Directory for custom Monte Carlo simulations, default is\
            FREESURFER_HOME/average/mult-comp-cor.
        mczsim_label: Label for custom Monte Carlo simulations, default is\
            cortex.
        perm: Use permutation simulation with nsim iterations, cluster forming\
            threshold (CFT), and sign.
        perm_resid: Use permutation on the residual instead of raw data for\
            non-orthogonal designs.
        perm_signflip: Use sign flipping instead of shuffling for permutation.
        grf: Use Gaussian Random Fields (GRF) method, with vwthreshold and\
            sign.
        spaces_2: Apply additional Bonferroni correction across 2 spaces.
        spaces_3: Apply additional Bonferroni correction across 3 spaces.
        overwrite: Delete previous CSDs.
        bg: Divide simulation into njobs and put in background.
        sleep: Number of seconds to sleep between background polls.
        a2009s: Use aparc.a2009s instead of aparc for region of vertex max.
        annot: Use specific annotation for region of vertex max.
        log: Specify logfile, default is csdbase.mri_glmfit-sim.log.
        base: Override csdbase name.
        no_sim: Do not simulate, only run cluster.
        seed: Set simulation random number generator seed.
        fwhm_override: Override fwhm in glmdir.
        fwhm_add: Add fwhmAdd to the estimated fwhm.
        uniform: Use uniform PDF instead of gaussian, specify min and max.
        no_out_annot: Do not output a cluster annotation.
        no_cluster_mean: Do not compute means of each subject in each cluster.
        y_file: Specify the GLM input y file.
        centroid: Report the coordinates/annotation of the centroid instead of\
            max.
        spatial_sum: Compute the sum over voxels in the cluster rather than the\
            average.
        help_: Show the help message and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_glmfit-sim",
        "glmdir": glmdir,
        "perm_resid": perm_resid,
        "perm_signflip": perm_signflip,
        "spaces_2": spaces_2,
        "spaces_3": spaces_3,
        "overwrite": overwrite,
        "a2009s": a2009s,
        "no_out_annot": no_out_annot,
        "no_cluster_mean": no_cluster_mean,
        "centroid": centroid,
        "spatial_sum": spatial_sum,
        "help": help_,
    }
    if cwp is not None:
        params["cwp"] = cwp
    if mczsim is not None:
        params["mczsim"] = mczsim
    if mczsim_dir is not None:
        params["mczsim_dir"] = mczsim_dir
    if mczsim_label is not None:
        params["mczsim_label"] = mczsim_label
    if perm is not None:
        params["perm"] = perm
    if grf is not None:
        params["grf"] = grf
    if bg is not None:
        params["bg"] = bg
    if sleep is not None:
        params["sleep"] = sleep
    if annot is not None:
        params["annot"] = annot
    if log is not None:
        params["log"] = log
    if base is not None:
        params["base"] = base
    if no_sim is not None:
        params["no_sim"] = no_sim
    if seed is not None:
        params["seed"] = seed
    if fwhm_override is not None:
        params["fwhm_override"] = fwhm_override
    if fwhm_add is not None:
        params["fwhm_add"] = fwhm_add
    if uniform is not None:
        params["uniform"] = uniform
    if y_file is not None:
        params["y_file"] = y_file
    return params


def mri_glmfit_sim_cargs(
    params: MriGlmfitSimParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_glmfit-sim")
    cargs.extend([
        "--glmdir",
        params.get("glmdir", None)
    ])
    if params.get("cwp", None) is not None:
        cargs.extend([
            "--cwp",
            str(params.get("cwp", None))
        ])
    if params.get("mczsim", None) is not None:
        cargs.extend([
            "--mczsim",
            params.get("mczsim", None)
        ])
    if params.get("mczsim_dir", None) is not None:
        cargs.extend([
            "--mczsim-dir",
            params.get("mczsim_dir", None)
        ])
    if params.get("mczsim_label", None) is not None:
        cargs.extend([
            "--mczsim-label",
            params.get("mczsim_label", None)
        ])
    if params.get("perm", None) is not None:
        cargs.extend([
            "--perm",
            params.get("perm", None)
        ])
    if params.get("perm_resid", False):
        cargs.append("--perm-resid")
    if params.get("perm_signflip", False):
        cargs.append("--perm-signflip")
    if params.get("grf", None) is not None:
        cargs.extend([
            "--grf",
            params.get("grf", None)
        ])
    if params.get("spaces_2", False):
        cargs.append("--2spaces")
    if params.get("spaces_3", False):
        cargs.append("--3spaces")
    if params.get("overwrite", False):
        cargs.append("--overwrite")
    if params.get("bg", None) is not None:
        cargs.extend([
            "--bg",
            str(params.get("bg", None))
        ])
    if params.get("sleep", None) is not None:
        cargs.extend([
            "--sleep",
            str(params.get("sleep", None))
        ])
    if params.get("a2009s", False):
        cargs.append("--a2009s")
    if params.get("annot", None) is not None:
        cargs.extend([
            "--annot",
            params.get("annot", None)
        ])
    if params.get("log", None) is not None:
        cargs.extend([
            "--log",
            params.get("log", None)
        ])
    if params.get("base", None) is not None:
        cargs.extend([
            "--base",
            params.get("base", None)
        ])
    if params.get("no_sim", None) is not None:
        cargs.extend([
            "--no-sim",
            params.get("no_sim", None)
        ])
    if params.get("seed", None) is not None:
        cargs.extend([
            "--seed",
            str(params.get("seed", None))
        ])
    if params.get("fwhm_override", None) is not None:
        cargs.extend([
            "--fwhm-override",
            str(params.get("fwhm_override", None))
        ])
    if params.get("fwhm_add", None) is not None:
        cargs.extend([
            "--fwhm-add",
            str(params.get("fwhm_add", None))
        ])
    if params.get("uniform", None) is not None:
        cargs.extend([
            "--uniform",
            *map(str, params.get("uniform", None))
        ])
    if params.get("no_out_annot", False):
        cargs.append("--no-out-annot")
    if params.get("no_cluster_mean", False):
        cargs.append("--no-cluster-mean")
    if params.get("y_file", None) is not None:
        cargs.extend([
            "--y",
            execution.input_file(params.get("y_file", None))
        ])
    if params.get("centroid", False):
        cargs.append("--centroid")
    if params.get("spatial_sum", False):
        cargs.append("--spatial-sum")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def mri_glmfit_sim_outputs(
    params: MriGlmfitSimParameters,
    execution: Execution,
) -> MriGlmfitSimOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriGlmfitSimOutputs(
        root=execution.output_file("."),
        sig_voxel_mgh=execution.output_file(params.get("base", None) + ".sig.voxel.mgh") if (params.get("base") is not None) else None,
        sig_cluster_mgh=execution.output_file(params.get("base", None) + ".sig.cluster.mgh") if (params.get("base") is not None) else None,
        sig_cluster_summary=execution.output_file(params.get("base", None) + ".sig.cluster.summary") if (params.get("base") is not None) else None,
        y_ocn_dat=execution.output_file(params.get("base", None) + ".y.ocn.dat") if (params.get("base") is not None) else None,
        sig_ocn_mgh=execution.output_file(params.get("base", None) + ".sig.ocn.mgh") if (params.get("base") is not None) else None,
        sig_ocn_annot=execution.output_file(params.get("base", None) + ".sig.ocn.annot") if (params.get("base") is not None) else None,
        sig_masked_mgh=execution.output_file(params.get("base", None) + ".sig.masked.mgh") if (params.get("base") is not None) else None,
    )
    return ret


def mri_glmfit_sim_execute(
    params: MriGlmfitSimParameters,
    runner: Runner | None = None,
) -> MriGlmfitSimOutputs:
    """
    mri_glmfit-sim
    
    A tool to run corrections for multiple comparisons on volumes or surfaces,
    using various methods including Monte Carlo simulation, permutation, and
    Gaussian Random Fields.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriGlmfitSimOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_GLMFIT_SIM_METADATA)
    params = execution.params(params)
    cargs = mri_glmfit_sim_cargs(params, execution)
    ret = mri_glmfit_sim_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_glmfit_sim(
    glmdir: str,
    cwp: float | None = None,
    mczsim: str | None = None,
    mczsim_dir: str | None = None,
    mczsim_label: str | None = None,
    perm: str | None = None,
    perm_resid: bool = False,
    perm_signflip: bool = False,
    grf: str | None = None,
    spaces_2: bool = False,
    spaces_3: bool = False,
    overwrite: bool = False,
    bg: float | None = None,
    sleep: float | None = None,
    a2009s: bool = False,
    annot: str | None = None,
    log: str | None = None,
    base: str | None = None,
    no_sim: str | None = None,
    seed: float | None = None,
    fwhm_override: float | None = None,
    fwhm_add: float | None = None,
    uniform: list[float] | None = None,
    no_out_annot: bool = False,
    no_cluster_mean: bool = False,
    y_file: InputPathType | None = None,
    centroid: bool = False,
    spatial_sum: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> MriGlmfitSimOutputs:
    """
    mri_glmfit-sim
    
    A tool to run corrections for multiple comparisons on volumes or surfaces,
    using various methods including Monte Carlo simulation, permutation, and
    Gaussian Random Fields.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        glmdir: Path to GLM directory.
        cwp: Cluster-wise p-value threshold, default is 0.05.
        mczsim: Use pre-computed z-based Monte Carlo simulations. Requires\
            vwthreshold and sign.
        mczsim_dir: Directory for custom Monte Carlo simulations, default is\
            FREESURFER_HOME/average/mult-comp-cor.
        mczsim_label: Label for custom Monte Carlo simulations, default is\
            cortex.
        perm: Use permutation simulation with nsim iterations, cluster forming\
            threshold (CFT), and sign.
        perm_resid: Use permutation on the residual instead of raw data for\
            non-orthogonal designs.
        perm_signflip: Use sign flipping instead of shuffling for permutation.
        grf: Use Gaussian Random Fields (GRF) method, with vwthreshold and\
            sign.
        spaces_2: Apply additional Bonferroni correction across 2 spaces.
        spaces_3: Apply additional Bonferroni correction across 3 spaces.
        overwrite: Delete previous CSDs.
        bg: Divide simulation into njobs and put in background.
        sleep: Number of seconds to sleep between background polls.
        a2009s: Use aparc.a2009s instead of aparc for region of vertex max.
        annot: Use specific annotation for region of vertex max.
        log: Specify logfile, default is csdbase.mri_glmfit-sim.log.
        base: Override csdbase name.
        no_sim: Do not simulate, only run cluster.
        seed: Set simulation random number generator seed.
        fwhm_override: Override fwhm in glmdir.
        fwhm_add: Add fwhmAdd to the estimated fwhm.
        uniform: Use uniform PDF instead of gaussian, specify min and max.
        no_out_annot: Do not output a cluster annotation.
        no_cluster_mean: Do not compute means of each subject in each cluster.
        y_file: Specify the GLM input y file.
        centroid: Report the coordinates/annotation of the centroid instead of\
            max.
        spatial_sum: Compute the sum over voxels in the cluster rather than the\
            average.
        help_: Show the help message and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriGlmfitSimOutputs`).
    """
    params = mri_glmfit_sim_params(
        glmdir=glmdir,
        cwp=cwp,
        mczsim=mczsim,
        mczsim_dir=mczsim_dir,
        mczsim_label=mczsim_label,
        perm=perm,
        perm_resid=perm_resid,
        perm_signflip=perm_signflip,
        grf=grf,
        spaces_2=spaces_2,
        spaces_3=spaces_3,
        overwrite=overwrite,
        bg=bg,
        sleep=sleep,
        a2009s=a2009s,
        annot=annot,
        log=log,
        base=base,
        no_sim=no_sim,
        seed=seed,
        fwhm_override=fwhm_override,
        fwhm_add=fwhm_add,
        uniform=uniform,
        no_out_annot=no_out_annot,
        no_cluster_mean=no_cluster_mean,
        y_file=y_file,
        centroid=centroid,
        spatial_sum=spatial_sum,
        help_=help_,
    )
    return mri_glmfit_sim_execute(params, runner)


__all__ = [
    "MRI_GLMFIT_SIM_METADATA",
    "MriGlmfitSimOutputs",
    "mri_glmfit_sim",
    "mri_glmfit_sim_execute",
    "mri_glmfit_sim_params",
]
