# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_INFO_METADATA = Metadata(
    id="1d97a1ead36919cb2e69c8897c1d721d19426dcb.boutiques",
    name="mri_info",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriInfoParameters = typing.TypedDict('MriInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_info"]],
    "input1": InputPathType,
    "input2": typing.NotRequired[InputPathType | None],
    "conformed": bool,
    "conformed_to_min": bool,
    "is_1mm_iso": bool,
    "type": bool,
    "tr": bool,
    "te": bool,
    "ti": bool,
    "fa": bool,
    "pedir": bool,
    "res": bool,
    "cres": bool,
    "rres": bool,
    "sres": bool,
    "voxvol": bool,
    "voxvolsum": bool,
    "ncols": bool,
    "nrows": bool,
    "nslices": bool,
    "dim": bool,
    "cdc": bool,
    "rdc": bool,
    "sdc": bool,
    "vox2ras": bool,
    "ras2vox": bool,
    "vox2ras_tkr": bool,
    "ras2vox_tkr": bool,
    "vox2ras_fsl": bool,
    "tkr2scanner": bool,
    "scanner2tkr": bool,
    "ras_good": bool,
    "cras": bool,
    "center": bool,
    "zero_cras": bool,
    "p0": bool,
    "det": bool,
    "dof": bool,
    "nframes": bool,
    "mid_frame": bool,
    "format": bool,
    "orientation": bool,
    "slicedirection": bool,
    "autoalign": bool,
    "ctab": bool,
    "cmds": bool,
    "dump": bool,
    "voxel_crs": typing.NotRequired[list[str] | None],
    "entropy": bool,
    "output_file": typing.NotRequired[InputPathType | None],
    "orig_ras2vox": bool,
    "in_type": typing.NotRequired[str | None],
})
MriInfoParametersTagged = typing.TypedDict('MriInfoParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_info"],
    "input1": InputPathType,
    "input2": typing.NotRequired[InputPathType | None],
    "conformed": bool,
    "conformed_to_min": bool,
    "is_1mm_iso": bool,
    "type": bool,
    "tr": bool,
    "te": bool,
    "ti": bool,
    "fa": bool,
    "pedir": bool,
    "res": bool,
    "cres": bool,
    "rres": bool,
    "sres": bool,
    "voxvol": bool,
    "voxvolsum": bool,
    "ncols": bool,
    "nrows": bool,
    "nslices": bool,
    "dim": bool,
    "cdc": bool,
    "rdc": bool,
    "sdc": bool,
    "vox2ras": bool,
    "ras2vox": bool,
    "vox2ras_tkr": bool,
    "ras2vox_tkr": bool,
    "vox2ras_fsl": bool,
    "tkr2scanner": bool,
    "scanner2tkr": bool,
    "ras_good": bool,
    "cras": bool,
    "center": bool,
    "zero_cras": bool,
    "p0": bool,
    "det": bool,
    "dof": bool,
    "nframes": bool,
    "mid_frame": bool,
    "format": bool,
    "orientation": bool,
    "slicedirection": bool,
    "autoalign": bool,
    "ctab": bool,
    "cmds": bool,
    "dump": bool,
    "voxel_crs": typing.NotRequired[list[str] | None],
    "entropy": bool,
    "output_file": typing.NotRequired[InputPathType | None],
    "orig_ras2vox": bool,
    "in_type": typing.NotRequired[str | None],
})


class MriInfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriInfoParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_info_params(
    input1: InputPathType,
    input2: InputPathType | None = None,
    conformed: bool = False,
    conformed_to_min: bool = False,
    is_1mm_iso: bool = False,
    type_: bool = False,
    tr: bool = False,
    te: bool = False,
    ti: bool = False,
    fa: bool = False,
    pedir: bool = False,
    res: bool = False,
    cres: bool = False,
    rres: bool = False,
    sres: bool = False,
    voxvol: bool = False,
    voxvolsum: bool = False,
    ncols: bool = False,
    nrows: bool = False,
    nslices: bool = False,
    dim: bool = False,
    cdc: bool = False,
    rdc: bool = False,
    sdc: bool = False,
    vox2ras: bool = False,
    ras2vox: bool = False,
    vox2ras_tkr: bool = False,
    ras2vox_tkr: bool = False,
    vox2ras_fsl: bool = False,
    tkr2scanner: bool = False,
    scanner2tkr: bool = False,
    ras_good: bool = False,
    cras: bool = False,
    center: bool = False,
    zero_cras: bool = False,
    p0: bool = False,
    det: bool = False,
    dof: bool = False,
    nframes: bool = False,
    mid_frame: bool = False,
    format_: bool = False,
    orientation: bool = False,
    slicedirection: bool = False,
    autoalign: bool = False,
    ctab: bool = False,
    cmds: bool = False,
    dump: bool = False,
    voxel_crs: list[str] | None = None,
    entropy: bool = False,
    output_file: InputPathType | None = None,
    orig_ras2vox: bool = False,
    in_type: str | None = None,
) -> MriInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        input1: Primary input file.
        input2: Secondary input file (optional).
        conformed: Print whether a volume is conformed.
        conformed_to_min: Print whether a volume is conformed-to-min.
        is_1mm_iso: Print whether the voxel size is 1mm isotropic.
        type_: Print the voxel type/precision.
        tr: Print TR.
        te: Print TE.
        ti: Print TI.
        fa: Print flip angle.
        pedir: Print phase encode direction.
        res: Print column, row, slice, and frame resolution.
        cres: Print column voxel size.
        rres: Print row voxel size.
        sres: Print slice voxel size.
        voxvol: Print voxel volume.
        voxvolsum: Compute sum of all voxels times the voxel volume.
        ncols: Print number of columns.
        nrows: Print number of rows.
        nslices: Print number of slices.
        dim: Print number of columns, rows, slices, and frames.
        cdc: Print column direction cosine (x_{r,a,s}).
        rdc: Print row direction cosine (y_{r,a,s}).
        sdc: Print slice direction cosine (z_{r,a,s}).
        vox2ras: Print the native/qform vox2ras matrix.
        ras2vox: Print the native/qform ras2vox matrix.
        vox2ras_tkr: Print the tkregister vox2ras matrix.
        ras2vox_tkr: Print the tkregister ras2vox matrix.
        vox2ras_fsl: Print the FSL/FLIRT vox2ras matrix.
        tkr2scanner: Print tkrRAS-to-scannerRAS matrix.
        scanner2tkr: Print scannerRAS-to-tkrRAS matrix.
        ras_good: Print the ras_good_flag.
        cras: Print the RAS near the center of the volume.
        center: Print the RAS at the actual center of the volume.
        zero_cras: Zero the center ras.
        p0: Print the RAS at voxel (0,0,0).
        det: Print the determinant of the vox2ras matrix.
        dof: Print the degrees of freedom stored in the header.
        nframes: Print the number of frames.
        mid_frame: Print the middle frame.
        format_: Print file format.
        orientation: Print orientation string (e.g., LPS, RAS, RPI).
        slicedirection: Print primary slice direction (e.g., axial).
        autoalign: Print auto align matrix (if it exists).
        ctab: Print embedded color lookup table.
        cmds: Print command-line provenance info.
        dump: Print FA, TR, TE, TI, etc.
        voxel_crs: Dump voxel value from column, row, slice (0-based, all\
            frames).
        entropy: Compute and print entropy.
        output_file: Print flagged results to file.
        orig_ras2vox: Print orig Ras2Vox matrix if present.
        in_type: Explicitly specify file type.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_info",
        "input1": input1,
        "conformed": conformed,
        "conformed_to_min": conformed_to_min,
        "is_1mm_iso": is_1mm_iso,
        "type": type_,
        "tr": tr,
        "te": te,
        "ti": ti,
        "fa": fa,
        "pedir": pedir,
        "res": res,
        "cres": cres,
        "rres": rres,
        "sres": sres,
        "voxvol": voxvol,
        "voxvolsum": voxvolsum,
        "ncols": ncols,
        "nrows": nrows,
        "nslices": nslices,
        "dim": dim,
        "cdc": cdc,
        "rdc": rdc,
        "sdc": sdc,
        "vox2ras": vox2ras,
        "ras2vox": ras2vox,
        "vox2ras_tkr": vox2ras_tkr,
        "ras2vox_tkr": ras2vox_tkr,
        "vox2ras_fsl": vox2ras_fsl,
        "tkr2scanner": tkr2scanner,
        "scanner2tkr": scanner2tkr,
        "ras_good": ras_good,
        "cras": cras,
        "center": center,
        "zero_cras": zero_cras,
        "p0": p0,
        "det": det,
        "dof": dof,
        "nframes": nframes,
        "mid_frame": mid_frame,
        "format": format_,
        "orientation": orientation,
        "slicedirection": slicedirection,
        "autoalign": autoalign,
        "ctab": ctab,
        "cmds": cmds,
        "dump": dump,
        "entropy": entropy,
        "orig_ras2vox": orig_ras2vox,
    }
    if input2 is not None:
        params["input2"] = input2
    if voxel_crs is not None:
        params["voxel_crs"] = voxel_crs
    if output_file is not None:
        params["output_file"] = output_file
    if in_type is not None:
        params["in_type"] = in_type
    return params


def mri_info_cargs(
    params: MriInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_info")
    cargs.append(execution.input_file(params.get("input1", None)))
    if params.get("input2", None) is not None:
        cargs.append(execution.input_file(params.get("input2", None)))
    if params.get("conformed", False):
        cargs.append("--conformed")
    if params.get("conformed_to_min", False):
        cargs.append("--conformed-to-min")
    if params.get("is_1mm_iso", False):
        cargs.append("--is-1mm-iso")
    if params.get("type", False):
        cargs.append("--type")
    if params.get("tr", False):
        cargs.append("--tr")
    if params.get("te", False):
        cargs.append("--te")
    if params.get("ti", False):
        cargs.append("--ti")
    if params.get("fa", False):
        cargs.append("--fa")
    if params.get("pedir", False):
        cargs.append("--pedir")
    if params.get("res", False):
        cargs.append("--res")
    if params.get("cres", False):
        cargs.append("--cres")
    if params.get("rres", False):
        cargs.append("--rres")
    if params.get("sres", False):
        cargs.append("--sres")
    if params.get("voxvol", False):
        cargs.append("--voxvol")
    if params.get("voxvolsum", False):
        cargs.append("--voxvolsum")
    if params.get("ncols", False):
        cargs.append("--ncols")
    if params.get("nrows", False):
        cargs.append("--nrows")
    if params.get("nslices", False):
        cargs.append("--nslices")
    if params.get("dim", False):
        cargs.append("--dim")
    if params.get("cdc", False):
        cargs.append("--cdc")
    if params.get("rdc", False):
        cargs.append("--rdc")
    if params.get("sdc", False):
        cargs.append("--sdc")
    if params.get("vox2ras", False):
        cargs.append("--vox2ras")
    if params.get("ras2vox", False):
        cargs.append("--ras2vox")
    if params.get("vox2ras_tkr", False):
        cargs.append("--vox2ras-tkr")
    if params.get("ras2vox_tkr", False):
        cargs.append("--ras2vox-tkr")
    if params.get("vox2ras_fsl", False):
        cargs.append("--vox2ras-fsl")
    if params.get("tkr2scanner", False):
        cargs.append("--tkr2scanner")
    if params.get("scanner2tkr", False):
        cargs.append("--scanner2tkr")
    if params.get("ras_good", False):
        cargs.append("--ras_good")
    if params.get("cras", False):
        cargs.append("--cras")
    if params.get("center", False):
        cargs.append("--center")
    if params.get("zero_cras", False):
        cargs.append("--zero-cras")
    if params.get("p0", False):
        cargs.append("--p0")
    if params.get("det", False):
        cargs.append("--det")
    if params.get("dof", False):
        cargs.append("--dof")
    if params.get("nframes", False):
        cargs.append("--nframes")
    if params.get("mid_frame", False):
        cargs.append("--mid-frame")
    if params.get("format", False):
        cargs.append("--format")
    if params.get("orientation", False):
        cargs.append("--orientation")
    if params.get("slicedirection", False):
        cargs.append("--slicedirection")
    if params.get("autoalign", False):
        cargs.append("--autoalign")
    if params.get("ctab", False):
        cargs.append("--ctab")
    if params.get("cmds", False):
        cargs.append("--cmds")
    if params.get("dump", False):
        cargs.append("--dump")
    if params.get("voxel_crs", None) is not None:
        cargs.extend([
            "--voxel",
            *params.get("voxel_crs", None)
        ])
    if params.get("entropy", False):
        cargs.append("--entropy")
    if params.get("output_file", None) is not None:
        cargs.extend([
            "--o",
            execution.input_file(params.get("output_file", None))
        ])
    if params.get("orig_ras2vox", False):
        cargs.append("--orig_ras2vox")
    if params.get("in_type", None) is not None:
        cargs.extend([
            "--in_type",
            params.get("in_type", None)
        ])
    return cargs


def mri_info_outputs(
    params: MriInfoParameters,
    execution: Execution,
) -> MriInfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriInfoOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_info_execute(
    params: MriInfoParameters,
    runner: Runner | None = None,
) -> MriInfoOutputs:
    """
    mri_info
    
    Tool to extract metadata from MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriInfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_INFO_METADATA)
    params = execution.params(params)
    cargs = mri_info_cargs(params, execution)
    ret = mri_info_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_info(
    input1: InputPathType,
    input2: InputPathType | None = None,
    conformed: bool = False,
    conformed_to_min: bool = False,
    is_1mm_iso: bool = False,
    type_: bool = False,
    tr: bool = False,
    te: bool = False,
    ti: bool = False,
    fa: bool = False,
    pedir: bool = False,
    res: bool = False,
    cres: bool = False,
    rres: bool = False,
    sres: bool = False,
    voxvol: bool = False,
    voxvolsum: bool = False,
    ncols: bool = False,
    nrows: bool = False,
    nslices: bool = False,
    dim: bool = False,
    cdc: bool = False,
    rdc: bool = False,
    sdc: bool = False,
    vox2ras: bool = False,
    ras2vox: bool = False,
    vox2ras_tkr: bool = False,
    ras2vox_tkr: bool = False,
    vox2ras_fsl: bool = False,
    tkr2scanner: bool = False,
    scanner2tkr: bool = False,
    ras_good: bool = False,
    cras: bool = False,
    center: bool = False,
    zero_cras: bool = False,
    p0: bool = False,
    det: bool = False,
    dof: bool = False,
    nframes: bool = False,
    mid_frame: bool = False,
    format_: bool = False,
    orientation: bool = False,
    slicedirection: bool = False,
    autoalign: bool = False,
    ctab: bool = False,
    cmds: bool = False,
    dump: bool = False,
    voxel_crs: list[str] | None = None,
    entropy: bool = False,
    output_file: InputPathType | None = None,
    orig_ras2vox: bool = False,
    in_type: str | None = None,
    runner: Runner | None = None,
) -> MriInfoOutputs:
    """
    mri_info
    
    Tool to extract metadata from MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input1: Primary input file.
        input2: Secondary input file (optional).
        conformed: Print whether a volume is conformed.
        conformed_to_min: Print whether a volume is conformed-to-min.
        is_1mm_iso: Print whether the voxel size is 1mm isotropic.
        type_: Print the voxel type/precision.
        tr: Print TR.
        te: Print TE.
        ti: Print TI.
        fa: Print flip angle.
        pedir: Print phase encode direction.
        res: Print column, row, slice, and frame resolution.
        cres: Print column voxel size.
        rres: Print row voxel size.
        sres: Print slice voxel size.
        voxvol: Print voxel volume.
        voxvolsum: Compute sum of all voxels times the voxel volume.
        ncols: Print number of columns.
        nrows: Print number of rows.
        nslices: Print number of slices.
        dim: Print number of columns, rows, slices, and frames.
        cdc: Print column direction cosine (x_{r,a,s}).
        rdc: Print row direction cosine (y_{r,a,s}).
        sdc: Print slice direction cosine (z_{r,a,s}).
        vox2ras: Print the native/qform vox2ras matrix.
        ras2vox: Print the native/qform ras2vox matrix.
        vox2ras_tkr: Print the tkregister vox2ras matrix.
        ras2vox_tkr: Print the tkregister ras2vox matrix.
        vox2ras_fsl: Print the FSL/FLIRT vox2ras matrix.
        tkr2scanner: Print tkrRAS-to-scannerRAS matrix.
        scanner2tkr: Print scannerRAS-to-tkrRAS matrix.
        ras_good: Print the ras_good_flag.
        cras: Print the RAS near the center of the volume.
        center: Print the RAS at the actual center of the volume.
        zero_cras: Zero the center ras.
        p0: Print the RAS at voxel (0,0,0).
        det: Print the determinant of the vox2ras matrix.
        dof: Print the degrees of freedom stored in the header.
        nframes: Print the number of frames.
        mid_frame: Print the middle frame.
        format_: Print file format.
        orientation: Print orientation string (e.g., LPS, RAS, RPI).
        slicedirection: Print primary slice direction (e.g., axial).
        autoalign: Print auto align matrix (if it exists).
        ctab: Print embedded color lookup table.
        cmds: Print command-line provenance info.
        dump: Print FA, TR, TE, TI, etc.
        voxel_crs: Dump voxel value from column, row, slice (0-based, all\
            frames).
        entropy: Compute and print entropy.
        output_file: Print flagged results to file.
        orig_ras2vox: Print orig Ras2Vox matrix if present.
        in_type: Explicitly specify file type.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriInfoOutputs`).
    """
    params = mri_info_params(
        input1=input1,
        input2=input2,
        conformed=conformed,
        conformed_to_min=conformed_to_min,
        is_1mm_iso=is_1mm_iso,
        type_=type_,
        tr=tr,
        te=te,
        ti=ti,
        fa=fa,
        pedir=pedir,
        res=res,
        cres=cres,
        rres=rres,
        sres=sres,
        voxvol=voxvol,
        voxvolsum=voxvolsum,
        ncols=ncols,
        nrows=nrows,
        nslices=nslices,
        dim=dim,
        cdc=cdc,
        rdc=rdc,
        sdc=sdc,
        vox2ras=vox2ras,
        ras2vox=ras2vox,
        vox2ras_tkr=vox2ras_tkr,
        ras2vox_tkr=ras2vox_tkr,
        vox2ras_fsl=vox2ras_fsl,
        tkr2scanner=tkr2scanner,
        scanner2tkr=scanner2tkr,
        ras_good=ras_good,
        cras=cras,
        center=center,
        zero_cras=zero_cras,
        p0=p0,
        det=det,
        dof=dof,
        nframes=nframes,
        mid_frame=mid_frame,
        format_=format_,
        orientation=orientation,
        slicedirection=slicedirection,
        autoalign=autoalign,
        ctab=ctab,
        cmds=cmds,
        dump=dump,
        voxel_crs=voxel_crs,
        entropy=entropy,
        output_file=output_file,
        orig_ras2vox=orig_ras2vox,
        in_type=in_type,
    )
    return mri_info_execute(params, runner)


__all__ = [
    "MRI_INFO_METADATA",
    "MriInfoOutputs",
    "mri_info",
    "mri_info_execute",
    "mri_info_params",
]
