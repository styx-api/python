# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_JOINT_DENSITY_METADATA = Metadata(
    id="22c5f270509861f3650c308c5077138855fa66db.boutiques",
    name="mri_joint_density",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriJointDensityParameters = typing.TypedDict('MriJointDensityParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_joint_density"]],
    "vol1": InputPathType,
    "vol2": InputPathType,
    "output_density_file": str,
})
MriJointDensityParametersTagged = typing.TypedDict('MriJointDensityParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_joint_density"],
    "vol1": InputPathType,
    "vol2": InputPathType,
    "output_density_file": str,
})


class MriJointDensityOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriJointDensityParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output file containing the computed joint density"""


def mri_joint_density_params(
    vol1: InputPathType,
    vol2: InputPathType,
    output_density_file: str,
) -> MriJointDensityParametersTagged:
    """
    Build parameters.
    
    Args:
        vol1: First input volume.
        vol2: Second input volume.
        output_density_file: Output joint density file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_joint_density",
        "vol1": vol1,
        "vol2": vol2,
        "output_density_file": output_density_file,
    }
    return params


def mri_joint_density_cargs(
    params: MriJointDensityParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_joint_density")
    cargs.append(execution.input_file(params.get("vol1", None)))
    cargs.append(execution.input_file(params.get("vol2", None)))
    cargs.append(params.get("output_density_file", None))
    return cargs


def mri_joint_density_outputs(
    params: MriJointDensityParameters,
    execution: Execution,
) -> MriJointDensityOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriJointDensityOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_density_file", None)),
    )
    return ret


def mri_joint_density_execute(
    params: MriJointDensityParameters,
    runner: Runner | None = None,
) -> MriJointDensityOutputs:
    """
    mri_joint_density
    
    Tool for computing joint density from two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriJointDensityOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_JOINT_DENSITY_METADATA)
    params = execution.params(params)
    cargs = mri_joint_density_cargs(params, execution)
    ret = mri_joint_density_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_joint_density(
    vol1: InputPathType,
    vol2: InputPathType,
    output_density_file: str,
    runner: Runner | None = None,
) -> MriJointDensityOutputs:
    """
    mri_joint_density
    
    Tool for computing joint density from two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        vol1: First input volume.
        vol2: Second input volume.
        output_density_file: Output joint density file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriJointDensityOutputs`).
    """
    params = mri_joint_density_params(
        vol1=vol1,
        vol2=vol2,
        output_density_file=output_density_file,
    )
    return mri_joint_density_execute(params, runner)


__all__ = [
    "MRI_JOINT_DENSITY_METADATA",
    "MriJointDensityOutputs",
    "mri_joint_density",
    "mri_joint_density_execute",
    "mri_joint_density_params",
]
