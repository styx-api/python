# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LABEL_VALS_METADATA = Metadata(
    id="15ff606d2887e79e2bfb5436245a0c3edde29022.boutiques",
    name="mri_label_vals",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLabelValsParameters = typing.TypedDict('MriLabelValsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_label_vals"]],
    "volume": InputPathType,
    "label_file": InputPathType,
    "cras_flag": bool,
    "help_flag": bool,
})
MriLabelValsParametersTagged = typing.TypedDict('MriLabelValsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_label_vals"],
    "volume": InputPathType,
    "label_file": InputPathType,
    "cras_flag": bool,
    "help_flag": bool,
})


class MriLabelValsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriLabelValsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_label_vals_params(
    volume: InputPathType,
    label_file: InputPathType,
    cras_flag: bool = False,
    help_flag: bool = False,
) -> MriLabelValsParametersTagged:
    """
    Build parameters.
    
    Args:
        volume: Input volume file.
        label_file: Input label file.
        cras_flag: Use this option if the label was created where c_(r,a,s) !=\
            0.
        help_flag: Print help.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_label_vals",
        "volume": volume,
        "label_file": label_file,
        "cras_flag": cras_flag,
        "help_flag": help_flag,
    }
    return params


def mri_label_vals_cargs(
    params: MriLabelValsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_label_vals")
    cargs.append(execution.input_file(params.get("volume", None)))
    cargs.append(execution.input_file(params.get("label_file", None)))
    if params.get("cras_flag", False):
        cargs.append("-cras")
    if params.get("help_flag", False):
        cargs.append("-u")
    return cargs


def mri_label_vals_outputs(
    params: MriLabelValsParameters,
    execution: Execution,
) -> MriLabelValsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLabelValsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_label_vals_execute(
    params: MriLabelValsParameters,
    runner: Runner | None = None,
) -> MriLabelValsOutputs:
    """
    mri_label_vals
    
    Extract values at label coordinates from a volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLabelValsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LABEL_VALS_METADATA)
    params = execution.params(params)
    cargs = mri_label_vals_cargs(params, execution)
    ret = mri_label_vals_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_label_vals(
    volume: InputPathType,
    label_file: InputPathType,
    cras_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> MriLabelValsOutputs:
    """
    mri_label_vals
    
    Extract values at label coordinates from a volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        volume: Input volume file.
        label_file: Input label file.
        cras_flag: Use this option if the label was created where c_(r,a,s) !=\
            0.
        help_flag: Print help.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLabelValsOutputs`).
    """
    params = mri_label_vals_params(
        volume=volume,
        label_file=label_file,
        cras_flag=cras_flag,
        help_flag=help_flag,
    )
    return mri_label_vals_execute(params, runner)


__all__ = [
    "MRI_LABEL_VALS_METADATA",
    "MriLabelValsOutputs",
    "mri_label_vals",
    "mri_label_vals_execute",
    "mri_label_vals_params",
]
