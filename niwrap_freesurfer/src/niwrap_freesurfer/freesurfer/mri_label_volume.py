# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LABEL_VOLUME_METADATA = Metadata(
    id="99198f949ed98f95d26d4d6070c2f37caba7c4ac.boutiques",
    name="mri_label_volume",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLabelVolumeParameters = typing.TypedDict('MriLabelVolumeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_label_volume"]],
    "volume": InputPathType,
    "labels": list[str],
    "partial_volume_effects": typing.NotRequired[InputPathType | None],
    "intracranial_volume": typing.NotRequired[InputPathType | None],
    "spreadsheet_subject": typing.NotRequired[str | None],
    "non_zero_voxels": bool,
    "replace_label_in": typing.NotRequired[str | None],
    "replace_label_out": typing.NotRequired[str | None],
    "brain_volume": typing.NotRequired[InputPathType | None],
    "percentage": bool,
    "log_results": typing.NotRequired[InputPathType | None],
    "atlas_transform_file": typing.NotRequired[InputPathType | None],
    "atlas_scalefactor": typing.NotRequired[float | None],
    "etiv_transform_file": typing.NotRequired[InputPathType | None],
    "etiv_scalefactor": typing.NotRequired[float | None],
    "etiv_subject": typing.NotRequired[str | None],
})
MriLabelVolumeParametersTagged = typing.TypedDict('MriLabelVolumeParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_label_volume"],
    "volume": InputPathType,
    "labels": list[str],
    "partial_volume_effects": typing.NotRequired[InputPathType | None],
    "intracranial_volume": typing.NotRequired[InputPathType | None],
    "spreadsheet_subject": typing.NotRequired[str | None],
    "non_zero_voxels": bool,
    "replace_label_in": typing.NotRequired[str | None],
    "replace_label_out": typing.NotRequired[str | None],
    "brain_volume": typing.NotRequired[InputPathType | None],
    "percentage": bool,
    "log_results": typing.NotRequired[InputPathType | None],
    "atlas_transform_file": typing.NotRequired[InputPathType | None],
    "atlas_scalefactor": typing.NotRequired[float | None],
    "etiv_transform_file": typing.NotRequired[InputPathType | None],
    "etiv_scalefactor": typing.NotRequired[float | None],
    "etiv_subject": typing.NotRequired[str | None],
})


class MriLabelVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriLabelVolumeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_results: OutputPathType
    """Computed volume results."""
    output_log_results: OutputPathType
    """Log file if -l option is used."""


def mri_label_volume_params(
    volume: InputPathType,
    labels: list[str],
    partial_volume_effects: InputPathType | None = None,
    intracranial_volume: InputPathType | None = None,
    spreadsheet_subject: str | None = None,
    non_zero_voxels: bool = False,
    replace_label_in: str | None = None,
    replace_label_out: str | None = None,
    brain_volume: InputPathType | None = None,
    percentage: bool = False,
    log_results: InputPathType | None = None,
    atlas_transform_file: InputPathType | None = None,
    atlas_scalefactor: float | None = None,
    etiv_transform_file: InputPathType | None = None,
    etiv_scalefactor: float | None = None,
    etiv_subject: str | None = None,
) -> MriLabelVolumeParametersTagged:
    """
    Build parameters.
    
    Args:
        volume: Volume file (e.g., volume.mgz) to analyze.
        labels: Labels to compute volume for.
        partial_volume_effects: Compute partial volume effects using intensity\
            volume.
        intracranial_volume: Normalize by the intracranial volume in provided\
            file.
        spreadsheet_subject: Output in spreadsheet mode, including subject name.
        non_zero_voxels: Compute volume of all non-zero voxels (e.g. for\
            computing brain volume).
        replace_label_in: Replace label <in> with label <out>.
        replace_label_out: Label to replace with.
        brain_volume: Compute the brain volume from provided brain volume file\
            and normalize by it.
        percentage: Compute volume as a percentage of all non-zero labels.
        log_results: Log results to provided file.
        atlas_transform_file: Specify LTA or XFM atlas transform file and scale\
            factor to use for ICV correction.
        atlas_scalefactor: Scale factor for ICV correction.
        etiv_transform_file: Same as -atlas_icv.
        etiv_scalefactor: eTIV scale factor.
        etiv_subject: Same as -eTIV, and generate MATLAB data appending subject\
            to structure.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_label_volume",
        "volume": volume,
        "labels": labels,
        "non_zero_voxels": non_zero_voxels,
        "percentage": percentage,
    }
    if partial_volume_effects is not None:
        params["partial_volume_effects"] = partial_volume_effects
    if intracranial_volume is not None:
        params["intracranial_volume"] = intracranial_volume
    if spreadsheet_subject is not None:
        params["spreadsheet_subject"] = spreadsheet_subject
    if replace_label_in is not None:
        params["replace_label_in"] = replace_label_in
    if replace_label_out is not None:
        params["replace_label_out"] = replace_label_out
    if brain_volume is not None:
        params["brain_volume"] = brain_volume
    if log_results is not None:
        params["log_results"] = log_results
    if atlas_transform_file is not None:
        params["atlas_transform_file"] = atlas_transform_file
    if atlas_scalefactor is not None:
        params["atlas_scalefactor"] = atlas_scalefactor
    if etiv_transform_file is not None:
        params["etiv_transform_file"] = etiv_transform_file
    if etiv_scalefactor is not None:
        params["etiv_scalefactor"] = etiv_scalefactor
    if etiv_subject is not None:
        params["etiv_subject"] = etiv_subject
    return params


def mri_label_volume_cargs(
    params: MriLabelVolumeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_label_volume")
    cargs.append(execution.input_file(params.get("volume", None)))
    cargs.extend(params.get("labels", None))
    if params.get("partial_volume_effects", None) is not None:
        cargs.extend([
            "-pv",
            execution.input_file(params.get("partial_volume_effects", None))
        ])
    if params.get("intracranial_volume", None) is not None:
        cargs.extend([
            "-icv",
            execution.input_file(params.get("intracranial_volume", None))
        ])
    if params.get("spreadsheet_subject", None) is not None:
        cargs.extend([
            "-s",
            params.get("spreadsheet_subject", None)
        ])
    if params.get("non_zero_voxels", False):
        cargs.append("-a")
    if params.get("replace_label_in", None) is not None:
        cargs.extend([
            "-t",
            params.get("replace_label_in", None)
        ])
    if params.get("replace_label_out", None) is not None:
        cargs.append(params.get("replace_label_out", None))
    if params.get("brain_volume", None) is not None:
        cargs.extend([
            "-b",
            execution.input_file(params.get("brain_volume", None))
        ])
    if params.get("percentage", False):
        cargs.append("-p")
    if params.get("log_results", None) is not None:
        cargs.extend([
            "-l",
            execution.input_file(params.get("log_results", None))
        ])
    if params.get("atlas_transform_file", None) is not None:
        cargs.extend([
            "-atlas_icv",
            execution.input_file(params.get("atlas_transform_file", None))
        ])
    if params.get("atlas_scalefactor", None) is not None:
        cargs.append(str(params.get("atlas_scalefactor", None)))
    if params.get("etiv_transform_file", None) is not None:
        cargs.extend([
            "-eTIV",
            execution.input_file(params.get("etiv_transform_file", None))
        ])
    if params.get("etiv_scalefactor", None) is not None:
        cargs.append(str(params.get("etiv_scalefactor", None)))
    if params.get("etiv_subject", None) is not None:
        cargs.extend([
            "-eTIV_matdat",
            params.get("etiv_subject", None)
        ])
    return cargs


def mri_label_volume_outputs(
    params: MriLabelVolumeParameters,
    execution: Execution,
) -> MriLabelVolumeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLabelVolumeOutputs(
        root=execution.output_file("."),
        output_volume_results=execution.output_file("volume_label_results.txt"),
        output_log_results=execution.output_file("volume_log.txt"),
    )
    return ret


def mri_label_volume_execute(
    params: MriLabelVolumeParameters,
    runner: Runner | None = None,
) -> MriLabelVolumeOutputs:
    """
    mri_label_volume
    
    A tool to compute volumes of labeled voxels within MRI images, often used in
    conjunction with FreeSurfer processed data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLabelVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LABEL_VOLUME_METADATA)
    params = execution.params(params)
    cargs = mri_label_volume_cargs(params, execution)
    ret = mri_label_volume_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_label_volume(
    volume: InputPathType,
    labels: list[str],
    partial_volume_effects: InputPathType | None = None,
    intracranial_volume: InputPathType | None = None,
    spreadsheet_subject: str | None = None,
    non_zero_voxels: bool = False,
    replace_label_in: str | None = None,
    replace_label_out: str | None = None,
    brain_volume: InputPathType | None = None,
    percentage: bool = False,
    log_results: InputPathType | None = None,
    atlas_transform_file: InputPathType | None = None,
    atlas_scalefactor: float | None = None,
    etiv_transform_file: InputPathType | None = None,
    etiv_scalefactor: float | None = None,
    etiv_subject: str | None = None,
    runner: Runner | None = None,
) -> MriLabelVolumeOutputs:
    """
    mri_label_volume
    
    A tool to compute volumes of labeled voxels within MRI images, often used in
    conjunction with FreeSurfer processed data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        volume: Volume file (e.g., volume.mgz) to analyze.
        labels: Labels to compute volume for.
        partial_volume_effects: Compute partial volume effects using intensity\
            volume.
        intracranial_volume: Normalize by the intracranial volume in provided\
            file.
        spreadsheet_subject: Output in spreadsheet mode, including subject name.
        non_zero_voxels: Compute volume of all non-zero voxels (e.g. for\
            computing brain volume).
        replace_label_in: Replace label <in> with label <out>.
        replace_label_out: Label to replace with.
        brain_volume: Compute the brain volume from provided brain volume file\
            and normalize by it.
        percentage: Compute volume as a percentage of all non-zero labels.
        log_results: Log results to provided file.
        atlas_transform_file: Specify LTA or XFM atlas transform file and scale\
            factor to use for ICV correction.
        atlas_scalefactor: Scale factor for ICV correction.
        etiv_transform_file: Same as -atlas_icv.
        etiv_scalefactor: eTIV scale factor.
        etiv_subject: Same as -eTIV, and generate MATLAB data appending subject\
            to structure.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLabelVolumeOutputs`).
    """
    params = mri_label_volume_params(
        volume=volume,
        labels=labels,
        partial_volume_effects=partial_volume_effects,
        intracranial_volume=intracranial_volume,
        spreadsheet_subject=spreadsheet_subject,
        non_zero_voxels=non_zero_voxels,
        replace_label_in=replace_label_in,
        replace_label_out=replace_label_out,
        brain_volume=brain_volume,
        percentage=percentage,
        log_results=log_results,
        atlas_transform_file=atlas_transform_file,
        atlas_scalefactor=atlas_scalefactor,
        etiv_transform_file=etiv_transform_file,
        etiv_scalefactor=etiv_scalefactor,
        etiv_subject=etiv_subject,
    )
    return mri_label_volume_execute(params, runner)


__all__ = [
    "MRI_LABEL_VOLUME_METADATA",
    "MriLabelVolumeOutputs",
    "mri_label_volume",
    "mri_label_volume_execute",
    "mri_label_volume_params",
]
