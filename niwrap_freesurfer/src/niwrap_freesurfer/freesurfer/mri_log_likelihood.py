# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LOG_LIKELIHOOD_METADATA = Metadata(
    id="eaf0cd368015e3f1894c378225e3a77f0bdc583e.boutiques",
    name="mri_log_likelihood",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLogLikelihoodParameters = typing.TypedDict('MriLogLikelihoodParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_log_likelihood"]],
    "input_brain_images": list[InputPathType],
    "atlas_file": InputPathType,
    "transform_file": InputPathType,
})
MriLogLikelihoodParametersTagged = typing.TypedDict('MriLogLikelihoodParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_log_likelihood"],
    "input_brain_images": list[InputPathType],
    "atlas_file": InputPathType,
    "transform_file": InputPathType,
})


class MriLogLikelihoodOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriLogLikelihoodParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_log_likelihood_params(
    input_brain_images: list[InputPathType],
    atlas_file: InputPathType,
    transform_file: InputPathType,
) -> MriLogLikelihoodParametersTagged:
    """
    Build parameters.
    
    Args:
        input_brain_images: List of input brain images.
        atlas_file: Atlas image file.
        transform_file: Transform file for registration.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_log_likelihood",
        "input_brain_images": input_brain_images,
        "atlas_file": atlas_file,
        "transform_file": transform_file,
    }
    return params


def mri_log_likelihood_cargs(
    params: MriLogLikelihoodParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_log_likelihood")
    cargs.extend([execution.input_file(f) for f in params.get("input_brain_images", None)])
    cargs.append(execution.input_file(params.get("atlas_file", None)))
    cargs.append(execution.input_file(params.get("transform_file", None)))
    return cargs


def mri_log_likelihood_outputs(
    params: MriLogLikelihoodParameters,
    execution: Execution,
) -> MriLogLikelihoodOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLogLikelihoodOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_log_likelihood_execute(
    params: MriLogLikelihoodParameters,
    runner: Runner | None = None,
) -> MriLogLikelihoodOutputs:
    """
    mri_log_likelihood
    
    MRI log likelihood calculation tool for brain images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLogLikelihoodOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LOG_LIKELIHOOD_METADATA)
    params = execution.params(params)
    cargs = mri_log_likelihood_cargs(params, execution)
    ret = mri_log_likelihood_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_log_likelihood(
    input_brain_images: list[InputPathType],
    atlas_file: InputPathType,
    transform_file: InputPathType,
    runner: Runner | None = None,
) -> MriLogLikelihoodOutputs:
    """
    mri_log_likelihood
    
    MRI log likelihood calculation tool for brain images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_brain_images: List of input brain images.
        atlas_file: Atlas image file.
        transform_file: Transform file for registration.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLogLikelihoodOutputs`).
    """
    params = mri_log_likelihood_params(
        input_brain_images=input_brain_images,
        atlas_file=atlas_file,
        transform_file=transform_file,
    )
    return mri_log_likelihood_execute(params, runner)


__all__ = [
    "MRI_LOG_LIKELIHOOD_METADATA",
    "MriLogLikelihoodOutputs",
    "mri_log_likelihood",
    "mri_log_likelihood_execute",
    "mri_log_likelihood_params",
]
