# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_LONG_NORMALIZE_METADATA = Metadata(
    id="c7839b9097895dc2245c2fa14cd976deef4c9594.boutiques",
    name="mri_long_normalize",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriLongNormalizeParameters = typing.TypedDict('MriLongNormalizeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_long_normalize"]],
    "input_vol": InputPathType,
    "base_tp_file": InputPathType,
    "output_vol": str,
    "normalization_iters": typing.NotRequired[int | None],
    "disable_1d": bool,
    "smooth_bias": typing.NotRequired[float | None],
    "aseg": typing.NotRequired[InputPathType | None],
    "debug_gvx": typing.NotRequired[list[float] | None],
    "debug_gx": typing.NotRequired[list[float] | None],
    "reading": typing.NotRequired[list[str] | None],
    "print_usage": bool,
})
MriLongNormalizeParametersTagged = typing.TypedDict('MriLongNormalizeParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_long_normalize"],
    "input_vol": InputPathType,
    "base_tp_file": InputPathType,
    "output_vol": str,
    "normalization_iters": typing.NotRequired[int | None],
    "disable_1d": bool,
    "smooth_bias": typing.NotRequired[float | None],
    "aseg": typing.NotRequired[InputPathType | None],
    "debug_gvx": typing.NotRequired[list[float] | None],
    "debug_gx": typing.NotRequired[list[float] | None],
    "reading": typing.NotRequired[list[str] | None],
    "print_usage": bool,
})


class MriLongNormalizeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriLongNormalizeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output MRI volume file."""


def mri_long_normalize_params(
    input_vol: InputPathType,
    base_tp_file: InputPathType,
    output_vol: str,
    normalization_iters: int | None = None,
    disable_1d: bool = False,
    smooth_bias: float | None = None,
    aseg: InputPathType | None = None,
    debug_gvx: list[float] | None = None,
    debug_gx: list[float] | None = None,
    reading: list[str] | None = None,
    print_usage: bool = False,
) -> MriLongNormalizeParametersTagged:
    """
    Build parameters.
    
    Args:
        input_vol: Input MRI volume file.
        base_tp_file: Base time point file.
        output_vol: Output MRI volume file.
        normalization_iters: Use n 3D normalization iterations (default is 2).
        disable_1d: Disable 1D normalization.
        smooth_bias: Smooth the bias field.
        aseg: Aseg file specification.
        debug_gvx: For debugging: specify Gvx, Gvy, Gvz.
        debug_gx: For debugging: specify Gx, Gy, Gz.
        reading: For reading: specify control points and bias field.
        print_usage: Print usage information.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_long_normalize",
        "input_vol": input_vol,
        "base_tp_file": base_tp_file,
        "output_vol": output_vol,
        "disable_1d": disable_1d,
        "print_usage": print_usage,
    }
    if normalization_iters is not None:
        params["normalization_iters"] = normalization_iters
    if smooth_bias is not None:
        params["smooth_bias"] = smooth_bias
    if aseg is not None:
        params["aseg"] = aseg
    if debug_gvx is not None:
        params["debug_gvx"] = debug_gvx
    if debug_gx is not None:
        params["debug_gx"] = debug_gx
    if reading is not None:
        params["reading"] = reading
    return params


def mri_long_normalize_cargs(
    params: MriLongNormalizeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_long_normalize")
    cargs.append(execution.input_file(params.get("input_vol", None)))
    cargs.append(execution.input_file(params.get("base_tp_file", None)))
    cargs.append(params.get("output_vol", None))
    if params.get("normalization_iters", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("normalization_iters", None))
        ])
    if params.get("disable_1d", False):
        cargs.append("-no1d")
    if params.get("smooth_bias", None) is not None:
        cargs.extend([
            "-sigma",
            str(params.get("smooth_bias", None))
        ])
    if params.get("aseg", None) is not None:
        cargs.extend([
            "-a",
            execution.input_file(params.get("aseg", None))
        ])
    if params.get("debug_gvx", None) is not None:
        cargs.extend([
            "-v",
            *map(str, params.get("debug_gvx", None))
        ])
    if params.get("debug_gx", None) is not None:
        cargs.extend([
            "-d",
            *map(str, params.get("debug_gx", None))
        ])
    if params.get("reading", None) is not None:
        cargs.extend([
            "-r",
            *params.get("reading", None)
        ])
    if params.get("print_usage", False):
        cargs.append("-u")
    return cargs


def mri_long_normalize_outputs(
    params: MriLongNormalizeParameters,
    execution: Execution,
) -> MriLongNormalizeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriLongNormalizeOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_vol", None)),
    )
    return ret


def mri_long_normalize_execute(
    params: MriLongNormalizeParameters,
    runner: Runner | None = None,
) -> MriLongNormalizeOutputs:
    """
    mri_long_normalize
    
    Tool to normalize the white-matter of MRI volumes, optionally based on
    control points.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLongNormalizeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_LONG_NORMALIZE_METADATA)
    params = execution.params(params)
    cargs = mri_long_normalize_cargs(params, execution)
    ret = mri_long_normalize_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_long_normalize(
    input_vol: InputPathType,
    base_tp_file: InputPathType,
    output_vol: str,
    normalization_iters: int | None = None,
    disable_1d: bool = False,
    smooth_bias: float | None = None,
    aseg: InputPathType | None = None,
    debug_gvx: list[float] | None = None,
    debug_gx: list[float] | None = None,
    reading: list[str] | None = None,
    print_usage: bool = False,
    runner: Runner | None = None,
) -> MriLongNormalizeOutputs:
    """
    mri_long_normalize
    
    Tool to normalize the white-matter of MRI volumes, optionally based on
    control points.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_vol: Input MRI volume file.
        base_tp_file: Base time point file.
        output_vol: Output MRI volume file.
        normalization_iters: Use n 3D normalization iterations (default is 2).
        disable_1d: Disable 1D normalization.
        smooth_bias: Smooth the bias field.
        aseg: Aseg file specification.
        debug_gvx: For debugging: specify Gvx, Gvy, Gvz.
        debug_gx: For debugging: specify Gx, Gy, Gz.
        reading: For reading: specify control points and bias field.
        print_usage: Print usage information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriLongNormalizeOutputs`).
    """
    params = mri_long_normalize_params(
        input_vol=input_vol,
        base_tp_file=base_tp_file,
        output_vol=output_vol,
        normalization_iters=normalization_iters,
        disable_1d=disable_1d,
        smooth_bias=smooth_bias,
        aseg=aseg,
        debug_gvx=debug_gvx,
        debug_gx=debug_gx,
        reading=reading,
        print_usage=print_usage,
    )
    return mri_long_normalize_execute(params, runner)


__all__ = [
    "MRI_LONG_NORMALIZE_METADATA",
    "MriLongNormalizeOutputs",
    "mri_long_normalize",
    "mri_long_normalize_execute",
    "mri_long_normalize_params",
]
