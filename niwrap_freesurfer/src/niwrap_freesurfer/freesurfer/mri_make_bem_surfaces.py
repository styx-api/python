# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MAKE_BEM_SURFACES_METADATA = Metadata(
    id="bf604b98772344df00f9c5bf8df0b04b2b8ed831.boutiques",
    name="mri_make_bem_surfaces",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMakeBemSurfacesParameters = typing.TypedDict('MriMakeBemSurfacesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_make_bem_surfaces"]],
    "name": str,
    "mfile": typing.NotRequired[InputPathType | None],
})
MriMakeBemSurfacesParametersTagged = typing.TypedDict('MriMakeBemSurfacesParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_make_bem_surfaces"],
    "name": str,
    "mfile": typing.NotRequired[InputPathType | None],
})


class MriMakeBemSurfacesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMakeBemSurfacesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    inner_skull_tri: OutputPathType
    """Generated inner skull surface triangle file."""
    inner_skull_tmp_tri: OutputPathType
    """Temporary file for best guess at inner skull surface."""


def mri_make_bem_surfaces_params(
    name: str,
    mfile: InputPathType | None = None,
) -> MriMakeBemSurfacesParametersTagged:
    """
    Build parameters.
    
    Args:
        name: The name of the subject or session to process.
        mfile: Optional mfile parameter to provide additional settings.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_make_bem_surfaces",
        "name": name,
    }
    if mfile is not None:
        params["mfile"] = mfile
    return params


def mri_make_bem_surfaces_cargs(
    params: MriMakeBemSurfacesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_make_bem_surfaces")
    cargs.append(params.get("name", None))
    if params.get("mfile", None) is not None:
        cargs.append(execution.input_file(params.get("mfile", None)))
    return cargs


def mri_make_bem_surfaces_outputs(
    params: MriMakeBemSurfacesParameters,
    execution: Execution,
) -> MriMakeBemSurfacesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMakeBemSurfacesOutputs(
        root=execution.output_file("."),
        inner_skull_tri=execution.output_file("inner_skull.tri"),
        inner_skull_tmp_tri=execution.output_file("inner_skull_tmp.tri"),
    )
    return ret


def mri_make_bem_surfaces_execute(
    params: MriMakeBemSurfacesParameters,
    runner: Runner | None = None,
) -> MriMakeBemSurfacesOutputs:
    """
    mri_make_bem_surfaces
    
    Tool to create Boundary Element Method (BEM) surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMakeBemSurfacesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MAKE_BEM_SURFACES_METADATA)
    params = execution.params(params)
    cargs = mri_make_bem_surfaces_cargs(params, execution)
    ret = mri_make_bem_surfaces_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_make_bem_surfaces(
    name: str,
    mfile: InputPathType | None = None,
    runner: Runner | None = None,
) -> MriMakeBemSurfacesOutputs:
    """
    mri_make_bem_surfaces
    
    Tool to create Boundary Element Method (BEM) surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        name: The name of the subject or session to process.
        mfile: Optional mfile parameter to provide additional settings.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMakeBemSurfacesOutputs`).
    """
    params = mri_make_bem_surfaces_params(
        name=name,
        mfile=mfile,
    )
    return mri_make_bem_surfaces_execute(params, runner)


__all__ = [
    "MRI_MAKE_BEM_SURFACES_METADATA",
    "MriMakeBemSurfacesOutputs",
    "mri_make_bem_surfaces",
    "mri_make_bem_surfaces_execute",
    "mri_make_bem_surfaces_params",
]
