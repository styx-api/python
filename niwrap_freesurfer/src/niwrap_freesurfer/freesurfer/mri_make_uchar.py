# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MAKE_UCHAR_METADATA = Metadata(
    id="3fb5e642570f4b2a846337e6be47633d5e4e61e0.boutiques",
    name="mri_make_uchar",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMakeUcharParameters = typing.TypedDict('MriMakeUcharParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_make_uchar"]],
    "input_volume": InputPathType,
    "talairach_xform": InputPathType,
    "output_volume": str,
    "first_percentile": typing.NotRequired[float | None],
    "wm_percentile": typing.NotRequired[float | None],
    "max_radius": typing.NotRequired[float | None],
    "cumulative_histo": typing.NotRequired[str | None],
    "vradvol": typing.NotRequired[str | None],
})
MriMakeUcharParametersTagged = typing.TypedDict('MriMakeUcharParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_make_uchar"],
    "input_volume": InputPathType,
    "talairach_xform": InputPathType,
    "output_volume": str,
    "first_percentile": typing.NotRequired[float | None],
    "wm_percentile": typing.NotRequired[float | None],
    "max_radius": typing.NotRequired[float | None],
    "cumulative_histo": typing.NotRequired[str | None],
    "vradvol": typing.NotRequired[str | None],
})


class MriMakeUcharOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMakeUcharParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume from mri_make_uchar processing"""


def mri_make_uchar_params(
    input_volume: InputPathType,
    talairach_xform: InputPathType,
    output_volume: str,
    first_percentile: float | None = None,
    wm_percentile: float | None = None,
    max_radius: float | None = None,
    cumulative_histo: str | None = None,
    vradvol: str | None = None,
) -> MriMakeUcharParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume file.
        talairach_xform: Talairach transformation file.
        output_volume: Output volume file.
        first_percentile: First percentile for histogram calculation (default\
            0.01).
        wm_percentile: White matter percentile for histogram calculation\
            (default 0.9).
        max_radius: Maximum radius for voxel consideration (default 50).
        cumulative_histo: Cumulative histogram file.
        vradvol: Volume file where everything outside MAX_R is set to 0.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_make_uchar",
        "input_volume": input_volume,
        "talairach_xform": talairach_xform,
        "output_volume": output_volume,
    }
    if first_percentile is not None:
        params["first_percentile"] = first_percentile
    if wm_percentile is not None:
        params["wm_percentile"] = wm_percentile
    if max_radius is not None:
        params["max_radius"] = max_radius
    if cumulative_histo is not None:
        params["cumulative_histo"] = cumulative_histo
    if vradvol is not None:
        params["vradvol"] = vradvol
    return params


def mri_make_uchar_cargs(
    params: MriMakeUcharParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_make_uchar")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(execution.input_file(params.get("talairach_xform", None)))
    cargs.append(params.get("output_volume", None))
    if params.get("first_percentile", None) is not None:
        cargs.extend([
            "-f",
            str(params.get("first_percentile", None))
        ])
    if params.get("wm_percentile", None) is not None:
        cargs.extend([
            "-w",
            str(params.get("wm_percentile", None))
        ])
    if params.get("max_radius", None) is not None:
        cargs.extend([
            "-r",
            str(params.get("max_radius", None))
        ])
    if params.get("cumulative_histo", None) is not None:
        cargs.extend([
            "-h",
            params.get("cumulative_histo", None)
        ])
    if params.get("vradvol", None) is not None:
        cargs.extend([
            "-v",
            params.get("vradvol", None)
        ])
    return cargs


def mri_make_uchar_outputs(
    params: MriMakeUcharParameters,
    execution: Execution,
) -> MriMakeUcharOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMakeUcharOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_make_uchar_execute(
    params: MriMakeUcharParameters,
    runner: Runner | None = None,
) -> MriMakeUcharOutputs:
    """
    mri_make_uchar
    
    Tool to adjust intensity of brain MRI images using a Talairach
    transformation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMakeUcharOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MAKE_UCHAR_METADATA)
    params = execution.params(params)
    cargs = mri_make_uchar_cargs(params, execution)
    ret = mri_make_uchar_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_make_uchar(
    input_volume: InputPathType,
    talairach_xform: InputPathType,
    output_volume: str,
    first_percentile: float | None = None,
    wm_percentile: float | None = None,
    max_radius: float | None = None,
    cumulative_histo: str | None = None,
    vradvol: str | None = None,
    runner: Runner | None = None,
) -> MriMakeUcharOutputs:
    """
    mri_make_uchar
    
    Tool to adjust intensity of brain MRI images using a Talairach
    transformation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume file.
        talairach_xform: Talairach transformation file.
        output_volume: Output volume file.
        first_percentile: First percentile for histogram calculation (default\
            0.01).
        wm_percentile: White matter percentile for histogram calculation\
            (default 0.9).
        max_radius: Maximum radius for voxel consideration (default 50).
        cumulative_histo: Cumulative histogram file.
        vradvol: Volume file where everything outside MAX_R is set to 0.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMakeUcharOutputs`).
    """
    params = mri_make_uchar_params(
        input_volume=input_volume,
        talairach_xform=talairach_xform,
        output_volume=output_volume,
        first_percentile=first_percentile,
        wm_percentile=wm_percentile,
        max_radius=max_radius,
        cumulative_histo=cumulative_histo,
        vradvol=vradvol,
    )
    return mri_make_uchar_execute(params, runner)


__all__ = [
    "MRI_MAKE_UCHAR_METADATA",
    "MriMakeUcharOutputs",
    "mri_make_uchar",
    "mri_make_uchar_execute",
    "mri_make_uchar_params",
]
