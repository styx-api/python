# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MARK_TEMPORAL_LOBE_METADATA = Metadata(
    id="cdc706940df41145e69814f5506bef3ea15ae487.boutiques",
    name="mri_mark_temporal_lobe",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMarkTemporalLobeParameters = typing.TypedDict('MriMarkTemporalLobeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_mark_temporal_lobe"]],
    "spacing": typing.NotRequired[str | None],
    "use_gradient": bool,
    "subjects": list[InputPathType],
    "output_file": str,
})
MriMarkTemporalLobeParametersTagged = typing.TypedDict('MriMarkTemporalLobeParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_mark_temporal_lobe"],
    "spacing": typing.NotRequired[str | None],
    "use_gradient": bool,
    "subjects": list[InputPathType],
    "output_file": str,
})


class MriMarkTemporalLobeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMarkTemporalLobeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Marked temporal lobe output file"""


def mri_mark_temporal_lobe_params(
    subjects: list[InputPathType],
    output_file: str,
    spacing: str | None = None,
    use_gradient: bool = False,
) -> MriMarkTemporalLobeParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects: Subject MRI images.
        output_file: Output file for marked temporal lobes.
        spacing: The spacing of classifiers in canonical space.
        use_gradient: Flag to use intensity gradient as input to classifier.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_mark_temporal_lobe",
        "use_gradient": use_gradient,
        "subjects": subjects,
        "output_file": output_file,
    }
    if spacing is not None:
        params["spacing"] = spacing
    return params


def mri_mark_temporal_lobe_cargs(
    params: MriMarkTemporalLobeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_mark_temporal_lobe")
    if params.get("spacing", None) is not None:
        cargs.extend([
            "-spacing",
            params.get("spacing", None)
        ])
    if params.get("use_gradient", False):
        cargs.append("-gradient" + "".join([execution.input_file(f) for f in params.get("subjects", None)]) + params.get("output_file", None))
    return cargs


def mri_mark_temporal_lobe_outputs(
    params: MriMarkTemporalLobeParameters,
    execution: Execution,
) -> MriMarkTemporalLobeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMarkTemporalLobeOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mri_mark_temporal_lobe_execute(
    params: MriMarkTemporalLobeParameters,
    runner: Runner | None = None,
) -> MriMarkTemporalLobeOutputs:
    """
    mri_mark_temporal_lobe
    
    A tool for marking the temporal lobe in MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMarkTemporalLobeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MARK_TEMPORAL_LOBE_METADATA)
    params = execution.params(params)
    cargs = mri_mark_temporal_lobe_cargs(params, execution)
    ret = mri_mark_temporal_lobe_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_mark_temporal_lobe(
    subjects: list[InputPathType],
    output_file: str,
    spacing: str | None = None,
    use_gradient: bool = False,
    runner: Runner | None = None,
) -> MriMarkTemporalLobeOutputs:
    """
    mri_mark_temporal_lobe
    
    A tool for marking the temporal lobe in MRI images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: Subject MRI images.
        output_file: Output file for marked temporal lobes.
        spacing: The spacing of classifiers in canonical space.
        use_gradient: Flag to use intensity gradient as input to classifier.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMarkTemporalLobeOutputs`).
    """
    params = mri_mark_temporal_lobe_params(
        spacing=spacing,
        use_gradient=use_gradient,
        subjects=subjects,
        output_file=output_file,
    )
    return mri_mark_temporal_lobe_execute(params, runner)


__all__ = [
    "MRI_MARK_TEMPORAL_LOBE_METADATA",
    "MriMarkTemporalLobeOutputs",
    "mri_mark_temporal_lobe",
    "mri_mark_temporal_lobe_execute",
    "mri_mark_temporal_lobe_params",
]
