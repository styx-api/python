# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MASK_METADATA = Metadata(
    id="bfd4609988cf9405815a95f6e9d94025535e22d1.boutiques",
    name="mri_mask",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMaskParameters = typing.TypedDict('MriMaskParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_mask"]],
    "input_volume": InputPathType,
    "mask_volume": InputPathType,
    "output_volume": str,
    "xform": typing.NotRequired[str | None],
    "lta_src": typing.NotRequired[str | None],
    "lta_dst": typing.NotRequired[str | None],
    "threshold": typing.NotRequired[float | None],
    "npad": typing.NotRequired[float | None],
    "npad_vector": typing.NotRequired[list[float] | None],
    "npad_multi_vector": typing.NotRequired[list[float] | None],
    "abs": bool,
    "invert": bool,
    "no_invert": bool,
    "rh_labels": bool,
    "lh_labels": bool,
    "dilate": typing.NotRequired[float | None],
    "no_cerebellum": bool,
    "oval_value": typing.NotRequired[float | None],
    "transfer_value": typing.NotRequired[float | None],
    "keep_mask_deletion_edits": bool,
    "samseg": bool,
})
MriMaskParametersTagged = typing.TypedDict('MriMaskParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_mask"],
    "input_volume": InputPathType,
    "mask_volume": InputPathType,
    "output_volume": str,
    "xform": typing.NotRequired[str | None],
    "lta_src": typing.NotRequired[str | None],
    "lta_dst": typing.NotRequired[str | None],
    "threshold": typing.NotRequired[float | None],
    "npad": typing.NotRequired[float | None],
    "npad_vector": typing.NotRequired[list[float] | None],
    "npad_multi_vector": typing.NotRequired[list[float] | None],
    "abs": bool,
    "invert": bool,
    "no_invert": bool,
    "rh_labels": bool,
    "lh_labels": bool,
    "dilate": typing.NotRequired[float | None],
    "no_cerebellum": bool,
    "oval_value": typing.NotRequired[float | None],
    "transfer_value": typing.NotRequired[float | None],
    "keep_mask_deletion_edits": bool,
    "samseg": bool,
})


class MriMaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume file"""


def mri_mask_params(
    input_volume: InputPathType,
    mask_volume: InputPathType,
    output_volume: str,
    xform: str | None = None,
    lta_src: str | None = None,
    lta_dst: str | None = None,
    threshold: float | None = None,
    npad: float | None = None,
    npad_vector: list[float] | None = None,
    npad_multi_vector: list[float] | None = None,
    abs_: bool = False,
    invert: bool = False,
    no_invert: bool = False,
    rh_labels: bool = False,
    lh_labels: bool = False,
    dilate: float | None = None,
    no_cerebellum: bool = False,
    oval_value: float | None = None,
    transfer_value: float | None = None,
    keep_mask_deletion_edits: bool = False,
    samseg: bool = False,
) -> MriMaskParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume file.
        mask_volume: Mask volume file.
        output_volume: Output volume file.
        xform: Apply M3Z/LTA to transform mask to the space of input volume\
            (identity.nofile possible, will invert if needed).
        lta_src: Source volume for -xform (if not available from the xform\
            file).
        lta_dst: Destination volume for -xform (if not available from the xform\
            file).
        threshold: Threshold mask volume at a given threshold (values <=\
            threshold considered zero).
        npad: Create a bounding box around the mask expanded by npad voxels in\
            each direction.
        npad_vector: Create a bounding box around the mask expanded by npad1\
            npad2 npad3 voxels in each direction.
        npad_multi_vector: Create a bounding box around the mask, expanded by\
            npad1a npad1b npad2a npad2b npad3a npad3b in each direction.
        abs_: Take absolute value before applying threshold.
        invert: Invert mask.
        no_invert: Turn off inversion of mask.
        rh_labels: Set mask in right hemisphere labels to 1 (assumes input mask\
            is an aseg).
        lh_labels: Set mask in left hemisphere labels to 1 (assumes input mask\
            is an aseg).
        dilate: Dilate mask N times before applying.
        no_cerebellum: Remove cerebellum from aseg mask (assumes input mask is\
            an aseg).
        oval_value: Use specified oval value as output instead of 0.
        transfer_value: Transfer only the specified voxel value from mask to\
            output.
        keep_mask_deletion_edits: Transfer voxel-deletion edits (voxels=1) from\
            mask to output volume.
        samseg: Assume mask is a SAMSEG segmentation and mask all non-brain\
            labels.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_mask",
        "input_volume": input_volume,
        "mask_volume": mask_volume,
        "output_volume": output_volume,
        "abs": abs_,
        "invert": invert,
        "no_invert": no_invert,
        "rh_labels": rh_labels,
        "lh_labels": lh_labels,
        "no_cerebellum": no_cerebellum,
        "keep_mask_deletion_edits": keep_mask_deletion_edits,
        "samseg": samseg,
    }
    if xform is not None:
        params["xform"] = xform
    if lta_src is not None:
        params["lta_src"] = lta_src
    if lta_dst is not None:
        params["lta_dst"] = lta_dst
    if threshold is not None:
        params["threshold"] = threshold
    if npad is not None:
        params["npad"] = npad
    if npad_vector is not None:
        params["npad_vector"] = npad_vector
    if npad_multi_vector is not None:
        params["npad_multi_vector"] = npad_multi_vector
    if dilate is not None:
        params["dilate"] = dilate
    if oval_value is not None:
        params["oval_value"] = oval_value
    if transfer_value is not None:
        params["transfer_value"] = transfer_value
    return params


def mri_mask_cargs(
    params: MriMaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_mask")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(execution.input_file(params.get("mask_volume", None)))
    cargs.append(params.get("output_volume", None))
    if params.get("xform", None) is not None:
        cargs.extend([
            "-xform",
            params.get("xform", None)
        ])
    if params.get("lta_src", None) is not None:
        cargs.extend([
            "-lta_src",
            params.get("lta_src", None)
        ])
    if params.get("lta_dst", None) is not None:
        cargs.extend([
            "-lta_dst",
            params.get("lta_dst", None)
        ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "-T",
            str(params.get("threshold", None))
        ])
    if params.get("npad", None) is not None:
        cargs.extend([
            "-bb",
            str(params.get("npad", None))
        ])
    if params.get("npad_vector", None) is not None:
        cargs.extend([
            "-bbm",
            *map(str, params.get("npad_vector", None))
        ])
    if params.get("npad_multi_vector", None) is not None:
        cargs.extend([
            "-bbmm",
            *map(str, params.get("npad_multi_vector", None))
        ])
    if params.get("abs", False):
        cargs.append("-abs")
    if params.get("invert", False):
        cargs.append("-invert")
    if params.get("no_invert", False):
        cargs.append("-no-invert")
    if params.get("rh_labels", False):
        cargs.append("-rh")
    if params.get("lh_labels", False):
        cargs.append("-lh")
    if params.get("dilate", None) is not None:
        cargs.extend([
            "-dilate",
            str(params.get("dilate", None))
        ])
    if params.get("no_cerebellum", False):
        cargs.append("-no_cerebellum")
    if params.get("oval_value", None) is not None:
        cargs.extend([
            "-oval",
            str(params.get("oval_value", None))
        ])
    if params.get("transfer_value", None) is not None:
        cargs.extend([
            "-transfer",
            str(params.get("transfer_value", None))
        ])
    if params.get("keep_mask_deletion_edits", False):
        cargs.append("-keep_mask_deletion_edits")
    if params.get("samseg", False):
        cargs.append("-samseg")
    return cargs


def mri_mask_outputs(
    params: MriMaskParameters,
    execution: Execution,
) -> MriMaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMaskOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_mask_execute(
    params: MriMaskParameters,
    runner: Runner | None = None,
) -> MriMaskOutputs:
    """
    mri_mask
    
    Applies a mask volume (typically skull stripped).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MASK_METADATA)
    params = execution.params(params)
    cargs = mri_mask_cargs(params, execution)
    ret = mri_mask_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_mask(
    input_volume: InputPathType,
    mask_volume: InputPathType,
    output_volume: str,
    xform: str | None = None,
    lta_src: str | None = None,
    lta_dst: str | None = None,
    threshold: float | None = None,
    npad: float | None = None,
    npad_vector: list[float] | None = None,
    npad_multi_vector: list[float] | None = None,
    abs_: bool = False,
    invert: bool = False,
    no_invert: bool = False,
    rh_labels: bool = False,
    lh_labels: bool = False,
    dilate: float | None = None,
    no_cerebellum: bool = False,
    oval_value: float | None = None,
    transfer_value: float | None = None,
    keep_mask_deletion_edits: bool = False,
    samseg: bool = False,
    runner: Runner | None = None,
) -> MriMaskOutputs:
    """
    mri_mask
    
    Applies a mask volume (typically skull stripped).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume file.
        mask_volume: Mask volume file.
        output_volume: Output volume file.
        xform: Apply M3Z/LTA to transform mask to the space of input volume\
            (identity.nofile possible, will invert if needed).
        lta_src: Source volume for -xform (if not available from the xform\
            file).
        lta_dst: Destination volume for -xform (if not available from the xform\
            file).
        threshold: Threshold mask volume at a given threshold (values <=\
            threshold considered zero).
        npad: Create a bounding box around the mask expanded by npad voxels in\
            each direction.
        npad_vector: Create a bounding box around the mask expanded by npad1\
            npad2 npad3 voxels in each direction.
        npad_multi_vector: Create a bounding box around the mask, expanded by\
            npad1a npad1b npad2a npad2b npad3a npad3b in each direction.
        abs_: Take absolute value before applying threshold.
        invert: Invert mask.
        no_invert: Turn off inversion of mask.
        rh_labels: Set mask in right hemisphere labels to 1 (assumes input mask\
            is an aseg).
        lh_labels: Set mask in left hemisphere labels to 1 (assumes input mask\
            is an aseg).
        dilate: Dilate mask N times before applying.
        no_cerebellum: Remove cerebellum from aseg mask (assumes input mask is\
            an aseg).
        oval_value: Use specified oval value as output instead of 0.
        transfer_value: Transfer only the specified voxel value from mask to\
            output.
        keep_mask_deletion_edits: Transfer voxel-deletion edits (voxels=1) from\
            mask to output volume.
        samseg: Assume mask is a SAMSEG segmentation and mask all non-brain\
            labels.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMaskOutputs`).
    """
    params = mri_mask_params(
        input_volume=input_volume,
        mask_volume=mask_volume,
        output_volume=output_volume,
        xform=xform,
        lta_src=lta_src,
        lta_dst=lta_dst,
        threshold=threshold,
        npad=npad,
        npad_vector=npad_vector,
        npad_multi_vector=npad_multi_vector,
        abs_=abs_,
        invert=invert,
        no_invert=no_invert,
        rh_labels=rh_labels,
        lh_labels=lh_labels,
        dilate=dilate,
        no_cerebellum=no_cerebellum,
        oval_value=oval_value,
        transfer_value=transfer_value,
        keep_mask_deletion_edits=keep_mask_deletion_edits,
        samseg=samseg,
    )
    return mri_mask_execute(params, runner)


__all__ = [
    "MRI_MASK_METADATA",
    "MriMaskOutputs",
    "mri_mask",
    "mri_mask_execute",
    "mri_mask_params",
]
