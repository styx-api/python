# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MC_METADATA = Metadata(
    id="49179ab79374b3c5b08a2b72c8d599c9afb7eb18.boutiques",
    name="mri_mc",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMcParameters = typing.TypedDict('MriMcParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_mc"]],
    "input_volume": InputPathType,
    "label_value": float,
    "output_surface": str,
    "connectivity": typing.NotRequired[float | None],
})
MriMcParametersTagged = typing.TypedDict('MriMcParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_mc"],
    "input_volume": InputPathType,
    "label_value": float,
    "output_surface": str,
    "connectivity": typing.NotRequired[float | None],
})


class MriMcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMcParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    extracted_surface: OutputPathType
    """The extracted surface output file."""


def mri_mc_params(
    input_volume: InputPathType,
    label_value: float,
    output_surface: str,
    connectivity: float | None = None,
) -> MriMcParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: The input volume from which to extract the surface.
        label_value: The label value of the structure to extract.
        output_surface: The file where the extracted surface mesh will be\
            saved.
        connectivity: The connectivity used for Marching Cubes. Options are:\
            1=6+, 2=18, 3=6, 4=26.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_mc",
        "input_volume": input_volume,
        "label_value": label_value,
        "output_surface": output_surface,
    }
    if connectivity is not None:
        params["connectivity"] = connectivity
    return params


def mri_mc_cargs(
    params: MriMcParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_mc")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(str(params.get("label_value", None)))
    if params.get("connectivity", None) is not None:
        cargs.append(params.get("output_surface", None) + str(params.get("connectivity", None)))
    return cargs


def mri_mc_outputs(
    params: MriMcParameters,
    execution: Execution,
) -> MriMcOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMcOutputs(
        root=execution.output_file("."),
        extracted_surface=execution.output_file(params.get("output_surface", None)),
    )
    return ret


def mri_mc_execute(
    params: MriMcParameters,
    runner: Runner | None = None,
) -> MriMcOutputs:
    """
    mri_mc
    
    Extract a surface from a label volume using Marching Cubes algorithm.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MC_METADATA)
    params = execution.params(params)
    cargs = mri_mc_cargs(params, execution)
    ret = mri_mc_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_mc(
    input_volume: InputPathType,
    label_value: float,
    output_surface: str,
    connectivity: float | None = None,
    runner: Runner | None = None,
) -> MriMcOutputs:
    """
    mri_mc
    
    Extract a surface from a label volume using Marching Cubes algorithm.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: The input volume from which to extract the surface.
        label_value: The label value of the structure to extract.
        output_surface: The file where the extracted surface mesh will be\
            saved.
        connectivity: The connectivity used for Marching Cubes. Options are:\
            1=6+, 2=18, 3=6, 4=26.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMcOutputs`).
    """
    params = mri_mc_params(
        input_volume=input_volume,
        label_value=label_value,
        output_surface=output_surface,
        connectivity=connectivity,
    )
    return mri_mc_execute(params, runner)


__all__ = [
    "MRI_MC_METADATA",
    "MriMcOutputs",
    "mri_mc",
    "mri_mc_execute",
    "mri_mc_params",
]
