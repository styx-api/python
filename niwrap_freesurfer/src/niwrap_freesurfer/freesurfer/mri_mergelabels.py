# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MERGELABELS_METADATA = Metadata(
    id="92b8ea866e024868c9418a4954dce0cbbc1b29c6.boutiques",
    name="mri_mergelabels",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMergelabelsParameters = typing.TypedDict('MriMergelabelsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_mergelabels"]],
    "input_labels": list[InputPathType],
    "output_label": str,
    "input_directory": typing.NotRequired[str | None],
})
MriMergelabelsParametersTagged = typing.TypedDict('MriMergelabelsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_mergelabels"],
    "input_labels": list[InputPathType],
    "output_label": str,
    "input_directory": typing.NotRequired[str | None],
})


class MriMergelabelsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMergelabelsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    merged_label_file: OutputPathType
    """Merged label output file"""


def mri_mergelabels_params(
    input_labels: list[InputPathType],
    output_label: str,
    input_directory: str | None = None,
) -> MriMergelabelsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_labels: Input label files to be merged.
        output_label: Output file for the merged label.
        input_directory: Directory containing label files to be merged.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_mergelabels",
        "input_labels": input_labels,
        "output_label": output_label,
    }
    if input_directory is not None:
        params["input_directory"] = input_directory
    return params


def mri_mergelabels_cargs(
    params: MriMergelabelsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_mergelabels")
    cargs.extend([
        "-i",
        *[execution.input_file(f) for f in params.get("input_labels", None)]
    ])
    cargs.extend([
        "-o",
        params.get("output_label", None)
    ])
    if params.get("input_directory", None) is not None:
        cargs.extend([
            "-d",
            params.get("input_directory", None)
        ])
    return cargs


def mri_mergelabels_outputs(
    params: MriMergelabelsParameters,
    execution: Execution,
) -> MriMergelabelsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMergelabelsOutputs(
        root=execution.output_file("."),
        merged_label_file=execution.output_file(params.get("output_label", None)),
    )
    return ret


def mri_mergelabels_execute(
    params: MriMergelabelsParameters,
    runner: Runner | None = None,
) -> MriMergelabelsOutputs:
    """
    mri_mergelabels
    
    A tool to merge two or more label files by concatenating them together.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMergelabelsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MERGELABELS_METADATA)
    params = execution.params(params)
    cargs = mri_mergelabels_cargs(params, execution)
    ret = mri_mergelabels_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_mergelabels(
    input_labels: list[InputPathType],
    output_label: str,
    input_directory: str | None = None,
    runner: Runner | None = None,
) -> MriMergelabelsOutputs:
    """
    mri_mergelabels
    
    A tool to merge two or more label files by concatenating them together.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_labels: Input label files to be merged.
        output_label: Output file for the merged label.
        input_directory: Directory containing label files to be merged.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMergelabelsOutputs`).
    """
    params = mri_mergelabels_params(
        input_labels=input_labels,
        output_label=output_label,
        input_directory=input_directory,
    )
    return mri_mergelabels_execute(params, runner)


__all__ = [
    "MRI_MERGELABELS_METADATA",
    "MriMergelabelsOutputs",
    "mri_mergelabels",
    "mri_mergelabels_execute",
    "mri_mergelabels_params",
]
