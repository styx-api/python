# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MODIFY_METADATA = Metadata(
    id="b010dddaf9be7eb6de0753946c3feda8c9496081.boutiques",
    name="mri_modify",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriModifyParameters = typing.TypedDict('MriModifyParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_modify"]],
    "x_ras": list[float],
    "y_ras": list[float],
    "z_ras": list[float],
    "cras": list[float],
    "x_size": float,
    "y_size": float,
    "z_size": float,
    "tr": float,
    "te": float,
    "ti": float,
    "fa": float,
    "xform": str,
    "input_volume": InputPathType,
    "output_volume": str,
})
MriModifyParametersTagged = typing.TypedDict('MriModifyParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_modify"],
    "x_ras": list[float],
    "y_ras": list[float],
    "z_ras": list[float],
    "cras": list[float],
    "x_size": float,
    "y_size": float,
    "z_size": float,
    "tr": float,
    "te": float,
    "ti": float,
    "fa": float,
    "xform": str,
    "input_volume": InputPathType,
    "output_volume": str,
})


class MriModifyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriModifyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_modify_params(
    x_ras: list[float],
    y_ras: list[float],
    z_ras: list[float],
    cras: list[float],
    x_size: float,
    y_size: float,
    z_size: float,
    tr: float,
    te: float,
    ti: float,
    fa: float,
    xform: str,
    input_volume: InputPathType,
    output_volume: str,
) -> MriModifyParametersTagged:
    """
    Build parameters.
    
    Args:
        x_ras: X direction cosines (xr, xa, xs).
        y_ras: Y direction cosines (yr, ya, ys).
        z_ras: Z direction cosines (zr, za, zs).
        cras: Center RAS coordinates (cr, ca, cs).
        x_size: Size of voxel in X dimension.
        y_size: Size of voxel in Y dimension.
        z_size: Size of voxel in Z dimension.
        tr: Repetition time (TR).
        te: Echo time (TE).
        ti: Inversion time (TI).
        fa: Flip angle (degrees).
        xform: New transformation file name.
        input_volume: Input volume.
        output_volume: Output volume.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_modify",
        "x_ras": x_ras,
        "y_ras": y_ras,
        "z_ras": z_ras,
        "cras": cras,
        "x_size": x_size,
        "y_size": y_size,
        "z_size": z_size,
        "tr": tr,
        "te": te,
        "ti": ti,
        "fa": fa,
        "xform": xform,
        "input_volume": input_volume,
        "output_volume": output_volume,
    }
    return params


def mri_modify_cargs(
    params: MriModifyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_modify")
    cargs.extend([
        "-xras",
        *map(str, params.get("x_ras", None))
    ])
    cargs.extend([
        "-yras",
        *map(str, params.get("y_ras", None))
    ])
    cargs.extend([
        "-zras",
        *map(str, params.get("z_ras", None))
    ])
    cargs.extend([
        "-cras",
        *map(str, params.get("cras", None))
    ])
    cargs.extend([
        "-xsize",
        str(params.get("x_size", None))
    ])
    cargs.extend([
        "-ysize",
        str(params.get("y_size", None))
    ])
    cargs.extend([
        "-zsize",
        str(params.get("z_size", None))
    ])
    cargs.extend([
        "-tr",
        str(params.get("tr", None))
    ])
    cargs.extend([
        "-te",
        str(params.get("te", None))
    ])
    cargs.extend([
        "-ti",
        str(params.get("ti", None))
    ])
    cargs.extend([
        "-fa",
        str(params.get("fa", None))
    ])
    cargs.extend([
        "-xform",
        params.get("xform", None)
    ])
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_modify_outputs(
    params: MriModifyParameters,
    execution: Execution,
) -> MriModifyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriModifyOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_modify_execute(
    params: MriModifyParameters,
    runner: Runner | None = None,
) -> MriModifyOutputs:
    """
    mri_modify
    
    Tool for modifying MRI image headers.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriModifyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MODIFY_METADATA)
    params = execution.params(params)
    cargs = mri_modify_cargs(params, execution)
    ret = mri_modify_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_modify(
    x_ras: list[float],
    y_ras: list[float],
    z_ras: list[float],
    cras: list[float],
    x_size: float,
    y_size: float,
    z_size: float,
    tr: float,
    te: float,
    ti: float,
    fa: float,
    xform: str,
    input_volume: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MriModifyOutputs:
    """
    mri_modify
    
    Tool for modifying MRI image headers.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        x_ras: X direction cosines (xr, xa, xs).
        y_ras: Y direction cosines (yr, ya, ys).
        z_ras: Z direction cosines (zr, za, zs).
        cras: Center RAS coordinates (cr, ca, cs).
        x_size: Size of voxel in X dimension.
        y_size: Size of voxel in Y dimension.
        z_size: Size of voxel in Z dimension.
        tr: Repetition time (TR).
        te: Echo time (TE).
        ti: Inversion time (TI).
        fa: Flip angle (degrees).
        xform: New transformation file name.
        input_volume: Input volume.
        output_volume: Output volume.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriModifyOutputs`).
    """
    params = mri_modify_params(
        x_ras=x_ras,
        y_ras=y_ras,
        z_ras=z_ras,
        cras=cras,
        x_size=x_size,
        y_size=y_size,
        z_size=z_size,
        tr=tr,
        te=te,
        ti=ti,
        fa=fa,
        xform=xform,
        input_volume=input_volume,
        output_volume=output_volume,
    )
    return mri_modify_execute(params, runner)


__all__ = [
    "MRI_MODIFY_METADATA",
    "MriModifyOutputs",
    "mri_modify",
    "mri_modify_execute",
    "mri_modify_params",
]
