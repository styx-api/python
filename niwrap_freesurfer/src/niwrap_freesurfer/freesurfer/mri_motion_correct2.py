# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MOTION_CORRECT2_METADATA = Metadata(
    id="433bd915bb6416030eb254b3cc95859ee80e2779.boutiques",
    name="mri_motion_correct2",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMotionCorrect2Parameters = typing.TypedDict('MriMotionCorrect2Parameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_motion_correct2"]],
    "output_spec": str,
    "input_files": list[InputPathType],
    "target": typing.NotRequired[InputPathType | None],
    "wild": bool,
    "tmp_dir": typing.NotRequired[str | None],
    "nocleanup": bool,
    "umask": typing.NotRequired[str | None],
    "cm": bool,
    "version": bool,
    "debug": bool,
})
MriMotionCorrect2ParametersTagged = typing.TypedDict('MriMotionCorrect2ParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_motion_correct2"],
    "output_spec": str,
    "input_files": list[InputPathType],
    "target": typing.NotRequired[InputPathType | None],
    "wild": bool,
    "tmp_dir": typing.NotRequired[str | None],
    "nocleanup": bool,
    "umask": typing.NotRequired[str | None],
    "cm": bool,
    "version": bool,
    "debug": bool,
})


class MriMotionCorrect2Outputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMotionCorrect2Parameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """The aligned and averaged output file or directory"""


def mri_motion_correct2_params(
    output_spec: str,
    input_files: list[InputPathType],
    target: InputPathType | None = None,
    wild: bool = False,
    tmp_dir: str | None = None,
    nocleanup: bool = False,
    umask: str | None = None,
    cm: bool = False,
    version: bool = False,
    debug: bool = False,
) -> MriMotionCorrect2ParametersTagged:
    """
    Build parameters.
    
    Args:
        output_spec: Output file or directory (for COR format).
        input_files: Input volume files, specified multiple times for multiple\
            files.
        target: Use the specified target instead of the first input file.
        wild: Assume unmatched arguments are input files.
        tmp_dir: Directory for temporary files.
        nocleanup: Do not delete temporary files.
        umask: Set UNIX file permission mask.
        cm: Make COR volumes conform to minimum voxel size.
        version: Print version information and exit.
        debug: Print detailed debug information to screen.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_motion_correct2",
        "output_spec": output_spec,
        "input_files": input_files,
        "wild": wild,
        "nocleanup": nocleanup,
        "cm": cm,
        "version": version,
        "debug": debug,
    }
    if target is not None:
        params["target"] = target
    if tmp_dir is not None:
        params["tmp_dir"] = tmp_dir
    if umask is not None:
        params["umask"] = umask
    return params


def mri_motion_correct2_cargs(
    params: MriMotionCorrect2Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_motion_correct2")
    cargs.extend([
        "-o",
        params.get("output_spec", None)
    ])
    cargs.extend([
        "-i",
        *[execution.input_file(f) for f in params.get("input_files", None)]
    ])
    if params.get("target", None) is not None:
        cargs.extend([
            "-t",
            execution.input_file(params.get("target", None))
        ])
    if params.get("wild", False):
        cargs.append("-wild")
    if params.get("tmp_dir", None) is not None:
        cargs.extend([
            "-tmpdir",
            params.get("tmp_dir", None)
        ])
    if params.get("nocleanup", False):
        cargs.append("-nocleanup")
    if params.get("umask", None) is not None:
        cargs.extend([
            "-umask",
            params.get("umask", None)
        ])
    if params.get("cm", False):
        cargs.append("-cm")
    if params.get("version", False):
        cargs.append("-version")
    if params.get("debug", False):
        cargs.append("-debug")
    return cargs


def mri_motion_correct2_outputs(
    params: MriMotionCorrect2Parameters,
    execution: Execution,
) -> MriMotionCorrect2Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMotionCorrect2Outputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_spec", None)),
    )
    return ret


def mri_motion_correct2_execute(
    params: MriMotionCorrect2Parameters,
    runner: Runner | None = None,
) -> MriMotionCorrect2Outputs:
    """
    mri_motion_correct2
    
    Aligns and averages two or more volumes using minctracc for alignment and
    mincresample and mincaverage for resampling.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMotionCorrect2Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MOTION_CORRECT2_METADATA)
    params = execution.params(params)
    cargs = mri_motion_correct2_cargs(params, execution)
    ret = mri_motion_correct2_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_motion_correct2(
    output_spec: str,
    input_files: list[InputPathType],
    target: InputPathType | None = None,
    wild: bool = False,
    tmp_dir: str | None = None,
    nocleanup: bool = False,
    umask: str | None = None,
    cm: bool = False,
    version: bool = False,
    debug: bool = False,
    runner: Runner | None = None,
) -> MriMotionCorrect2Outputs:
    """
    mri_motion_correct2
    
    Aligns and averages two or more volumes using minctracc for alignment and
    mincresample and mincaverage for resampling.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_spec: Output file or directory (for COR format).
        input_files: Input volume files, specified multiple times for multiple\
            files.
        target: Use the specified target instead of the first input file.
        wild: Assume unmatched arguments are input files.
        tmp_dir: Directory for temporary files.
        nocleanup: Do not delete temporary files.
        umask: Set UNIX file permission mask.
        cm: Make COR volumes conform to minimum voxel size.
        version: Print version information and exit.
        debug: Print detailed debug information to screen.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMotionCorrect2Outputs`).
    """
    params = mri_motion_correct2_params(
        output_spec=output_spec,
        input_files=input_files,
        target=target,
        wild=wild,
        tmp_dir=tmp_dir,
        nocleanup=nocleanup,
        umask=umask,
        cm=cm,
        version=version,
        debug=debug,
    )
    return mri_motion_correct2_execute(params, runner)


__all__ = [
    "MRI_MOTION_CORRECT2_METADATA",
    "MriMotionCorrect2Outputs",
    "mri_motion_correct2",
    "mri_motion_correct2_execute",
    "mri_motion_correct2_params",
]
