# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_MS_FITPARMS_METADATA = Metadata(
    id="9d959cb42d2739bddab44c9edd707c41d45521c3.boutiques",
    name="mri_ms_fitparms",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriMsFitparmsParameters = typing.TypedDict('MriMsFitparmsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_ms_fitparms"]],
    "volumes": list[InputPathType],
    "output_dir": str,
    "afi_flag": bool,
    "ait_flag": bool,
    "at": typing.NotRequired[str | None],
    "conform_flag": bool,
    "correct_flag": bool,
    "cubic_flag": bool,
    "debug_slice_flag": bool,
    "debug_voxel_flag": bool,
    "dt": typing.NotRequired[str | None],
    "fa": typing.NotRequired[str | None],
    "fa_scale": typing.NotRequired[float | None],
    "faf": typing.NotRequired[str | None],
    "fsmooth": typing.NotRequired[float | None],
    "invert_flag": bool,
    "momentum": typing.NotRequired[str | None],
    "max_t2": typing.NotRequired[str | None],
    "n_iter": typing.NotRequired[float | None],
    "nearest_flag": bool,
    "nocompress_flag": bool,
    "nosynth_flag": bool,
    "residuals": typing.NotRequired[str | None],
    "smooth_sigma": typing.NotRequired[float | None],
    "scale_factor": typing.NotRequired[float | None],
    "sinc_flag": bool,
    "transform_flag": bool,
    "echo_time": typing.NotRequired[float | None],
    "repetition_time": typing.NotRequired[float | None],
    "trilinear_flag": bool,
    "tukey_flag": bool,
    "help_flag": bool,
    "use_brain_mask_flag": bool,
    "write_intermediate": typing.NotRequired[float | None],
    "extract_subimage": typing.NotRequired[list[float] | None],
    "window_flag": bool,
})
MriMsFitparmsParametersTagged = typing.TypedDict('MriMsFitparmsParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_ms_fitparms"],
    "volumes": list[InputPathType],
    "output_dir": str,
    "afi_flag": bool,
    "ait_flag": bool,
    "at": typing.NotRequired[str | None],
    "conform_flag": bool,
    "correct_flag": bool,
    "cubic_flag": bool,
    "debug_slice_flag": bool,
    "debug_voxel_flag": bool,
    "dt": typing.NotRequired[str | None],
    "fa": typing.NotRequired[str | None],
    "fa_scale": typing.NotRequired[float | None],
    "faf": typing.NotRequired[str | None],
    "fsmooth": typing.NotRequired[float | None],
    "invert_flag": bool,
    "momentum": typing.NotRequired[str | None],
    "max_t2": typing.NotRequired[str | None],
    "n_iter": typing.NotRequired[float | None],
    "nearest_flag": bool,
    "nocompress_flag": bool,
    "nosynth_flag": bool,
    "residuals": typing.NotRequired[str | None],
    "smooth_sigma": typing.NotRequired[float | None],
    "scale_factor": typing.NotRequired[float | None],
    "sinc_flag": bool,
    "transform_flag": bool,
    "echo_time": typing.NotRequired[float | None],
    "repetition_time": typing.NotRequired[float | None],
    "trilinear_flag": bool,
    "tukey_flag": bool,
    "help_flag": bool,
    "use_brain_mask_flag": bool,
    "write_intermediate": typing.NotRequired[float | None],
    "extract_subimage": typing.NotRequired[list[float] | None],
    "window_flag": bool,
})


class MriMsFitparmsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriMsFitparmsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    t1_map: OutputPathType
    """Compressed T1 map"""
    pd_map: OutputPathType
    """Compressed Proton Density map"""
    vol0_synthetic: OutputPathType
    """Compressed Synthetic volume for input vol_1, in motion corrected space"""
    vol0_affine: OutputPathType
    """Motion correction affine information for vol_1"""
    vol1_synthetic: OutputPathType
    """Compressed Synthetic volume for input vol_2, in motion corrected space"""
    vol1_affine: OutputPathType
    """Motion correction affine information for vol_2"""


def mri_ms_fitparms_params(
    volumes: list[InputPathType],
    output_dir: str,
    afi_flag: bool = False,
    ait_flag: bool = False,
    at: str | None = None,
    conform_flag: bool = False,
    correct_flag: bool = False,
    cubic_flag: bool = False,
    debug_slice_flag: bool = False,
    debug_voxel_flag: bool = False,
    dt: str | None = None,
    fa: str | None = None,
    fa_scale: float | None = None,
    faf: str | None = None,
    fsmooth: float | None = None,
    invert_flag: bool = False,
    momentum: str | None = None,
    max_t2: str | None = None,
    n_iter: float | None = None,
    nearest_flag: bool = False,
    nocompress_flag: bool = False,
    nosynth_flag: bool = False,
    residuals: str | None = None,
    smooth_sigma: float | None = None,
    scale_factor: float | None = None,
    sinc_flag: bool = False,
    transform_flag: bool = False,
    echo_time: float | None = None,
    repetition_time: float | None = None,
    trilinear_flag: bool = False,
    tukey_flag: bool = False,
    help_flag: bool = False,
    use_brain_mask_flag: bool = False,
    write_intermediate: float | None = None,
    extract_subimage: list[float] | None = None,
    window_flag: bool = False,
) -> MriMsFitparmsParametersTagged:
    """
    Build parameters.
    
    Args:
        volumes: List of 3D FLASH images with different flip angles.
        output_dir: Output directory.
        afi_flag: Designate flip angle map to use with nominal value 60 degrees.
        ait_flag: Apply inverse of transform.
        at: Set acquisition time.
        conform_flag: Interpolate volume to be isotropic 1mm^3.
        correct_flag: Correct proton density map (PD) by T2* estimates.
        cubic_flag: Use cubic interpolation (NOT WORKING!).
        debug_slice_flag: Debug slice processing ???.
        debug_voxel_flag: Debug voxel processing ???.
        dt: Set time step dt ???.
        fa: Set flip angle.
        fa_scale: Set value to scale all flip angles by.
        faf: Designate flip angle map to use with specified control points.
        fsmooth: Smooth flip angle map for X iterations of soap bubble\
            smoothing.
        invert_flag: Invert volumes.
        momentum: Set momentum.
        max_t2: Set max T2*.
        n_iter: Perform estimation/motion correction X times.
        nearest_flag: Use nearest-neighbor interpolation.
        nocompress_flag: Do not compress output volumes (save as .mgh).
        nosynth_flag: Disable volume synthesis.
        residuals: Write out residuals to designated location.
        smooth_sigma: Smooth faf field with sigma=X.
        scale_factor: Scale volumes by X after reading.
        sinc_flag: Use sinc interpolation (default window width is 6).
        transform_flag: Apply transform to output volumes.
        echo_time: Set echo time (TE) in ms.
        repetition_time: Set repetition time (TR) in ms.
        trilinear_flag: Use trilinear interpolation.
        tukey_flag: Use Tukey bi-weight of residuals.
        help_flag: Display help text.
        use_brain_mask_flag: Compute a brain mask from the PD map and use it\
            for registration.
        write_intermediate: Write out intermediate results every X iterations.
        extract_subimage: Extract a subimage for each input image, specified by\
            x0 y0 z0 dx dy dz.
        window_flag: Not implemented.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_ms_fitparms",
        "volumes": volumes,
        "output_dir": output_dir,
        "afi_flag": afi_flag,
        "ait_flag": ait_flag,
        "conform_flag": conform_flag,
        "correct_flag": correct_flag,
        "cubic_flag": cubic_flag,
        "debug_slice_flag": debug_slice_flag,
        "debug_voxel_flag": debug_voxel_flag,
        "invert_flag": invert_flag,
        "nearest_flag": nearest_flag,
        "nocompress_flag": nocompress_flag,
        "nosynth_flag": nosynth_flag,
        "sinc_flag": sinc_flag,
        "transform_flag": transform_flag,
        "trilinear_flag": trilinear_flag,
        "tukey_flag": tukey_flag,
        "help_flag": help_flag,
        "use_brain_mask_flag": use_brain_mask_flag,
        "window_flag": window_flag,
    }
    if at is not None:
        params["at"] = at
    if dt is not None:
        params["dt"] = dt
    if fa is not None:
        params["fa"] = fa
    if fa_scale is not None:
        params["fa_scale"] = fa_scale
    if faf is not None:
        params["faf"] = faf
    if fsmooth is not None:
        params["fsmooth"] = fsmooth
    if momentum is not None:
        params["momentum"] = momentum
    if max_t2 is not None:
        params["max_t2"] = max_t2
    if n_iter is not None:
        params["n_iter"] = n_iter
    if residuals is not None:
        params["residuals"] = residuals
    if smooth_sigma is not None:
        params["smooth_sigma"] = smooth_sigma
    if scale_factor is not None:
        params["scale_factor"] = scale_factor
    if echo_time is not None:
        params["echo_time"] = echo_time
    if repetition_time is not None:
        params["repetition_time"] = repetition_time
    if write_intermediate is not None:
        params["write_intermediate"] = write_intermediate
    if extract_subimage is not None:
        params["extract_subimage"] = extract_subimage
    return params


def mri_ms_fitparms_cargs(
    params: MriMsFitparmsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_ms_fitparms")
    cargs.extend([execution.input_file(f) for f in params.get("volumes", None)])
    cargs.append(params.get("output_dir", None))
    if params.get("afi_flag", False):
        cargs.append("-afi")
    if params.get("ait_flag", False):
        cargs.append("-ait")
    if params.get("at", None) is not None:
        cargs.extend([
            "-at",
            params.get("at", None)
        ])
    if params.get("conform_flag", False):
        cargs.append("-conform")
    if params.get("correct_flag", False):
        cargs.append("-correct")
    if params.get("cubic_flag", False):
        cargs.append("-cubic")
    if params.get("debug_slice_flag", False):
        cargs.append("-debug_slice")
    if params.get("debug_voxel_flag", False):
        cargs.append("-debug_voxel")
    if params.get("dt", None) is not None:
        cargs.extend([
            "-dt",
            params.get("dt", None)
        ])
    if params.get("fa", None) is not None:
        cargs.extend([
            "-fa",
            params.get("fa", None)
        ])
    if params.get("fa_scale", None) is not None:
        cargs.extend([
            "-fa_scale",
            str(params.get("fa_scale", None))
        ])
    if params.get("faf", None) is not None:
        cargs.extend([
            "-faf",
            params.get("faf", None)
        ])
    if params.get("fsmooth", None) is not None:
        cargs.extend([
            "-fsmooth",
            str(params.get("fsmooth", None))
        ])
    if params.get("invert_flag", False):
        cargs.append("-i")
    if params.get("momentum", None) is not None:
        cargs.extend([
            "-m",
            params.get("momentum", None)
        ])
    if params.get("max_t2", None) is not None:
        cargs.extend([
            "-max",
            params.get("max_t2", None)
        ])
    if params.get("n_iter", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("n_iter", None))
        ])
    if params.get("nearest_flag", False):
        cargs.append("-nearest")
    if params.get("nocompress_flag", False):
        cargs.append("-nocompress")
    if params.get("nosynth_flag", False):
        cargs.append("-nosynth")
    if params.get("residuals", None) is not None:
        cargs.extend([
            "-r",
            params.get("residuals", None)
        ])
    if params.get("smooth_sigma", None) is not None:
        cargs.extend([
            "-s",
            str(params.get("smooth_sigma", None))
        ])
    if params.get("scale_factor", None) is not None:
        cargs.extend([
            "-scale",
            str(params.get("scale_factor", None))
        ])
    if params.get("sinc_flag", False):
        cargs.append("-sinc")
    if params.get("transform_flag", False):
        cargs.append("-t")
    if params.get("echo_time", None) is not None:
        cargs.extend([
            "-te",
            str(params.get("echo_time", None))
        ])
    if params.get("repetition_time", None) is not None:
        cargs.extend([
            "-tr",
            str(params.get("repetition_time", None))
        ])
    if params.get("trilinear_flag", False):
        cargs.append("-trilinear")
    if params.get("tukey_flag", False):
        cargs.append("-tukey")
    if params.get("help_flag", False):
        cargs.append("-u")
    if params.get("use_brain_mask_flag", False):
        cargs.append("-use_brain_mask")
    if params.get("write_intermediate", None) is not None:
        cargs.extend([
            "-w",
            str(params.get("write_intermediate", None))
        ])
    if params.get("extract_subimage", None) is not None:
        cargs.extend([
            "-extract",
            *map(str, params.get("extract_subimage", None))
        ])
    if params.get("window_flag", False):
        cargs.append("-window")
    return cargs


def mri_ms_fitparms_outputs(
    params: MriMsFitparmsParameters,
    execution: Execution,
) -> MriMsFitparmsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriMsFitparmsOutputs(
        root=execution.output_file("."),
        t1_map=execution.output_file("T1.mgz"),
        pd_map=execution.output_file("PD.mgz"),
        vol0_synthetic=execution.output_file("vol0.mgz"),
        vol0_affine=execution.output_file("vol0.lta"),
        vol1_synthetic=execution.output_file("vol1.mgz"),
        vol1_affine=execution.output_file("vol1.lta"),
    )
    return ret


def mri_ms_fitparms_execute(
    params: MriMsFitparmsParameters,
    runner: Runner | None = None,
) -> MriMsFitparmsOutputs:
    """
    mri_ms_fitparms
    
    Tool for estimating T1 and PD values from FLASH images and applying
    transformations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMsFitparmsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_MS_FITPARMS_METADATA)
    params = execution.params(params)
    cargs = mri_ms_fitparms_cargs(params, execution)
    ret = mri_ms_fitparms_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_ms_fitparms(
    volumes: list[InputPathType],
    output_dir: str,
    afi_flag: bool = False,
    ait_flag: bool = False,
    at: str | None = None,
    conform_flag: bool = False,
    correct_flag: bool = False,
    cubic_flag: bool = False,
    debug_slice_flag: bool = False,
    debug_voxel_flag: bool = False,
    dt: str | None = None,
    fa: str | None = None,
    fa_scale: float | None = None,
    faf: str | None = None,
    fsmooth: float | None = None,
    invert_flag: bool = False,
    momentum: str | None = None,
    max_t2: str | None = None,
    n_iter: float | None = None,
    nearest_flag: bool = False,
    nocompress_flag: bool = False,
    nosynth_flag: bool = False,
    residuals: str | None = None,
    smooth_sigma: float | None = None,
    scale_factor: float | None = None,
    sinc_flag: bool = False,
    transform_flag: bool = False,
    echo_time: float | None = None,
    repetition_time: float | None = None,
    trilinear_flag: bool = False,
    tukey_flag: bool = False,
    help_flag: bool = False,
    use_brain_mask_flag: bool = False,
    write_intermediate: float | None = None,
    extract_subimage: list[float] | None = None,
    window_flag: bool = False,
    runner: Runner | None = None,
) -> MriMsFitparmsOutputs:
    """
    mri_ms_fitparms
    
    Tool for estimating T1 and PD values from FLASH images and applying
    transformations.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        volumes: List of 3D FLASH images with different flip angles.
        output_dir: Output directory.
        afi_flag: Designate flip angle map to use with nominal value 60 degrees.
        ait_flag: Apply inverse of transform.
        at: Set acquisition time.
        conform_flag: Interpolate volume to be isotropic 1mm^3.
        correct_flag: Correct proton density map (PD) by T2* estimates.
        cubic_flag: Use cubic interpolation (NOT WORKING!).
        debug_slice_flag: Debug slice processing ???.
        debug_voxel_flag: Debug voxel processing ???.
        dt: Set time step dt ???.
        fa: Set flip angle.
        fa_scale: Set value to scale all flip angles by.
        faf: Designate flip angle map to use with specified control points.
        fsmooth: Smooth flip angle map for X iterations of soap bubble\
            smoothing.
        invert_flag: Invert volumes.
        momentum: Set momentum.
        max_t2: Set max T2*.
        n_iter: Perform estimation/motion correction X times.
        nearest_flag: Use nearest-neighbor interpolation.
        nocompress_flag: Do not compress output volumes (save as .mgh).
        nosynth_flag: Disable volume synthesis.
        residuals: Write out residuals to designated location.
        smooth_sigma: Smooth faf field with sigma=X.
        scale_factor: Scale volumes by X after reading.
        sinc_flag: Use sinc interpolation (default window width is 6).
        transform_flag: Apply transform to output volumes.
        echo_time: Set echo time (TE) in ms.
        repetition_time: Set repetition time (TR) in ms.
        trilinear_flag: Use trilinear interpolation.
        tukey_flag: Use Tukey bi-weight of residuals.
        help_flag: Display help text.
        use_brain_mask_flag: Compute a brain mask from the PD map and use it\
            for registration.
        write_intermediate: Write out intermediate results every X iterations.
        extract_subimage: Extract a subimage for each input image, specified by\
            x0 y0 z0 dx dy dz.
        window_flag: Not implemented.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriMsFitparmsOutputs`).
    """
    params = mri_ms_fitparms_params(
        volumes=volumes,
        output_dir=output_dir,
        afi_flag=afi_flag,
        ait_flag=ait_flag,
        at=at,
        conform_flag=conform_flag,
        correct_flag=correct_flag,
        cubic_flag=cubic_flag,
        debug_slice_flag=debug_slice_flag,
        debug_voxel_flag=debug_voxel_flag,
        dt=dt,
        fa=fa,
        fa_scale=fa_scale,
        faf=faf,
        fsmooth=fsmooth,
        invert_flag=invert_flag,
        momentum=momentum,
        max_t2=max_t2,
        n_iter=n_iter,
        nearest_flag=nearest_flag,
        nocompress_flag=nocompress_flag,
        nosynth_flag=nosynth_flag,
        residuals=residuals,
        smooth_sigma=smooth_sigma,
        scale_factor=scale_factor,
        sinc_flag=sinc_flag,
        transform_flag=transform_flag,
        echo_time=echo_time,
        repetition_time=repetition_time,
        trilinear_flag=trilinear_flag,
        tukey_flag=tukey_flag,
        help_flag=help_flag,
        use_brain_mask_flag=use_brain_mask_flag,
        write_intermediate=write_intermediate,
        extract_subimage=extract_subimage,
        window_flag=window_flag,
    )
    return mri_ms_fitparms_execute(params, runner)


__all__ = [
    "MRI_MS_FITPARMS_METADATA",
    "MriMsFitparmsOutputs",
    "mri_ms_fitparms",
    "mri_ms_fitparms_execute",
    "mri_ms_fitparms_params",
]
