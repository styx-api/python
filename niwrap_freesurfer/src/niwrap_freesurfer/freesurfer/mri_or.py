# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_OR_METADATA = Metadata(
    id="dffeb3efda59bfcbcb950926fbb576c58009fdf3.boutiques",
    name="mri_or",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriOrParameters = typing.TypedDict('MriOrParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_or"]],
    "original_labels": bool,
    "input_files": list[InputPathType],
})
MriOrParametersTagged = typing.TypedDict('MriOrParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_or"],
    "original_labels": bool,
    "input_files": list[InputPathType],
})


class MriOrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriOrParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_or_params(
    input_files: list[InputPathType],
    original_labels: bool = False,
) -> MriOrParametersTagged:
    """
    Build parameters.
    
    Args:
        input_files: Input image files on which to perform the logical OR\
            operation.
        original_labels: Keeps the original label values in the input files\
            when creating the output.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_or",
        "original_labels": original_labels,
        "input_files": input_files,
    }
    return params


def mri_or_cargs(
    params: MriOrParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_or")
    if params.get("original_labels", False):
        cargs.append("-o")
    cargs.extend([execution.input_file(f) for f in params.get("input_files", None)])
    return cargs


def mri_or_outputs(
    params: MriOrParameters,
    execution: Execution,
) -> MriOrOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriOrOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_or_execute(
    params: MriOrParameters,
    runner: Runner | None = None,
) -> MriOrOutputs:
    """
    mri_or
    
    Performs a logical voxel-wise OR on a series of volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriOrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_OR_METADATA)
    params = execution.params(params)
    cargs = mri_or_cargs(params, execution)
    ret = mri_or_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_or(
    input_files: list[InputPathType],
    original_labels: bool = False,
    runner: Runner | None = None,
) -> MriOrOutputs:
    """
    mri_or
    
    Performs a logical voxel-wise OR on a series of volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_files: Input image files on which to perform the logical OR\
            operation.
        original_labels: Keeps the original label values in the input files\
            when creating the output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriOrOutputs`).
    """
    params = mri_or_params(
        original_labels=original_labels,
        input_files=input_files,
    )
    return mri_or_execute(params, runner)


__all__ = [
    "MRI_OR_METADATA",
    "MriOrOutputs",
    "mri_or",
    "mri_or_execute",
    "mri_or_params",
]
