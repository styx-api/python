# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_PARSE_SDCMDIR_METADATA = Metadata(
    id="b8bf5c0b6d4658befffadf65022ae055d1766b9c.boutiques",
    name="mri_parse_sdcmdir",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriParseSdcmdirParameters = typing.TypedDict('MriParseSdcmdirParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_parse_sdcmdir"]],
    "sdicomdir": str,
    "outfile": typing.NotRequired[str | None],
    "sortbyrun": bool,
    "summarize": bool,
    "dwi": bool,
})
MriParseSdcmdirParametersTagged = typing.TypedDict('MriParseSdcmdirParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_parse_sdcmdir"],
    "sdicomdir": str,
    "outfile": typing.NotRequired[str | None],
    "sortbyrun": bool,
    "summarize": bool,
    "dwi": bool,
})


class MriParseSdcmdirOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriParseSdcmdirParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_parse_sdcmdir_params(
    sdicomdir: str,
    outfile: str | None = None,
    sortbyrun: bool = False,
    summarize: bool = False,
    dwi: bool = False,
) -> MriParseSdcmdirParametersTagged:
    """
    Build parameters.
    
    Args:
        sdicomdir: Path to Siemens DICOM directory.
        outfile: Name of a file to which the results will be printed. If\
            unspecified, the results will be printed to stdout.
        sortbyrun: Assign run numbers.
        summarize: Only print out info for run leaders.
        dwi: Try to read DWI params. Generally no need to.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_parse_sdcmdir",
        "sdicomdir": sdicomdir,
        "sortbyrun": sortbyrun,
        "summarize": summarize,
        "dwi": dwi,
    }
    if outfile is not None:
        params["outfile"] = outfile
    return params


def mri_parse_sdcmdir_cargs(
    params: MriParseSdcmdirParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_parse_sdcmdir")
    cargs.extend([
        "--d",
        params.get("sdicomdir", None)
    ])
    if params.get("outfile", None) is not None:
        cargs.extend([
            "--o",
            params.get("outfile", None)
        ])
    if params.get("sortbyrun", False):
        cargs.append("--sortbyrun")
    if params.get("summarize", False):
        cargs.append("--summarize")
    if params.get("dwi", False):
        cargs.append("--dwi")
    return cargs


def mri_parse_sdcmdir_outputs(
    params: MriParseSdcmdirParameters,
    execution: Execution,
) -> MriParseSdcmdirOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriParseSdcmdirOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_parse_sdcmdir_execute(
    params: MriParseSdcmdirParameters,
    runner: Runner | None = None,
) -> MriParseSdcmdirOutputs:
    """
    mri_parse_sdcmdir
    
    This program parses the Siemens DICOM files in a given directory and prints
    out information about each file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriParseSdcmdirOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_PARSE_SDCMDIR_METADATA)
    params = execution.params(params)
    cargs = mri_parse_sdcmdir_cargs(params, execution)
    ret = mri_parse_sdcmdir_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_parse_sdcmdir(
    sdicomdir: str,
    outfile: str | None = None,
    sortbyrun: bool = False,
    summarize: bool = False,
    dwi: bool = False,
    runner: Runner | None = None,
) -> MriParseSdcmdirOutputs:
    """
    mri_parse_sdcmdir
    
    This program parses the Siemens DICOM files in a given directory and prints
    out information about each file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        sdicomdir: Path to Siemens DICOM directory.
        outfile: Name of a file to which the results will be printed. If\
            unspecified, the results will be printed to stdout.
        sortbyrun: Assign run numbers.
        summarize: Only print out info for run leaders.
        dwi: Try to read DWI params. Generally no need to.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriParseSdcmdirOutputs`).
    """
    params = mri_parse_sdcmdir_params(
        sdicomdir=sdicomdir,
        outfile=outfile,
        sortbyrun=sortbyrun,
        summarize=summarize,
        dwi=dwi,
    )
    return mri_parse_sdcmdir_execute(params, runner)


__all__ = [
    "MRI_PARSE_SDCMDIR_METADATA",
    "MriParseSdcmdirOutputs",
    "mri_parse_sdcmdir",
    "mri_parse_sdcmdir_execute",
    "mri_parse_sdcmdir_params",
]
