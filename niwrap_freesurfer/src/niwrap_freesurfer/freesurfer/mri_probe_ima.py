# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_PROBE_IMA_METADATA = Metadata(
    id="5fa4fc0601daa1858523f5477b0490cf22997bfc.boutiques",
    name="mri_probe_ima",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriProbeImaParameters = typing.TypedDict('MriProbeImaParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_probe_ima"]],
    "ima_file": InputPathType,
    "key_string": typing.NotRequired[str | None],
    "offset_type_len": typing.NotRequired[str | None],
    "attribute_name": typing.NotRequired[str | None],
    "fileinfo": bool,
    "dictionary": bool,
    "ob_stem": typing.NotRequired[str | None],
    "help": bool,
    "version": bool,
})
MriProbeImaParametersTagged = typing.TypedDict('MriProbeImaParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_probe_ima"],
    "ima_file": InputPathType,
    "key_string": typing.NotRequired[str | None],
    "offset_type_len": typing.NotRequired[str | None],
    "attribute_name": typing.NotRequired[str | None],
    "fileinfo": bool,
    "dictionary": bool,
    "ob_stem": typing.NotRequired[str | None],
    "help": bool,
    "version": bool,
})


class MriProbeImaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriProbeImaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_probe_ima_params(
    ima_file: InputPathType,
    key_string: str | None = None,
    offset_type_len: str | None = None,
    attribute_name: str | None = None,
    fileinfo: bool = False,
    dictionary: bool = False,
    ob_stem: str | None = None,
    help_: bool = False,
    version: bool = False,
) -> MriProbeImaParametersTagged:
    """
    Build parameters.
    
    Args:
        ima_file: Path to the IMA file to be probed.
        key_string: String from dictionary to query the IMA file.
        offset_type_len: Offset, type, and string length for querying. Type can\
            be short, int, long, float, double, or string.
        attribute_name: Name of the file information attribute to query.
        fileinfo: Dump the interpreted file information.
        dictionary: Dump the dictionary without the need of an IMA file.
        ob_stem: Dump binary pixel data into bshort with stem prefix.
        help_: Show help message and exit.
        version: Print version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_probe_ima",
        "ima_file": ima_file,
        "fileinfo": fileinfo,
        "dictionary": dictionary,
        "help": help_,
        "version": version,
    }
    if key_string is not None:
        params["key_string"] = key_string
    if offset_type_len is not None:
        params["offset_type_len"] = offset_type_len
    if attribute_name is not None:
        params["attribute_name"] = attribute_name
    if ob_stem is not None:
        params["ob_stem"] = ob_stem
    return params


def mri_probe_ima_cargs(
    params: MriProbeImaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_probe_ima")
    cargs.extend([
        "--i",
        execution.input_file(params.get("ima_file", None))
    ])
    if params.get("key_string", None) is not None:
        cargs.extend([
            "--key",
            params.get("key_string", None)
        ])
    if params.get("offset_type_len", None) is not None:
        cargs.extend([
            "--o",
            params.get("offset_type_len", None)
        ])
    if params.get("attribute_name", None) is not None:
        cargs.extend([
            "--attr",
            params.get("attribute_name", None)
        ])
    if params.get("fileinfo", False):
        cargs.append("--fileinfo")
    if params.get("dictionary", False):
        cargs.append("--dictionary")
    if params.get("ob_stem", None) is not None:
        cargs.extend([
            "--ob",
            params.get("ob_stem", None)
        ])
    if params.get("help", False):
        cargs.append("--help")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mri_probe_ima_outputs(
    params: MriProbeImaParameters,
    execution: Execution,
) -> MriProbeImaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriProbeImaOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_probe_ima_execute(
    params: MriProbeImaParameters,
    runner: Runner | None = None,
) -> MriProbeImaOutputs:
    """
    mri_probe_ima
    
    Query Siemens IMA files to extract header information.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriProbeImaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_PROBE_IMA_METADATA)
    params = execution.params(params)
    cargs = mri_probe_ima_cargs(params, execution)
    ret = mri_probe_ima_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_probe_ima(
    ima_file: InputPathType,
    key_string: str | None = None,
    offset_type_len: str | None = None,
    attribute_name: str | None = None,
    fileinfo: bool = False,
    dictionary: bool = False,
    ob_stem: str | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MriProbeImaOutputs:
    """
    mri_probe_ima
    
    Query Siemens IMA files to extract header information.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        ima_file: Path to the IMA file to be probed.
        key_string: String from dictionary to query the IMA file.
        offset_type_len: Offset, type, and string length for querying. Type can\
            be short, int, long, float, double, or string.
        attribute_name: Name of the file information attribute to query.
        fileinfo: Dump the interpreted file information.
        dictionary: Dump the dictionary without the need of an IMA file.
        ob_stem: Dump binary pixel data into bshort with stem prefix.
        help_: Show help message and exit.
        version: Print version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriProbeImaOutputs`).
    """
    params = mri_probe_ima_params(
        ima_file=ima_file,
        key_string=key_string,
        offset_type_len=offset_type_len,
        attribute_name=attribute_name,
        fileinfo=fileinfo,
        dictionary=dictionary,
        ob_stem=ob_stem,
        help_=help_,
        version=version,
    )
    return mri_probe_ima_execute(params, runner)


__all__ = [
    "MRI_PROBE_IMA_METADATA",
    "MriProbeImaOutputs",
    "mri_probe_ima",
    "mri_probe_ima_execute",
    "mri_probe_ima_params",
]
