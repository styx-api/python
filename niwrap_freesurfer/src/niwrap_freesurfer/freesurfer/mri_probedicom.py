# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_PROBEDICOM_METADATA = Metadata(
    id="e1b3bdc72222d3578b3efc72f9534b11ca6f6261.boutiques",
    name="mri_probedicom",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriProbedicomParameters = typing.TypedDict('MriProbedicomParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_probedicom"]],
    "dicom_file": InputPathType,
    "option1": typing.NotRequired[str | None],
    "option2": typing.NotRequired[str | None],
})
MriProbedicomParametersTagged = typing.TypedDict('MriProbedicomParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_probedicom"],
    "dicom_file": InputPathType,
    "option1": typing.NotRequired[str | None],
    "option2": typing.NotRequired[str | None],
})


class MriProbedicomOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriProbedicomParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Text file containing extracted information from DICOM."""


def mri_probedicom_params(
    dicom_file: InputPathType,
    option1: str | None = None,
    option2: str | None = None,
) -> MriProbedicomParametersTagged:
    """
    Build parameters.
    
    Args:
        dicom_file: DICOM file to be probed.
        option1: Description for option1.
        option2: Description for option2.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_probedicom",
        "dicom_file": dicom_file,
    }
    if option1 is not None:
        params["option1"] = option1
    if option2 is not None:
        params["option2"] = option2
    return params


def mri_probedicom_cargs(
    params: MriProbedicomParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_probedicom")
    cargs.append(execution.input_file(params.get("dicom_file", None)))
    if params.get("option1", None) is not None:
        cargs.extend([
            "-option1",
            params.get("option1", None)
        ])
    if params.get("option2", None) is not None:
        cargs.extend([
            "-option2",
            params.get("option2", None)
        ])
    return cargs


def mri_probedicom_outputs(
    params: MriProbedicomParameters,
    execution: Execution,
) -> MriProbedicomOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriProbedicomOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file("[OUTPUT].txt"),
    )
    return ret


def mri_probedicom_execute(
    params: MriProbedicomParameters,
    runner: Runner | None = None,
) -> MriProbedicomOutputs:
    """
    mri_probedicom
    
    Utility to probe DICOM files for information.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriProbedicomOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_PROBEDICOM_METADATA)
    params = execution.params(params)
    cargs = mri_probedicom_cargs(params, execution)
    ret = mri_probedicom_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_probedicom(
    dicom_file: InputPathType,
    option1: str | None = None,
    option2: str | None = None,
    runner: Runner | None = None,
) -> MriProbedicomOutputs:
    """
    mri_probedicom
    
    Utility to probe DICOM files for information.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        dicom_file: DICOM file to be probed.
        option1: Description for option1.
        option2: Description for option2.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriProbedicomOutputs`).
    """
    params = mri_probedicom_params(
        dicom_file=dicom_file,
        option1=option1,
        option2=option2,
    )
    return mri_probedicom_execute(params, runner)


__all__ = [
    "MRI_PROBEDICOM_METADATA",
    "MriProbedicomOutputs",
    "mri_probedicom",
    "mri_probedicom_execute",
    "mri_probedicom_params",
]
