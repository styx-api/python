# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_REDUCE_METADATA = Metadata(
    id="98b0cda9a9dd474327f34e0a75f5de64b98979da.boutiques",
    name="mri_reduce",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriReduceParameters = typing.TypedDict('MriReduceParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_reduce"]],
    "input_file": InputPathType,
    "output_file": str,
})
MriReduceParametersTagged = typing.TypedDict('MriReduceParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_reduce"],
    "input_file": InputPathType,
    "output_file": str,
})


class MriReduceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriReduceParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    reduced_output: OutputPathType
    """Reduced MRI file output"""


def mri_reduce_params(
    input_file: InputPathType,
    output_file: str,
) -> MriReduceParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input MRI file.
        output_file: Output filename for the reduced MRI file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_reduce",
        "input_file": input_file,
        "output_file": output_file,
    }
    return params


def mri_reduce_cargs(
    params: MriReduceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_reduce")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def mri_reduce_outputs(
    params: MriReduceParameters,
    execution: Execution,
) -> MriReduceOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriReduceOutputs(
        root=execution.output_file("."),
        reduced_output=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mri_reduce_execute(
    params: MriReduceParameters,
    runner: Runner | None = None,
) -> MriReduceOutputs:
    """
    mri_reduce
    
    A tool to reduce MRI file dimensions.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriReduceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_REDUCE_METADATA)
    params = execution.params(params)
    cargs = mri_reduce_cargs(params, execution)
    ret = mri_reduce_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_reduce(
    input_file: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> MriReduceOutputs:
    """
    mri_reduce
    
    A tool to reduce MRI file dimensions.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input MRI file.
        output_file: Output filename for the reduced MRI file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriReduceOutputs`).
    """
    params = mri_reduce_params(
        input_file=input_file,
        output_file=output_file,
    )
    return mri_reduce_execute(params, runner)


__all__ = [
    "MRI_REDUCE_METADATA",
    "MriReduceOutputs",
    "mri_reduce",
    "mri_reduce_execute",
    "mri_reduce_params",
]
