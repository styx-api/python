# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_RIBBON_METADATA = Metadata(
    id="a40554737433b3d1d89c707652c1ac81b900e449.boutiques",
    name="mri_ribbon",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriRibbonParameters = typing.TypedDict('MriRibbonParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_ribbon"]],
    "label_file": typing.NotRequired[InputPathType | None],
    "inner_surface": InputPathType,
    "outer_surface": InputPathType,
    "input_volume": str,
    "output_volume": str,
})
MriRibbonParametersTagged = typing.TypedDict('MriRibbonParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_ribbon"],
    "label_file": typing.NotRequired[InputPathType | None],
    "inner_surface": InputPathType,
    "outer_surface": InputPathType,
    "input_volume": str,
    "output_volume": str,
})


class MriRibbonOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriRibbonParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    ribbon_output: OutputPathType
    """Output ribbon volume"""


def mri_ribbon_params(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    input_volume: str,
    output_volume: str,
    label_file: InputPathType | None = None,
) -> MriRibbonParametersTagged:
    """
    Build parameters.
    
    Args:
        inner_surface: File name of the inner surface.
        outer_surface: File name of the outer surface.
        input_volume: Prefix for the input volume file.
        output_volume: Prefix for the output volume file.
        label_file: Label file specifying regions of interest (optional).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_ribbon",
        "inner_surface": inner_surface,
        "outer_surface": outer_surface,
        "input_volume": input_volume,
        "output_volume": output_volume,
    }
    if label_file is not None:
        params["label_file"] = label_file
    return params


def mri_ribbon_cargs(
    params: MriRibbonParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_ribbon")
    if params.get("label_file", None) is not None:
        cargs.extend([
            "-l",
            execution.input_file(params.get("label_file", None))
        ])
    cargs.append(execution.input_file(params.get("inner_surface", None)))
    cargs.append(execution.input_file(params.get("outer_surface", None)))
    cargs.append(params.get("input_volume", None))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_ribbon_outputs(
    params: MriRibbonParameters,
    execution: Execution,
) -> MriRibbonOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriRibbonOutputs(
        root=execution.output_file("."),
        ribbon_output=execution.output_file(params.get("output_volume", None) + "_ribbon.nii.gz"),
    )
    return ret


def mri_ribbon_execute(
    params: MriRibbonParameters,
    runner: Runner | None = None,
) -> MriRibbonOutputs:
    """
    mri_ribbon
    
    MRI Ribbon tool to create ribbon volumes from surface files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRibbonOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_RIBBON_METADATA)
    params = execution.params(params)
    cargs = mri_ribbon_cargs(params, execution)
    ret = mri_ribbon_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_ribbon(
    inner_surface: InputPathType,
    outer_surface: InputPathType,
    input_volume: str,
    output_volume: str,
    label_file: InputPathType | None = None,
    runner: Runner | None = None,
) -> MriRibbonOutputs:
    """
    mri_ribbon
    
    MRI Ribbon tool to create ribbon volumes from surface files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        inner_surface: File name of the inner surface.
        outer_surface: File name of the outer surface.
        input_volume: Prefix for the input volume file.
        output_volume: Prefix for the output volume file.
        label_file: Label file specifying regions of interest (optional).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRibbonOutputs`).
    """
    params = mri_ribbon_params(
        label_file=label_file,
        inner_surface=inner_surface,
        outer_surface=outer_surface,
        input_volume=input_volume,
        output_volume=output_volume,
    )
    return mri_ribbon_execute(params, runner)


__all__ = [
    "MRI_RIBBON_METADATA",
    "MriRibbonOutputs",
    "mri_ribbon",
    "mri_ribbon_execute",
    "mri_ribbon_params",
]
