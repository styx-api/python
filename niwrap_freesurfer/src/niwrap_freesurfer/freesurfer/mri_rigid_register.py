# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_RIGID_REGISTER_METADATA = Metadata(
    id="241b5f8156d8e63897d1cee45d920050edf55d44.boutiques",
    name="mri_rigid_register",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriRigidRegisterParameters = typing.TypedDict('MriRigidRegisterParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_rigid_register"]],
    "source_volume": InputPathType,
    "target_volume": InputPathType,
    "transform_output": str,
})
MriRigidRegisterParametersTagged = typing.TypedDict('MriRigidRegisterParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_rigid_register"],
    "source_volume": InputPathType,
    "target_volume": InputPathType,
    "transform_output": str,
})


class MriRigidRegisterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriRigidRegisterParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    transform_file: OutputPathType
    """Output file for transform matrix"""


def mri_rigid_register_params(
    source_volume: InputPathType,
    target_volume: InputPathType,
    transform_output: str,
) -> MriRigidRegisterParametersTagged:
    """
    Build parameters.
    
    Args:
        source_volume: Source volume file for registration.
        target_volume: Target volume file for registration.
        transform_output: Output file name for the transform.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_rigid_register",
        "source_volume": source_volume,
        "target_volume": target_volume,
        "transform_output": transform_output,
    }
    return params


def mri_rigid_register_cargs(
    params: MriRigidRegisterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_rigid_register")
    cargs.append(execution.input_file(params.get("source_volume", None)))
    cargs.append(execution.input_file(params.get("target_volume", None)))
    cargs.append(params.get("transform_output", None))
    return cargs


def mri_rigid_register_outputs(
    params: MriRigidRegisterParameters,
    execution: Execution,
) -> MriRigidRegisterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriRigidRegisterOutputs(
        root=execution.output_file("."),
        transform_file=execution.output_file(params.get("transform_output", None)),
    )
    return ret


def mri_rigid_register_execute(
    params: MriRigidRegisterParameters,
    runner: Runner | None = None,
) -> MriRigidRegisterOutputs:
    """
    mri_rigid_register
    
    Rigid registration tool for MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRigidRegisterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_RIGID_REGISTER_METADATA)
    params = execution.params(params)
    cargs = mri_rigid_register_cargs(params, execution)
    ret = mri_rigid_register_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_rigid_register(
    source_volume: InputPathType,
    target_volume: InputPathType,
    transform_output: str,
    runner: Runner | None = None,
) -> MriRigidRegisterOutputs:
    """
    mri_rigid_register
    
    Rigid registration tool for MRI volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source_volume: Source volume file for registration.
        target_volume: Target volume file for registration.
        transform_output: Output file name for the transform.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRigidRegisterOutputs`).
    """
    params = mri_rigid_register_params(
        source_volume=source_volume,
        target_volume=target_volume,
        transform_output=transform_output,
    )
    return mri_rigid_register_execute(params, runner)


__all__ = [
    "MRI_RIGID_REGISTER_METADATA",
    "MriRigidRegisterOutputs",
    "mri_rigid_register",
    "mri_rigid_register_execute",
    "mri_rigid_register_params",
]
