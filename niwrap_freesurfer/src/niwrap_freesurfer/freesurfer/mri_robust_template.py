# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_ROBUST_TEMPLATE_METADATA = Metadata(
    id="879b2b379c54ce744a435c993b95da04800bb0ba.boutiques",
    name="mri_robust_template",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriRobustTemplateParameters = typing.TypedDict('MriRobustTemplateParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_robust_template"]],
    "mov_files": list[InputPathType],
    "template_file": str,
    "sat_value": typing.NotRequired[float | None],
    "satit_flag": bool,
    "lta_files": typing.NotRequired[list[str] | None],
    "mapmov_files": typing.NotRequired[list[str] | None],
    "mapmovhdr_files": typing.NotRequired[list[str] | None],
    "weights_files": typing.NotRequired[list[str] | None],
    "oneminusw_flag": bool,
    "average_type": typing.NotRequired[int | None],
    "inittp": typing.NotRequired[int | None],
    "fixtp_flag": bool,
    "iscale_flag": bool,
    "iscaleonly_flag": bool,
    "iscalein_files": typing.NotRequired[list[str] | None],
    "iscaleout_files": typing.NotRequired[list[str] | None],
    "transonly_flag": bool,
    "affine_flag": bool,
    "ixforms_files": typing.NotRequired[list[str] | None],
    "masks_files": typing.NotRequired[list[str] | None],
    "vox2vox_flag": bool,
    "leastsquares_flag": bool,
    "noit_flag": bool,
    "maxit": typing.NotRequired[int | None],
    "highit": typing.NotRequired[int | None],
    "epsit": typing.NotRequired[float | None],
    "pairmaxit": typing.NotRequired[int | None],
    "pairepsit": typing.NotRequired[float | None],
    "subsample": typing.NotRequired[int | None],
    "nomulti_flag": bool,
    "floattype_flag": bool,
    "finalnearest_flag": bool,
    "doubleprec_flag": bool,
    "cras_flag": bool,
    "res_thresh": typing.NotRequired[float | None],
    "frobnorm_thresh": typing.NotRequired[float | None],
    "debug_flag": bool,
})
MriRobustTemplateParametersTagged = typing.TypedDict('MriRobustTemplateParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_robust_template"],
    "mov_files": list[InputPathType],
    "template_file": str,
    "sat_value": typing.NotRequired[float | None],
    "satit_flag": bool,
    "lta_files": typing.NotRequired[list[str] | None],
    "mapmov_files": typing.NotRequired[list[str] | None],
    "mapmovhdr_files": typing.NotRequired[list[str] | None],
    "weights_files": typing.NotRequired[list[str] | None],
    "oneminusw_flag": bool,
    "average_type": typing.NotRequired[int | None],
    "inittp": typing.NotRequired[int | None],
    "fixtp_flag": bool,
    "iscale_flag": bool,
    "iscaleonly_flag": bool,
    "iscalein_files": typing.NotRequired[list[str] | None],
    "iscaleout_files": typing.NotRequired[list[str] | None],
    "transonly_flag": bool,
    "affine_flag": bool,
    "ixforms_files": typing.NotRequired[list[str] | None],
    "masks_files": typing.NotRequired[list[str] | None],
    "vox2vox_flag": bool,
    "leastsquares_flag": bool,
    "noit_flag": bool,
    "maxit": typing.NotRequired[int | None],
    "highit": typing.NotRequired[int | None],
    "epsit": typing.NotRequired[float | None],
    "pairmaxit": typing.NotRequired[int | None],
    "pairepsit": typing.NotRequired[float | None],
    "subsample": typing.NotRequired[int | None],
    "nomulti_flag": bool,
    "floattype_flag": bool,
    "finalnearest_flag": bool,
    "doubleprec_flag": bool,
    "cras_flag": bool,
    "res_thresh": typing.NotRequired[float | None],
    "frobnorm_thresh": typing.NotRequired[float | None],
    "debug_flag": bool,
})


class MriRobustTemplateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriRobustTemplateParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_template: OutputPathType
    """Output template volume (final mean/median image)."""
    output_lta_transform: OutputPathType
    """Output transform file."""
    output_mapped_image: OutputPathType
    """Output mapped and resampled image."""
    output_weights_map: OutputPathType
    """Output weights map (outliers)."""


def mri_robust_template_params(
    mov_files: list[InputPathType],
    template_file: str,
    sat_value: float | None = None,
    satit_flag: bool = False,
    lta_files: list[str] | None = None,
    mapmov_files: list[str] | None = None,
    mapmovhdr_files: list[str] | None = None,
    weights_files: list[str] | None = None,
    oneminusw_flag: bool = False,
    average_type: int | None = None,
    inittp: int | None = None,
    fixtp_flag: bool = False,
    iscale_flag: bool = False,
    iscaleonly_flag: bool = False,
    iscalein_files: list[str] | None = None,
    iscaleout_files: list[str] | None = None,
    transonly_flag: bool = False,
    affine_flag: bool = False,
    ixforms_files: list[str] | None = None,
    masks_files: list[str] | None = None,
    vox2vox_flag: bool = False,
    leastsquares_flag: bool = False,
    noit_flag: bool = False,
    maxit: int | None = None,
    highit: int | None = None,
    epsit: float | None = None,
    pairmaxit: int | None = None,
    pairepsit: float | None = None,
    subsample: int | None = None,
    nomulti_flag: bool = False,
    floattype_flag: bool = False,
    finalnearest_flag: bool = False,
    doubleprec_flag: bool = False,
    cras_flag: bool = False,
    res_thresh: float | None = None,
    frobnorm_thresh: float | None = None,
    debug_flag: bool = False,
) -> MriRobustTemplateParametersTagged:
    """
    Build parameters.
    
    Args:
        mov_files: Input movable volumes to be aligned to common mean/median\
            template.
        template_file: Output template volume (final mean/median image).
        sat_value: Set outlier sensitivity manually. Higher values mean less\
            sensitivity.
        satit_flag: Auto-detect good sensitivity (recommended for head or full\
            brain scans).
        lta_files: Output transforms to template (for each input).
        mapmov_files: Output images: map and resample each input to template.
        mapmovhdr_files: Output images: header-adjusted movables (no\
            resampling).
        weights_files: Output weights (outliers) in target space.
        oneminusw_flag: Weights (outlier) map will be inverted (0=outlier), as\
            in earlier versions.
        average_type: Construct template from: 0 Mean, 1 Median (default).
        inittp: Use TP# for spatial init (default random), 0: no init.
        fixtp_flag: Map everything to init TP# (init TP is not resampled).
        iscale_flag: Allow also intensity scaling (default off).
        iscaleonly_flag: Only perform iscale (no transformation, default off).
        iscalein_files: Use initial intensity scales.
        iscaleout_files: Output final intensity scales (will activate\
            --iscale).
        transonly_flag: Find 3 parameter translation only.
        affine_flag: Find 12 parameter affine transform.
        ixforms_files: Use initial transforms (lta) on source ('id'=identity).
        masks_files: Input masks applied to movables.
        vox2vox_flag: Output VOX2VOX lta file (default is RAS2RAS).
        leastsquares_flag: Use least squares instead of robust M-estimator (for\
            testing only).
        noit_flag: Do not iterate, just create first template.
        maxit: Iterate max # times (if #tp>2 default 6, else 5 for 2tp reg.).
        highit: Iterate max # times on highest resolution (default 5).
        epsit: Stop iterations when all transform updates fall below the\
            specified value.
        pairmaxit: Iterate max # times (default 5) for individual pairwise\
            registrations.
        pairepsit: Stop individual pairwise registration iterations when\
            transform updates fall below the specified value.
        subsample: Subsample if dimension > specified value on all axes\
            (default no subsampling).
        nomulti_flag: Do not use multi-resolution (only highest resolution).
        floattype_flag: Convert images to float internally (default: keep input\
            type).
        finalnearest_flag: Use nearest neighbor in final interpolation when\
            creating average.
        doubleprec_flag: Use double precision instead of float internally\
            (large memory usage).
        cras_flag: Center template at average CRAS, instead of average\
            barycenter.
        res_thresh: Volume resolution threshold (default is 0.01 mm).
        frobnorm_thresh: Matrix frobenius norm threshold (default is 0.0001).
        debug_flag: Show debug output (default no debug output).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_robust_template",
        "mov_files": mov_files,
        "template_file": template_file,
        "satit_flag": satit_flag,
        "oneminusw_flag": oneminusw_flag,
        "fixtp_flag": fixtp_flag,
        "iscale_flag": iscale_flag,
        "iscaleonly_flag": iscaleonly_flag,
        "transonly_flag": transonly_flag,
        "affine_flag": affine_flag,
        "vox2vox_flag": vox2vox_flag,
        "leastsquares_flag": leastsquares_flag,
        "noit_flag": noit_flag,
        "nomulti_flag": nomulti_flag,
        "floattype_flag": floattype_flag,
        "finalnearest_flag": finalnearest_flag,
        "doubleprec_flag": doubleprec_flag,
        "cras_flag": cras_flag,
        "debug_flag": debug_flag,
    }
    if sat_value is not None:
        params["sat_value"] = sat_value
    if lta_files is not None:
        params["lta_files"] = lta_files
    if mapmov_files is not None:
        params["mapmov_files"] = mapmov_files
    if mapmovhdr_files is not None:
        params["mapmovhdr_files"] = mapmovhdr_files
    if weights_files is not None:
        params["weights_files"] = weights_files
    if average_type is not None:
        params["average_type"] = average_type
    if inittp is not None:
        params["inittp"] = inittp
    if iscalein_files is not None:
        params["iscalein_files"] = iscalein_files
    if iscaleout_files is not None:
        params["iscaleout_files"] = iscaleout_files
    if ixforms_files is not None:
        params["ixforms_files"] = ixforms_files
    if masks_files is not None:
        params["masks_files"] = masks_files
    if maxit is not None:
        params["maxit"] = maxit
    if highit is not None:
        params["highit"] = highit
    if epsit is not None:
        params["epsit"] = epsit
    if pairmaxit is not None:
        params["pairmaxit"] = pairmaxit
    if pairepsit is not None:
        params["pairepsit"] = pairepsit
    if subsample is not None:
        params["subsample"] = subsample
    if res_thresh is not None:
        params["res_thresh"] = res_thresh
    if frobnorm_thresh is not None:
        params["frobnorm_thresh"] = frobnorm_thresh
    return params


def mri_robust_template_cargs(
    params: MriRobustTemplateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_robust_template")
    cargs.extend([
        "-mov",
        *[execution.input_file(f) for f in params.get("mov_files", None)]
    ])
    cargs.extend([
        "-template",
        params.get("template_file", None)
    ])
    if params.get("sat_value", None) is not None:
        cargs.extend([
            "--sat",
            str(params.get("sat_value", None))
        ])
    if params.get("satit_flag", False):
        cargs.append("--satit")
    if params.get("lta_files", None) is not None:
        cargs.extend([
            "--lta",
            *params.get("lta_files", None)
        ])
    if params.get("mapmov_files", None) is not None:
        cargs.extend([
            "--mapmov",
            *params.get("mapmov_files", None)
        ])
    if params.get("mapmovhdr_files", None) is not None:
        cargs.extend([
            "--mapmovhdr",
            *params.get("mapmovhdr_files", None)
        ])
    if params.get("weights_files", None) is not None:
        cargs.extend([
            "--weights",
            *params.get("weights_files", None)
        ])
    if params.get("oneminusw_flag", False):
        cargs.append("--oneminusw")
    if params.get("average_type", None) is not None:
        cargs.extend([
            "--average",
            str(params.get("average_type", None))
        ])
    if params.get("inittp", None) is not None:
        cargs.extend([
            "--inittp",
            str(params.get("inittp", None))
        ])
    if params.get("fixtp_flag", False):
        cargs.append("--fixtp")
    if params.get("iscale_flag", False):
        cargs.append("--iscale")
    if params.get("iscaleonly_flag", False):
        cargs.append("--iscaleonly")
    if params.get("iscalein_files", None) is not None:
        cargs.extend([
            "--iscalein",
            *params.get("iscalein_files", None)
        ])
    if params.get("iscaleout_files", None) is not None:
        cargs.extend([
            "--iscaleout",
            *params.get("iscaleout_files", None)
        ])
    if params.get("transonly_flag", False):
        cargs.append("--transonly")
    if params.get("affine_flag", False):
        cargs.append("--affine")
    if params.get("ixforms_files", None) is not None:
        cargs.extend([
            "--ixforms",
            *params.get("ixforms_files", None)
        ])
    if params.get("masks_files", None) is not None:
        cargs.extend([
            "--masks",
            *params.get("masks_files", None)
        ])
    if params.get("vox2vox_flag", False):
        cargs.append("--vox2vox")
    if params.get("leastsquares_flag", False):
        cargs.append("--leastsquares")
    if params.get("noit_flag", False):
        cargs.append("--noit")
    if params.get("maxit", None) is not None:
        cargs.extend([
            "--maxit",
            str(params.get("maxit", None))
        ])
    if params.get("highit", None) is not None:
        cargs.extend([
            "--highit",
            str(params.get("highit", None))
        ])
    if params.get("epsit", None) is not None:
        cargs.extend([
            "--epsit",
            str(params.get("epsit", None))
        ])
    if params.get("pairmaxit", None) is not None:
        cargs.extend([
            "--pairmaxit",
            str(params.get("pairmaxit", None))
        ])
    if params.get("pairepsit", None) is not None:
        cargs.extend([
            "--pairepsit",
            str(params.get("pairepsit", None))
        ])
    if params.get("subsample", None) is not None:
        cargs.extend([
            "--subsample",
            str(params.get("subsample", None))
        ])
    if params.get("nomulti_flag", False):
        cargs.append("--nomulti")
    if params.get("floattype_flag", False):
        cargs.append("--floattype")
    if params.get("finalnearest_flag", False):
        cargs.append("--finalnearest")
    if params.get("doubleprec_flag", False):
        cargs.append("--doubleprec")
    if params.get("cras_flag", False):
        cargs.append("--cras")
    if params.get("res_thresh", None) is not None:
        cargs.extend([
            "--res-thresh",
            str(params.get("res_thresh", None))
        ])
    if params.get("frobnorm_thresh", None) is not None:
        cargs.extend([
            "--frobnorm-thresh",
            str(params.get("frobnorm_thresh", None))
        ])
    if params.get("debug_flag", False):
        cargs.append("--debug")
    return cargs


def mri_robust_template_outputs(
    params: MriRobustTemplateParameters,
    execution: Execution,
) -> MriRobustTemplateOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriRobustTemplateOutputs(
        root=execution.output_file("."),
        output_template=execution.output_file(params.get("template_file", None)),
        output_lta_transform=execution.output_file("[TMP_NAME].lta"),
        output_mapped_image=execution.output_file("[TMP_NAME]_to_template.mgz"),
        output_weights_map=execution.output_file("[TMP_NAME]_weights.mgz"),
    )
    return ret


def mri_robust_template_execute(
    params: MriRobustTemplateParameters,
    runner: Runner | None = None,
) -> MriRobustTemplateOutputs:
    """
    mri_robust_template
    
    Constructs an unbiased robust template for longitudinal volumes using an
    iterative method.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRobustTemplateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_ROBUST_TEMPLATE_METADATA)
    params = execution.params(params)
    cargs = mri_robust_template_cargs(params, execution)
    ret = mri_robust_template_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_robust_template(
    mov_files: list[InputPathType],
    template_file: str,
    sat_value: float | None = None,
    satit_flag: bool = False,
    lta_files: list[str] | None = None,
    mapmov_files: list[str] | None = None,
    mapmovhdr_files: list[str] | None = None,
    weights_files: list[str] | None = None,
    oneminusw_flag: bool = False,
    average_type: int | None = None,
    inittp: int | None = None,
    fixtp_flag: bool = False,
    iscale_flag: bool = False,
    iscaleonly_flag: bool = False,
    iscalein_files: list[str] | None = None,
    iscaleout_files: list[str] | None = None,
    transonly_flag: bool = False,
    affine_flag: bool = False,
    ixforms_files: list[str] | None = None,
    masks_files: list[str] | None = None,
    vox2vox_flag: bool = False,
    leastsquares_flag: bool = False,
    noit_flag: bool = False,
    maxit: int | None = None,
    highit: int | None = None,
    epsit: float | None = None,
    pairmaxit: int | None = None,
    pairepsit: float | None = None,
    subsample: int | None = None,
    nomulti_flag: bool = False,
    floattype_flag: bool = False,
    finalnearest_flag: bool = False,
    doubleprec_flag: bool = False,
    cras_flag: bool = False,
    res_thresh: float | None = None,
    frobnorm_thresh: float | None = None,
    debug_flag: bool = False,
    runner: Runner | None = None,
) -> MriRobustTemplateOutputs:
    """
    mri_robust_template
    
    Constructs an unbiased robust template for longitudinal volumes using an
    iterative method.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        mov_files: Input movable volumes to be aligned to common mean/median\
            template.
        template_file: Output template volume (final mean/median image).
        sat_value: Set outlier sensitivity manually. Higher values mean less\
            sensitivity.
        satit_flag: Auto-detect good sensitivity (recommended for head or full\
            brain scans).
        lta_files: Output transforms to template (for each input).
        mapmov_files: Output images: map and resample each input to template.
        mapmovhdr_files: Output images: header-adjusted movables (no\
            resampling).
        weights_files: Output weights (outliers) in target space.
        oneminusw_flag: Weights (outlier) map will be inverted (0=outlier), as\
            in earlier versions.
        average_type: Construct template from: 0 Mean, 1 Median (default).
        inittp: Use TP# for spatial init (default random), 0: no init.
        fixtp_flag: Map everything to init TP# (init TP is not resampled).
        iscale_flag: Allow also intensity scaling (default off).
        iscaleonly_flag: Only perform iscale (no transformation, default off).
        iscalein_files: Use initial intensity scales.
        iscaleout_files: Output final intensity scales (will activate\
            --iscale).
        transonly_flag: Find 3 parameter translation only.
        affine_flag: Find 12 parameter affine transform.
        ixforms_files: Use initial transforms (lta) on source ('id'=identity).
        masks_files: Input masks applied to movables.
        vox2vox_flag: Output VOX2VOX lta file (default is RAS2RAS).
        leastsquares_flag: Use least squares instead of robust M-estimator (for\
            testing only).
        noit_flag: Do not iterate, just create first template.
        maxit: Iterate max # times (if #tp>2 default 6, else 5 for 2tp reg.).
        highit: Iterate max # times on highest resolution (default 5).
        epsit: Stop iterations when all transform updates fall below the\
            specified value.
        pairmaxit: Iterate max # times (default 5) for individual pairwise\
            registrations.
        pairepsit: Stop individual pairwise registration iterations when\
            transform updates fall below the specified value.
        subsample: Subsample if dimension > specified value on all axes\
            (default no subsampling).
        nomulti_flag: Do not use multi-resolution (only highest resolution).
        floattype_flag: Convert images to float internally (default: keep input\
            type).
        finalnearest_flag: Use nearest neighbor in final interpolation when\
            creating average.
        doubleprec_flag: Use double precision instead of float internally\
            (large memory usage).
        cras_flag: Center template at average CRAS, instead of average\
            barycenter.
        res_thresh: Volume resolution threshold (default is 0.01 mm).
        frobnorm_thresh: Matrix frobenius norm threshold (default is 0.0001).
        debug_flag: Show debug output (default no debug output).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriRobustTemplateOutputs`).
    """
    params = mri_robust_template_params(
        mov_files=mov_files,
        template_file=template_file,
        sat_value=sat_value,
        satit_flag=satit_flag,
        lta_files=lta_files,
        mapmov_files=mapmov_files,
        mapmovhdr_files=mapmovhdr_files,
        weights_files=weights_files,
        oneminusw_flag=oneminusw_flag,
        average_type=average_type,
        inittp=inittp,
        fixtp_flag=fixtp_flag,
        iscale_flag=iscale_flag,
        iscaleonly_flag=iscaleonly_flag,
        iscalein_files=iscalein_files,
        iscaleout_files=iscaleout_files,
        transonly_flag=transonly_flag,
        affine_flag=affine_flag,
        ixforms_files=ixforms_files,
        masks_files=masks_files,
        vox2vox_flag=vox2vox_flag,
        leastsquares_flag=leastsquares_flag,
        noit_flag=noit_flag,
        maxit=maxit,
        highit=highit,
        epsit=epsit,
        pairmaxit=pairmaxit,
        pairepsit=pairepsit,
        subsample=subsample,
        nomulti_flag=nomulti_flag,
        floattype_flag=floattype_flag,
        finalnearest_flag=finalnearest_flag,
        doubleprec_flag=doubleprec_flag,
        cras_flag=cras_flag,
        res_thresh=res_thresh,
        frobnorm_thresh=frobnorm_thresh,
        debug_flag=debug_flag,
    )
    return mri_robust_template_execute(params, runner)


__all__ = [
    "MRI_ROBUST_TEMPLATE_METADATA",
    "MriRobustTemplateOutputs",
    "mri_robust_template",
    "mri_robust_template_execute",
    "mri_robust_template_params",
]
