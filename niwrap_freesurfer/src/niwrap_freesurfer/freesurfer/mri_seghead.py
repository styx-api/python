# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SEGHEAD_METADATA = Metadata(
    id="0ff9a0eb05c9df9cd69d7082853e833644dd70a6.boutiques",
    name="mri_seghead",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSegheadParameters = typing.TypedDict('MriSegheadParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_seghead"]],
    "input_volume": str,
    "output_volume": str,
    "fill_value": typing.NotRequired[float | None],
    "fhi_value": typing.NotRequired[float | None],
    "thresh1_value": typing.NotRequired[float | None],
    "thresh2_value": typing.NotRequired[float | None],
    "threshold": typing.NotRequired[float | None],
    "nhitsmin_value": typing.NotRequired[float | None],
    "hvoldat_file": typing.NotRequired[InputPathType | None],
    "signal_behind_head": bool,
    "rescale": bool,
    "fill_holes_islands": bool,
    "seed_point": typing.NotRequired[list[float] | None],
    "or_mask_file": typing.NotRequired[InputPathType | None],
    "gdiag_option": typing.NotRequired[str | None],
})
MriSegheadParametersTagged = typing.TypedDict('MriSegheadParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_seghead"],
    "input_volume": str,
    "output_volume": str,
    "fill_value": typing.NotRequired[float | None],
    "fhi_value": typing.NotRequired[float | None],
    "thresh1_value": typing.NotRequired[float | None],
    "thresh2_value": typing.NotRequired[float | None],
    "threshold": typing.NotRequired[float | None],
    "nhitsmin_value": typing.NotRequired[float | None],
    "hvoldat_file": typing.NotRequired[InputPathType | None],
    "signal_behind_head": bool,
    "rescale": bool,
    "fill_holes_islands": bool,
    "seed_point": typing.NotRequired[list[float] | None],
    "or_mask_file": typing.NotRequired[InputPathType | None],
    "gdiag_option": typing.NotRequired[str | None],
})


class MriSegheadOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSegheadParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_seghead_params(
    input_volume: str,
    output_volume: str,
    fill_value: float | None = None,
    fhi_value: float | None = None,
    thresh1_value: float | None = None,
    thresh2_value: float | None = None,
    threshold: float | None = None,
    nhitsmin_value: float | None = None,
    hvoldat_file: InputPathType | None = None,
    signal_behind_head: bool = False,
    rescale: bool = False,
    fill_holes_islands: bool = False,
    seed_point: list[float] | None = None,
    or_mask_file: InputPathType | None = None,
    gdiag_option: str | None = None,
) -> MriSegheadParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume identifier, e.g., T1.
        output_volume: Output volume identifier.
        fill_value: Fill value for binarizing the head (default 255).
        fhi_value: FHI value used in type change operation (default 0.999).
        thresh1_value: Threshold value for detecting the skin (e.g., 20).
        thresh2_value: Threshold value for the final binarization (e.g., 20).
        threshold: Single threshold value applied to both thresh1 and thresh2.
        nhitsmin_value: Minimum number of consecutive hits needed to identify\
            skin (default 2).
        hvoldat_file: File to write the volume of the head in mm3 to an ASCII\
            file.
        signal_behind_head: Consider signals behind the head in the\
            binarization process.
        rescale: Rescale the input when converting to uchar.
        fill_holes_islands: Fill holes and remove islands in the binary volume.
        seed_point: Seed point specified by column, row, slice for filling\
            operation.
        or_mask_file: Mask file to include voxels in the binarization process.
        gdiag_option: Optional diagnostic option for internal use.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_seghead",
        "input_volume": input_volume,
        "output_volume": output_volume,
        "signal_behind_head": signal_behind_head,
        "rescale": rescale,
        "fill_holes_islands": fill_holes_islands,
    }
    if fill_value is not None:
        params["fill_value"] = fill_value
    if fhi_value is not None:
        params["fhi_value"] = fhi_value
    if thresh1_value is not None:
        params["thresh1_value"] = thresh1_value
    if thresh2_value is not None:
        params["thresh2_value"] = thresh2_value
    if threshold is not None:
        params["threshold"] = threshold
    if nhitsmin_value is not None:
        params["nhitsmin_value"] = nhitsmin_value
    if hvoldat_file is not None:
        params["hvoldat_file"] = hvoldat_file
    if seed_point is not None:
        params["seed_point"] = seed_point
    if or_mask_file is not None:
        params["or_mask_file"] = or_mask_file
    if gdiag_option is not None:
        params["gdiag_option"] = gdiag_option
    return params


def mri_seghead_cargs(
    params: MriSegheadParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_seghead")
    cargs.extend([
        "--invol",
        params.get("input_volume", None)
    ])
    cargs.extend([
        "--outvol",
        params.get("output_volume", None)
    ])
    if params.get("fill_value", None) is not None:
        cargs.extend([
            "--fill",
            str(params.get("fill_value", None))
        ])
    if params.get("fhi_value", None) is not None:
        cargs.extend([
            "--fhi",
            str(params.get("fhi_value", None))
        ])
    if params.get("thresh1_value", None) is not None:
        cargs.extend([
            "--thresh1",
            str(params.get("thresh1_value", None))
        ])
    if params.get("thresh2_value", None) is not None:
        cargs.extend([
            "--thresh2",
            str(params.get("thresh2_value", None))
        ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "--thresh",
            str(params.get("threshold", None))
        ])
    if params.get("nhitsmin_value", None) is not None:
        cargs.extend([
            "--nhitsmin",
            str(params.get("nhitsmin_value", None))
        ])
    if params.get("hvoldat_file", None) is not None:
        cargs.extend([
            "--hvoldat",
            execution.input_file(params.get("hvoldat_file", None))
        ])
    if params.get("signal_behind_head", False):
        cargs.append("--get-signal-behind-head")
    if params.get("rescale", False):
        cargs.append("--rescale")
    if params.get("fill_holes_islands", False):
        cargs.append("--fill-holes-islands")
    if params.get("seed_point", None) is not None:
        cargs.extend([
            "--seed",
            *map(str, params.get("seed_point", None))
        ])
    if params.get("or_mask_file", None) is not None:
        cargs.extend([
            "--or-mask",
            execution.input_file(params.get("or_mask_file", None))
        ])
    if params.get("gdiag_option", None) is not None:
        cargs.extend([
            "--gdiag",
            params.get("gdiag_option", None)
        ])
    return cargs


def mri_seghead_outputs(
    params: MriSegheadParameters,
    execution: Execution,
) -> MriSegheadOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSegheadOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_seghead_execute(
    params: MriSegheadParameters,
    runner: Runner | None = None,
) -> MriSegheadOutputs:
    """
    mri_seghead
    
    Binarizes an input volume to identify the head's voxels.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSegheadOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SEGHEAD_METADATA)
    params = execution.params(params)
    cargs = mri_seghead_cargs(params, execution)
    ret = mri_seghead_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_seghead(
    input_volume: str,
    output_volume: str,
    fill_value: float | None = None,
    fhi_value: float | None = None,
    thresh1_value: float | None = None,
    thresh2_value: float | None = None,
    threshold: float | None = None,
    nhitsmin_value: float | None = None,
    hvoldat_file: InputPathType | None = None,
    signal_behind_head: bool = False,
    rescale: bool = False,
    fill_holes_islands: bool = False,
    seed_point: list[float] | None = None,
    or_mask_file: InputPathType | None = None,
    gdiag_option: str | None = None,
    runner: Runner | None = None,
) -> MriSegheadOutputs:
    """
    mri_seghead
    
    Binarizes an input volume to identify the head's voxels.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume identifier, e.g., T1.
        output_volume: Output volume identifier.
        fill_value: Fill value for binarizing the head (default 255).
        fhi_value: FHI value used in type change operation (default 0.999).
        thresh1_value: Threshold value for detecting the skin (e.g., 20).
        thresh2_value: Threshold value for the final binarization (e.g., 20).
        threshold: Single threshold value applied to both thresh1 and thresh2.
        nhitsmin_value: Minimum number of consecutive hits needed to identify\
            skin (default 2).
        hvoldat_file: File to write the volume of the head in mm3 to an ASCII\
            file.
        signal_behind_head: Consider signals behind the head in the\
            binarization process.
        rescale: Rescale the input when converting to uchar.
        fill_holes_islands: Fill holes and remove islands in the binary volume.
        seed_point: Seed point specified by column, row, slice for filling\
            operation.
        or_mask_file: Mask file to include voxels in the binarization process.
        gdiag_option: Optional diagnostic option for internal use.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSegheadOutputs`).
    """
    params = mri_seghead_params(
        input_volume=input_volume,
        output_volume=output_volume,
        fill_value=fill_value,
        fhi_value=fhi_value,
        thresh1_value=thresh1_value,
        thresh2_value=thresh2_value,
        threshold=threshold,
        nhitsmin_value=nhitsmin_value,
        hvoldat_file=hvoldat_file,
        signal_behind_head=signal_behind_head,
        rescale=rescale,
        fill_holes_islands=fill_holes_islands,
        seed_point=seed_point,
        or_mask_file=or_mask_file,
        gdiag_option=gdiag_option,
    )
    return mri_seghead_execute(params, runner)


__all__ = [
    "MRI_SEGHEAD_METADATA",
    "MriSegheadOutputs",
    "mri_seghead",
    "mri_seghead_execute",
    "mri_seghead_params",
]
