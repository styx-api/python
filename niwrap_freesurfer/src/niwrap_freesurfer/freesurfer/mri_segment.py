# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SEGMENT_METADATA = Metadata(
    id="71d44240bef9b0488533218e873572a129852167.boutiques",
    name="mri_segment",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSegmentParameters = typing.TypedDict('MriSegmentParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_segment"]],
    "in_vol": InputPathType,
    "out_vol": str,
    "no1d_remove": typing.NotRequired[float | None],
    "slope": typing.NotRequired[float | None],
    "pslope": typing.NotRequired[float | None],
    "nslope": typing.NotRequired[float | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
    "auto": bool,
    "noauto": bool,
    "log": bool,
    "keep": bool,
    "gray_hi": typing.NotRequired[float | None],
    "wm_low": typing.NotRequired[float | None],
    "wm_low_factor": typing.NotRequired[float | None],
    "wm_hi": typing.NotRequired[float | None],
    "nseg": typing.NotRequired[float | None],
    "thicken": bool,
    "fillbg": bool,
    "fillv": bool,
    "blur_sigma": typing.NotRequired[float | None],
    "iterations": typing.NotRequired[float | None],
    "thin_strand_limit": typing.NotRequired[float | None],
    "verbose": bool,
    "threshold": typing.NotRequired[float | None],
    "extract_options": typing.NotRequired[InputPathType | None],
    "wsize": typing.NotRequired[float | None],
    "wsizemm": typing.NotRequired[float | None],
    "polvw_size": typing.NotRequired[float | None],
    "polv_len": typing.NotRequired[float | None],
    "datfile": typing.NotRequired[InputPathType | None],
    "segmentation": typing.NotRequired[str | None],
    "diagno": typing.NotRequired[float | None],
    "diag_write": bool,
    "diag_verbose": bool,
})
MriSegmentParametersTagged = typing.TypedDict('MriSegmentParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_segment"],
    "in_vol": InputPathType,
    "out_vol": str,
    "no1d_remove": typing.NotRequired[float | None],
    "slope": typing.NotRequired[float | None],
    "pslope": typing.NotRequired[float | None],
    "nslope": typing.NotRequired[float | None],
    "debug_voxel": typing.NotRequired[list[float] | None],
    "auto": bool,
    "noauto": bool,
    "log": bool,
    "keep": bool,
    "gray_hi": typing.NotRequired[float | None],
    "wm_low": typing.NotRequired[float | None],
    "wm_low_factor": typing.NotRequired[float | None],
    "wm_hi": typing.NotRequired[float | None],
    "nseg": typing.NotRequired[float | None],
    "thicken": bool,
    "fillbg": bool,
    "fillv": bool,
    "blur_sigma": typing.NotRequired[float | None],
    "iterations": typing.NotRequired[float | None],
    "thin_strand_limit": typing.NotRequired[float | None],
    "verbose": bool,
    "threshold": typing.NotRequired[float | None],
    "extract_options": typing.NotRequired[InputPathType | None],
    "wsize": typing.NotRequired[float | None],
    "wsizemm": typing.NotRequired[float | None],
    "polvw_size": typing.NotRequired[float | None],
    "polv_len": typing.NotRequired[float | None],
    "datfile": typing.NotRequired[InputPathType | None],
    "segmentation": typing.NotRequired[str | None],
    "diagno": typing.NotRequired[float | None],
    "diag_write": bool,
    "diag_verbose": bool,
})


class MriSegmentOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSegmentParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume: OutputPathType
    """Segmented white matter output volume"""
    log_file: OutputPathType
    """Log file from segmentation process"""


def mri_segment_params(
    in_vol: InputPathType,
    out_vol: str,
    no1d_remove: float | None = None,
    slope: float | None = None,
    pslope: float | None = None,
    nslope: float | None = None,
    debug_voxel: list[float] | None = None,
    auto: bool = False,
    noauto: bool = False,
    log: bool = False,
    keep: bool = False,
    gray_hi: float | None = None,
    wm_low: float | None = None,
    wm_low_factor: float | None = None,
    wm_hi: float | None = None,
    nseg: float | None = None,
    thicken: bool = False,
    fillbg: bool = False,
    fillv: bool = False,
    blur_sigma: float | None = None,
    iterations: float | None = None,
    thin_strand_limit: float | None = None,
    verbose: bool = False,
    threshold: float | None = None,
    extract_options: InputPathType | None = None,
    wsize: float | None = None,
    wsizemm: float | None = None,
    polvw_size: float | None = None,
    polv_len: float | None = None,
    datfile: InputPathType | None = None,
    segmentation: str | None = None,
    diagno: float | None = None,
    diag_write: bool = False,
    diag_verbose: bool = False,
) -> MriSegmentParametersTagged:
    """
    Build parameters.
    
    Args:
        in_vol: Input volume to be segmented.
        out_vol: Output volume after segmentation.
        no1d_remove: Don't run code that removes 1D strands from segmentation.
        slope: Set the curvature slope (both n and p).
        pslope: Set the curvature pslope (default=1.0).
        nslope: Set the curvature nslope (default=1.0).
        debug_voxel: Set voxel for debugging.
        auto: Automatically detect class statistics (default).
        noauto: Don't automatically detect class statistics.
        log: Log to ./segment.dat.
        keep: Keep wm edits, maintains all values of 1 and 255.
        gray_hi: Set the gray matter high limit (default=100.000).
        wm_low: Set the white matter low limit (default=80.000).
        wm_low_factor: wm_low = f*gray_mean + (1-f)*white_mean;.
        wm_hi: Set the white matter high limit (default=125.000).
        nseg: Thicken the n largest thin strands (default=20).
        thicken: Toggle thickening step (default=ON).
        fillbg: Toggle filling of the basal ganglia (default=OFF).
        fillv: Toggle filling of the ventricles (default=OFF).
        blur_sigma: Set blur sigma (default=0.25).
        iterations: Set # iterations of border classification (default=1).
        thin_strand_limit: Set limit to thin strands in mm (default=4).
        verbose: Verbose.
        threshold: Set % threshold (default=0.80).
        extract_options: Extract options from filename.
        wsize: Set wsize (default=11 voxels).
        wsizemm: Set wsize based on mm instead of voxels.
        polvw_size: Set wsize for plane of least variance (default=5).
        polv_len: Set length for plane of least variance (default=3).
        datfile: Set datfile (default is segment.dat).
        segmentation: Use segmentation to set thresholds.
        diagno: Set diagnostic number.
        diag_write: Set diagnostic write.
        diag_verbose: Set diagnostic verbose.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_segment",
        "in_vol": in_vol,
        "out_vol": out_vol,
        "auto": auto,
        "noauto": noauto,
        "log": log,
        "keep": keep,
        "thicken": thicken,
        "fillbg": fillbg,
        "fillv": fillv,
        "verbose": verbose,
        "diag_write": diag_write,
        "diag_verbose": diag_verbose,
    }
    if no1d_remove is not None:
        params["no1d_remove"] = no1d_remove
    if slope is not None:
        params["slope"] = slope
    if pslope is not None:
        params["pslope"] = pslope
    if nslope is not None:
        params["nslope"] = nslope
    if debug_voxel is not None:
        params["debug_voxel"] = debug_voxel
    if gray_hi is not None:
        params["gray_hi"] = gray_hi
    if wm_low is not None:
        params["wm_low"] = wm_low
    if wm_low_factor is not None:
        params["wm_low_factor"] = wm_low_factor
    if wm_hi is not None:
        params["wm_hi"] = wm_hi
    if nseg is not None:
        params["nseg"] = nseg
    if blur_sigma is not None:
        params["blur_sigma"] = blur_sigma
    if iterations is not None:
        params["iterations"] = iterations
    if thin_strand_limit is not None:
        params["thin_strand_limit"] = thin_strand_limit
    if threshold is not None:
        params["threshold"] = threshold
    if extract_options is not None:
        params["extract_options"] = extract_options
    if wsize is not None:
        params["wsize"] = wsize
    if wsizemm is not None:
        params["wsizemm"] = wsizemm
    if polvw_size is not None:
        params["polvw_size"] = polvw_size
    if polv_len is not None:
        params["polv_len"] = polv_len
    if datfile is not None:
        params["datfile"] = datfile
    if segmentation is not None:
        params["segmentation"] = segmentation
    if diagno is not None:
        params["diagno"] = diagno
    return params


def mri_segment_cargs(
    params: MriSegmentParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_segment")
    cargs.append(execution.input_file(params.get("in_vol", None)))
    cargs.append(params.get("out_vol", None))
    if params.get("no1d_remove", None) is not None:
        cargs.extend([
            "-no1d_remove",
            str(params.get("no1d_remove", None))
        ])
    if params.get("slope", None) is not None:
        cargs.extend([
            "-slope",
            str(params.get("slope", None))
        ])
    if params.get("pslope", None) is not None:
        cargs.extend([
            "-pslope",
            str(params.get("pslope", None))
        ])
    if params.get("nslope", None) is not None:
        cargs.extend([
            "-nslope",
            str(params.get("nslope", None))
        ])
    if params.get("debug_voxel", None) is not None:
        cargs.extend([
            "-debug_voxel",
            *map(str, params.get("debug_voxel", None))
        ])
    if params.get("auto", False):
        cargs.append("-auto")
    if params.get("noauto", False):
        cargs.append("-noauto")
    if params.get("log", False):
        cargs.append("-log")
    if params.get("keep", False):
        cargs.append("-keep")
    if params.get("gray_hi", None) is not None:
        cargs.extend([
            "-ghi",
            str(params.get("gray_hi", None))
        ])
    if params.get("wm_low", None) is not None:
        cargs.extend([
            "-wlo",
            str(params.get("wm_low", None))
        ])
    if params.get("wm_low_factor", None) is not None:
        cargs.extend([
            "-wm_low_factor",
            str(params.get("wm_low_factor", None))
        ])
    if params.get("wm_hi", None) is not None:
        cargs.extend([
            "-whi",
            str(params.get("wm_hi", None))
        ])
    if params.get("nseg", None) is not None:
        cargs.extend([
            "-nseg",
            str(params.get("nseg", None))
        ])
    if params.get("thicken", False):
        cargs.append("-thicken")
    if params.get("fillbg", False):
        cargs.append("-fillbg")
    if params.get("fillv", False):
        cargs.append("-fillv")
    if params.get("blur_sigma", None) is not None:
        cargs.extend([
            "-b",
            str(params.get("blur_sigma", None))
        ])
    if params.get("iterations", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("iterations", None))
        ])
    if params.get("thin_strand_limit", None) is not None:
        cargs.extend([
            "-t",
            str(params.get("thin_strand_limit", None))
        ])
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("threshold", None) is not None:
        cargs.extend([
            "-p",
            str(params.get("threshold", None))
        ])
    if params.get("extract_options", None) is not None:
        cargs.extend([
            "-x",
            execution.input_file(params.get("extract_options", None))
        ])
    if params.get("wsize", None) is not None:
        cargs.extend([
            "-w",
            str(params.get("wsize", None))
        ])
    if params.get("wsizemm", None) is not None:
        cargs.extend([
            "-wsizemm",
            str(params.get("wsizemm", None))
        ])
    if params.get("polvw_size", None) is not None:
        cargs.extend([
            "-polvwsize",
            str(params.get("polvw_size", None))
        ])
    if params.get("polv_len", None) is not None:
        cargs.extend([
            "-polvlen",
            str(params.get("polv_len", None))
        ])
    if params.get("datfile", None) is not None:
        cargs.extend([
            "-dat",
            execution.input_file(params.get("datfile", None))
        ])
    if params.get("segmentation", None) is not None:
        cargs.extend([
            "-seg",
            params.get("segmentation", None)
        ])
    if params.get("diagno", None) is not None:
        cargs.extend([
            "-diagno",
            str(params.get("diagno", None))
        ])
    if params.get("diag_write", False):
        cargs.append("-diag-write")
    if params.get("diag_verbose", False):
        cargs.append("-diag-verbose")
    return cargs


def mri_segment_outputs(
    params: MriSegmentParameters,
    execution: Execution,
) -> MriSegmentOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSegmentOutputs(
        root=execution.output_file("."),
        output_volume=execution.output_file(params.get("out_vol", None)),
        log_file=execution.output_file("./segment.dat"),
    )
    return ret


def mri_segment_execute(
    params: MriSegmentParameters,
    runner: Runner | None = None,
) -> MriSegmentOutputs:
    """
    mri_segment
    
    Segments white matter from the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSegmentOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SEGMENT_METADATA)
    params = execution.params(params)
    cargs = mri_segment_cargs(params, execution)
    ret = mri_segment_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_segment(
    in_vol: InputPathType,
    out_vol: str,
    no1d_remove: float | None = None,
    slope: float | None = None,
    pslope: float | None = None,
    nslope: float | None = None,
    debug_voxel: list[float] | None = None,
    auto: bool = False,
    noauto: bool = False,
    log: bool = False,
    keep: bool = False,
    gray_hi: float | None = None,
    wm_low: float | None = None,
    wm_low_factor: float | None = None,
    wm_hi: float | None = None,
    nseg: float | None = None,
    thicken: bool = False,
    fillbg: bool = False,
    fillv: bool = False,
    blur_sigma: float | None = None,
    iterations: float | None = None,
    thin_strand_limit: float | None = None,
    verbose: bool = False,
    threshold: float | None = None,
    extract_options: InputPathType | None = None,
    wsize: float | None = None,
    wsizemm: float | None = None,
    polvw_size: float | None = None,
    polv_len: float | None = None,
    datfile: InputPathType | None = None,
    segmentation: str | None = None,
    diagno: float | None = None,
    diag_write: bool = False,
    diag_verbose: bool = False,
    runner: Runner | None = None,
) -> MriSegmentOutputs:
    """
    mri_segment
    
    Segments white matter from the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        in_vol: Input volume to be segmented.
        out_vol: Output volume after segmentation.
        no1d_remove: Don't run code that removes 1D strands from segmentation.
        slope: Set the curvature slope (both n and p).
        pslope: Set the curvature pslope (default=1.0).
        nslope: Set the curvature nslope (default=1.0).
        debug_voxel: Set voxel for debugging.
        auto: Automatically detect class statistics (default).
        noauto: Don't automatically detect class statistics.
        log: Log to ./segment.dat.
        keep: Keep wm edits, maintains all values of 1 and 255.
        gray_hi: Set the gray matter high limit (default=100.000).
        wm_low: Set the white matter low limit (default=80.000).
        wm_low_factor: wm_low = f*gray_mean + (1-f)*white_mean;.
        wm_hi: Set the white matter high limit (default=125.000).
        nseg: Thicken the n largest thin strands (default=20).
        thicken: Toggle thickening step (default=ON).
        fillbg: Toggle filling of the basal ganglia (default=OFF).
        fillv: Toggle filling of the ventricles (default=OFF).
        blur_sigma: Set blur sigma (default=0.25).
        iterations: Set # iterations of border classification (default=1).
        thin_strand_limit: Set limit to thin strands in mm (default=4).
        verbose: Verbose.
        threshold: Set % threshold (default=0.80).
        extract_options: Extract options from filename.
        wsize: Set wsize (default=11 voxels).
        wsizemm: Set wsize based on mm instead of voxels.
        polvw_size: Set wsize for plane of least variance (default=5).
        polv_len: Set length for plane of least variance (default=3).
        datfile: Set datfile (default is segment.dat).
        segmentation: Use segmentation to set thresholds.
        diagno: Set diagnostic number.
        diag_write: Set diagnostic write.
        diag_verbose: Set diagnostic verbose.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSegmentOutputs`).
    """
    params = mri_segment_params(
        in_vol=in_vol,
        out_vol=out_vol,
        no1d_remove=no1d_remove,
        slope=slope,
        pslope=pslope,
        nslope=nslope,
        debug_voxel=debug_voxel,
        auto=auto,
        noauto=noauto,
        log=log,
        keep=keep,
        gray_hi=gray_hi,
        wm_low=wm_low,
        wm_low_factor=wm_low_factor,
        wm_hi=wm_hi,
        nseg=nseg,
        thicken=thicken,
        fillbg=fillbg,
        fillv=fillv,
        blur_sigma=blur_sigma,
        iterations=iterations,
        thin_strand_limit=thin_strand_limit,
        verbose=verbose,
        threshold=threshold,
        extract_options=extract_options,
        wsize=wsize,
        wsizemm=wsizemm,
        polvw_size=polvw_size,
        polv_len=polv_len,
        datfile=datfile,
        segmentation=segmentation,
        diagno=diagno,
        diag_write=diag_write,
        diag_verbose=diag_verbose,
    )
    return mri_segment_execute(params, runner)


__all__ = [
    "MRI_SEGMENT_METADATA",
    "MriSegmentOutputs",
    "mri_segment",
    "mri_segment_execute",
    "mri_segment_params",
]
