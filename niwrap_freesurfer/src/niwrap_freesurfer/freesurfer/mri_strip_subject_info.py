# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_STRIP_SUBJECT_INFO_METADATA = Metadata(
    id="ceabb0228078b1e15b83a0623970b5120e7004d5.boutiques",
    name="mri_strip_subject_info",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriStripSubjectInfoParameters = typing.TypedDict('MriStripSubjectInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_strip_subject_info"]],
    "input_files": list[InputPathType],
    "output_directory": str,
})
MriStripSubjectInfoParametersTagged = typing.TypedDict('MriStripSubjectInfoParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_strip_subject_info"],
    "input_files": list[InputPathType],
    "output_directory": str,
})


class MriStripSubjectInfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriStripSubjectInfoParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_strip_subject_info_params(
    input_files: list[InputPathType],
    output_directory: str,
) -> MriStripSubjectInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        input_files: Input file(s) containing MRI data.
        output_directory: Directory where stripped files will be saved.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_strip_subject_info",
        "input_files": input_files,
        "output_directory": output_directory,
    }
    return params


def mri_strip_subject_info_cargs(
    params: MriStripSubjectInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_strip_subject_info")
    cargs.extend([execution.input_file(f) for f in params.get("input_files", None)])
    cargs.append(params.get("output_directory", None))
    return cargs


def mri_strip_subject_info_outputs(
    params: MriStripSubjectInfoParameters,
    execution: Execution,
) -> MriStripSubjectInfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriStripSubjectInfoOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_strip_subject_info_execute(
    params: MriStripSubjectInfoParameters,
    runner: Runner | None = None,
) -> MriStripSubjectInfoOutputs:
    """
    mri_strip_subject_info
    
    A tool to strip subject information from MRI data files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriStripSubjectInfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_STRIP_SUBJECT_INFO_METADATA)
    params = execution.params(params)
    cargs = mri_strip_subject_info_cargs(params, execution)
    ret = mri_strip_subject_info_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_strip_subject_info(
    input_files: list[InputPathType],
    output_directory: str,
    runner: Runner | None = None,
) -> MriStripSubjectInfoOutputs:
    """
    mri_strip_subject_info
    
    A tool to strip subject information from MRI data files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_files: Input file(s) containing MRI data.
        output_directory: Directory where stripped files will be saved.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriStripSubjectInfoOutputs`).
    """
    params = mri_strip_subject_info_params(
        input_files=input_files,
        output_directory=output_directory,
    )
    return mri_strip_subject_info_execute(params, runner)


__all__ = [
    "MRI_STRIP_SUBJECT_INFO_METADATA",
    "MriStripSubjectInfoOutputs",
    "mri_strip_subject_info",
    "mri_strip_subject_info_execute",
    "mri_strip_subject_info_params",
]
