# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SURF2VOLSEG_METADATA = Metadata(
    id="24046a7f7d961edbc49a95684ed8a04afa377fd5.boutiques",
    name="mri_surf2volseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSurf2volsegParameters = typing.TypedDict('MriSurf2volsegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_surf2volseg"]],
    "input_segmentation": typing.NotRequired[InputPathType | None],
    "output_segmentation": typing.NotRequired[str | None],
    "source_segmentation": typing.NotRequired[InputPathType | None],
    "lh_white_surf": typing.NotRequired[InputPathType | None],
    "lh_pial_surf": typing.NotRequired[InputPathType | None],
    "rh_white_surf": typing.NotRequired[InputPathType | None],
    "rh_pial_surf": typing.NotRequired[InputPathType | None],
    "lh_cortex_mask": typing.NotRequired[InputPathType | None],
    "rh_cortex_mask": typing.NotRequired[InputPathType | None],
    "fix_presurf_ribbon": typing.NotRequired[InputPathType | None],
    "label_cortex": bool,
    "label_wm": bool,
    "label_wm_unknown": typing.NotRequired[list[float] | None],
    "lh_annotation": typing.NotRequired[InputPathType | None],
    "rh_annotation": typing.NotRequired[InputPathType | None],
    "wmparc_dmax": typing.NotRequired[float | None],
    "rip_unknown": bool,
    "hypo_as_wm": bool,
    "hashres": typing.NotRequired[float | None],
    "nhops": typing.NotRequired[float | None],
    "help_flag": bool,
    "version_flag": bool,
    "crs_test": typing.NotRequired[list[float] | None],
    "ctab_file": typing.NotRequired[InputPathType | None],
    "threads_number": typing.NotRequired[float | None],
})
MriSurf2volsegParametersTagged = typing.TypedDict('MriSurf2volsegParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_surf2volseg"],
    "input_segmentation": typing.NotRequired[InputPathType | None],
    "output_segmentation": typing.NotRequired[str | None],
    "source_segmentation": typing.NotRequired[InputPathType | None],
    "lh_white_surf": typing.NotRequired[InputPathType | None],
    "lh_pial_surf": typing.NotRequired[InputPathType | None],
    "rh_white_surf": typing.NotRequired[InputPathType | None],
    "rh_pial_surf": typing.NotRequired[InputPathType | None],
    "lh_cortex_mask": typing.NotRequired[InputPathType | None],
    "rh_cortex_mask": typing.NotRequired[InputPathType | None],
    "fix_presurf_ribbon": typing.NotRequired[InputPathType | None],
    "label_cortex": bool,
    "label_wm": bool,
    "label_wm_unknown": typing.NotRequired[list[float] | None],
    "lh_annotation": typing.NotRequired[InputPathType | None],
    "rh_annotation": typing.NotRequired[InputPathType | None],
    "wmparc_dmax": typing.NotRequired[float | None],
    "rip_unknown": bool,
    "hypo_as_wm": bool,
    "hashres": typing.NotRequired[float | None],
    "nhops": typing.NotRequired[float | None],
    "help_flag": bool,
    "version_flag": bool,
    "crs_test": typing.NotRequired[list[float] | None],
    "ctab_file": typing.NotRequired[InputPathType | None],
    "threads_number": typing.NotRequired[float | None],
})


class MriSurf2volsegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSurf2volsegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_surf2volseg_params(
    input_segmentation: InputPathType | None = None,
    output_segmentation: str | None = None,
    source_segmentation: InputPathType | None = None,
    lh_white_surf: InputPathType | None = None,
    lh_pial_surf: InputPathType | None = None,
    rh_white_surf: InputPathType | None = None,
    rh_pial_surf: InputPathType | None = None,
    lh_cortex_mask: InputPathType | None = None,
    rh_cortex_mask: InputPathType | None = None,
    fix_presurf_ribbon: InputPathType | None = None,
    label_cortex: bool = False,
    label_wm: bool = False,
    label_wm_unknown: list[float] | None = None,
    lh_annotation: InputPathType | None = None,
    rh_annotation: InputPathType | None = None,
    wmparc_dmax: float | None = None,
    rip_unknown: bool = False,
    hypo_as_wm: bool = False,
    hashres: float | None = None,
    nhops: float | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
    crs_test: list[float] | None = None,
    ctab_file: InputPathType | None = None,
    threads_number: float | None = None,
) -> MriSurf2volsegParametersTagged:
    """
    Build parameters.
    
    Args:
        input_segmentation: Full path of input segmentation.
        output_segmentation: Output segmentation file.
        source_segmentation: Source subcortical volume segmentation file\
            (instead of using subcortical segs in input segmentation).
        lh_white_surf: White surface for left hemisphere.
        lh_pial_surf: Pial surface for left hemisphere.
        rh_white_surf: White surface for right hemisphere.
        rh_pial_surf: Pial surface for right hemisphere.
        lh_cortex_mask: Mask for left hemisphere cortex (usually\
            lh.cortex.label).
        rh_cortex_mask: Mask for right hemisphere cortex (usually\
            rh.cortex.label).
        fix_presurf_ribbon: Fix the cortical and WM labels in the input\
            segmentation using ribbon file.
        label_cortex: Relabel cortex in the input segmentation with surface\
            annotation.
        label_wm: Relabel cerebral WM in the input segmentation with surface\
            annotation.
        label_wm_unknown: Relabel unknown WM as lhval and rhval (default is\
            5001 and 5002).
        lh_annotation: Left hemisphere annotation for --label-cortex and\
            --label-wm.
        rh_annotation: Right hemisphere annotation for --label-cortex and\
            --label-wm.
        wmparc_dmax: Max distance (mm) from cortex to be labeled as gyral WM.
        rip_unknown: Do not label WM based on 'unknown' cortical label.
        hypo_as_wm: Label hypointensities as WM (when fixing with ribbon).
        hashres: Surface hash table resolution.
        nhops: Number of surface hops when searching for a nearby annotation.
        help_flag: Print out information on how to use this program.
        version_flag: Print out version and exit.
        crs_test: Test labeling of only the voxel given by column, row, slice\
            (debugging).
        ctab_file: Embed color table in the output.
        threads_number: Run in parallel with the specified number of threads.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_surf2volseg",
        "label_cortex": label_cortex,
        "label_wm": label_wm,
        "rip_unknown": rip_unknown,
        "hypo_as_wm": hypo_as_wm,
        "help_flag": help_flag,
        "version_flag": version_flag,
    }
    if input_segmentation is not None:
        params["input_segmentation"] = input_segmentation
    if output_segmentation is not None:
        params["output_segmentation"] = output_segmentation
    if source_segmentation is not None:
        params["source_segmentation"] = source_segmentation
    if lh_white_surf is not None:
        params["lh_white_surf"] = lh_white_surf
    if lh_pial_surf is not None:
        params["lh_pial_surf"] = lh_pial_surf
    if rh_white_surf is not None:
        params["rh_white_surf"] = rh_white_surf
    if rh_pial_surf is not None:
        params["rh_pial_surf"] = rh_pial_surf
    if lh_cortex_mask is not None:
        params["lh_cortex_mask"] = lh_cortex_mask
    if rh_cortex_mask is not None:
        params["rh_cortex_mask"] = rh_cortex_mask
    if fix_presurf_ribbon is not None:
        params["fix_presurf_ribbon"] = fix_presurf_ribbon
    if label_wm_unknown is not None:
        params["label_wm_unknown"] = label_wm_unknown
    if lh_annotation is not None:
        params["lh_annotation"] = lh_annotation
    if rh_annotation is not None:
        params["rh_annotation"] = rh_annotation
    if wmparc_dmax is not None:
        params["wmparc_dmax"] = wmparc_dmax
    if hashres is not None:
        params["hashres"] = hashres
    if nhops is not None:
        params["nhops"] = nhops
    if crs_test is not None:
        params["crs_test"] = crs_test
    if ctab_file is not None:
        params["ctab_file"] = ctab_file
    if threads_number is not None:
        params["threads_number"] = threads_number
    return params


def mri_surf2volseg_cargs(
    params: MriSurf2volsegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_surf2volseg")
    if params.get("input_segmentation", None) is not None:
        cargs.extend([
            "--i",
            execution.input_file(params.get("input_segmentation", None))
        ])
    if params.get("output_segmentation", None) is not None:
        cargs.extend([
            "--o",
            params.get("output_segmentation", None)
        ])
    if params.get("source_segmentation", None) is not None:
        cargs.extend([
            "--src",
            execution.input_file(params.get("source_segmentation", None))
        ])
    if params.get("lh_white_surf", None) is not None:
        cargs.extend([
            "--lh-white",
            execution.input_file(params.get("lh_white_surf", None))
        ])
    if params.get("lh_pial_surf", None) is not None:
        cargs.extend([
            "--lh-pial",
            execution.input_file(params.get("lh_pial_surf", None))
        ])
    if params.get("rh_white_surf", None) is not None:
        cargs.extend([
            "--rh-white",
            execution.input_file(params.get("rh_white_surf", None))
        ])
    if params.get("rh_pial_surf", None) is not None:
        cargs.extend([
            "--rh-pial",
            execution.input_file(params.get("rh_pial_surf", None))
        ])
    if params.get("lh_cortex_mask", None) is not None:
        cargs.extend([
            "--lh-cortex-mask",
            execution.input_file(params.get("lh_cortex_mask", None))
        ])
    if params.get("rh_cortex_mask", None) is not None:
        cargs.extend([
            "--rh-cortex-mask",
            execution.input_file(params.get("rh_cortex_mask", None))
        ])
    if params.get("fix_presurf_ribbon", None) is not None:
        cargs.extend([
            "--fix-presurf-with-ribbon",
            execution.input_file(params.get("fix_presurf_ribbon", None))
        ])
    if params.get("label_cortex", False):
        cargs.append("--label-cortex")
    if params.get("label_wm", False):
        cargs.append("--label-wm")
    if params.get("label_wm_unknown", None) is not None:
        cargs.extend([
            "--label-wm-unknown",
            *map(str, params.get("label_wm_unknown", None))
        ])
    if params.get("lh_annotation", None) is not None:
        cargs.extend([
            "--lh-annot",
            execution.input_file(params.get("lh_annotation", None))
        ])
    if params.get("rh_annotation", None) is not None:
        cargs.extend([
            "--rh-annot",
            execution.input_file(params.get("rh_annotation", None))
        ])
    if params.get("wmparc_dmax", None) is not None:
        cargs.extend([
            "--wmparc-dmax",
            str(params.get("wmparc_dmax", None))
        ])
    if params.get("rip_unknown", False):
        cargs.append("--rip-unknown")
    if params.get("hypo_as_wm", False):
        cargs.append("--hypo-as-wm")
    if params.get("hashres", None) is not None:
        cargs.extend([
            "--hashres",
            str(params.get("hashres", None))
        ])
    if params.get("nhops", None) is not None:
        cargs.extend([
            "--nhops",
            str(params.get("nhops", None))
        ])
    if params.get("help_flag", False):
        cargs.append("--help")
    if params.get("version_flag", False):
        cargs.append("--version")
    if params.get("crs_test", None) is not None:
        cargs.extend([
            "--crs-test",
            *map(str, params.get("crs_test", None))
        ])
    if params.get("ctab_file", None) is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("ctab_file", None))
        ])
    if params.get("threads_number", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads_number", None))
        ])
    return cargs


def mri_surf2volseg_outputs(
    params: MriSurf2volsegParameters,
    execution: Execution,
) -> MriSurf2volsegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSurf2volsegOutputs(
        root=execution.output_file("."),
    )
    return ret


def mri_surf2volseg_execute(
    params: MriSurf2volsegParameters,
    runner: Runner | None = None,
) -> MriSurf2volsegOutputs:
    """
    mri_surf2volseg
    
    Tool that cleans up presurf aseg cortex and WM, maps cortical labels from an
    annotation into a volume, and labels cerebral WM with closest cortical
    label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSurf2volsegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SURF2VOLSEG_METADATA)
    params = execution.params(params)
    cargs = mri_surf2volseg_cargs(params, execution)
    ret = mri_surf2volseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_surf2volseg(
    input_segmentation: InputPathType | None = None,
    output_segmentation: str | None = None,
    source_segmentation: InputPathType | None = None,
    lh_white_surf: InputPathType | None = None,
    lh_pial_surf: InputPathType | None = None,
    rh_white_surf: InputPathType | None = None,
    rh_pial_surf: InputPathType | None = None,
    lh_cortex_mask: InputPathType | None = None,
    rh_cortex_mask: InputPathType | None = None,
    fix_presurf_ribbon: InputPathType | None = None,
    label_cortex: bool = False,
    label_wm: bool = False,
    label_wm_unknown: list[float] | None = None,
    lh_annotation: InputPathType | None = None,
    rh_annotation: InputPathType | None = None,
    wmparc_dmax: float | None = None,
    rip_unknown: bool = False,
    hypo_as_wm: bool = False,
    hashres: float | None = None,
    nhops: float | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
    crs_test: list[float] | None = None,
    ctab_file: InputPathType | None = None,
    threads_number: float | None = None,
    runner: Runner | None = None,
) -> MriSurf2volsegOutputs:
    """
    mri_surf2volseg
    
    Tool that cleans up presurf aseg cortex and WM, maps cortical labels from an
    annotation into a volume, and labels cerebral WM with closest cortical
    label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_segmentation: Full path of input segmentation.
        output_segmentation: Output segmentation file.
        source_segmentation: Source subcortical volume segmentation file\
            (instead of using subcortical segs in input segmentation).
        lh_white_surf: White surface for left hemisphere.
        lh_pial_surf: Pial surface for left hemisphere.
        rh_white_surf: White surface for right hemisphere.
        rh_pial_surf: Pial surface for right hemisphere.
        lh_cortex_mask: Mask for left hemisphere cortex (usually\
            lh.cortex.label).
        rh_cortex_mask: Mask for right hemisphere cortex (usually\
            rh.cortex.label).
        fix_presurf_ribbon: Fix the cortical and WM labels in the input\
            segmentation using ribbon file.
        label_cortex: Relabel cortex in the input segmentation with surface\
            annotation.
        label_wm: Relabel cerebral WM in the input segmentation with surface\
            annotation.
        label_wm_unknown: Relabel unknown WM as lhval and rhval (default is\
            5001 and 5002).
        lh_annotation: Left hemisphere annotation for --label-cortex and\
            --label-wm.
        rh_annotation: Right hemisphere annotation for --label-cortex and\
            --label-wm.
        wmparc_dmax: Max distance (mm) from cortex to be labeled as gyral WM.
        rip_unknown: Do not label WM based on 'unknown' cortical label.
        hypo_as_wm: Label hypointensities as WM (when fixing with ribbon).
        hashres: Surface hash table resolution.
        nhops: Number of surface hops when searching for a nearby annotation.
        help_flag: Print out information on how to use this program.
        version_flag: Print out version and exit.
        crs_test: Test labeling of only the voxel given by column, row, slice\
            (debugging).
        ctab_file: Embed color table in the output.
        threads_number: Run in parallel with the specified number of threads.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSurf2volsegOutputs`).
    """
    params = mri_surf2volseg_params(
        input_segmentation=input_segmentation,
        output_segmentation=output_segmentation,
        source_segmentation=source_segmentation,
        lh_white_surf=lh_white_surf,
        lh_pial_surf=lh_pial_surf,
        rh_white_surf=rh_white_surf,
        rh_pial_surf=rh_pial_surf,
        lh_cortex_mask=lh_cortex_mask,
        rh_cortex_mask=rh_cortex_mask,
        fix_presurf_ribbon=fix_presurf_ribbon,
        label_cortex=label_cortex,
        label_wm=label_wm,
        label_wm_unknown=label_wm_unknown,
        lh_annotation=lh_annotation,
        rh_annotation=rh_annotation,
        wmparc_dmax=wmparc_dmax,
        rip_unknown=rip_unknown,
        hypo_as_wm=hypo_as_wm,
        hashres=hashres,
        nhops=nhops,
        help_flag=help_flag,
        version_flag=version_flag,
        crs_test=crs_test,
        ctab_file=ctab_file,
        threads_number=threads_number,
    )
    return mri_surf2volseg_execute(params, runner)


__all__ = [
    "MRI_SURF2VOLSEG_METADATA",
    "MriSurf2volsegOutputs",
    "mri_surf2volseg",
    "mri_surf2volseg_execute",
    "mri_surf2volseg_params",
]
