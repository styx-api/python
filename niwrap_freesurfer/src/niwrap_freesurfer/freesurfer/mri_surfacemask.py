# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SURFACEMASK_METADATA = Metadata(
    id="e574e06d30f437e0b20935e67a40c6a413ee008e.boutiques",
    name="mri_surfacemask",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSurfacemaskParameters = typing.TypedDict('MriSurfacemaskParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_surfacemask"]],
    "input_volume": InputPathType,
    "input_surface": InputPathType,
    "output_volume": str,
})
MriSurfacemaskParametersTagged = typing.TypedDict('MriSurfacemaskParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_surfacemask"],
    "input_volume": InputPathType,
    "input_surface": InputPathType,
    "output_volume": str,
})


class MriSurfacemaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSurfacemaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """The resulting surface-masked volume"""


def mri_surfacemask_params(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_volume: str,
) -> MriSurfacemaskParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume which will be masked.
        input_surface: Surface file used for masking the volume.
        output_volume: Output volume file where pixels outside the surface are\
            set to zero.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_surfacemask",
        "input_volume": input_volume,
        "input_surface": input_surface,
        "output_volume": output_volume,
    }
    return params


def mri_surfacemask_cargs(
    params: MriSurfacemaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_surfacemask")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mri_surfacemask_outputs(
    params: MriSurfacemaskParameters,
    execution: Execution,
) -> MriSurfacemaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSurfacemaskOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_surfacemask_execute(
    params: MriSurfacemaskParameters,
    runner: Runner | None = None,
) -> MriSurfacemaskOutputs:
    """
    mri_surfacemask
    
    Tool to produce a new volume where all pixels outside the surface are set to
    zero.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSurfacemaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SURFACEMASK_METADATA)
    params = execution.params(params)
    cargs = mri_surfacemask_cargs(params, execution)
    ret = mri_surfacemask_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_surfacemask(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MriSurfacemaskOutputs:
    """
    mri_surfacemask
    
    Tool to produce a new volume where all pixels outside the surface are set to
    zero.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume which will be masked.
        input_surface: Surface file used for masking the volume.
        output_volume: Output volume file where pixels outside the surface are\
            set to zero.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSurfacemaskOutputs`).
    """
    params = mri_surfacemask_params(
        input_volume=input_volume,
        input_surface=input_surface,
        output_volume=output_volume,
    )
    return mri_surfacemask_execute(params, runner)


__all__ = [
    "MRI_SURFACEMASK_METADATA",
    "MriSurfacemaskOutputs",
    "mri_surfacemask",
    "mri_surfacemask_execute",
    "mri_surfacemask_params",
]
