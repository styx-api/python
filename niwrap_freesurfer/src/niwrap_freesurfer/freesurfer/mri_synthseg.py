# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SYNTHSEG_METADATA = Metadata(
    id="71634236583037fb8ea08eae201333ab1a3019ae.boutiques",
    name="mri_synthseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSynthsegParameters = typing.TypedDict('MriSynthsegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_synthseg"]],
    "input_image": InputPathType,
    "output_segmentation": str,
    "cortex_parcellation": bool,
    "robust_prediction": bool,
    "fast_prediction": bool,
    "clip_ct": bool,
    "output_volume": typing.NotRequired[str | None],
    "output_qc": typing.NotRequired[str | None],
    "output_posteriors": typing.NotRequired[str | None],
    "resampled_images": typing.NotRequired[str | None],
    "image_patch_size": typing.NotRequired[list[float] | None],
    "threads": typing.NotRequired[float | None],
    "cpu": bool,
    "version_1": bool,
    "photo_synthseg": typing.NotRequired[str | None],
})
MriSynthsegParametersTagged = typing.TypedDict('MriSynthsegParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_synthseg"],
    "input_image": InputPathType,
    "output_segmentation": str,
    "cortex_parcellation": bool,
    "robust_prediction": bool,
    "fast_prediction": bool,
    "clip_ct": bool,
    "output_volume": typing.NotRequired[str | None],
    "output_qc": typing.NotRequired[str | None],
    "output_posteriors": typing.NotRequired[str | None],
    "resampled_images": typing.NotRequired[str | None],
    "image_patch_size": typing.NotRequired[list[float] | None],
    "threads": typing.NotRequired[float | None],
    "cpu": bool,
    "version_1": bool,
    "photo_synthseg": typing.NotRequired[str | None],
})


class MriSynthsegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSynthsegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_segmentation_file: OutputPathType
    """Segmentation output(s)"""
    output_volume_csv: OutputPathType | None
    """CSV file with volumes for all structures and subjects"""
    output_qc_csv: OutputPathType | None
    """CSV file with QC scores for all subjects"""
    output_posteriors_file: OutputPathType | None
    """Posteriors output(s)"""
    resampled_images_file: OutputPathType | None
    """Resampled image(s)"""


def mri_synthseg_params(
    input_image: InputPathType,
    output_segmentation: str,
    cortex_parcellation: bool = False,
    robust_prediction: bool = False,
    fast_prediction: bool = False,
    clip_ct: bool = False,
    output_volume: str | None = None,
    output_qc: str | None = None,
    output_posteriors: str | None = None,
    resampled_images: str | None = None,
    image_patch_size: list[float] | None = None,
    threads: float | None = None,
    cpu: bool = False,
    version_1: bool = False,
    photo_synthseg: str | None = None,
) -> MriSynthsegParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Image(s) to segment. Can be a path to an image or to a\
            folder.
        output_segmentation: Segmentation output(s). Must be a folder if --i\
            designates a folder.
        cortex_parcellation: Perform cortex parcellation.
        robust_prediction: Use robust predictions (slower).
        fast_prediction: Bypass some processing for faster prediction.
        clip_ct: Clip CT scans in Hounsfield scale to [0, 80].
        output_volume: Output CSV file with volumes for all structures and\
            subjects.
        output_qc: Output CSV file with QC scores for all subjects.
        output_posteriors: Posteriors output(s). Must be a folder if --i\
            designates a folder.
        resampled_images: Resampled image(s). Must be a folder if --i is a\
            folder.
        image_patch_size: Only analyse an image patch of the given size.
        threads: Number of cores to be used. Default is 1.
        cpu: Enforce running with CPU rather than GPU.
        version_1: Use SynthSeg 1.0 (updated 25/06/22).
        photo_synthseg: Photo-SynthSeg: segment 3D reconstructed stack of\
            coronal dissection photos of the cerebrum; must be left, right, or\
            both.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_synthseg",
        "input_image": input_image,
        "output_segmentation": output_segmentation,
        "cortex_parcellation": cortex_parcellation,
        "robust_prediction": robust_prediction,
        "fast_prediction": fast_prediction,
        "clip_ct": clip_ct,
        "cpu": cpu,
        "version_1": version_1,
    }
    if output_volume is not None:
        params["output_volume"] = output_volume
    if output_qc is not None:
        params["output_qc"] = output_qc
    if output_posteriors is not None:
        params["output_posteriors"] = output_posteriors
    if resampled_images is not None:
        params["resampled_images"] = resampled_images
    if image_patch_size is not None:
        params["image_patch_size"] = image_patch_size
    if threads is not None:
        params["threads"] = threads
    if photo_synthseg is not None:
        params["photo_synthseg"] = photo_synthseg
    return params


def mri_synthseg_cargs(
    params: MriSynthsegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_synthseg")
    cargs.append(execution.input_file(params.get("input_image", None)))
    cargs.append(params.get("output_segmentation", None))
    if params.get("cortex_parcellation", False):
        cargs.append("--parc")
    if params.get("robust_prediction", False):
        cargs.append("--robust")
    if params.get("fast_prediction", False):
        cargs.append("--fast")
    if params.get("clip_ct", False):
        cargs.append("--ct")
    if params.get("output_volume", None) is not None:
        cargs.append(params.get("output_volume", None))
    if params.get("output_qc", None) is not None:
        cargs.append(params.get("output_qc", None))
    if params.get("output_posteriors", None) is not None:
        cargs.append(params.get("output_posteriors", None))
    if params.get("resampled_images", None) is not None:
        cargs.append(params.get("resampled_images", None))
    if params.get("image_patch_size", None) is not None:
        cargs.extend(map(str, params.get("image_patch_size", None)))
    if params.get("threads", None) is not None:
        cargs.append(str(params.get("threads", None)))
    if params.get("cpu", False):
        cargs.append("--cpu")
    if params.get("version_1", False):
        cargs.append("--v1")
    if params.get("photo_synthseg", None) is not None:
        cargs.append(params.get("photo_synthseg", None))
    return cargs


def mri_synthseg_outputs(
    params: MriSynthsegParameters,
    execution: Execution,
) -> MriSynthsegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSynthsegOutputs(
        root=execution.output_file("."),
        output_segmentation_file=execution.output_file(params.get("output_segmentation", None)),
        output_volume_csv=execution.output_file(params.get("output_volume", None)) if (params.get("output_volume") is not None) else None,
        output_qc_csv=execution.output_file(params.get("output_qc", None)) if (params.get("output_qc") is not None) else None,
        output_posteriors_file=execution.output_file(params.get("output_posteriors", None)) if (params.get("output_posteriors") is not None) else None,
        resampled_images_file=execution.output_file(params.get("resampled_images", None)) if (params.get("resampled_images") is not None) else None,
    )
    return ret


def mri_synthseg_execute(
    params: MriSynthsegParameters,
    runner: Runner | None = None,
) -> MriSynthsegOutputs:
    """
    mri_synthseg
    
    SynthSeg is a tool for brain image segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSynthsegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SYNTHSEG_METADATA)
    params = execution.params(params)
    cargs = mri_synthseg_cargs(params, execution)
    ret = mri_synthseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_synthseg(
    input_image: InputPathType,
    output_segmentation: str,
    cortex_parcellation: bool = False,
    robust_prediction: bool = False,
    fast_prediction: bool = False,
    clip_ct: bool = False,
    output_volume: str | None = None,
    output_qc: str | None = None,
    output_posteriors: str | None = None,
    resampled_images: str | None = None,
    image_patch_size: list[float] | None = None,
    threads: float | None = None,
    cpu: bool = False,
    version_1: bool = False,
    photo_synthseg: str | None = None,
    runner: Runner | None = None,
) -> MriSynthsegOutputs:
    """
    mri_synthseg
    
    SynthSeg is a tool for brain image segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Image(s) to segment. Can be a path to an image or to a\
            folder.
        output_segmentation: Segmentation output(s). Must be a folder if --i\
            designates a folder.
        cortex_parcellation: Perform cortex parcellation.
        robust_prediction: Use robust predictions (slower).
        fast_prediction: Bypass some processing for faster prediction.
        clip_ct: Clip CT scans in Hounsfield scale to [0, 80].
        output_volume: Output CSV file with volumes for all structures and\
            subjects.
        output_qc: Output CSV file with QC scores for all subjects.
        output_posteriors: Posteriors output(s). Must be a folder if --i\
            designates a folder.
        resampled_images: Resampled image(s). Must be a folder if --i is a\
            folder.
        image_patch_size: Only analyse an image patch of the given size.
        threads: Number of cores to be used. Default is 1.
        cpu: Enforce running with CPU rather than GPU.
        version_1: Use SynthSeg 1.0 (updated 25/06/22).
        photo_synthseg: Photo-SynthSeg: segment 3D reconstructed stack of\
            coronal dissection photos of the cerebrum; must be left, right, or\
            both.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSynthsegOutputs`).
    """
    params = mri_synthseg_params(
        input_image=input_image,
        output_segmentation=output_segmentation,
        cortex_parcellation=cortex_parcellation,
        robust_prediction=robust_prediction,
        fast_prediction=fast_prediction,
        clip_ct=clip_ct,
        output_volume=output_volume,
        output_qc=output_qc,
        output_posteriors=output_posteriors,
        resampled_images=resampled_images,
        image_patch_size=image_patch_size,
        threads=threads,
        cpu=cpu,
        version_1=version_1,
        photo_synthseg=photo_synthseg,
    )
    return mri_synthseg_execute(params, runner)


__all__ = [
    "MRI_SYNTHSEG_METADATA",
    "MriSynthsegOutputs",
    "mri_synthseg",
    "mri_synthseg_execute",
    "mri_synthseg_params",
]
