# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_SYNTHSR_HYPERFINE_METADATA = Metadata(
    id="57ebf5df91e40f506a0d1c025ac3cea3737635c1.boutiques",
    name="mri_synthsr_hyperfine",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriSynthsrHyperfineParameters = typing.TypedDict('MriSynthsrHyperfineParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_synthsr_hyperfine"]],
    "t1_image": InputPathType,
    "t2_image": InputPathType,
    "output": str,
    "threads": typing.NotRequired[float | None],
    "cpu": bool,
})
MriSynthsrHyperfineParametersTagged = typing.TypedDict('MriSynthsrHyperfineParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_synthsr_hyperfine"],
    "t1_image": InputPathType,
    "t2_image": InputPathType,
    "output": str,
    "threads": typing.NotRequired[float | None],
    "cpu": bool,
})


class MriSynthsrHyperfineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriSynthsrHyperfineParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    synthetic_mprage: OutputPathType
    """Synthetic 1mm MP-RAGE(s) generated from T1 and T2 inputs"""


def mri_synthsr_hyperfine_params(
    t1_image: InputPathType,
    t2_image: InputPathType,
    output: str,
    threads: float | None = None,
    cpu: bool = False,
) -> MriSynthsrHyperfineParametersTagged:
    """
    Build parameters.
    
    Args:
        t1_image: T1 image(s) to super-resolve, at native 1.5x1.5x5 axial\
            resolution. Can be a path to an image or to a folder.
        t2_image: T2 image(s). Must be a folder if --t1 designates a folder.\
            These must be registered to the T1s, in physical coordinates (i.e.,\
            with the headers, do NOT resample when registering; see instructions on\
            FreeSurfer wiki).
        output: Output(s), i.e. synthetic 1mm MP-RAGE(s). Must be a folder if\
            --t1 designates a folder.
        threads: (optional) Number of cores to be used. Default is 1.
        cpu: (optional) Enforce running with CPU rather than GPU.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_synthsr_hyperfine",
        "t1_image": t1_image,
        "t2_image": t2_image,
        "output": output,
        "cpu": cpu,
    }
    if threads is not None:
        params["threads"] = threads
    return params


def mri_synthsr_hyperfine_cargs(
    params: MriSynthsrHyperfineParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_synthsr_hyperfine")
    cargs.extend([
        "--t1",
        execution.input_file(params.get("t1_image", None))
    ])
    cargs.extend([
        "--t2",
        execution.input_file(params.get("t2_image", None))
    ])
    cargs.extend([
        "--o",
        params.get("output", None)
    ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("cpu", False):
        cargs.append("--cpu")
    return cargs


def mri_synthsr_hyperfine_outputs(
    params: MriSynthsrHyperfineParameters,
    execution: Execution,
) -> MriSynthsrHyperfineOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriSynthsrHyperfineOutputs(
        root=execution.output_file("."),
        synthetic_mprage=execution.output_file(params.get("output", None)),
    )
    return ret


def mri_synthsr_hyperfine_execute(
    params: MriSynthsrHyperfineParameters,
    runner: Runner | None = None,
) -> MriSynthsrHyperfineOutputs:
    """
    mri_synthsr_hyperfine
    
    Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a pair
    of T1-T2 standard Hyperfine scans (1.5x1.5x5mm axial).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSynthsrHyperfineOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_SYNTHSR_HYPERFINE_METADATA)
    params = execution.params(params)
    cargs = mri_synthsr_hyperfine_cargs(params, execution)
    ret = mri_synthsr_hyperfine_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_synthsr_hyperfine(
    t1_image: InputPathType,
    t2_image: InputPathType,
    output: str,
    threads: float | None = None,
    cpu: bool = False,
    runner: Runner | None = None,
) -> MriSynthsrHyperfineOutputs:
    """
    mri_synthsr_hyperfine
    
    Implementation of SynthSR that generates a synthetic 1mm MP-RAGE from a pair
    of T1-T2 standard Hyperfine scans (1.5x1.5x5mm axial).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        t1_image: T1 image(s) to super-resolve, at native 1.5x1.5x5 axial\
            resolution. Can be a path to an image or to a folder.
        t2_image: T2 image(s). Must be a folder if --t1 designates a folder.\
            These must be registered to the T1s, in physical coordinates (i.e.,\
            with the headers, do NOT resample when registering; see instructions on\
            FreeSurfer wiki).
        output: Output(s), i.e. synthetic 1mm MP-RAGE(s). Must be a folder if\
            --t1 designates a folder.
        threads: (optional) Number of cores to be used. Default is 1.
        cpu: (optional) Enforce running with CPU rather than GPU.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriSynthsrHyperfineOutputs`).
    """
    params = mri_synthsr_hyperfine_params(
        t1_image=t1_image,
        t2_image=t2_image,
        output=output,
        threads=threads,
        cpu=cpu,
    )
    return mri_synthsr_hyperfine_execute(params, runner)


__all__ = [
    "MRI_SYNTHSR_HYPERFINE_METADATA",
    "MriSynthsrHyperfineOutputs",
    "mri_synthsr_hyperfine",
    "mri_synthsr_hyperfine_execute",
    "mri_synthsr_hyperfine_params",
]
