# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_VOL2SURF_METADATA = Metadata(
    id="2503c379fe63f85fc425451e4ccde489c206dce9.boutiques",
    name="mri_vol2surf",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriVol2surfParameters = typing.TypedDict('MriVol2surfParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_vol2surf"]],
    "input_volume": InputPathType,
    "registration_file": InputPathType,
    "output_path": str,
    "reference_volume": typing.NotRequired[str | None],
    "regheader_subject": typing.NotRequired[str | None],
    "mni152reg_flag": bool,
    "target_subject": typing.NotRequired[str | None],
    "hemisphere": typing.NotRequired[typing.Literal["lh", "rh"] | None],
    "surface": typing.NotRequired[str | None],
})
MriVol2surfParametersTagged = typing.TypedDict('MriVol2surfParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_vol2surf"],
    "input_volume": InputPathType,
    "registration_file": InputPathType,
    "output_path": str,
    "reference_volume": typing.NotRequired[str | None],
    "regheader_subject": typing.NotRequired[str | None],
    "mni152reg_flag": bool,
    "target_subject": typing.NotRequired[str | None],
    "hemisphere": typing.NotRequired[typing.Literal["lh", "rh"] | None],
    "surface": typing.NotRequired[str | None],
})


class MriVol2surfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriVol2surfParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    resampled_volume_output: OutputPathType
    """Output file containing the resampled volume onto the surface"""


def mri_vol2surf_params(
    input_volume: InputPathType,
    registration_file: InputPathType,
    output_path: str,
    reference_volume: str | None = None,
    regheader_subject: str | None = None,
    mni152reg_flag: bool = False,
    target_subject: str | None = None,
    hemisphere: typing.Literal["lh", "rh"] | None = None,
    surface: str | None = None,
) -> MriVol2surfParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Path to input volume file.
        registration_file: Registration file as computed by tkregister,\
            spmregister, bbregister, etc.
        output_path: Output path for the resampled volume.
        reference_volume: Reference volume name, default is orig.mgz.
        regheader_subject: Compute registration from header information,\
            aligning the current volume with the subject/mri/orig.mgz.
        mni152reg_flag: Use MNI152 registration:\
            $FREESURFER_HOME/average/mni152.register.dat.
        target_subject: Target subject for resampling, can be a subject name or\
            'ico' for icosahedron.
        hemisphere: Hemisphere to process: lh = left hemisphere or rh = right\
            hemisphere.
        surface: Target surface on which to resample, default is 'white'.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_vol2surf",
        "input_volume": input_volume,
        "registration_file": registration_file,
        "output_path": output_path,
        "mni152reg_flag": mni152reg_flag,
    }
    if reference_volume is not None:
        params["reference_volume"] = reference_volume
    if regheader_subject is not None:
        params["regheader_subject"] = regheader_subject
    if target_subject is not None:
        params["target_subject"] = target_subject
    if hemisphere is not None:
        params["hemisphere"] = hemisphere
    if surface is not None:
        params["surface"] = surface
    return params


def mri_vol2surf_cargs(
    params: MriVol2surfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_vol2surf")
    cargs.extend([
        "--mov",
        execution.input_file(params.get("input_volume", None))
    ])
    cargs.extend([
        "--reg",
        execution.input_file(params.get("registration_file", None))
    ])
    cargs.extend([
        "--o",
        params.get("output_path", None)
    ])
    if params.get("reference_volume", None) is not None:
        cargs.extend([
            "--ref",
            params.get("reference_volume", None)
        ])
    if params.get("regheader_subject", None) is not None:
        cargs.extend([
            "--regheader",
            params.get("regheader_subject", None)
        ])
    if params.get("mni152reg_flag", False):
        cargs.append("--mni152reg")
    if params.get("target_subject", None) is not None:
        cargs.extend([
            "--trgsubject",
            params.get("target_subject", None)
        ])
    if params.get("hemisphere", None) is not None:
        cargs.extend([
            "--hemi",
            params.get("hemisphere", None)
        ])
    if params.get("surface", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surface", None)
        ])
    return cargs


def mri_vol2surf_outputs(
    params: MriVol2surfParameters,
    execution: Execution,
) -> MriVol2surfOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriVol2surfOutputs(
        root=execution.output_file("."),
        resampled_volume_output=execution.output_file(params.get("output_path", None)),
    )
    return ret


def mri_vol2surf_execute(
    params: MriVol2surfParameters,
    runner: Runner | None = None,
) -> MriVol2surfOutputs:
    """
    mri_vol2surf
    
    This program resamples a volume onto a surface of a subject or the sphere.
    The output can be viewed on the surface (using tksurfer) or can be used for
    surface-based intersubject averaging.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriVol2surfOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_VOL2SURF_METADATA)
    params = execution.params(params)
    cargs = mri_vol2surf_cargs(params, execution)
    ret = mri_vol2surf_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_vol2surf(
    input_volume: InputPathType,
    registration_file: InputPathType,
    output_path: str,
    reference_volume: str | None = None,
    regheader_subject: str | None = None,
    mni152reg_flag: bool = False,
    target_subject: str | None = None,
    hemisphere: typing.Literal["lh", "rh"] | None = None,
    surface: str | None = None,
    runner: Runner | None = None,
) -> MriVol2surfOutputs:
    """
    mri_vol2surf
    
    This program resamples a volume onto a surface of a subject or the sphere.
    The output can be viewed on the surface (using tksurfer) or can be used for
    surface-based intersubject averaging.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Path to input volume file.
        registration_file: Registration file as computed by tkregister,\
            spmregister, bbregister, etc.
        output_path: Output path for the resampled volume.
        reference_volume: Reference volume name, default is orig.mgz.
        regheader_subject: Compute registration from header information,\
            aligning the current volume with the subject/mri/orig.mgz.
        mni152reg_flag: Use MNI152 registration:\
            $FREESURFER_HOME/average/mni152.register.dat.
        target_subject: Target subject for resampling, can be a subject name or\
            'ico' for icosahedron.
        hemisphere: Hemisphere to process: lh = left hemisphere or rh = right\
            hemisphere.
        surface: Target surface on which to resample, default is 'white'.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriVol2surfOutputs`).
    """
    params = mri_vol2surf_params(
        input_volume=input_volume,
        registration_file=registration_file,
        output_path=output_path,
        reference_volume=reference_volume,
        regheader_subject=regheader_subject,
        mni152reg_flag=mni152reg_flag,
        target_subject=target_subject,
        hemisphere=hemisphere,
        surface=surface,
    )
    return mri_vol2surf_execute(params, runner)


__all__ = [
    "MRI_VOL2SURF_METADATA",
    "MriVol2surfOutputs",
    "mri_vol2surf",
    "mri_vol2surf_execute",
    "mri_vol2surf_params",
]
