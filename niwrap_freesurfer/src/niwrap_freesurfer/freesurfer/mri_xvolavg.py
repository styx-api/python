# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRI_XVOLAVG_METADATA = Metadata(
    id="b74f56f50aae77b8cd6b4541c5e9927405e67b6b.boutiques",
    name="mri_xvolavg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MriXvolavgParameters = typing.TypedDict('MriXvolavgParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mri_xvolavg"]],
    "input_volumes": list[InputPathType],
    "vol_type": str,
    "output_volume": str,
    "output_type": typing.NotRequired[str | None],
})
MriXvolavgParametersTagged = typing.TypedDict('MriXvolavgParametersTagged', {
    "@type": typing.Literal["freesurfer/mri_xvolavg"],
    "input_volumes": list[InputPathType],
    "vol_type": str,
    "output_volume": str,
    "output_type": typing.NotRequired[str | None],
})


class MriXvolavgOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MriXvolavgParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    averaged_output: OutputPathType
    """The averaged output volume."""


def mri_xvolavg_params(
    input_volumes: list[InputPathType],
    vol_type: str,
    output_volume: str,
    output_type: str | None = None,
) -> MriXvolavgParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volumes: Path(s) to input volume(s). This option can be repeated\
            for each input volume.
        vol_type: Format type of all input volumes.
        output_volume: Path to output volume.
        output_type: Format type of the output volume (default is that of input\
            volumes).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mri_xvolavg",
        "input_volumes": input_volumes,
        "vol_type": vol_type,
        "output_volume": output_volume,
    }
    if output_type is not None:
        params["output_type"] = output_type
    return params


def mri_xvolavg_cargs(
    params: MriXvolavgParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mri_xvolavg")
    cargs.extend([
        "--vol",
        *[execution.input_file(f) for f in params.get("input_volumes", None)]
    ])
    cargs.extend([
        "--vol_type",
        params.get("vol_type", None)
    ])
    cargs.extend([
        "--out",
        params.get("output_volume", None)
    ])
    if params.get("output_type", None) is not None:
        cargs.extend([
            "--out_type",
            params.get("output_type", None)
        ])
    return cargs


def mri_xvolavg_outputs(
    params: MriXvolavgParameters,
    execution: Execution,
) -> MriXvolavgOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MriXvolavgOutputs(
        root=execution.output_file("."),
        averaged_output=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mri_xvolavg_execute(
    params: MriXvolavgParameters,
    runner: Runner | None = None,
) -> MriXvolavgOutputs:
    """
    mri_xvolavg
    
    Tool to average multiple volumes together (including 4D volumes).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriXvolavgOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_XVOLAVG_METADATA)
    params = execution.params(params)
    cargs = mri_xvolavg_cargs(params, execution)
    ret = mri_xvolavg_outputs(params, execution)
    execution.run(cargs)
    return ret


def mri_xvolavg(
    input_volumes: list[InputPathType],
    vol_type: str,
    output_volume: str,
    output_type: str | None = None,
    runner: Runner | None = None,
) -> MriXvolavgOutputs:
    """
    mri_xvolavg
    
    Tool to average multiple volumes together (including 4D volumes).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volumes: Path(s) to input volume(s). This option can be repeated\
            for each input volume.
        vol_type: Format type of all input volumes.
        output_volume: Path to output volume.
        output_type: Format type of the output volume (default is that of input\
            volumes).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriXvolavgOutputs`).
    """
    params = mri_xvolavg_params(
        input_volumes=input_volumes,
        vol_type=vol_type,
        output_volume=output_volume,
        output_type=output_type,
    )
    return mri_xvolavg_execute(params, runner)


__all__ = [
    "MRI_XVOLAVG_METADATA",
    "MriXvolavgOutputs",
    "mri_xvolavg",
    "mri_xvolavg_execute",
    "mri_xvolavg_params",
]
