# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS2RGB_METADATA = Metadata(
    id="6726da6230a587382e8e51784edbe8796e30303b.boutiques",
    name="mris2rgb",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Mris2rgbParameters = typing.TypedDict('Mris2rgbParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris2rgb"]],
    "library_path": str,
})
Mris2rgbParametersTagged = typing.TypedDict('Mris2rgbParametersTagged', {
    "@type": typing.Literal["freesurfer/mris2rgb"],
    "library_path": str,
})


class Mris2rgbOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Mris2rgbParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris2rgb_params(
    library_path: str,
) -> Mris2rgbParametersTagged:
    """
    Build parameters.
    
    Args:
        library_path: Path to the directory containing the libGLU.so.1 library\
            required by mris2rgb.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris2rgb",
        "library_path": library_path,
    }
    return params


def mris2rgb_cargs(
    params: Mris2rgbParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris2rgb")
    cargs.extend([
        "export LD_LIBRARY_PATH=",
        params.get("library_path", None)
    ])
    return cargs


def mris2rgb_outputs(
    params: Mris2rgbParameters,
    execution: Execution,
) -> Mris2rgbOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Mris2rgbOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris2rgb_execute(
    params: Mris2rgbParameters,
    runner: Runner | None = None,
) -> Mris2rgbOutputs:
    """
    mris2rgb
    
    A tool from FreeSurfer for converting MRI surface files to RGB images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Mris2rgbOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS2RGB_METADATA)
    params = execution.params(params)
    cargs = mris2rgb_cargs(params, execution)
    ret = mris2rgb_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris2rgb(
    library_path: str,
    runner: Runner | None = None,
) -> Mris2rgbOutputs:
    """
    mris2rgb
    
    A tool from FreeSurfer for converting MRI surface files to RGB images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        library_path: Path to the directory containing the libGLU.so.1 library\
            required by mris2rgb.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Mris2rgbOutputs`).
    """
    params = mris2rgb_params(
        library_path=library_path,
    )
    return mris2rgb_execute(params, runner)


__all__ = [
    "MRIS2RGB_METADATA",
    "Mris2rgbOutputs",
    "mris2rgb",
    "mris2rgb_execute",
    "mris2rgb_params",
]
