# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_ADD_TEMPLATE_METADATA = Metadata(
    id="f2ee0984a4f5067041d4565cfaf96e4c1a417eaa.boutiques",
    name="mris_add_template",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisAddTemplateParameters = typing.TypedDict('MrisAddTemplateParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_add_template"]],
    "placeholder_input": typing.NotRequired[str | None],
})
MrisAddTemplateParametersTagged = typing.TypedDict('MrisAddTemplateParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_add_template"],
    "placeholder_input": typing.NotRequired[str | None],
})


class MrisAddTemplateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisAddTemplateParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    placeholder_output: OutputPathType
    """No outputs available as the tool has been removed."""


def mris_add_template_params(
    placeholder_input: str | None = None,
) -> MrisAddTemplateParametersTagged:
    """
    Build parameters.
    
    Args:
        placeholder_input: No inputs available as the tool has been removed.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_add_template",
    }
    if placeholder_input is not None:
        params["placeholder_input"] = placeholder_input
    return params


def mris_add_template_cargs(
    params: MrisAddTemplateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_add_template")
    if params.get("placeholder_input", None) is not None:
        cargs.append(params.get("placeholder_input", None))
    return cargs


def mris_add_template_outputs(
    params: MrisAddTemplateParameters,
    execution: Execution,
) -> MrisAddTemplateOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisAddTemplateOutputs(
        root=execution.output_file("."),
        placeholder_output=execution.output_file("[PLACEHOLDER_OUTPUT]"),
    )
    return ret


def mris_add_template_execute(
    params: MrisAddTemplateParameters,
    runner: Runner | None = None,
) -> MrisAddTemplateOutputs:
    """
    mris_add_template
    
    This tool has been removed from the current version of FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAddTemplateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_ADD_TEMPLATE_METADATA)
    params = execution.params(params)
    cargs = mris_add_template_cargs(params, execution)
    ret = mris_add_template_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_add_template(
    placeholder_input: str | None = None,
    runner: Runner | None = None,
) -> MrisAddTemplateOutputs:
    """
    mris_add_template
    
    This tool has been removed from the current version of FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        placeholder_input: No inputs available as the tool has been removed.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAddTemplateOutputs`).
    """
    params = mris_add_template_params(
        placeholder_input=placeholder_input,
    )
    return mris_add_template_execute(params, runner)


__all__ = [
    "MRIS_ADD_TEMPLATE_METADATA",
    "MrisAddTemplateOutputs",
    "mris_add_template",
    "mris_add_template_execute",
    "mris_add_template_params",
]
