# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_ANNOT_TO_SEGMENTATION_METADATA = Metadata(
    id="173263ceaaa6a90b36517642e4ba601fc62578ed.boutiques",
    name="mris_annot_to_segmentation",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisAnnotToSegmentationParameters = typing.TypedDict('MrisAnnotToSegmentationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_annot_to_segmentation"]],
    "subject_name": str,
    "hemi": str,
    "surface": str,
    "annot_file": InputPathType,
    "color_table": InputPathType,
    "output_volume": str,
})
MrisAnnotToSegmentationParametersTagged = typing.TypedDict('MrisAnnotToSegmentationParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_annot_to_segmentation"],
    "subject_name": str,
    "hemi": str,
    "surface": str,
    "annot_file": InputPathType,
    "color_table": InputPathType,
    "output_volume": str,
})


class MrisAnnotToSegmentationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisAnnotToSegmentationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType
    """Generated segmentation volume."""


def mris_annot_to_segmentation_params(
    subject_name: str,
    hemi: str,
    surface: str,
    annot_file: InputPathType,
    color_table: InputPathType,
    output_volume: str,
) -> MrisAnnotToSegmentationParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_name: Subject name.
        hemi: Hemisphere (e.g., lh or rh).
        surface: Surface file.
        annot_file: Annotation file.
        color_table: Color table file.
        output_volume: Output volume file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_annot_to_segmentation",
        "subject_name": subject_name,
        "hemi": hemi,
        "surface": surface,
        "annot_file": annot_file,
        "color_table": color_table,
        "output_volume": output_volume,
    }
    return params


def mris_annot_to_segmentation_cargs(
    params: MrisAnnotToSegmentationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_annot_to_segmentation")
    cargs.append(params.get("subject_name", None))
    cargs.append(params.get("hemi", None))
    cargs.append(params.get("surface", None))
    cargs.append(execution.input_file(params.get("annot_file", None)))
    cargs.append(execution.input_file(params.get("color_table", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mris_annot_to_segmentation_outputs(
    params: MrisAnnotToSegmentationParameters,
    execution: Execution,
) -> MrisAnnotToSegmentationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisAnnotToSegmentationOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mris_annot_to_segmentation_execute(
    params: MrisAnnotToSegmentationParameters,
    runner: Runner | None = None,
) -> MrisAnnotToSegmentationOutputs:
    """
    mris_annot_to_segmentation
    
    Converts annotation files to segmentation volumes in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAnnotToSegmentationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_ANNOT_TO_SEGMENTATION_METADATA)
    params = execution.params(params)
    cargs = mris_annot_to_segmentation_cargs(params, execution)
    ret = mris_annot_to_segmentation_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_annot_to_segmentation(
    subject_name: str,
    hemi: str,
    surface: str,
    annot_file: InputPathType,
    color_table: InputPathType,
    output_volume: str,
    runner: Runner | None = None,
) -> MrisAnnotToSegmentationOutputs:
    """
    mris_annot_to_segmentation
    
    Converts annotation files to segmentation volumes in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_name: Subject name.
        hemi: Hemisphere (e.g., lh or rh).
        surface: Surface file.
        annot_file: Annotation file.
        color_table: Color table file.
        output_volume: Output volume file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAnnotToSegmentationOutputs`).
    """
    params = mris_annot_to_segmentation_params(
        subject_name=subject_name,
        hemi=hemi,
        surface=surface,
        annot_file=annot_file,
        color_table=color_table,
        output_volume=output_volume,
    )
    return mris_annot_to_segmentation_execute(params, runner)


__all__ = [
    "MRIS_ANNOT_TO_SEGMENTATION_METADATA",
    "MrisAnnotToSegmentationOutputs",
    "mris_annot_to_segmentation",
    "mris_annot_to_segmentation_execute",
    "mris_annot_to_segmentation_params",
]
