# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_AUTODET_GWSTATS_METADATA = Metadata(
    id="70fa91a99fbbf9df5a0a9b3f753747e6cbdf864b.boutiques",
    name="mris_autodet_gwstats",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisAutodetGwstatsParameters = typing.TypedDict('MrisAutodetGwstatsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_autodet_gwstats"]],
    "output_file": str,
    "t1w_volume": InputPathType,
    "wm_volume": InputPathType,
    "surf": InputPathType,
    "lhsurf": typing.NotRequired[InputPathType | None],
    "rhsurf": typing.NotRequired[InputPathType | None],
    "subject": str,
    "subjects_dir": str,
    "min_border_white": typing.NotRequired[float | None],
    "max_border_white": typing.NotRequired[float | None],
    "min_gray_at_white_border": typing.NotRequired[float | None],
    "max_gray": typing.NotRequired[float | None],
    "max_gray_at_csf_border": typing.NotRequired[float | None],
    "min_gray_at_csf_border": typing.NotRequired[float | None],
    "max_csf": typing.NotRequired[float | None],
})
MrisAutodetGwstatsParametersTagged = typing.TypedDict('MrisAutodetGwstatsParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_autodet_gwstats"],
    "output_file": str,
    "t1w_volume": InputPathType,
    "wm_volume": InputPathType,
    "surf": InputPathType,
    "lhsurf": typing.NotRequired[InputPathType | None],
    "rhsurf": typing.NotRequired[InputPathType | None],
    "subject": str,
    "subjects_dir": str,
    "min_border_white": typing.NotRequired[float | None],
    "max_border_white": typing.NotRequired[float | None],
    "min_gray_at_white_border": typing.NotRequired[float | None],
    "max_gray": typing.NotRequired[float | None],
    "max_gray_at_csf_border": typing.NotRequired[float | None],
    "min_gray_at_csf_border": typing.NotRequired[float | None],
    "max_csf": typing.NotRequired[float | None],
})


class MrisAutodetGwstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisAutodetGwstatsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output text file with gray/white statistics"""


def mris_autodet_gwstats_params(
    output_file: str,
    t1w_volume: InputPathType,
    wm_volume: InputPathType,
    surf: InputPathType,
    subject: str,
    subjects_dir: str,
    lhsurf: InputPathType | None = None,
    rhsurf: InputPathType | None = None,
    min_border_white: float | None = None,
    max_border_white: float | None = None,
    min_gray_at_white_border: float | None = None,
    max_gray: float | None = None,
    max_gray_at_csf_border: float | None = None,
    min_gray_at_csf_border: float | None = None,
    max_csf: float | None = None,
) -> MrisAutodetGwstatsParametersTagged:
    """
    Build parameters.
    
    Args:
        output_file: Output text file with stats.
        t1w_volume: T1 weighted volume (usually brain.finalsurfs.mgz).
        wm_volume: White matter volume (usually wm.mgz).
        surf: Surface (usually ?h.orig).
        subject: Subject: reads in brain.finalsurfs.mgz, wm.mgz, lh.orig and\
            rh.orig.
        subjects_dir: SUBJECTS_DIR.
        lhsurf: Left hemisphere surface.
        rhsurf: Right hemisphere surface.
        min_border_white: Minimum border white (MinBW).
        max_border_white: Maximum border white (MaxBW).
        min_gray_at_white_border: Minimum gray at white border (MinGWB).
        max_gray: Maximum gray (MaxG).
        max_gray_at_csf_border: Maximum gray at CSF border (MaxGCSFB).
        min_gray_at_csf_border: Minimum gray at CSF border (MinGCSFB).
        max_csf: Maximum CSF (MaxCSF).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_autodet_gwstats",
        "output_file": output_file,
        "t1w_volume": t1w_volume,
        "wm_volume": wm_volume,
        "surf": surf,
        "subject": subject,
        "subjects_dir": subjects_dir,
    }
    if lhsurf is not None:
        params["lhsurf"] = lhsurf
    if rhsurf is not None:
        params["rhsurf"] = rhsurf
    if min_border_white is not None:
        params["min_border_white"] = min_border_white
    if max_border_white is not None:
        params["max_border_white"] = max_border_white
    if min_gray_at_white_border is not None:
        params["min_gray_at_white_border"] = min_gray_at_white_border
    if max_gray is not None:
        params["max_gray"] = max_gray
    if max_gray_at_csf_border is not None:
        params["max_gray_at_csf_border"] = max_gray_at_csf_border
    if min_gray_at_csf_border is not None:
        params["min_gray_at_csf_border"] = min_gray_at_csf_border
    if max_csf is not None:
        params["max_csf"] = max_csf
    return params


def mris_autodet_gwstats_cargs(
    params: MrisAutodetGwstatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_autodet_gwstats")
    cargs.extend([
        "--o",
        params.get("output_file", None)
    ])
    cargs.extend([
        "--i",
        execution.input_file(params.get("t1w_volume", None))
    ])
    cargs.extend([
        "--wm",
        execution.input_file(params.get("wm_volume", None))
    ])
    cargs.extend([
        "--surf",
        execution.input_file(params.get("surf", None))
    ])
    if params.get("lhsurf", None) is not None:
        cargs.extend([
            "--lh-surf",
            execution.input_file(params.get("lhsurf", None))
        ])
    if params.get("rhsurf", None) is not None:
        cargs.extend([
            "--rh-surf",
            execution.input_file(params.get("rhsurf", None))
        ])
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    cargs.extend([
        "--sd",
        params.get("subjects_dir", None)
    ])
    if params.get("min_border_white", None) is not None:
        cargs.extend([
            "--min_border_white",
            str(params.get("min_border_white", None))
        ])
    if params.get("max_border_white", None) is not None:
        cargs.extend([
            "--max_border_white",
            str(params.get("max_border_white", None))
        ])
    if params.get("min_gray_at_white_border", None) is not None:
        cargs.extend([
            "--min_gray_at_white_border",
            str(params.get("min_gray_at_white_border", None))
        ])
    if params.get("max_gray", None) is not None:
        cargs.extend([
            "--max_gray",
            str(params.get("max_gray", None))
        ])
    if params.get("max_gray_at_csf_border", None) is not None:
        cargs.extend([
            "--max_gray_at_csf_border",
            str(params.get("max_gray_at_csf_border", None))
        ])
    if params.get("min_gray_at_csf_border", None) is not None:
        cargs.extend([
            "--min_gray_at_csf_border",
            str(params.get("min_gray_at_csf_border", None))
        ])
    if params.get("max_csf", None) is not None:
        cargs.extend([
            "--max_csf",
            str(params.get("max_csf", None))
        ])
    return cargs


def mris_autodet_gwstats_outputs(
    params: MrisAutodetGwstatsParameters,
    execution: Execution,
) -> MrisAutodetGwstatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisAutodetGwstatsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mris_autodet_gwstats_execute(
    params: MrisAutodetGwstatsParameters,
    runner: Runner | None = None,
) -> MrisAutodetGwstatsOutputs:
    """
    mris_autodet_gwstats
    
    Manages the computation of the gray/white statistics used to place the white
    and pial surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAutodetGwstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_AUTODET_GWSTATS_METADATA)
    params = execution.params(params)
    cargs = mris_autodet_gwstats_cargs(params, execution)
    ret = mris_autodet_gwstats_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_autodet_gwstats(
    output_file: str,
    t1w_volume: InputPathType,
    wm_volume: InputPathType,
    surf: InputPathType,
    subject: str,
    subjects_dir: str,
    lhsurf: InputPathType | None = None,
    rhsurf: InputPathType | None = None,
    min_border_white: float | None = None,
    max_border_white: float | None = None,
    min_gray_at_white_border: float | None = None,
    max_gray: float | None = None,
    max_gray_at_csf_border: float | None = None,
    min_gray_at_csf_border: float | None = None,
    max_csf: float | None = None,
    runner: Runner | None = None,
) -> MrisAutodetGwstatsOutputs:
    """
    mris_autodet_gwstats
    
    Manages the computation of the gray/white statistics used to place the white
    and pial surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_file: Output text file with stats.
        t1w_volume: T1 weighted volume (usually brain.finalsurfs.mgz).
        wm_volume: White matter volume (usually wm.mgz).
        surf: Surface (usually ?h.orig).
        subject: Subject: reads in brain.finalsurfs.mgz, wm.mgz, lh.orig and\
            rh.orig.
        subjects_dir: SUBJECTS_DIR.
        lhsurf: Left hemisphere surface.
        rhsurf: Right hemisphere surface.
        min_border_white: Minimum border white (MinBW).
        max_border_white: Maximum border white (MaxBW).
        min_gray_at_white_border: Minimum gray at white border (MinGWB).
        max_gray: Maximum gray (MaxG).
        max_gray_at_csf_border: Maximum gray at CSF border (MaxGCSFB).
        min_gray_at_csf_border: Minimum gray at CSF border (MinGCSFB).
        max_csf: Maximum CSF (MaxCSF).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAutodetGwstatsOutputs`).
    """
    params = mris_autodet_gwstats_params(
        output_file=output_file,
        t1w_volume=t1w_volume,
        wm_volume=wm_volume,
        surf=surf,
        lhsurf=lhsurf,
        rhsurf=rhsurf,
        subject=subject,
        subjects_dir=subjects_dir,
        min_border_white=min_border_white,
        max_border_white=max_border_white,
        min_gray_at_white_border=min_gray_at_white_border,
        max_gray=max_gray,
        max_gray_at_csf_border=max_gray_at_csf_border,
        min_gray_at_csf_border=min_gray_at_csf_border,
        max_csf=max_csf,
    )
    return mris_autodet_gwstats_execute(params, runner)


__all__ = [
    "MRIS_AUTODET_GWSTATS_METADATA",
    "MrisAutodetGwstatsOutputs",
    "mris_autodet_gwstats",
    "mris_autodet_gwstats_execute",
    "mris_autodet_gwstats_params",
]
