# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_AVERAGE_CURVATURE_METADATA = Metadata(
    id="3655395907a83c7871c6765bc6caba944ea08664.boutiques",
    name="mris_average_curvature",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisAverageCurvatureParameters = typing.TypedDict('MrisAverageCurvatureParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_average_curvature"]],
    "input_curvature_file": InputPathType,
    "hemi": str,
    "surface": str,
    "subjects": list[str],
    "output_curvature_file": str,
    "summary_stats_flag": bool,
    "output_surface_flag": bool,
})
MrisAverageCurvatureParametersTagged = typing.TypedDict('MrisAverageCurvatureParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_average_curvature"],
    "input_curvature_file": InputPathType,
    "hemi": str,
    "surface": str,
    "subjects": list[str],
    "output_curvature_file": str,
    "summary_stats_flag": bool,
    "output_surface_flag": bool,
})


class MrisAverageCurvatureOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisAverageCurvatureParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_average_curvature_params(
    input_curvature_file: InputPathType,
    hemi: str,
    surface: str,
    subjects: list[str],
    output_curvature_file: str,
    summary_stats_flag: bool = False,
    output_surface_flag: bool = False,
) -> MrisAverageCurvatureParametersTagged:
    """
    Build parameters.
    
    Args:
        input_curvature_file: The input curvature file.
        hemi: Specifies the hemisphere (e.g., lh or rh).
        surface: Specifies the surface.
        subjects: The list of subjects. The output curvature file will be\
            painted onto the last subject specified.
        output_curvature_file: The output curvature file.
        summary_stats_flag: Generate summary statistics and write them into\
            specified directory.
        output_surface_flag: Override the last subject as the output surface.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_average_curvature",
        "input_curvature_file": input_curvature_file,
        "hemi": hemi,
        "surface": surface,
        "subjects": subjects,
        "output_curvature_file": output_curvature_file,
        "summary_stats_flag": summary_stats_flag,
        "output_surface_flag": output_surface_flag,
    }
    return params


def mris_average_curvature_cargs(
    params: MrisAverageCurvatureParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_average_curvature")
    cargs.append(execution.input_file(params.get("input_curvature_file", None)))
    cargs.append(params.get("hemi", None))
    cargs.append(params.get("surface", None))
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output_curvature_file", None))
    if params.get("summary_stats_flag", False):
        cargs.append("-s")
    if params.get("output_surface_flag", False):
        cargs.append("-o")
    return cargs


def mris_average_curvature_outputs(
    params: MrisAverageCurvatureParameters,
    execution: Execution,
) -> MrisAverageCurvatureOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisAverageCurvatureOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_average_curvature_execute(
    params: MrisAverageCurvatureParameters,
    runner: Runner | None = None,
) -> MrisAverageCurvatureOutputs:
    """
    mris_average_curvature
    
    This tool averages curvature data across multiple subjects and generates an
    output curvature file painted onto the last subject specified. It can also
    generate summary statistics if requested.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAverageCurvatureOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_AVERAGE_CURVATURE_METADATA)
    params = execution.params(params)
    cargs = mris_average_curvature_cargs(params, execution)
    ret = mris_average_curvature_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_average_curvature(
    input_curvature_file: InputPathType,
    hemi: str,
    surface: str,
    subjects: list[str],
    output_curvature_file: str,
    summary_stats_flag: bool = False,
    output_surface_flag: bool = False,
    runner: Runner | None = None,
) -> MrisAverageCurvatureOutputs:
    """
    mris_average_curvature
    
    This tool averages curvature data across multiple subjects and generates an
    output curvature file painted onto the last subject specified. It can also
    generate summary statistics if requested.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_curvature_file: The input curvature file.
        hemi: Specifies the hemisphere (e.g., lh or rh).
        surface: Specifies the surface.
        subjects: The list of subjects. The output curvature file will be\
            painted onto the last subject specified.
        output_curvature_file: The output curvature file.
        summary_stats_flag: Generate summary statistics and write them into\
            specified directory.
        output_surface_flag: Override the last subject as the output surface.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisAverageCurvatureOutputs`).
    """
    params = mris_average_curvature_params(
        input_curvature_file=input_curvature_file,
        hemi=hemi,
        surface=surface,
        subjects=subjects,
        output_curvature_file=output_curvature_file,
        summary_stats_flag=summary_stats_flag,
        output_surface_flag=output_surface_flag,
    )
    return mris_average_curvature_execute(params, runner)


__all__ = [
    "MRIS_AVERAGE_CURVATURE_METADATA",
    "MrisAverageCurvatureOutputs",
    "mris_average_curvature",
    "mris_average_curvature_execute",
    "mris_average_curvature_params",
]
