# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_CA_LABEL_METADATA = Metadata(
    id="4e3030103a9aec1b341435a33d42bf9625db48d8.boutiques",
    name="mris_ca_label",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisCaLabelParameters = typing.TypedDict('MrisCaLabelParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_ca_label"]],
    "subject": str,
    "hemi": str,
    "canonsurf": InputPathType,
    "classifier": InputPathType,
    "outputfile": str,
    "seed": typing.NotRequired[float | None],
    "sdir": typing.NotRequired[str | None],
    "orig": typing.NotRequired[str | None],
    "long_flag": bool,
    "r": typing.NotRequired[InputPathType | None],
    "novar_flag": bool,
    "nbrs": typing.NotRequired[float | None],
    "f": typing.NotRequired[float | None],
    "t": typing.NotRequired[InputPathType | None],
    "p": typing.NotRequired[str | None],
    "v": typing.NotRequired[float | None],
    "w": typing.NotRequired[str | None],
    "help_flag": bool,
    "version_flag": bool,
})
MrisCaLabelParametersTagged = typing.TypedDict('MrisCaLabelParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_ca_label"],
    "subject": str,
    "hemi": str,
    "canonsurf": InputPathType,
    "classifier": InputPathType,
    "outputfile": str,
    "seed": typing.NotRequired[float | None],
    "sdir": typing.NotRequired[str | None],
    "orig": typing.NotRequired[str | None],
    "long_flag": bool,
    "r": typing.NotRequired[InputPathType | None],
    "novar_flag": bool,
    "nbrs": typing.NotRequired[float | None],
    "f": typing.NotRequired[float | None],
    "t": typing.NotRequired[InputPathType | None],
    "p": typing.NotRequired[str | None],
    "v": typing.NotRequired[float | None],
    "w": typing.NotRequired[str | None],
    "help_flag": bool,
    "version_flag": bool,
})


class MrisCaLabelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisCaLabelParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    labeled_surface: OutputPathType
    """Labeled cortical surface model"""


def mris_ca_label_params(
    subject: str,
    hemi: str,
    canonsurf: InputPathType,
    classifier: InputPathType,
    outputfile: str,
    seed: float | None = None,
    sdir: str | None = None,
    orig: str | None = None,
    long_flag: bool = False,
    r: InputPathType | None = None,
    novar_flag: bool = False,
    nbrs: float | None = None,
    f: float | None = None,
    t: InputPathType | None = None,
    p: str | None = None,
    v: float | None = None,
    w: str | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
) -> MrisCaLabelParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject ID for labeling.
        hemi: Hemisphere (rh or lh).
        canonsurf: Name of the spherical surface file that describes the\
            registration of a subject's vertices to the average surface.
        classifier: Specify classifier array input file.
        outputfile: Output annotated surface file listing the region label for\
            each vertex.
        seed: Specify the seed for the random number generator.
        sdir: Specify a subjects directory (default=$SUBJECTS_DIR).
        orig: Specify filename of original surface (default=smoothwm).
        long_flag: Refines the initial labeling read-in from -r (default:\
            disabled).
        r: File containing precomputed parcellation.
        novar_flag: Sets all covariance matrices to the identity (default:\
            disabled).
        nbrs: Neighborhood size (default=2).
        f: Applies mode filter <number> times before writing output\
            (default=10).
        t: Specify parcellation table input file (default: none).
        p: Output file containing label probability for each vertex.
        v: Diagnostic level (default=0).
        w: Writes-out snapshots of gibbs process every <number> iterations to\
            <filename> (default=disabled).
        help_flag: Print help information.
        version_flag: Print version information.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_ca_label",
        "subject": subject,
        "hemi": hemi,
        "canonsurf": canonsurf,
        "classifier": classifier,
        "outputfile": outputfile,
        "long_flag": long_flag,
        "novar_flag": novar_flag,
        "help_flag": help_flag,
        "version_flag": version_flag,
    }
    if seed is not None:
        params["seed"] = seed
    if sdir is not None:
        params["sdir"] = sdir
    if orig is not None:
        params["orig"] = orig
    if r is not None:
        params["r"] = r
    if nbrs is not None:
        params["nbrs"] = nbrs
    if f is not None:
        params["f"] = f
    if t is not None:
        params["t"] = t
    if p is not None:
        params["p"] = p
    if v is not None:
        params["v"] = v
    if w is not None:
        params["w"] = w
    return params


def mris_ca_label_cargs(
    params: MrisCaLabelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_ca_label")
    cargs.append(params.get("subject", None))
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("canonsurf", None)))
    cargs.append(execution.input_file(params.get("classifier", None)))
    cargs.append(params.get("outputfile", None))
    if params.get("seed", None) is not None:
        cargs.extend([
            "-seed",
            str(params.get("seed", None))
        ])
    if params.get("sdir", None) is not None:
        cargs.extend([
            "-sdir",
            params.get("sdir", None)
        ])
    if params.get("orig", None) is not None:
        cargs.extend([
            "-orig",
            params.get("orig", None)
        ])
    if params.get("long_flag", False):
        cargs.append("-long")
    if params.get("r", None) is not None:
        cargs.extend([
            "-r",
            execution.input_file(params.get("r", None))
        ])
    if params.get("novar_flag", False):
        cargs.append("-novar")
    if params.get("nbrs", None) is not None:
        cargs.extend([
            "-nbrs",
            str(params.get("nbrs", None))
        ])
    if params.get("f", None) is not None:
        cargs.extend([
            "-f",
            str(params.get("f", None))
        ])
    if params.get("t", None) is not None:
        cargs.extend([
            "-t",
            execution.input_file(params.get("t", None))
        ])
    if params.get("p", None) is not None:
        cargs.extend([
            "-p",
            params.get("p", None)
        ])
    if params.get("v", None) is not None:
        cargs.extend([
            "-v",
            str(params.get("v", None))
        ])
    if params.get("w", None) is not None:
        cargs.extend([
            "-w",
            params.get("w", None)
        ])
    if params.get("help_flag", False):
        cargs.append("--help")
    if params.get("version_flag", False):
        cargs.append("--version")
    return cargs


def mris_ca_label_outputs(
    params: MrisCaLabelParameters,
    execution: Execution,
) -> MrisCaLabelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisCaLabelOutputs(
        root=execution.output_file("."),
        labeled_surface=execution.output_file(params.get("outputfile", None)),
    )
    return ret


def mris_ca_label_execute(
    params: MrisCaLabelParameters,
    runner: Runner | None = None,
) -> MrisCaLabelOutputs:
    """
    mris_ca_label
    
    Produces an annotation file in which each cortical surface vertex is
    assigned a neuroanatomical label using a previously-prepared atlas file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCaLabelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_CA_LABEL_METADATA)
    params = execution.params(params)
    cargs = mris_ca_label_cargs(params, execution)
    ret = mris_ca_label_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_ca_label(
    subject: str,
    hemi: str,
    canonsurf: InputPathType,
    classifier: InputPathType,
    outputfile: str,
    seed: float | None = None,
    sdir: str | None = None,
    orig: str | None = None,
    long_flag: bool = False,
    r: InputPathType | None = None,
    novar_flag: bool = False,
    nbrs: float | None = None,
    f: float | None = None,
    t: InputPathType | None = None,
    p: str | None = None,
    v: float | None = None,
    w: str | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> MrisCaLabelOutputs:
    """
    mris_ca_label
    
    Produces an annotation file in which each cortical surface vertex is
    assigned a neuroanatomical label using a previously-prepared atlas file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject ID for labeling.
        hemi: Hemisphere (rh or lh).
        canonsurf: Name of the spherical surface file that describes the\
            registration of a subject's vertices to the average surface.
        classifier: Specify classifier array input file.
        outputfile: Output annotated surface file listing the region label for\
            each vertex.
        seed: Specify the seed for the random number generator.
        sdir: Specify a subjects directory (default=$SUBJECTS_DIR).
        orig: Specify filename of original surface (default=smoothwm).
        long_flag: Refines the initial labeling read-in from -r (default:\
            disabled).
        r: File containing precomputed parcellation.
        novar_flag: Sets all covariance matrices to the identity (default:\
            disabled).
        nbrs: Neighborhood size (default=2).
        f: Applies mode filter <number> times before writing output\
            (default=10).
        t: Specify parcellation table input file (default: none).
        p: Output file containing label probability for each vertex.
        v: Diagnostic level (default=0).
        w: Writes-out snapshots of gibbs process every <number> iterations to\
            <filename> (default=disabled).
        help_flag: Print help information.
        version_flag: Print version information.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCaLabelOutputs`).
    """
    params = mris_ca_label_params(
        subject=subject,
        hemi=hemi,
        canonsurf=canonsurf,
        classifier=classifier,
        outputfile=outputfile,
        seed=seed,
        sdir=sdir,
        orig=orig,
        long_flag=long_flag,
        r=r,
        novar_flag=novar_flag,
        nbrs=nbrs,
        f=f,
        t=t,
        p=p,
        v=v,
        w=w,
        help_flag=help_flag,
        version_flag=version_flag,
    )
    return mris_ca_label_execute(params, runner)


__all__ = [
    "MRIS_CA_LABEL_METADATA",
    "MrisCaLabelOutputs",
    "mris_ca_label",
    "mris_ca_label_execute",
    "mris_ca_label_params",
]
