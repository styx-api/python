# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_COMPUTE_ACORR_METADATA = Metadata(
    id="0e07071f4f37f6918a11761e3deabc99cac8c12d.boutiques",
    name="mris_compute_acorr",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisComputeAcorrParameters = typing.TypedDict('MrisComputeAcorrParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_compute_acorr"]],
    "output_subject": str,
    "hemi": str,
    "surf": InputPathType,
    "curv": InputPathType,
    "c1_subjects": list[str],
    "c2_subjects": list[str],
})
MrisComputeAcorrParametersTagged = typing.TypedDict('MrisComputeAcorrParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_compute_acorr"],
    "output_subject": str,
    "hemi": str,
    "surf": InputPathType,
    "curv": InputPathType,
    "c1_subjects": list[str],
    "c2_subjects": list[str],
})


class MrisComputeAcorrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisComputeAcorrParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_compute_acorr_params(
    output_subject: str,
    hemi: str,
    surf: InputPathType,
    curv: InputPathType,
    c1_subjects: list[str],
    c2_subjects: list[str],
) -> MrisComputeAcorrParametersTagged:
    """
    Build parameters.
    
    Args:
        output_subject: The output subject file.
        hemi: Specify the hemisphere for processing.
        surf: The surface file which must be a spherical surface suitable for\
            computing geodesics.
        curv: The input curvature file.
        c1_subjects: List of subjects from one class.
        c2_subjects: List of subjects from another class.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_compute_acorr",
        "output_subject": output_subject,
        "hemi": hemi,
        "surf": surf,
        "curv": curv,
        "c1_subjects": c1_subjects,
        "c2_subjects": c2_subjects,
    }
    return params


def mris_compute_acorr_cargs(
    params: MrisComputeAcorrParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_compute_acorr")
    cargs.extend([
        "-o",
        params.get("output_subject", None)
    ])
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("surf", None)))
    cargs.append(execution.input_file(params.get("curv", None)))
    cargs.extend(params.get("c1_subjects", None))
    cargs.extend(params.get("c2_subjects", None))
    return cargs


def mris_compute_acorr_outputs(
    params: MrisComputeAcorrParameters,
    execution: Execution,
) -> MrisComputeAcorrOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisComputeAcorrOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_compute_acorr_execute(
    params: MrisComputeAcorrParameters,
    runner: Runner | None = None,
) -> MrisComputeAcorrOutputs:
    """
    mris_compute_acorr
    
    Compute the autocorrelation function of a curvature file on a spherical
    surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisComputeAcorrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_COMPUTE_ACORR_METADATA)
    params = execution.params(params)
    cargs = mris_compute_acorr_cargs(params, execution)
    ret = mris_compute_acorr_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_compute_acorr(
    output_subject: str,
    hemi: str,
    surf: InputPathType,
    curv: InputPathType,
    c1_subjects: list[str],
    c2_subjects: list[str],
    runner: Runner | None = None,
) -> MrisComputeAcorrOutputs:
    """
    mris_compute_acorr
    
    Compute the autocorrelation function of a curvature file on a spherical
    surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_subject: The output subject file.
        hemi: Specify the hemisphere for processing.
        surf: The surface file which must be a spherical surface suitable for\
            computing geodesics.
        curv: The input curvature file.
        c1_subjects: List of subjects from one class.
        c2_subjects: List of subjects from another class.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisComputeAcorrOutputs`).
    """
    params = mris_compute_acorr_params(
        output_subject=output_subject,
        hemi=hemi,
        surf=surf,
        curv=curv,
        c1_subjects=c1_subjects,
        c2_subjects=c2_subjects,
    )
    return mris_compute_acorr_execute(params, runner)


__all__ = [
    "MRIS_COMPUTE_ACORR_METADATA",
    "MrisComputeAcorrOutputs",
    "mris_compute_acorr",
    "mris_compute_acorr_execute",
    "mris_compute_acorr_params",
]
