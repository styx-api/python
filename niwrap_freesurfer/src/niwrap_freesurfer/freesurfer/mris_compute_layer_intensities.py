# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_COMPUTE_LAYER_INTENSITIES_METADATA = Metadata(
    id="2a0eb3ef93dc3fd21876edfb530230812af2e366.boutiques",
    name="mris_compute_layer_intensities",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisComputeLayerIntensitiesParameters = typing.TypedDict('MrisComputeLayerIntensitiesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_compute_layer_intensities"]],
    "input_intensity_volume": InputPathType,
    "layer_volume_fractions_file": InputPathType,
    "input_surface": InputPathType,
    "output_overlay": str,
})
MrisComputeLayerIntensitiesParametersTagged = typing.TypedDict('MrisComputeLayerIntensitiesParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_compute_layer_intensities"],
    "input_intensity_volume": InputPathType,
    "layer_volume_fractions_file": InputPathType,
    "input_surface": InputPathType,
    "output_overlay": str,
})


class MrisComputeLayerIntensitiesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisComputeLayerIntensitiesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_overlay_file: OutputPathType
    """The output overlay file generated by the tool."""


def mris_compute_layer_intensities_params(
    input_intensity_volume: InputPathType,
    layer_volume_fractions_file: InputPathType,
    input_surface: InputPathType,
    output_overlay: str,
) -> MrisComputeLayerIntensitiesParametersTagged:
    """
    Build parameters.
    
    Args:
        input_intensity_volume: The input intensity volume file.
        layer_volume_fractions_file: The layer volume fractions file.
        input_surface: The input surface file for layer intensity computation.
        output_overlay: The output file where the overlay will be saved.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_compute_layer_intensities",
        "input_intensity_volume": input_intensity_volume,
        "layer_volume_fractions_file": layer_volume_fractions_file,
        "input_surface": input_surface,
        "output_overlay": output_overlay,
    }
    return params


def mris_compute_layer_intensities_cargs(
    params: MrisComputeLayerIntensitiesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_compute_layer_intensities")
    cargs.append(execution.input_file(params.get("input_intensity_volume", None)))
    cargs.append(execution.input_file(params.get("layer_volume_fractions_file", None)))
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(params.get("output_overlay", None))
    return cargs


def mris_compute_layer_intensities_outputs(
    params: MrisComputeLayerIntensitiesParameters,
    execution: Execution,
) -> MrisComputeLayerIntensitiesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisComputeLayerIntensitiesOutputs(
        root=execution.output_file("."),
        output_overlay_file=execution.output_file(params.get("output_overlay", None)),
    )
    return ret


def mris_compute_layer_intensities_execute(
    params: MrisComputeLayerIntensitiesParameters,
    runner: Runner | None = None,
) -> MrisComputeLayerIntensitiesOutputs:
    """
    mris_compute_layer_intensities
    
    Computes intensity overlays for specified cortical layers based on input
    volumes and surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisComputeLayerIntensitiesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_COMPUTE_LAYER_INTENSITIES_METADATA)
    params = execution.params(params)
    cargs = mris_compute_layer_intensities_cargs(params, execution)
    ret = mris_compute_layer_intensities_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_compute_layer_intensities(
    input_intensity_volume: InputPathType,
    layer_volume_fractions_file: InputPathType,
    input_surface: InputPathType,
    output_overlay: str,
    runner: Runner | None = None,
) -> MrisComputeLayerIntensitiesOutputs:
    """
    mris_compute_layer_intensities
    
    Computes intensity overlays for specified cortical layers based on input
    volumes and surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_intensity_volume: The input intensity volume file.
        layer_volume_fractions_file: The layer volume fractions file.
        input_surface: The input surface file for layer intensity computation.
        output_overlay: The output file where the overlay will be saved.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisComputeLayerIntensitiesOutputs`).
    """
    params = mris_compute_layer_intensities_params(
        input_intensity_volume=input_intensity_volume,
        layer_volume_fractions_file=layer_volume_fractions_file,
        input_surface=input_surface,
        output_overlay=output_overlay,
    )
    return mris_compute_layer_intensities_execute(params, runner)


__all__ = [
    "MRIS_COMPUTE_LAYER_INTENSITIES_METADATA",
    "MrisComputeLayerIntensitiesOutputs",
    "mris_compute_layer_intensities",
    "mris_compute_layer_intensities_execute",
    "mris_compute_layer_intensities_params",
]
