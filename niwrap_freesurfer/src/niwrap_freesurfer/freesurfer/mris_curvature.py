# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_CURVATURE_METADATA = Metadata(
    id="e92c22042bd610ff8fb2a3672334f4c3c5724995.boutiques",
    name="mris_curvature",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisCurvatureParameters = typing.TypedDict('MrisCurvatureParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_curvature"]],
    "save_curvature_files": bool,
    "max_principal_curvature": bool,
    "mgh_output_format": bool,
    "min_principal_curvature": bool,
    "iterative_averages": typing.NotRequired[float | None],
    "neighborhood_size": typing.NotRequired[float | None],
    "random_seed": typing.NotRequired[float | None],
    "curvatures": typing.NotRequired[str | None],
    "H_curvature": typing.NotRequired[str | None],
    "K_curvature": typing.NotRequired[str | None],
    "k1_curvature": typing.NotRequired[str | None],
    "k2_curvature": typing.NotRequired[str | None],
    "k1k2_curvature": typing.NotRequired[str | None],
    "input_surface": InputPathType,
})
MrisCurvatureParametersTagged = typing.TypedDict('MrisCurvatureParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_curvature"],
    "save_curvature_files": bool,
    "max_principal_curvature": bool,
    "mgh_output_format": bool,
    "min_principal_curvature": bool,
    "iterative_averages": typing.NotRequired[float | None],
    "neighborhood_size": typing.NotRequired[float | None],
    "random_seed": typing.NotRequired[float | None],
    "curvatures": typing.NotRequired[str | None],
    "H_curvature": typing.NotRequired[str | None],
    "K_curvature": typing.NotRequired[str | None],
    "k1_curvature": typing.NotRequired[str | None],
    "k2_curvature": typing.NotRequired[str | None],
    "k1k2_curvature": typing.NotRequired[str | None],
    "input_surface": InputPathType,
})


class MrisCurvatureOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisCurvatureParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_curvature_params(
    input_surface: InputPathType,
    save_curvature_files: bool = False,
    max_principal_curvature: bool = False,
    mgh_output_format: bool = False,
    min_principal_curvature: bool = False,
    iterative_averages: float | None = None,
    neighborhood_size: float | None = None,
    random_seed: float | None = None,
    curvatures: str | None = None,
    h_curvature: str | None = None,
    k_curvature: str | None = None,
    k1_curvature: str | None = None,
    k2_curvature: str | None = None,
    k1k2_curvature: str | None = None,
) -> MrisCurvatureParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file.
        save_curvature_files: Save curvature files (will only generate screen\
            output without this option).
        max_principal_curvature: Save 1st (max) principal curvature in\
            ?h.<surface>.max file.
        mgh_output_format: Save outputs in .mgz format.
        min_principal_curvature: Save 2nd (min) principal curvature in\
            ?h.<surface>.min file.
        iterative_averages: Perform <avgs> iterative averages of curvature\
            measure before saving.
        neighborhood_size: Set neighborhood size to nbrs.
        random_seed: Set random number generator to seed N.
        curvatures: Stand-alone option to save H (mean), K (gaussian), k1, and\
            k2 curvatures to stem.{curvname}.mgz.
        h_curvature: Stand-alone option to save H mean curvature to stem.H.mgz.
        k_curvature: Stand-alone option to save K gaussian curvature to\
            stem.K.mgz.
        k1_curvature: Stand-alone option to save k1 (primary principle)\
            curvature to stem.k1.mgz.
        k2_curvature: Stand-alone option to save k2 (secondary principle)\
            curvature to stem.k2.mgz.
        k1k2_curvature: Stand-alone option to save k1 and k2 curvature to\
            stem.{k1,k2}.mgz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_curvature",
        "save_curvature_files": save_curvature_files,
        "max_principal_curvature": max_principal_curvature,
        "mgh_output_format": mgh_output_format,
        "min_principal_curvature": min_principal_curvature,
        "input_surface": input_surface,
    }
    if iterative_averages is not None:
        params["iterative_averages"] = iterative_averages
    if neighborhood_size is not None:
        params["neighborhood_size"] = neighborhood_size
    if random_seed is not None:
        params["random_seed"] = random_seed
    if curvatures is not None:
        params["curvatures"] = curvatures
    if h_curvature is not None:
        params["H_curvature"] = h_curvature
    if k_curvature is not None:
        params["K_curvature"] = k_curvature
    if k1_curvature is not None:
        params["k1_curvature"] = k1_curvature
    if k2_curvature is not None:
        params["k2_curvature"] = k2_curvature
    if k1k2_curvature is not None:
        params["k1k2_curvature"] = k1k2_curvature
    return params


def mris_curvature_cargs(
    params: MrisCurvatureParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_curvature")
    if params.get("save_curvature_files", False):
        cargs.append("-w")
    if params.get("max_principal_curvature", False):
        cargs.append("-max")
    if params.get("mgh_output_format", False):
        cargs.append("-mgh")
    if params.get("min_principal_curvature", False):
        cargs.append("-min")
    if params.get("iterative_averages", None) is not None:
        cargs.extend([
            "-a",
            str(params.get("iterative_averages", None))
        ])
    if params.get("neighborhood_size", None) is not None:
        cargs.extend([
            "-nbrs",
            str(params.get("neighborhood_size", None))
        ])
    if params.get("random_seed", None) is not None:
        cargs.extend([
            "-seed",
            str(params.get("random_seed", None))
        ])
    if params.get("curvatures", None) is not None:
        cargs.extend([
            "-curvs",
            params.get("curvatures", None)
        ])
    if params.get("H_curvature", None) is not None:
        cargs.extend([
            "-H",
            params.get("H_curvature", None)
        ])
    if params.get("K_curvature", None) is not None:
        cargs.extend([
            "-K",
            params.get("K_curvature", None)
        ])
    if params.get("k1_curvature", None) is not None:
        cargs.extend([
            "-k1",
            params.get("k1_curvature", None)
        ])
    if params.get("k2_curvature", None) is not None:
        cargs.extend([
            "-k2",
            params.get("k2_curvature", None)
        ])
    if params.get("k1k2_curvature", None) is not None:
        cargs.extend([
            "-k1k2",
            params.get("k1k2_curvature", None)
        ])
    cargs.append(execution.input_file(params.get("input_surface", None)))
    return cargs


def mris_curvature_outputs(
    params: MrisCurvatureParameters,
    execution: Execution,
) -> MrisCurvatureOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisCurvatureOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_curvature_execute(
    params: MrisCurvatureParameters,
    runner: Runner | None = None,
) -> MrisCurvatureOutputs:
    """
    mris_curvature
    
    Compute the second fundamental form of a cortical surface to generate mean
    and Gaussian curvature.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCurvatureOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_CURVATURE_METADATA)
    params = execution.params(params)
    cargs = mris_curvature_cargs(params, execution)
    ret = mris_curvature_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_curvature(
    input_surface: InputPathType,
    save_curvature_files: bool = False,
    max_principal_curvature: bool = False,
    mgh_output_format: bool = False,
    min_principal_curvature: bool = False,
    iterative_averages: float | None = None,
    neighborhood_size: float | None = None,
    random_seed: float | None = None,
    curvatures: str | None = None,
    h_curvature: str | None = None,
    k_curvature: str | None = None,
    k1_curvature: str | None = None,
    k2_curvature: str | None = None,
    k1k2_curvature: str | None = None,
    runner: Runner | None = None,
) -> MrisCurvatureOutputs:
    """
    mris_curvature
    
    Compute the second fundamental form of a cortical surface to generate mean
    and Gaussian curvature.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file.
        save_curvature_files: Save curvature files (will only generate screen\
            output without this option).
        max_principal_curvature: Save 1st (max) principal curvature in\
            ?h.<surface>.max file.
        mgh_output_format: Save outputs in .mgz format.
        min_principal_curvature: Save 2nd (min) principal curvature in\
            ?h.<surface>.min file.
        iterative_averages: Perform <avgs> iterative averages of curvature\
            measure before saving.
        neighborhood_size: Set neighborhood size to nbrs.
        random_seed: Set random number generator to seed N.
        curvatures: Stand-alone option to save H (mean), K (gaussian), k1, and\
            k2 curvatures to stem.{curvname}.mgz.
        h_curvature: Stand-alone option to save H mean curvature to stem.H.mgz.
        k_curvature: Stand-alone option to save K gaussian curvature to\
            stem.K.mgz.
        k1_curvature: Stand-alone option to save k1 (primary principle)\
            curvature to stem.k1.mgz.
        k2_curvature: Stand-alone option to save k2 (secondary principle)\
            curvature to stem.k2.mgz.
        k1k2_curvature: Stand-alone option to save k1 and k2 curvature to\
            stem.{k1,k2}.mgz.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisCurvatureOutputs`).
    """
    params = mris_curvature_params(
        save_curvature_files=save_curvature_files,
        max_principal_curvature=max_principal_curvature,
        mgh_output_format=mgh_output_format,
        min_principal_curvature=min_principal_curvature,
        iterative_averages=iterative_averages,
        neighborhood_size=neighborhood_size,
        random_seed=random_seed,
        curvatures=curvatures,
        h_curvature=h_curvature,
        k_curvature=k_curvature,
        k1_curvature=k1_curvature,
        k2_curvature=k2_curvature,
        k1k2_curvature=k1k2_curvature,
        input_surface=input_surface,
    )
    return mris_curvature_execute(params, runner)


__all__ = [
    "MRIS_CURVATURE_METADATA",
    "MrisCurvatureOutputs",
    "mris_curvature",
    "mris_curvature_execute",
    "mris_curvature_params",
]
