# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_DISTANCE_TRANSFORM_METADATA = Metadata(
    id="c8724f1b368418a2816a0e1c0b66d8c2321403ff.boutiques",
    name="mris_distance_transform",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisDistanceTransformParameters = typing.TypedDict('MrisDistanceTransformParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_distance_transform"]],
    "surface": InputPathType,
    "label": InputPathType,
    "mode": typing.Literal["signed", "unsigned", "outside"],
    "output_file": str,
    "anterior": typing.NotRequired[float | None],
    "posterior": typing.NotRequired[float | None],
    "divide": typing.NotRequired[float | None],
    "olabel": bool,
})
MrisDistanceTransformParametersTagged = typing.TypedDict('MrisDistanceTransformParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_distance_transform"],
    "surface": InputPathType,
    "label": InputPathType,
    "mode": typing.Literal["signed", "unsigned", "outside"],
    "output_file": str,
    "anterior": typing.NotRequired[float | None],
    "posterior": typing.NotRequired[float | None],
    "divide": typing.NotRequired[float | None],
    "olabel": bool,
})


class MrisDistanceTransformOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisDistanceTransformParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    result_file: OutputPathType
    """Resulting file after applying the distance transform."""


def mris_distance_transform_params(
    surface: InputPathType,
    label: InputPathType,
    mode: typing.Literal["signed", "unsigned", "outside"],
    output_file: str,
    anterior: float | None = None,
    posterior: float | None = None,
    divide: float | None = None,
    olabel: bool = False,
) -> MrisDistanceTransformParametersTagged:
    """
    Build parameters.
    
    Args:
        surface: Surface file for processing.
        label: Label file to apply distance transform.
        mode: Mode of the distance transform, can be 'signed', 'unsigned', or\
            'outside'.
        output_file: Output file for the distance transform results.
        anterior: Only use anteriormost <dist> portion of the label.
        posterior: Only use posteriormost <dist> portion of the label.
        divide: Divide label into <n> units along primary eigendirection.
        olabel: Output label subdivisions.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_distance_transform",
        "surface": surface,
        "label": label,
        "mode": mode,
        "output_file": output_file,
        "olabel": olabel,
    }
    if anterior is not None:
        params["anterior"] = anterior
    if posterior is not None:
        params["posterior"] = posterior
    if divide is not None:
        params["divide"] = divide
    return params


def mris_distance_transform_cargs(
    params: MrisDistanceTransformParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_distance_transform")
    cargs.append(execution.input_file(params.get("surface", None)))
    cargs.append(execution.input_file(params.get("label", None)))
    cargs.append(params.get("mode", None))
    cargs.append(params.get("output_file", None))
    if params.get("anterior", None) is not None:
        cargs.extend([
            "-anterior",
            str(params.get("anterior", None))
        ])
    if params.get("posterior", None) is not None:
        cargs.extend([
            "-posterior",
            str(params.get("posterior", None))
        ])
    if params.get("divide", None) is not None:
        cargs.extend([
            "-divide",
            str(params.get("divide", None))
        ])
    if params.get("olabel", False):
        cargs.append("-olabel")
    return cargs


def mris_distance_transform_outputs(
    params: MrisDistanceTransformParameters,
    execution: Execution,
) -> MrisDistanceTransformOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisDistanceTransformOutputs(
        root=execution.output_file("."),
        result_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mris_distance_transform_execute(
    params: MrisDistanceTransformParameters,
    runner: Runner | None = None,
) -> MrisDistanceTransformOutputs:
    """
    mris_distance_transform
    
    Computes the distance transform of a label on the surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisDistanceTransformOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_DISTANCE_TRANSFORM_METADATA)
    params = execution.params(params)
    cargs = mris_distance_transform_cargs(params, execution)
    ret = mris_distance_transform_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_distance_transform(
    surface: InputPathType,
    label: InputPathType,
    mode: typing.Literal["signed", "unsigned", "outside"],
    output_file: str,
    anterior: float | None = None,
    posterior: float | None = None,
    divide: float | None = None,
    olabel: bool = False,
    runner: Runner | None = None,
) -> MrisDistanceTransformOutputs:
    """
    mris_distance_transform
    
    Computes the distance transform of a label on the surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surface: Surface file for processing.
        label: Label file to apply distance transform.
        mode: Mode of the distance transform, can be 'signed', 'unsigned', or\
            'outside'.
        output_file: Output file for the distance transform results.
        anterior: Only use anteriormost <dist> portion of the label.
        posterior: Only use posteriormost <dist> portion of the label.
        divide: Divide label into <n> units along primary eigendirection.
        olabel: Output label subdivisions.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisDistanceTransformOutputs`).
    """
    params = mris_distance_transform_params(
        surface=surface,
        label=label,
        mode=mode,
        output_file=output_file,
        anterior=anterior,
        posterior=posterior,
        divide=divide,
        olabel=olabel,
    )
    return mris_distance_transform_execute(params, runner)


__all__ = [
    "MRIS_DISTANCE_TRANSFORM_METADATA",
    "MrisDistanceTransformOutputs",
    "mris_distance_transform",
    "mris_distance_transform_execute",
    "mris_distance_transform_params",
]
