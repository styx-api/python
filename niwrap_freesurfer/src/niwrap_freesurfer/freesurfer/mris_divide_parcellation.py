# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_DIVIDE_PARCELLATION_METADATA = Metadata(
    id="073744a9dd46d03ed520a3c051ec5f427a86f468.boutiques",
    name="mris_divide_parcellation",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisDivideParcellationParameters = typing.TypedDict('MrisDivideParcellationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_divide_parcellation"]],
    "subject": str,
    "hemi": str,
    "sourceannot": InputPathType,
    "splitfile_or_areathresh": str,
    "outannot": str,
    "scale": typing.NotRequired[float | None],
    "label_name": typing.NotRequired[str | None],
})
MrisDivideParcellationParametersTagged = typing.TypedDict('MrisDivideParcellationParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_divide_parcellation"],
    "subject": str,
    "hemi": str,
    "sourceannot": InputPathType,
    "splitfile_or_areathresh": str,
    "outannot": str,
    "scale": typing.NotRequired[float | None],
    "label_name": typing.NotRequired[str | None],
})


class MrisDivideParcellationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisDivideParcellationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outannot_file: OutputPathType
    """The resulting annotation file with divided labels."""


def mris_divide_parcellation_params(
    subject: str,
    hemi: str,
    sourceannot: InputPathType,
    splitfile_or_areathresh: str,
    outannot: str,
    scale: float | None = None,
    label_name: str | None = None,
) -> MrisDivideParcellationParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: The subject identifier.
        hemi: The hemisphere identifier, e.g., left (lh) or right (rh).
        sourceannot: The source annotation file.
        splitfile_or_areathresh: Either a splitfile specifying divisions or an\
            area threshold in mm^2.
        outannot: The output annotation file name.
        scale: Specify offset scaling for rgb values (default=20).
        label_name: Only process the label <label name> (not implemented yet).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_divide_parcellation",
        "subject": subject,
        "hemi": hemi,
        "sourceannot": sourceannot,
        "splitfile_or_areathresh": splitfile_or_areathresh,
        "outannot": outannot,
    }
    if scale is not None:
        params["scale"] = scale
    if label_name is not None:
        params["label_name"] = label_name
    return params


def mris_divide_parcellation_cargs(
    params: MrisDivideParcellationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_divide_parcellation")
    cargs.append(params.get("subject", None))
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("sourceannot", None)))
    cargs.append(params.get("splitfile_or_areathresh", None))
    cargs.append(params.get("outannot", None))
    if params.get("scale", None) is not None:
        cargs.extend([
            "-scale",
            str(params.get("scale", None))
        ])
    if params.get("label_name", None) is not None:
        cargs.extend([
            "-l",
            params.get("label_name", None)
        ])
    return cargs


def mris_divide_parcellation_outputs(
    params: MrisDivideParcellationParameters,
    execution: Execution,
) -> MrisDivideParcellationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisDivideParcellationOutputs(
        root=execution.output_file("."),
        outannot_file=execution.output_file(params.get("outannot", None)),
    )
    return ret


def mris_divide_parcellation_execute(
    params: MrisDivideParcellationParameters,
    runner: Runner | None = None,
) -> MrisDivideParcellationOutputs:
    """
    mris_divide_parcellation
    
    Divides one or more parcellations into divisions perpendicular to the long
    axis of the label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisDivideParcellationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_DIVIDE_PARCELLATION_METADATA)
    params = execution.params(params)
    cargs = mris_divide_parcellation_cargs(params, execution)
    ret = mris_divide_parcellation_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_divide_parcellation(
    subject: str,
    hemi: str,
    sourceannot: InputPathType,
    splitfile_or_areathresh: str,
    outannot: str,
    scale: float | None = None,
    label_name: str | None = None,
    runner: Runner | None = None,
) -> MrisDivideParcellationOutputs:
    """
    mris_divide_parcellation
    
    Divides one or more parcellations into divisions perpendicular to the long
    axis of the label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: The subject identifier.
        hemi: The hemisphere identifier, e.g., left (lh) or right (rh).
        sourceannot: The source annotation file.
        splitfile_or_areathresh: Either a splitfile specifying divisions or an\
            area threshold in mm^2.
        outannot: The output annotation file name.
        scale: Specify offset scaling for rgb values (default=20).
        label_name: Only process the label <label name> (not implemented yet).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisDivideParcellationOutputs`).
    """
    params = mris_divide_parcellation_params(
        subject=subject,
        hemi=hemi,
        sourceannot=sourceannot,
        splitfile_or_areathresh=splitfile_or_areathresh,
        outannot=outannot,
        scale=scale,
        label_name=label_name,
    )
    return mris_divide_parcellation_execute(params, runner)


__all__ = [
    "MRIS_DIVIDE_PARCELLATION_METADATA",
    "MrisDivideParcellationOutputs",
    "mris_divide_parcellation",
    "mris_divide_parcellation_execute",
    "mris_divide_parcellation_params",
]
