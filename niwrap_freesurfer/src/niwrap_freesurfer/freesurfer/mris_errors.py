# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_ERRORS_METADATA = Metadata(
    id="9d478a5004349307c376e9fd6df896b2d77765f1.boutiques",
    name="mris_errors",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisErrorsParameters = typing.TypedDict('MrisErrorsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_errors"]],
    "input_image_file": InputPathType,
})
MrisErrorsParametersTagged = typing.TypedDict('MrisErrorsParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_errors"],
    "input_image_file": InputPathType,
})


class MrisErrorsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisErrorsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_errors_params(
    input_image_file: InputPathType,
) -> MrisErrorsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image_file: Input image file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_errors",
        "input_image_file": input_image_file,
    }
    return params


def mris_errors_cargs(
    params: MrisErrorsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_errors")
    cargs.append(execution.input_file(params.get("input_image_file", None)))
    return cargs


def mris_errors_outputs(
    params: MrisErrorsParameters,
    execution: Execution,
) -> MrisErrorsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisErrorsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_errors_execute(
    params: MrisErrorsParameters,
    runner: Runner | None = None,
) -> MrisErrorsOutputs:
    """
    mris_errors
    
    This program will unfold an MRI on the surface of an ellipsoid.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisErrorsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_ERRORS_METADATA)
    params = execution.params(params)
    cargs = mris_errors_cargs(params, execution)
    ret = mris_errors_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_errors(
    input_image_file: InputPathType,
    runner: Runner | None = None,
) -> MrisErrorsOutputs:
    """
    mris_errors
    
    This program will unfold an MRI on the surface of an ellipsoid.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image_file: Input image file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisErrorsOutputs`).
    """
    params = mris_errors_params(
        input_image_file=input_image_file,
    )
    return mris_errors_execute(params, runner)


__all__ = [
    "MRIS_ERRORS_METADATA",
    "MrisErrorsOutputs",
    "mris_errors",
    "mris_errors_execute",
    "mris_errors_params",
]
