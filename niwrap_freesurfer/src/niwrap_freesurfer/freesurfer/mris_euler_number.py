# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_EULER_NUMBER_METADATA = Metadata(
    id="72b1fab042aa7159acf7f9f958b916daac555d65.boutiques",
    name="mris_euler_number",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisEulerNumberParameters = typing.TypedDict('MrisEulerNumberParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_euler_number"]],
    "input_surface": InputPathType,
    "output_file": typing.NotRequired[str | None],
})
MrisEulerNumberParametersTagged = typing.TypedDict('MrisEulerNumberParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_euler_number"],
    "input_surface": InputPathType,
    "output_file": typing.NotRequired[str | None],
})


class MrisEulerNumberOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisEulerNumberParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType | None
    """File where the number of holes is written"""


def mris_euler_number_params(
    input_surface: InputPathType,
    output_file: str | None = None,
) -> MrisEulerNumberParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file.
        output_file: Write number of holes to output file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_euler_number",
        "input_surface": input_surface,
    }
    if output_file is not None:
        params["output_file"] = output_file
    return params


def mris_euler_number_cargs(
    params: MrisEulerNumberParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_euler_number")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    if params.get("output_file", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_file", None)
        ])
    return cargs


def mris_euler_number_outputs(
    params: MrisEulerNumberParameters,
    execution: Execution,
) -> MrisEulerNumberOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisEulerNumberOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def mris_euler_number_execute(
    params: MrisEulerNumberParameters,
    runner: Runner | None = None,
) -> MrisEulerNumberOutputs:
    """
    mris_euler_number
    
    This program computes EulerNumber for a cortical surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisEulerNumberOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_EULER_NUMBER_METADATA)
    params = execution.params(params)
    cargs = mris_euler_number_cargs(params, execution)
    ret = mris_euler_number_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_euler_number(
    input_surface: InputPathType,
    output_file: str | None = None,
    runner: Runner | None = None,
) -> MrisEulerNumberOutputs:
    """
    mris_euler_number
    
    This program computes EulerNumber for a cortical surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file.
        output_file: Write number of holes to output file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisEulerNumberOutputs`).
    """
    params = mris_euler_number_params(
        input_surface=input_surface,
        output_file=output_file,
    )
    return mris_euler_number_execute(params, runner)


__all__ = [
    "MRIS_EULER_NUMBER_METADATA",
    "MrisEulerNumberOutputs",
    "mris_euler_number",
    "mris_euler_number_execute",
    "mris_euler_number_params",
]
