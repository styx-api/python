# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_FILL_METADATA = Metadata(
    id="54d3ccd6e5feb1b210594124e0c140fe183541aa.boutiques",
    name="mris_fill",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisFillParameters = typing.TypedDict('MrisFillParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_fill"]],
    "resolution": typing.NotRequired[float | None],
    "conform": bool,
    "input_surface": InputPathType,
    "output_volume": str,
})
MrisFillParametersTagged = typing.TypedDict('MrisFillParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_fill"],
    "resolution": typing.NotRequired[float | None],
    "conform": bool,
    "input_surface": InputPathType,
    "output_volume": str,
})


class MrisFillOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisFillParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    filled_volume: OutputPathType
    """The resulting filled volume output."""


def mris_fill_params(
    input_surface: InputPathType,
    output_volume: str,
    resolution: float | None = None,
    conform: bool = False,
) -> MrisFillParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file.
        output_volume: Output volume file.
        resolution: Set the resolution of the output volume (default = 0.250\
            mm/voxel).
        conform: Conform the volume before writing.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_fill",
        "conform": conform,
        "input_surface": input_surface,
        "output_volume": output_volume,
    }
    if resolution is not None:
        params["resolution"] = resolution
    return params


def mris_fill_cargs(
    params: MrisFillParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_fill")
    if params.get("resolution", None) is not None:
        cargs.extend([
            "-r",
            str(params.get("resolution", None))
        ])
    if params.get("conform", False):
        cargs.append("-c")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(params.get("output_volume", None))
    return cargs


def mris_fill_outputs(
    params: MrisFillParameters,
    execution: Execution,
) -> MrisFillOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisFillOutputs(
        root=execution.output_file("."),
        filled_volume=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mris_fill_execute(
    params: MrisFillParameters,
    runner: Runner | None = None,
) -> MrisFillOutputs:
    """
    mris_fill
    
    A tool that floodfills the interior of a surface and writes the results into
    a volume of specified resolution.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisFillOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_FILL_METADATA)
    params = execution.params(params)
    cargs = mris_fill_cargs(params, execution)
    ret = mris_fill_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_fill(
    input_surface: InputPathType,
    output_volume: str,
    resolution: float | None = None,
    conform: bool = False,
    runner: Runner | None = None,
) -> MrisFillOutputs:
    """
    mris_fill
    
    A tool that floodfills the interior of a surface and writes the results into
    a volume of specified resolution.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file.
        output_volume: Output volume file.
        resolution: Set the resolution of the output volume (default = 0.250\
            mm/voxel).
        conform: Conform the volume before writing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisFillOutputs`).
    """
    params = mris_fill_params(
        resolution=resolution,
        conform=conform,
        input_surface=input_surface,
        output_volume=output_volume,
    )
    return mris_fill_execute(params, runner)


__all__ = [
    "MRIS_FILL_METADATA",
    "MrisFillOutputs",
    "mris_fill",
    "mris_fill_execute",
    "mris_fill_params",
]
