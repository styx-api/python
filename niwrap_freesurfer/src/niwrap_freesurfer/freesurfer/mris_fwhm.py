# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_FWHM_METADATA = Metadata(
    id="a1a32f8d7f7e5d30241888e0d9b40c74ddb0107e.boutiques",
    name="mris_fwhm",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisFwhmParameters = typing.TypedDict('MrisFwhmParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_fwhm"]],
    "input_file": InputPathType,
    "subject": str,
    "hemi": str,
    "surf": typing.NotRequired[str | None],
    "label_file": typing.NotRequired[InputPathType | None],
    "cortex_flag": bool,
    "mask_file": typing.NotRequired[InputPathType | None],
    "x_matrix": typing.NotRequired[InputPathType | None],
    "detrend_order": typing.NotRequired[float | None],
    "smooth_only_flag": bool,
    "no_detrend_flag": bool,
    "sqr_flag": bool,
    "sum_file": typing.NotRequired[str | None],
    "dat_file": typing.NotRequired[str | None],
    "ar1dat_file": typing.NotRequired[str | None],
    "ar1vol": typing.NotRequired[str | None],
    "fwhmmap": typing.NotRequired[str | None],
    "prune_flag": bool,
    "no_prune_flag": bool,
    "out_mask": typing.NotRequired[str | None],
    "varnorm_flag": bool,
    "fwhm": typing.NotRequired[float | None],
    "niters_only": typing.NotRequired[str | None],
    "output_file": str,
    "sd": typing.NotRequired[str | None],
    "synth_flag": bool,
    "synth_frames": typing.NotRequired[float | None],
    "threads": typing.NotRequired[float | None],
    "debug_flag": bool,
    "checkopts_flag": bool,
    "version_flag": bool,
})
MrisFwhmParametersTagged = typing.TypedDict('MrisFwhmParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_fwhm"],
    "input_file": InputPathType,
    "subject": str,
    "hemi": str,
    "surf": typing.NotRequired[str | None],
    "label_file": typing.NotRequired[InputPathType | None],
    "cortex_flag": bool,
    "mask_file": typing.NotRequired[InputPathType | None],
    "x_matrix": typing.NotRequired[InputPathType | None],
    "detrend_order": typing.NotRequired[float | None],
    "smooth_only_flag": bool,
    "no_detrend_flag": bool,
    "sqr_flag": bool,
    "sum_file": typing.NotRequired[str | None],
    "dat_file": typing.NotRequired[str | None],
    "ar1dat_file": typing.NotRequired[str | None],
    "ar1vol": typing.NotRequired[str | None],
    "fwhmmap": typing.NotRequired[str | None],
    "prune_flag": bool,
    "no_prune_flag": bool,
    "out_mask": typing.NotRequired[str | None],
    "varnorm_flag": bool,
    "fwhm": typing.NotRequired[float | None],
    "niters_only": typing.NotRequired[str | None],
    "output_file": str,
    "sd": typing.NotRequired[str | None],
    "synth_flag": bool,
    "synth_frames": typing.NotRequired[float | None],
    "threads": typing.NotRequired[float | None],
    "debug_flag": bool,
    "checkopts_flag": bool,
    "version_flag": bool,
})


class MrisFwhmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisFwhmParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_fwhm_params(
    input_file: InputPathType,
    subject: str,
    hemi: str,
    output_file: str,
    surf: str | None = None,
    label_file: InputPathType | None = None,
    cortex_flag: bool = False,
    mask_file: InputPathType | None = None,
    x_matrix: InputPathType | None = None,
    detrend_order: float | None = None,
    smooth_only_flag: bool = False,
    no_detrend_flag: bool = False,
    sqr_flag: bool = False,
    sum_file: str | None = None,
    dat_file: str | None = None,
    ar1dat_file: str | None = None,
    ar1vol: str | None = None,
    fwhmmap: str | None = None,
    prune_flag: bool = False,
    no_prune_flag: bool = False,
    out_mask: str | None = None,
    varnorm_flag: bool = False,
    fwhm: float | None = None,
    niters_only: str | None = None,
    sd: str | None = None,
    synth_flag: bool = False,
    synth_frames: float | None = None,
    threads: float | None = None,
    debug_flag: bool = False,
    checkopts_flag: bool = False,
    version_flag: bool = False,
) -> MrisFwhmParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input data file.
        subject: Subject whose surface the input is defined on.
        hemi: Hemifield that the input is defined on. Legal values are lh and\
            rh.
        output_file: Output file to save the processed data.
        surf: Surface name to compute AR1 on. Default is white.
        label_file: Label file to be used as a mask.
        cortex_flag: Use hemi.cortex.label as a mask.
        mask_file: Mask file. Compute AR1 only over voxels in the given mask.
        x_matrix: Detrend data with the matrix in x.mat.
        detrend_order: Order of polynomial detrending.
        smooth_only_flag: Only smooth the data, implies --no-detrend.
        no_detrend_flag: Turn off polynomial detrending.
        sqr_flag: Compute square of input before smoothing.
        sum_file: Prints ascii summary to sumfile.
        dat_file: File for FWHM data.
        ar1dat_file: File containing ar1mean and ar1std.
        ar1vol: Save spatial AR1 as an overlay.
        fwhmmap: Save vertex-wise spatial FWHM as an overlay.
        prune_flag: Remove any voxel that is zero in any subject (after any\
            inversion).
        no_prune_flag: Do not prune (default).
        out_mask: File to save the final mask.
        varnorm_flag: Normalize the variance across space within any mask.
        fwhm: Smooth input by the specified FWHM in mm.
        niters_only: File that reports the number of iterations needed to\
            achieve the specified FWHM.
        sd: Subjects directory.
        synth_flag: Synthesize input with white gaussian noise.
        synth_frames: Number of frames for synthesized input.
        threads: Number of threads to use.
        debug_flag: Turn on debugging.
        checkopts_flag: Don't run anything, just check options and exit.
        version_flag: Print out version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_fwhm",
        "input_file": input_file,
        "subject": subject,
        "hemi": hemi,
        "cortex_flag": cortex_flag,
        "smooth_only_flag": smooth_only_flag,
        "no_detrend_flag": no_detrend_flag,
        "sqr_flag": sqr_flag,
        "prune_flag": prune_flag,
        "no_prune_flag": no_prune_flag,
        "varnorm_flag": varnorm_flag,
        "output_file": output_file,
        "synth_flag": synth_flag,
        "debug_flag": debug_flag,
        "checkopts_flag": checkopts_flag,
        "version_flag": version_flag,
    }
    if surf is not None:
        params["surf"] = surf
    if label_file is not None:
        params["label_file"] = label_file
    if mask_file is not None:
        params["mask_file"] = mask_file
    if x_matrix is not None:
        params["x_matrix"] = x_matrix
    if detrend_order is not None:
        params["detrend_order"] = detrend_order
    if sum_file is not None:
        params["sum_file"] = sum_file
    if dat_file is not None:
        params["dat_file"] = dat_file
    if ar1dat_file is not None:
        params["ar1dat_file"] = ar1dat_file
    if ar1vol is not None:
        params["ar1vol"] = ar1vol
    if fwhmmap is not None:
        params["fwhmmap"] = fwhmmap
    if out_mask is not None:
        params["out_mask"] = out_mask
    if fwhm is not None:
        params["fwhm"] = fwhm
    if niters_only is not None:
        params["niters_only"] = niters_only
    if sd is not None:
        params["sd"] = sd
    if synth_frames is not None:
        params["synth_frames"] = synth_frames
    if threads is not None:
        params["threads"] = threads
    return params


def mris_fwhm_cargs(
    params: MrisFwhmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_fwhm")
    cargs.extend([
        "--i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "--subject",
        params.get("subject", None)
    ])
    cargs.extend([
        "--hemi",
        params.get("hemi", None)
    ])
    if params.get("surf", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surf", None)
        ])
    if params.get("label_file", None) is not None:
        cargs.extend([
            "--label",
            execution.input_file(params.get("label_file", None))
        ])
    if params.get("cortex_flag", False):
        cargs.append("--cortex")
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("x_matrix", None) is not None:
        cargs.extend([
            "--X",
            execution.input_file(params.get("x_matrix", None))
        ])
    if params.get("detrend_order", None) is not None:
        cargs.extend([
            "--detrend",
            str(params.get("detrend_order", None))
        ])
    if params.get("smooth_only_flag", False):
        cargs.append("--smooth-only")
    if params.get("no_detrend_flag", False):
        cargs.append("--no-detrend")
    if params.get("sqr_flag", False):
        cargs.append("--sqr")
    if params.get("sum_file", None) is not None:
        cargs.extend([
            "--sum",
            params.get("sum_file", None)
        ])
    if params.get("dat_file", None) is not None:
        cargs.extend([
            "--dat",
            params.get("dat_file", None)
        ])
    if params.get("ar1dat_file", None) is not None:
        cargs.extend([
            "--ar1dat",
            params.get("ar1dat_file", None)
        ])
    if params.get("ar1vol", None) is not None:
        cargs.extend([
            "--ar1",
            params.get("ar1vol", None)
        ])
    if params.get("fwhmmap", None) is not None:
        cargs.extend([
            "--fwhm-map",
            params.get("fwhmmap", None)
        ])
    if params.get("prune_flag", False):
        cargs.append("--prune")
    if params.get("no_prune_flag", False):
        cargs.append("--no-prune")
    if params.get("out_mask", None) is not None:
        cargs.extend([
            "--out-mask",
            params.get("out_mask", None)
        ])
    if params.get("varnorm_flag", False):
        cargs.append("--varnorm")
    if params.get("fwhm", None) is not None:
        cargs.extend([
            "--fwhm",
            str(params.get("fwhm", None))
        ])
    if params.get("niters_only", None) is not None:
        cargs.extend([
            "--niters-only",
            params.get("niters_only", None)
        ])
    cargs.extend([
        "--o",
        params.get("output_file", None)
    ])
    if params.get("sd", None) is not None:
        cargs.extend([
            "--sd",
            params.get("sd", None)
        ])
    if params.get("synth_flag", False):
        cargs.append("--synth")
    if params.get("synth_frames", None) is not None:
        cargs.extend([
            "--synth-frames",
            str(params.get("synth_frames", None))
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("debug_flag", False):
        cargs.append("--debug")
    if params.get("checkopts_flag", False):
        cargs.append("--checkopts")
    if params.get("version_flag", False):
        cargs.append("--version")
    return cargs


def mris_fwhm_outputs(
    params: MrisFwhmParameters,
    execution: Execution,
) -> MrisFwhmOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisFwhmOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_fwhm_execute(
    params: MrisFwhmParameters,
    runner: Runner | None = None,
) -> MrisFwhmOutputs:
    """
    mris_fwhm
    
    Smooths surface data and/or estimates FWHM.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisFwhmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_FWHM_METADATA)
    params = execution.params(params)
    cargs = mris_fwhm_cargs(params, execution)
    ret = mris_fwhm_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_fwhm(
    input_file: InputPathType,
    subject: str,
    hemi: str,
    output_file: str,
    surf: str | None = None,
    label_file: InputPathType | None = None,
    cortex_flag: bool = False,
    mask_file: InputPathType | None = None,
    x_matrix: InputPathType | None = None,
    detrend_order: float | None = None,
    smooth_only_flag: bool = False,
    no_detrend_flag: bool = False,
    sqr_flag: bool = False,
    sum_file: str | None = None,
    dat_file: str | None = None,
    ar1dat_file: str | None = None,
    ar1vol: str | None = None,
    fwhmmap: str | None = None,
    prune_flag: bool = False,
    no_prune_flag: bool = False,
    out_mask: str | None = None,
    varnorm_flag: bool = False,
    fwhm: float | None = None,
    niters_only: str | None = None,
    sd: str | None = None,
    synth_flag: bool = False,
    synth_frames: float | None = None,
    threads: float | None = None,
    debug_flag: bool = False,
    checkopts_flag: bool = False,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> MrisFwhmOutputs:
    """
    mris_fwhm
    
    Smooths surface data and/or estimates FWHM.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input data file.
        subject: Subject whose surface the input is defined on.
        hemi: Hemifield that the input is defined on. Legal values are lh and\
            rh.
        output_file: Output file to save the processed data.
        surf: Surface name to compute AR1 on. Default is white.
        label_file: Label file to be used as a mask.
        cortex_flag: Use hemi.cortex.label as a mask.
        mask_file: Mask file. Compute AR1 only over voxels in the given mask.
        x_matrix: Detrend data with the matrix in x.mat.
        detrend_order: Order of polynomial detrending.
        smooth_only_flag: Only smooth the data, implies --no-detrend.
        no_detrend_flag: Turn off polynomial detrending.
        sqr_flag: Compute square of input before smoothing.
        sum_file: Prints ascii summary to sumfile.
        dat_file: File for FWHM data.
        ar1dat_file: File containing ar1mean and ar1std.
        ar1vol: Save spatial AR1 as an overlay.
        fwhmmap: Save vertex-wise spatial FWHM as an overlay.
        prune_flag: Remove any voxel that is zero in any subject (after any\
            inversion).
        no_prune_flag: Do not prune (default).
        out_mask: File to save the final mask.
        varnorm_flag: Normalize the variance across space within any mask.
        fwhm: Smooth input by the specified FWHM in mm.
        niters_only: File that reports the number of iterations needed to\
            achieve the specified FWHM.
        sd: Subjects directory.
        synth_flag: Synthesize input with white gaussian noise.
        synth_frames: Number of frames for synthesized input.
        threads: Number of threads to use.
        debug_flag: Turn on debugging.
        checkopts_flag: Don't run anything, just check options and exit.
        version_flag: Print out version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisFwhmOutputs`).
    """
    params = mris_fwhm_params(
        input_file=input_file,
        subject=subject,
        hemi=hemi,
        surf=surf,
        label_file=label_file,
        cortex_flag=cortex_flag,
        mask_file=mask_file,
        x_matrix=x_matrix,
        detrend_order=detrend_order,
        smooth_only_flag=smooth_only_flag,
        no_detrend_flag=no_detrend_flag,
        sqr_flag=sqr_flag,
        sum_file=sum_file,
        dat_file=dat_file,
        ar1dat_file=ar1dat_file,
        ar1vol=ar1vol,
        fwhmmap=fwhmmap,
        prune_flag=prune_flag,
        no_prune_flag=no_prune_flag,
        out_mask=out_mask,
        varnorm_flag=varnorm_flag,
        fwhm=fwhm,
        niters_only=niters_only,
        output_file=output_file,
        sd=sd,
        synth_flag=synth_flag,
        synth_frames=synth_frames,
        threads=threads,
        debug_flag=debug_flag,
        checkopts_flag=checkopts_flag,
        version_flag=version_flag,
    )
    return mris_fwhm_execute(params, runner)


__all__ = [
    "MRIS_FWHM_METADATA",
    "MrisFwhmOutputs",
    "mris_fwhm",
    "mris_fwhm_execute",
    "mris_fwhm_params",
]
