# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_INFO_METADATA = Metadata(
    id="c216d82f260f673d76d33d247e464c271199a83f.boutiques",
    name="mris_info",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisInfoParameters = typing.TypedDict('MrisInfoParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_info"]],
    "surfacefile": InputPathType,
    "outfile": typing.NotRequired[InputPathType | None],
    "subject_hemi_surfname": typing.NotRequired[str | None],
    "talairach_xfm_flag": bool,
    "rescale_flag": bool,
    "patchfile": typing.NotRequired[InputPathType | None],
    "vertex_number": typing.NotRequired[float | None],
    "extended_vertex_number": typing.NotRequired[float | None],
    "curvfile": typing.NotRequired[InputPathType | None],
    "annotfile": typing.NotRequired[InputPathType | None],
    "area_stats_flag": bool,
    "edge_stats_id": typing.NotRequired[str | None],
    "edge_number": typing.NotRequired[float | None],
    "vtxno": typing.NotRequired[str | None],
    "matrix_format": typing.NotRequired[str | None],
    "quality_stats_flag": bool,
    "intersections_flag": bool,
    "mask_file": typing.NotRequired[InputPathType | None],
    "label_file": typing.NotRequired[InputPathType | None],
    "edge_file": typing.NotRequired[InputPathType | None],
    "nogifti_flag": bool,
    "version_flag": bool,
    "help_flag": bool,
})
MrisInfoParametersTagged = typing.TypedDict('MrisInfoParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_info"],
    "surfacefile": InputPathType,
    "outfile": typing.NotRequired[InputPathType | None],
    "subject_hemi_surfname": typing.NotRequired[str | None],
    "talairach_xfm_flag": bool,
    "rescale_flag": bool,
    "patchfile": typing.NotRequired[InputPathType | None],
    "vertex_number": typing.NotRequired[float | None],
    "extended_vertex_number": typing.NotRequired[float | None],
    "curvfile": typing.NotRequired[InputPathType | None],
    "annotfile": typing.NotRequired[InputPathType | None],
    "area_stats_flag": bool,
    "edge_stats_id": typing.NotRequired[str | None],
    "edge_number": typing.NotRequired[float | None],
    "vtxno": typing.NotRequired[str | None],
    "matrix_format": typing.NotRequired[str | None],
    "quality_stats_flag": bool,
    "intersections_flag": bool,
    "mask_file": typing.NotRequired[InputPathType | None],
    "label_file": typing.NotRequired[InputPathType | None],
    "edge_file": typing.NotRequired[InputPathType | None],
    "nogifti_flag": bool,
    "version_flag": bool,
    "help_flag": bool,
})


class MrisInfoOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisInfoParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Output file containing saved data"""
    output_edge_file: OutputPathType | None
    """File containing edge info"""


def mris_info_params(
    surfacefile: InputPathType,
    outfile: InputPathType | None = None,
    subject_hemi_surfname: str | None = None,
    talairach_xfm_flag: bool = False,
    rescale_flag: bool = False,
    patchfile: InputPathType | None = None,
    vertex_number: float | None = None,
    extended_vertex_number: float | None = None,
    curvfile: InputPathType | None = None,
    annotfile: InputPathType | None = None,
    area_stats_flag: bool = False,
    edge_stats_id: str | None = None,
    edge_number: float | None = None,
    vtxno: str | None = None,
    matrix_format: str | None = None,
    quality_stats_flag: bool = False,
    intersections_flag: bool = False,
    mask_file: InputPathType | None = None,
    label_file: InputPathType | None = None,
    edge_file: InputPathType | None = None,
    nogifti_flag: bool = False,
    version_flag: bool = False,
    help_flag: bool = False,
) -> MrisInfoParametersTagged:
    """
    Build parameters.
    
    Args:
        surfacefile: Surface file to process.
        outfile: Save some data to outfile.
        subject_hemi_surfname: Instead of surfacefile.
        talairach_xfm_flag: Apply talairach xfm before reporting info.
        rescale_flag: Rescale group surface to match average metrics.
        patchfile: Load patch before reporting.
        vertex_number: Print out vertex information for vertex vnum.
        extended_vertex_number: Print out extended vertex information for\
            vertex vnum.
        curvfile: Check if curvature file vertices match surface vertices.
        annotfile: Check if annotation file vertices match surface vertices;\
            dump colortable.
        area_stats_flag: Compute stats on triangle area (n, mean, std, min,\
            max).
        edge_stats_id: Compute stats on edge metric (n, mean, std, min, max);\
            id=0=length, id=1=dot, id=2=angle, id<0= all.
        edge_number: Print out extended information about edge.
        vtxno: Write Matlab file to plot vertex neighborhood.
        matrix_format: Set format for matrix printing (e.g., %12.8f).
        quality_stats_flag: Print out surface quality stats.
        intersections_flag: Print the number of vertices that belong to a face\
            that intersects another face.
        mask_file: Only compute edge and area stats using vertices in mask.
        label_file: Only compute edge and area stats using vertices in label.
        edge_file: Print edge info for all edges into file.
        nogifti_flag: No dump of GIFTI struct, read .gii as surface instead.
        version_flag: Print version and exits.
        help_flag: No clue what this does.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_info",
        "surfacefile": surfacefile,
        "talairach_xfm_flag": talairach_xfm_flag,
        "rescale_flag": rescale_flag,
        "area_stats_flag": area_stats_flag,
        "quality_stats_flag": quality_stats_flag,
        "intersections_flag": intersections_flag,
        "nogifti_flag": nogifti_flag,
        "version_flag": version_flag,
        "help_flag": help_flag,
    }
    if outfile is not None:
        params["outfile"] = outfile
    if subject_hemi_surfname is not None:
        params["subject_hemi_surfname"] = subject_hemi_surfname
    if patchfile is not None:
        params["patchfile"] = patchfile
    if vertex_number is not None:
        params["vertex_number"] = vertex_number
    if extended_vertex_number is not None:
        params["extended_vertex_number"] = extended_vertex_number
    if curvfile is not None:
        params["curvfile"] = curvfile
    if annotfile is not None:
        params["annotfile"] = annotfile
    if edge_stats_id is not None:
        params["edge_stats_id"] = edge_stats_id
    if edge_number is not None:
        params["edge_number"] = edge_number
    if vtxno is not None:
        params["vtxno"] = vtxno
    if matrix_format is not None:
        params["matrix_format"] = matrix_format
    if mask_file is not None:
        params["mask_file"] = mask_file
    if label_file is not None:
        params["label_file"] = label_file
    if edge_file is not None:
        params["edge_file"] = edge_file
    return params


def mris_info_cargs(
    params: MrisInfoParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_info")
    cargs.append(execution.input_file(params.get("surfacefile", None)))
    if params.get("outfile", None) is not None:
        cargs.extend([
            "--o",
            execution.input_file(params.get("outfile", None))
        ])
    if params.get("subject_hemi_surfname", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject_hemi_surfname", None)
        ])
    if params.get("talairach_xfm_flag", False):
        cargs.append("--t")
    if params.get("rescale_flag", False):
        cargs.append("--r")
    if params.get("patchfile", None) is not None:
        cargs.extend([
            "--patch",
            execution.input_file(params.get("patchfile", None))
        ])
    if params.get("vertex_number", None) is not None:
        cargs.extend([
            "--v",
            str(params.get("vertex_number", None))
        ])
    if params.get("extended_vertex_number", None) is not None:
        cargs.extend([
            "--vx",
            str(params.get("extended_vertex_number", None))
        ])
    if params.get("curvfile", None) is not None:
        cargs.extend([
            "--c",
            execution.input_file(params.get("curvfile", None))
        ])
    if params.get("annotfile", None) is not None:
        cargs.extend([
            "--a",
            execution.input_file(params.get("annotfile", None))
        ])
    if params.get("area_stats_flag", False):
        cargs.append("--area-stats")
    if params.get("edge_stats_id", None) is not None:
        cargs.extend([
            "--edge-stats",
            params.get("edge_stats_id", None)
        ])
    if params.get("edge_number", None) is not None:
        cargs.extend([
            "--ex",
            str(params.get("edge_number", None))
        ])
    if params.get("vtxno", None) is not None:
        cargs.extend([
            "--v-matlab",
            params.get("vtxno", None)
        ])
    if params.get("matrix_format", None) is not None:
        cargs.extend([
            "--mtx-fmt",
            params.get("matrix_format", None)
        ])
    if params.get("quality_stats_flag", False):
        cargs.append("--quality")
    if params.get("intersections_flag", False):
        cargs.append("--intersections")
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("label_file", None) is not None:
        cargs.extend([
            "--label",
            execution.input_file(params.get("label_file", None))
        ])
    if params.get("edge_file", None) is not None:
        cargs.extend([
            "--edge-file",
            execution.input_file(params.get("edge_file", None))
        ])
    if params.get("nogifti_flag", False):
        cargs.append("--nogifti-disp-image")
    if params.get("version_flag", False):
        cargs.append("--version")
    if params.get("help_flag", False):
        cargs.append("--help")
    return cargs


def mris_info_outputs(
    params: MrisInfoParameters,
    execution: Execution,
) -> MrisInfoOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisInfoOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(pathlib.Path(params.get("outfile", None)).name) if (params.get("outfile") is not None) else None,
        output_edge_file=execution.output_file(pathlib.Path(params.get("edge_file", None)).name) if (params.get("edge_file") is not None) else None,
    )
    return ret


def mris_info_execute(
    params: MrisInfoParameters,
    runner: Runner | None = None,
) -> MrisInfoOutputs:
    """
    mris_info
    
    Prints out information about a surface file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisInfoOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_INFO_METADATA)
    params = execution.params(params)
    cargs = mris_info_cargs(params, execution)
    ret = mris_info_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_info(
    surfacefile: InputPathType,
    outfile: InputPathType | None = None,
    subject_hemi_surfname: str | None = None,
    talairach_xfm_flag: bool = False,
    rescale_flag: bool = False,
    patchfile: InputPathType | None = None,
    vertex_number: float | None = None,
    extended_vertex_number: float | None = None,
    curvfile: InputPathType | None = None,
    annotfile: InputPathType | None = None,
    area_stats_flag: bool = False,
    edge_stats_id: str | None = None,
    edge_number: float | None = None,
    vtxno: str | None = None,
    matrix_format: str | None = None,
    quality_stats_flag: bool = False,
    intersections_flag: bool = False,
    mask_file: InputPathType | None = None,
    label_file: InputPathType | None = None,
    edge_file: InputPathType | None = None,
    nogifti_flag: bool = False,
    version_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> MrisInfoOutputs:
    """
    mris_info
    
    Prints out information about a surface file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surfacefile: Surface file to process.
        outfile: Save some data to outfile.
        subject_hemi_surfname: Instead of surfacefile.
        talairach_xfm_flag: Apply talairach xfm before reporting info.
        rescale_flag: Rescale group surface to match average metrics.
        patchfile: Load patch before reporting.
        vertex_number: Print out vertex information for vertex vnum.
        extended_vertex_number: Print out extended vertex information for\
            vertex vnum.
        curvfile: Check if curvature file vertices match surface vertices.
        annotfile: Check if annotation file vertices match surface vertices;\
            dump colortable.
        area_stats_flag: Compute stats on triangle area (n, mean, std, min,\
            max).
        edge_stats_id: Compute stats on edge metric (n, mean, std, min, max);\
            id=0=length, id=1=dot, id=2=angle, id<0= all.
        edge_number: Print out extended information about edge.
        vtxno: Write Matlab file to plot vertex neighborhood.
        matrix_format: Set format for matrix printing (e.g., %12.8f).
        quality_stats_flag: Print out surface quality stats.
        intersections_flag: Print the number of vertices that belong to a face\
            that intersects another face.
        mask_file: Only compute edge and area stats using vertices in mask.
        label_file: Only compute edge and area stats using vertices in label.
        edge_file: Print edge info for all edges into file.
        nogifti_flag: No dump of GIFTI struct, read .gii as surface instead.
        version_flag: Print version and exits.
        help_flag: No clue what this does.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisInfoOutputs`).
    """
    params = mris_info_params(
        surfacefile=surfacefile,
        outfile=outfile,
        subject_hemi_surfname=subject_hemi_surfname,
        talairach_xfm_flag=talairach_xfm_flag,
        rescale_flag=rescale_flag,
        patchfile=patchfile,
        vertex_number=vertex_number,
        extended_vertex_number=extended_vertex_number,
        curvfile=curvfile,
        annotfile=annotfile,
        area_stats_flag=area_stats_flag,
        edge_stats_id=edge_stats_id,
        edge_number=edge_number,
        vtxno=vtxno,
        matrix_format=matrix_format,
        quality_stats_flag=quality_stats_flag,
        intersections_flag=intersections_flag,
        mask_file=mask_file,
        label_file=label_file,
        edge_file=edge_file,
        nogifti_flag=nogifti_flag,
        version_flag=version_flag,
        help_flag=help_flag,
    )
    return mris_info_execute(params, runner)


__all__ = [
    "MRIS_INFO_METADATA",
    "MrisInfoOutputs",
    "mris_info",
    "mris_info_execute",
    "mris_info_params",
]
