# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_INTERPOLATE_WARP_METADATA = Metadata(
    id="d38045240e9b32965a96154d194af130972c37bd.boutiques",
    name="mris_interpolate_warp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisInterpolateWarpParameters = typing.TypedDict('MrisInterpolateWarpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_interpolate_warp"]],
    "start_surface": InputPathType,
    "end_surface": InputPathType,
    "warp_field": InputPathType,
})
MrisInterpolateWarpParametersTagged = typing.TypedDict('MrisInterpolateWarpParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_interpolate_warp"],
    "start_surface": InputPathType,
    "end_surface": InputPathType,
    "warp_field": InputPathType,
})


class MrisInterpolateWarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisInterpolateWarpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_interpolate_warp_params(
    start_surface: InputPathType,
    end_surface: InputPathType,
    warp_field: InputPathType,
) -> MrisInterpolateWarpParametersTagged:
    """
    Build parameters.
    
    Args:
        start_surface: The starting surface file.
        end_surface: The ending surface file.
        warp_field: The warp field file with .m3z extension.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_interpolate_warp",
        "start_surface": start_surface,
        "end_surface": end_surface,
        "warp_field": warp_field,
    }
    return params


def mris_interpolate_warp_cargs(
    params: MrisInterpolateWarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_interpolate_warp")
    cargs.append(execution.input_file(params.get("start_surface", None)))
    cargs.append(execution.input_file(params.get("end_surface", None)))
    cargs.append(execution.input_file(params.get("warp_field", None)))
    return cargs


def mris_interpolate_warp_outputs(
    params: MrisInterpolateWarpParameters,
    execution: Execution,
) -> MrisInterpolateWarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisInterpolateWarpOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_interpolate_warp_execute(
    params: MrisInterpolateWarpParameters,
    runner: Runner | None = None,
) -> MrisInterpolateWarpOutputs:
    """
    mris_interpolate_warp
    
    Interpolate warp on cortical surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisInterpolateWarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_INTERPOLATE_WARP_METADATA)
    params = execution.params(params)
    cargs = mris_interpolate_warp_cargs(params, execution)
    ret = mris_interpolate_warp_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_interpolate_warp(
    start_surface: InputPathType,
    end_surface: InputPathType,
    warp_field: InputPathType,
    runner: Runner | None = None,
) -> MrisInterpolateWarpOutputs:
    """
    mris_interpolate_warp
    
    Interpolate warp on cortical surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        start_surface: The starting surface file.
        end_surface: The ending surface file.
        warp_field: The warp field file with .m3z extension.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisInterpolateWarpOutputs`).
    """
    params = mris_interpolate_warp_params(
        start_surface=start_surface,
        end_surface=end_surface,
        warp_field=warp_field,
    )
    return mris_interpolate_warp_execute(params, runner)


__all__ = [
    "MRIS_INTERPOLATE_WARP_METADATA",
    "MrisInterpolateWarpOutputs",
    "mris_interpolate_warp",
    "mris_interpolate_warp_execute",
    "mris_interpolate_warp_params",
]
