# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_LEFT_RIGHT_REGISTER_METADATA = Metadata(
    id="deb90227cd838d310a8c1fb72cfbad83cbc6d25f.boutiques",
    name="mris_left_right_register",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisLeftRightRegisterParameters = typing.TypedDict('MrisLeftRightRegisterParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_left_right_register"]],
    "lh_sphere": InputPathType,
    "rh_sphere": InputPathType,
    "lh_sphere_left_right": str,
    "rh_sphere_left_right": str,
})
MrisLeftRightRegisterParametersTagged = typing.TypedDict('MrisLeftRightRegisterParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_left_right_register"],
    "lh_sphere": InputPathType,
    "rh_sphere": InputPathType,
    "lh_sphere_left_right": str,
    "rh_sphere_left_right": str,
})


class MrisLeftRightRegisterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisLeftRightRegisterParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_lh_sphere_left_right: OutputPathType
    """Registered left hemisphere spherical surface output file"""
    out_rh_sphere_left_right: OutputPathType
    """Registered right hemisphere spherical surface output file"""


def mris_left_right_register_params(
    lh_sphere: InputPathType,
    rh_sphere: InputPathType,
    lh_sphere_left_right: str,
    rh_sphere_left_right: str,
) -> MrisLeftRightRegisterParametersTagged:
    """
    Build parameters.
    
    Args:
        lh_sphere: Left hemisphere spherical surface input file.
        rh_sphere: Right hemisphere spherical surface input file.
        lh_sphere_left_right: Output file for left hemisphere with left-right\
            registration.
        rh_sphere_left_right: Output file for right hemisphere with left-right\
            registration.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_left_right_register",
        "lh_sphere": lh_sphere,
        "rh_sphere": rh_sphere,
        "lh_sphere_left_right": lh_sphere_left_right,
        "rh_sphere_left_right": rh_sphere_left_right,
    }
    return params


def mris_left_right_register_cargs(
    params: MrisLeftRightRegisterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_left_right_register")
    cargs.append(execution.input_file(params.get("lh_sphere", None)))
    cargs.append(execution.input_file(params.get("rh_sphere", None)))
    cargs.append(params.get("lh_sphere_left_right", None))
    cargs.append(params.get("rh_sphere_left_right", None))
    return cargs


def mris_left_right_register_outputs(
    params: MrisLeftRightRegisterParameters,
    execution: Execution,
) -> MrisLeftRightRegisterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisLeftRightRegisterOutputs(
        root=execution.output_file("."),
        out_lh_sphere_left_right=execution.output_file(params.get("lh_sphere_left_right", None)),
        out_rh_sphere_left_right=execution.output_file(params.get("rh_sphere_left_right", None)),
    )
    return ret


def mris_left_right_register_execute(
    params: MrisLeftRightRegisterParameters,
    runner: Runner | None = None,
) -> MrisLeftRightRegisterOutputs:
    """
    mris_left_right_register
    
    Register left and right hemisphere spherical surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisLeftRightRegisterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_LEFT_RIGHT_REGISTER_METADATA)
    params = execution.params(params)
    cargs = mris_left_right_register_cargs(params, execution)
    ret = mris_left_right_register_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_left_right_register(
    lh_sphere: InputPathType,
    rh_sphere: InputPathType,
    lh_sphere_left_right: str,
    rh_sphere_left_right: str,
    runner: Runner | None = None,
) -> MrisLeftRightRegisterOutputs:
    """
    mris_left_right_register
    
    Register left and right hemisphere spherical surfaces.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        lh_sphere: Left hemisphere spherical surface input file.
        rh_sphere: Right hemisphere spherical surface input file.
        lh_sphere_left_right: Output file for left hemisphere with left-right\
            registration.
        rh_sphere_left_right: Output file for right hemisphere with left-right\
            registration.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisLeftRightRegisterOutputs`).
    """
    params = mris_left_right_register_params(
        lh_sphere=lh_sphere,
        rh_sphere=rh_sphere,
        lh_sphere_left_right=lh_sphere_left_right,
        rh_sphere_left_right=rh_sphere_left_right,
    )
    return mris_left_right_register_execute(params, runner)


__all__ = [
    "MRIS_LEFT_RIGHT_REGISTER_METADATA",
    "MrisLeftRightRegisterOutputs",
    "mris_left_right_register",
    "mris_left_right_register_execute",
    "mris_left_right_register_params",
]
