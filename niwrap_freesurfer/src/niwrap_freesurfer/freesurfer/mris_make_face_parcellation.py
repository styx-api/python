# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_MAKE_FACE_PARCELLATION_METADATA = Metadata(
    id="a83c31ac33801cde424aa5e0a50696c422d569e6.boutiques",
    name="mris_make_face_parcellation",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisMakeFaceParcellationParameters = typing.TypedDict('MrisMakeFaceParcellationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_make_face_parcellation"]],
    "input_surface": InputPathType,
    "ico_file": InputPathType,
    "output_annot": str,
    "colortable": typing.NotRequired[InputPathType | None],
})
MrisMakeFaceParcellationParametersTagged = typing.TypedDict('MrisMakeFaceParcellationParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_make_face_parcellation"],
    "input_surface": InputPathType,
    "ico_file": InputPathType,
    "output_annot": str,
    "colortable": typing.NotRequired[InputPathType | None],
})


class MrisMakeFaceParcellationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisMakeFaceParcellationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    annot_file: OutputPathType
    """Generated annotation file based on the icosahedral face mapping."""


def mris_make_face_parcellation_params(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: str,
    colortable: InputPathType | None = None,
) -> MrisMakeFaceParcellationParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file (e.g. lh.sphere or lh.sphere.reg).
        ico_file: Icosahedron file (e.g. ic3.tri).
        output_annot: Output annotation file (e.g. lh.ic3.annot).
        colortable: Color table file (e.g. colortable.txt).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_make_face_parcellation",
        "input_surface": input_surface,
        "ico_file": ico_file,
        "output_annot": output_annot,
    }
    if colortable is not None:
        params["colortable"] = colortable
    return params


def mris_make_face_parcellation_cargs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_make_face_parcellation")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(execution.input_file(params.get("ico_file", None)))
    cargs.append(params.get("output_annot", None))
    if params.get("colortable", None) is not None:
        cargs.extend([
            "-ctab",
            execution.input_file(params.get("colortable", None))
        ])
    return cargs


def mris_make_face_parcellation_outputs(
    params: MrisMakeFaceParcellationParameters,
    execution: Execution,
) -> MrisMakeFaceParcellationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisMakeFaceParcellationOutputs(
        root=execution.output_file("."),
        annot_file=execution.output_file(params.get("output_annot", None)),
    )
    return ret


def mris_make_face_parcellation_execute(
    params: MrisMakeFaceParcellationParameters,
    runner: Runner | None = None,
) -> MrisMakeFaceParcellationOutputs:
    """
    mris_make_face_parcellation
    
    Generates a parcellation based on which icosahedral face each vertex maps
    to.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_MAKE_FACE_PARCELLATION_METADATA)
    params = execution.params(params)
    cargs = mris_make_face_parcellation_cargs(params, execution)
    ret = mris_make_face_parcellation_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_make_face_parcellation(
    input_surface: InputPathType,
    ico_file: InputPathType,
    output_annot: str,
    colortable: InputPathType | None = None,
    runner: Runner | None = None,
) -> MrisMakeFaceParcellationOutputs:
    """
    mris_make_face_parcellation
    
    Generates a parcellation based on which icosahedral face each vertex maps
    to.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file (e.g. lh.sphere or lh.sphere.reg).
        ico_file: Icosahedron file (e.g. ic3.tri).
        output_annot: Output annotation file (e.g. lh.ic3.annot).
        colortable: Color table file (e.g. colortable.txt).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMakeFaceParcellationOutputs`).
    """
    params = mris_make_face_parcellation_params(
        input_surface=input_surface,
        ico_file=ico_file,
        output_annot=output_annot,
        colortable=colortable,
    )
    return mris_make_face_parcellation_execute(params, runner)


__all__ = [
    "MRIS_MAKE_FACE_PARCELLATION_METADATA",
    "MrisMakeFaceParcellationOutputs",
    "mris_make_face_parcellation",
    "mris_make_face_parcellation_execute",
    "mris_make_face_parcellation_params",
]
