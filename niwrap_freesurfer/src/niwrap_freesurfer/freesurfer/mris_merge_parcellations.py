# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_MERGE_PARCELLATIONS_METADATA = Metadata(
    id="a05f2598fc622c439488b0d5084f9127865f9812.boutiques",
    name="mris_merge_parcellations",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisMergeParcellationsParameters = typing.TypedDict('MrisMergeParcellationsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_merge_parcellations"]],
    "surface": InputPathType,
    "label1": InputPathType,
    "label2": InputPathType,
    "annot_name": typing.NotRequired[str | None],
})
MrisMergeParcellationsParametersTagged = typing.TypedDict('MrisMergeParcellationsParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_merge_parcellations"],
    "surface": InputPathType,
    "label1": InputPathType,
    "label2": InputPathType,
    "annot_name": typing.NotRequired[str | None],
})


class MrisMergeParcellationsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisMergeParcellationsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_merge_parcellations_params(
    surface: InputPathType,
    label1: InputPathType,
    label2: InputPathType,
    annot_name: str | None = None,
) -> MrisMergeParcellationsParametersTagged:
    """
    Build parameters.
    
    Args:
        surface: Surface file to analyze.
        label1: First label file.
        label2: Second label file.
        annot_name: Compute pairwise Hausdorff distance between all annotations.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_merge_parcellations",
        "surface": surface,
        "label1": label1,
        "label2": label2,
    }
    if annot_name is not None:
        params["annot_name"] = annot_name
    return params


def mris_merge_parcellations_cargs(
    params: MrisMergeParcellationsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_merge_parcellations")
    cargs.append(execution.input_file(params.get("surface", None)))
    cargs.append(execution.input_file(params.get("label1", None)))
    cargs.append(execution.input_file(params.get("label2", None)))
    if params.get("annot_name", None) is not None:
        cargs.extend([
            "-a",
            params.get("annot_name", None)
        ])
    return cargs


def mris_merge_parcellations_outputs(
    params: MrisMergeParcellationsParameters,
    execution: Execution,
) -> MrisMergeParcellationsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisMergeParcellationsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_merge_parcellations_execute(
    params: MrisMergeParcellationsParameters,
    runner: Runner | None = None,
) -> MrisMergeParcellationsOutputs:
    """
    mris_merge_parcellations
    
    This program computes the Hausdorff distance between two labels on the
    surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMergeParcellationsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_MERGE_PARCELLATIONS_METADATA)
    params = execution.params(params)
    cargs = mris_merge_parcellations_cargs(params, execution)
    ret = mris_merge_parcellations_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_merge_parcellations(
    surface: InputPathType,
    label1: InputPathType,
    label2: InputPathType,
    annot_name: str | None = None,
    runner: Runner | None = None,
) -> MrisMergeParcellationsOutputs:
    """
    mris_merge_parcellations
    
    This program computes the Hausdorff distance between two labels on the
    surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surface: Surface file to analyze.
        label1: First label file.
        label2: Second label file.
        annot_name: Compute pairwise Hausdorff distance between all annotations.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMergeParcellationsOutputs`).
    """
    params = mris_merge_parcellations_params(
        surface=surface,
        label1=label1,
        label2=label2,
        annot_name=annot_name,
    )
    return mris_merge_parcellations_execute(params, runner)


__all__ = [
    "MRIS_MERGE_PARCELLATIONS_METADATA",
    "MrisMergeParcellationsOutputs",
    "mris_merge_parcellations",
    "mris_merge_parcellations_execute",
    "mris_merge_parcellations_params",
]
