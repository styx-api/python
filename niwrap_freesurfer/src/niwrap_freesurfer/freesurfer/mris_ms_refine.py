# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_MS_REFINE_METADATA = Metadata(
    id="debc4c2551398adeb5c36c7e39a3e3e7c1ae900c.boutiques",
    name="mris_ms_refine",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisMsRefineParameters = typing.TypedDict('MrisMsRefineParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_ms_refine"]],
    "subject_name": str,
    "hemisphere": str,
    "xform": InputPathType,
    "flash_files": list[InputPathType],
    "residuals": InputPathType,
    "omit_self_intersection": bool,
    "create_curvature_files": bool,
    "average_curvature": typing.NotRequired[float | None],
    "white_only": bool,
})
MrisMsRefineParametersTagged = typing.TypedDict('MrisMsRefineParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_ms_refine"],
    "subject_name": str,
    "hemisphere": str,
    "xform": InputPathType,
    "flash_files": list[InputPathType],
    "residuals": InputPathType,
    "omit_self_intersection": bool,
    "create_curvature_files": bool,
    "average_curvature": typing.NotRequired[float | None],
    "white_only": bool,
})


class MrisMsRefineOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisMsRefineParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    white_surface: OutputPathType
    """Generated white matter surface file"""
    pial_surface: OutputPathType
    """Generated gray matter surface file"""
    curvature_file: OutputPathType
    """Curvature file for cortical thickness"""
    layer_iv_surface: OutputPathType
    """Surface file approximating layer IV of the cortical sheet"""


def mris_ms_refine_params(
    subject_name: str,
    hemisphere: str,
    xform: InputPathType,
    flash_files: list[InputPathType],
    residuals: InputPathType,
    omit_self_intersection: bool = False,
    create_curvature_files: bool = False,
    average_curvature: float | None = None,
    white_only: bool = False,
) -> MrisMsRefineParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_name: The name of the subject.
        hemisphere: The hemisphere to process ('lh' or 'rh').
        xform: The transform file.
        flash_files: Flash images.
        residuals: Residuals file.
        omit_self_intersection: Omit self-intersection and only generate\
            gray/white surface.
        create_curvature_files: Create curvature and area files from white\
            matter surface.
        average_curvature: Average curvature values a specified number of\
            times.
        white_only: Only generate white matter surface.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_ms_refine",
        "subject_name": subject_name,
        "hemisphere": hemisphere,
        "xform": xform,
        "flash_files": flash_files,
        "residuals": residuals,
        "omit_self_intersection": omit_self_intersection,
        "create_curvature_files": create_curvature_files,
        "white_only": white_only,
    }
    if average_curvature is not None:
        params["average_curvature"] = average_curvature
    return params


def mris_ms_refine_cargs(
    params: MrisMsRefineParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_ms_refine")
    cargs.append(params.get("subject_name", None))
    cargs.append(params.get("hemisphere", None))
    cargs.append(execution.input_file(params.get("xform", None)))
    cargs.extend([execution.input_file(f) for f in params.get("flash_files", None)])
    cargs.append(execution.input_file(params.get("residuals", None)))
    if params.get("omit_self_intersection", False):
        cargs.append("-q")
    if params.get("create_curvature_files", False):
        cargs.append("-c")
    if params.get("average_curvature", None) is not None:
        cargs.extend([
            "-a",
            str(params.get("average_curvature", None))
        ])
    if params.get("white_only", False):
        cargs.append("-whiteonly")
    return cargs


def mris_ms_refine_outputs(
    params: MrisMsRefineParameters,
    execution: Execution,
) -> MrisMsRefineOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisMsRefineOutputs(
        root=execution.output_file("."),
        white_surface=execution.output_file(params.get("subject_name", None) + "/" + params.get("hemisphere", None) + ".white"),
        pial_surface=execution.output_file(params.get("subject_name", None) + "/" + params.get("hemisphere", None) + ".pial"),
        curvature_file=execution.output_file(params.get("subject_name", None) + "/" + params.get("hemisphere", None) + ".curv"),
        layer_iv_surface=execution.output_file(params.get("subject_name", None) + "/" + params.get("hemisphere", None) + ".layerIV"),
    )
    return ret


def mris_ms_refine_execute(
    params: MrisMsRefineParameters,
    runner: Runner | None = None,
) -> MrisMsRefineOutputs:
    """
    mris_ms_refine
    
    This program positions the tessellation of the cortical surface at the white
    matter surface, then the gray matter surface. It generates surface files for
    these surfaces as well as a 'curvature' file for the cortical thickness, and
    a surface file which approximates layer IV of the cortical sheet.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMsRefineOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_MS_REFINE_METADATA)
    params = execution.params(params)
    cargs = mris_ms_refine_cargs(params, execution)
    ret = mris_ms_refine_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_ms_refine(
    subject_name: str,
    hemisphere: str,
    xform: InputPathType,
    flash_files: list[InputPathType],
    residuals: InputPathType,
    omit_self_intersection: bool = False,
    create_curvature_files: bool = False,
    average_curvature: float | None = None,
    white_only: bool = False,
    runner: Runner | None = None,
) -> MrisMsRefineOutputs:
    """
    mris_ms_refine
    
    This program positions the tessellation of the cortical surface at the white
    matter surface, then the gray matter surface. It generates surface files for
    these surfaces as well as a 'curvature' file for the cortical thickness, and
    a surface file which approximates layer IV of the cortical sheet.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_name: The name of the subject.
        hemisphere: The hemisphere to process ('lh' or 'rh').
        xform: The transform file.
        flash_files: Flash images.
        residuals: Residuals file.
        omit_self_intersection: Omit self-intersection and only generate\
            gray/white surface.
        create_curvature_files: Create curvature and area files from white\
            matter surface.
        average_curvature: Average curvature values a specified number of\
            times.
        white_only: Only generate white matter surface.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMsRefineOutputs`).
    """
    params = mris_ms_refine_params(
        subject_name=subject_name,
        hemisphere=hemisphere,
        xform=xform,
        flash_files=flash_files,
        residuals=residuals,
        omit_self_intersection=omit_self_intersection,
        create_curvature_files=create_curvature_files,
        average_curvature=average_curvature,
        white_only=white_only,
    )
    return mris_ms_refine_execute(params, runner)


__all__ = [
    "MRIS_MS_REFINE_METADATA",
    "MrisMsRefineOutputs",
    "mris_ms_refine",
    "mris_ms_refine_execute",
    "mris_ms_refine_params",
]
