# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_MULTISCALE_STATS_METADATA = Metadata(
    id="10e7d73f783449c7aa286eab95584fefc27b016a.boutiques",
    name="mris_multiscale_stats",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisMultiscaleStatsParameters = typing.TypedDict('MrisMultiscaleStatsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_multiscale_stats"]],
    "output_subject": str,
    "hemi": str,
    "surf": InputPathType,
    "curv": InputPathType,
    "class1_subjects": list[str],
    "class2_subjects": list[str],
})
MrisMultiscaleStatsParametersTagged = typing.TypedDict('MrisMultiscaleStatsParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_multiscale_stats"],
    "output_subject": str,
    "hemi": str,
    "surf": InputPathType,
    "curv": InputPathType,
    "class1_subjects": list[str],
    "class2_subjects": list[str],
})


class MrisMultiscaleStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisMultiscaleStatsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_multiscale_stats_params(
    output_subject: str,
    hemi: str,
    surf: InputPathType,
    curv: InputPathType,
    class1_subjects: list[str],
    class2_subjects: list[str],
) -> MrisMultiscaleStatsParametersTagged:
    """
    Build parameters.
    
    Args:
        output_subject: The output subject identifier.
        hemi: Specify which hemisphere to use.
        surf: A spherical surface file suitable for computing geodesics.
        curv: The curvature file to be processed.
        class1_subjects: List of subjects from one class.
        class2_subjects: List of subjects from another class.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_multiscale_stats",
        "output_subject": output_subject,
        "hemi": hemi,
        "surf": surf,
        "curv": curv,
        "class1_subjects": class1_subjects,
        "class2_subjects": class2_subjects,
    }
    return params


def mris_multiscale_stats_cargs(
    params: MrisMultiscaleStatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_multiscale_stats")
    cargs.extend([
        "-o",
        params.get("output_subject", None)
    ])
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("surf", None)))
    cargs.append(execution.input_file(params.get("curv", None)))
    cargs.extend(params.get("class1_subjects", None))
    cargs.extend(params.get("class2_subjects", None))
    return cargs


def mris_multiscale_stats_outputs(
    params: MrisMultiscaleStatsParameters,
    execution: Execution,
) -> MrisMultiscaleStatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisMultiscaleStatsOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_multiscale_stats_execute(
    params: MrisMultiscaleStatsParameters,
    runner: Runner | None = None,
) -> MrisMultiscaleStatsOutputs:
    """
    mris_multiscale_stats
    
    Compute the autocorrelation function of a curvature file using multiscale
    statistical techniques.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMultiscaleStatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_MULTISCALE_STATS_METADATA)
    params = execution.params(params)
    cargs = mris_multiscale_stats_cargs(params, execution)
    ret = mris_multiscale_stats_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_multiscale_stats(
    output_subject: str,
    hemi: str,
    surf: InputPathType,
    curv: InputPathType,
    class1_subjects: list[str],
    class2_subjects: list[str],
    runner: Runner | None = None,
) -> MrisMultiscaleStatsOutputs:
    """
    mris_multiscale_stats
    
    Compute the autocorrelation function of a curvature file using multiscale
    statistical techniques.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_subject: The output subject identifier.
        hemi: Specify which hemisphere to use.
        surf: A spherical surface file suitable for computing geodesics.
        curv: The curvature file to be processed.
        class1_subjects: List of subjects from one class.
        class2_subjects: List of subjects from another class.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisMultiscaleStatsOutputs`).
    """
    params = mris_multiscale_stats_params(
        output_subject=output_subject,
        hemi=hemi,
        surf=surf,
        curv=curv,
        class1_subjects=class1_subjects,
        class2_subjects=class2_subjects,
    )
    return mris_multiscale_stats_execute(params, runner)


__all__ = [
    "MRIS_MULTISCALE_STATS_METADATA",
    "MrisMultiscaleStatsOutputs",
    "mris_multiscale_stats",
    "mris_multiscale_stats_execute",
    "mris_multiscale_stats_params",
]
