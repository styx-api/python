# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_PMAKE_METADATA = Metadata(
    id="5979185b5fda5ff92ef409f81804077f9cc39d15.boutiques",
    name="mris_pmake",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisPmakeParameters = typing.TypedDict('MrisPmakeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_pmake"]],
    "options_file": typing.NotRequired[str | None],
    "working_dir": typing.NotRequired[str | None],
    "listen_mode": bool,
    "listen_on_port": typing.NotRequired[float | None],
    "subject": str,
    "hemisphere": str,
    "surface0": typing.NotRequired[str | None],
    "surface1": typing.NotRequired[str | None],
    "curve0": typing.NotRequired[str | None],
    "curve1": typing.NotRequired[str | None],
    "use_abs_curvs": bool,
    "mpm_prog": typing.NotRequired[str | None],
    "mpm_args": typing.NotRequired[str | None],
})
MrisPmakeParametersTagged = typing.TypedDict('MrisPmakeParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_pmake"],
    "options_file": typing.NotRequired[str | None],
    "working_dir": typing.NotRequired[str | None],
    "listen_mode": bool,
    "listen_on_port": typing.NotRequired[float | None],
    "subject": str,
    "hemisphere": str,
    "surface0": typing.NotRequired[str | None],
    "surface1": typing.NotRequired[str | None],
    "curve0": typing.NotRequired[str | None],
    "curve1": typing.NotRequired[str | None],
    "use_abs_curvs": bool,
    "mpm_prog": typing.NotRequired[str | None],
    "mpm_args": typing.NotRequired[str | None],
})


class MrisPmakeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisPmakeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_pmake_params(
    subject: str,
    hemisphere: str,
    options_file: str | None = None,
    working_dir: str | None = None,
    listen_mode: bool = False,
    listen_on_port: float | None = None,
    surface0: str | None = None,
    surface1: str | None = None,
    curve0: str | None = None,
    curve1: str | None = None,
    use_abs_curvs: bool = False,
    mpm_prog: str | None = None,
    mpm_args: str | None = None,
) -> MrisPmakeParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Set the subject to <subj>.
        hemisphere: The hemisphere to process.
        options_file: The main configuration file specifying the startup\
            run-time behaviour.
        working_dir: The working directory.
        listen_mode: Start in LISTEN mode without calculating a path.
        listen_on_port: Create the server port on specified port and do nothing\
            else.
        surface0: The main mesh surface to read.
        surface1: The aux mesh surface to read.
        curve0: The main curvature function maps.
        curve1: The aux curvature function maps.
        use_abs_curvs: Use absolute values on each curvature map.
        mpm_prog: The mpmProg to run.
        mpm_args: Arguments for the specified mpmProg.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_pmake",
        "listen_mode": listen_mode,
        "subject": subject,
        "hemisphere": hemisphere,
        "use_abs_curvs": use_abs_curvs,
    }
    if options_file is not None:
        params["options_file"] = options_file
    if working_dir is not None:
        params["working_dir"] = working_dir
    if listen_on_port is not None:
        params["listen_on_port"] = listen_on_port
    if surface0 is not None:
        params["surface0"] = surface0
    if surface1 is not None:
        params["surface1"] = surface1
    if curve0 is not None:
        params["curve0"] = curve0
    if curve1 is not None:
        params["curve1"] = curve1
    if mpm_prog is not None:
        params["mpm_prog"] = mpm_prog
    if mpm_args is not None:
        params["mpm_args"] = mpm_args
    return params


def mris_pmake_cargs(
    params: MrisPmakeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_pmake")
    if params.get("options_file", None) is not None:
        cargs.extend([
            "--optionsFile",
            params.get("options_file", None)
        ])
    if params.get("working_dir", None) is not None:
        cargs.extend([
            "--dir",
            params.get("working_dir", None)
        ])
    if params.get("listen_mode", False):
        cargs.append("--listen")
    if params.get("listen_on_port", None) is not None:
        cargs.extend([
            "--listenOnPort",
            str(params.get("listen_on_port", None))
        ])
    cargs.extend([
        "--subject",
        params.get("subject", None)
    ])
    cargs.extend([
        "--hemi",
        params.get("hemisphere", None)
    ])
    if params.get("surface0", None) is not None:
        cargs.extend([
            "--surface0",
            params.get("surface0", None)
        ])
    if params.get("surface1", None) is not None:
        cargs.extend([
            "--surface1",
            params.get("surface1", None)
        ])
    if params.get("curve0", None) is not None:
        cargs.extend([
            "--curve0",
            params.get("curve0", None)
        ])
    if params.get("curve1", None) is not None:
        cargs.extend([
            "--curve1",
            params.get("curve1", None)
        ])
    if params.get("use_abs_curvs", False):
        cargs.append("--useAbsCurvs")
    if params.get("mpm_prog", None) is not None:
        cargs.extend([
            "--mpmProg",
            params.get("mpm_prog", None)
        ])
    if params.get("mpm_args", None) is not None:
        cargs.extend([
            "--mpmArgs",
            params.get("mpm_args", None)
        ])
    return cargs


def mris_pmake_outputs(
    params: MrisPmakeParameters,
    execution: Execution,
) -> MrisPmakeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisPmakeOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_pmake_execute(
    params: MrisPmakeParameters,
    runner: Runner | None = None,
) -> MrisPmakeOutputs:
    """
    mris_pmake
    
    Calculates paths and related costs on FreeSurfer surfaces based on an edge
    cost and Dijkstra's algorithm.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisPmakeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_PMAKE_METADATA)
    params = execution.params(params)
    cargs = mris_pmake_cargs(params, execution)
    ret = mris_pmake_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_pmake(
    subject: str,
    hemisphere: str,
    options_file: str | None = None,
    working_dir: str | None = None,
    listen_mode: bool = False,
    listen_on_port: float | None = None,
    surface0: str | None = None,
    surface1: str | None = None,
    curve0: str | None = None,
    curve1: str | None = None,
    use_abs_curvs: bool = False,
    mpm_prog: str | None = None,
    mpm_args: str | None = None,
    runner: Runner | None = None,
) -> MrisPmakeOutputs:
    """
    mris_pmake
    
    Calculates paths and related costs on FreeSurfer surfaces based on an edge
    cost and Dijkstra's algorithm.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Set the subject to <subj>.
        hemisphere: The hemisphere to process.
        options_file: The main configuration file specifying the startup\
            run-time behaviour.
        working_dir: The working directory.
        listen_mode: Start in LISTEN mode without calculating a path.
        listen_on_port: Create the server port on specified port and do nothing\
            else.
        surface0: The main mesh surface to read.
        surface1: The aux mesh surface to read.
        curve0: The main curvature function maps.
        curve1: The aux curvature function maps.
        use_abs_curvs: Use absolute values on each curvature map.
        mpm_prog: The mpmProg to run.
        mpm_args: Arguments for the specified mpmProg.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisPmakeOutputs`).
    """
    params = mris_pmake_params(
        options_file=options_file,
        working_dir=working_dir,
        listen_mode=listen_mode,
        listen_on_port=listen_on_port,
        subject=subject,
        hemisphere=hemisphere,
        surface0=surface0,
        surface1=surface1,
        curve0=curve0,
        curve1=curve1,
        use_abs_curvs=use_abs_curvs,
        mpm_prog=mpm_prog,
        mpm_args=mpm_args,
    )
    return mris_pmake_execute(params, runner)


__all__ = [
    "MRIS_PMAKE_METADATA",
    "MrisPmakeOutputs",
    "mris_pmake",
    "mris_pmake_execute",
    "mris_pmake_params",
]
