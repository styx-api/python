# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_PREPROC_METADATA = Metadata(
    id="e88b142d554e354fe366a5006961e4e6f3bf5d08.boutiques",
    name="mris_preproc",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisPreprocParameters = typing.TypedDict('MrisPreprocParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_preproc"]],
    "outfile": str,
    "target_subject": str,
    "hemi": str,
    "meas": typing.NotRequired[str | None],
    "label": typing.NotRequired[str | None],
    "measdir": typing.NotRequired[str | None],
    "subjects": typing.NotRequired[list[str] | None],
    "fsgd": typing.NotRequired[InputPathType | None],
    "subjectlist": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "surfmeasfile": typing.NotRequired[list[InputPathType] | None],
    "volmeasfile_reg": typing.NotRequired[list[str] | None],
    "projfrac": typing.NotRequired[float | None],
    "projfrac_max": typing.NotRequired[list[float] | None],
    "projfrac_avg": typing.NotRequired[list[float] | None],
    "no_mask_non_cortex": bool,
    "session_file": typing.NotRequired[InputPathType | None],
    "dir_file": typing.NotRequired[InputPathType | None],
    "analysis": typing.NotRequired[str | None],
    "contrast": typing.NotRequired[str | None],
    "cvar_flag": bool,
    "offset_flag": bool,
    "map": typing.NotRequired[str | None],
    "etiv_flag": bool,
    "fwhm": typing.NotRequired[float | None],
    "fwhm_src": typing.NotRequired[float | None],
    "niters": typing.NotRequired[float | None],
    "niters_src": typing.NotRequired[float | None],
    "cortex_only": bool,
    "mgz_flag": bool,
    "no_jac_flag": bool,
    "paired_diff_flag": bool,
    "cache_out": typing.NotRequired[str | None],
    "cache_in": typing.NotRequired[str | None],
    "cache_out_only": typing.NotRequired[str | None],
    "no_prune_flag": bool,
    "mean_flag": bool,
    "std_flag": bool,
    "reshape_flag": bool,
    "surfreg": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "synth_flag": bool,
    "tmpdir": typing.NotRequired[str | None],
    "nocleanup_flag": bool,
    "cleanup_flag": bool,
    "log": typing.NotRequired[str | None],
    "nolog_flag": bool,
    "debug_flag": bool,
})
MrisPreprocParametersTagged = typing.TypedDict('MrisPreprocParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_preproc"],
    "outfile": str,
    "target_subject": str,
    "hemi": str,
    "meas": typing.NotRequired[str | None],
    "label": typing.NotRequired[str | None],
    "measdir": typing.NotRequired[str | None],
    "subjects": typing.NotRequired[list[str] | None],
    "fsgd": typing.NotRequired[InputPathType | None],
    "subjectlist": typing.NotRequired[InputPathType | None],
    "qdec": typing.NotRequired[InputPathType | None],
    "qdec_long": typing.NotRequired[InputPathType | None],
    "surfmeasfile": typing.NotRequired[list[InputPathType] | None],
    "volmeasfile_reg": typing.NotRequired[list[str] | None],
    "projfrac": typing.NotRequired[float | None],
    "projfrac_max": typing.NotRequired[list[float] | None],
    "projfrac_avg": typing.NotRequired[list[float] | None],
    "no_mask_non_cortex": bool,
    "session_file": typing.NotRequired[InputPathType | None],
    "dir_file": typing.NotRequired[InputPathType | None],
    "analysis": typing.NotRequired[str | None],
    "contrast": typing.NotRequired[str | None],
    "cvar_flag": bool,
    "offset_flag": bool,
    "map": typing.NotRequired[str | None],
    "etiv_flag": bool,
    "fwhm": typing.NotRequired[float | None],
    "fwhm_src": typing.NotRequired[float | None],
    "niters": typing.NotRequired[float | None],
    "niters_src": typing.NotRequired[float | None],
    "cortex_only": bool,
    "mgz_flag": bool,
    "no_jac_flag": bool,
    "paired_diff_flag": bool,
    "cache_out": typing.NotRequired[str | None],
    "cache_in": typing.NotRequired[str | None],
    "cache_out_only": typing.NotRequired[str | None],
    "no_prune_flag": bool,
    "mean_flag": bool,
    "std_flag": bool,
    "reshape_flag": bool,
    "surfreg": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "synth_flag": bool,
    "tmpdir": typing.NotRequired[str | None],
    "nocleanup_flag": bool,
    "cleanup_flag": bool,
    "log": typing.NotRequired[str | None],
    "nolog_flag": bool,
    "debug_flag": bool,
})


class MrisPreprocOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisPreprocParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_preproc_params(
    outfile: str,
    target_subject: str,
    hemi: str,
    meas: str | None = None,
    label: str | None = None,
    measdir: str | None = None,
    subjects: list[str] | None = None,
    fsgd: InputPathType | None = None,
    subjectlist: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    surfmeasfile: list[InputPathType] | None = None,
    volmeasfile_reg: list[str] | None = None,
    projfrac: float | None = None,
    projfrac_max: list[float] | None = None,
    projfrac_avg: list[float] | None = None,
    no_mask_non_cortex: bool = False,
    session_file: InputPathType | None = None,
    dir_file: InputPathType | None = None,
    analysis: str | None = None,
    contrast: str | None = None,
    cvar_flag: bool = False,
    offset_flag: bool = False,
    map_: str | None = None,
    etiv_flag: bool = False,
    fwhm: float | None = None,
    fwhm_src: float | None = None,
    niters: float | None = None,
    niters_src: float | None = None,
    cortex_only: bool = False,
    mgz_flag: bool = False,
    no_jac_flag: bool = False,
    paired_diff_flag: bool = False,
    cache_out: str | None = None,
    cache_in: str | None = None,
    cache_out_only: str | None = None,
    no_prune_flag: bool = False,
    mean_flag: bool = False,
    std_flag: bool = False,
    reshape_flag: bool = False,
    surfreg: str | None = None,
    subjects_dir: str | None = None,
    synth_flag: bool = False,
    tmpdir: str | None = None,
    nocleanup_flag: bool = False,
    cleanup_flag: bool = False,
    log: str | None = None,
    nolog_flag: bool = False,
    debug_flag: bool = False,
) -> MrisPreprocParametersTagged:
    """
    Build parameters.
    
    Args:
        outfile: Save output here.
        target_subject: Subject to use as the common-space. All input data will\
            be resampled to the surface of this subject.
        hemi: Use hemisphere for source and target surfaces. Can be lh or rh.
        meas: Use subject/surf/hemi.surfmeasure as input. Implies --srcfmt\
            curv.
        label: Look in label/hemi.annotname.(annot,mgz) and use mapmethod nnf.
        measdir: Look in subdir instead of surf.
        subjects: Specify an input subject on the command-line. All subjects\
            must be specified in this way.
        fsgd: Specify the list of input subjects from the fsgd file.
        subjectlist: List all subjects separated by white space in\
            subjlistfile.
        qdec: Specify list of subjects via qdec table file. Assumes the first\
            column is the "fsid".
        qdec_long: Specify list of subjects via longitudinal qdec table file.
        surfmeasfile: Specify full path to input surface measure file.
        volmeasfile_reg: Specify full path to a volume file and its\
            registration matrix file.
        projfrac: When sampling a volume onto the surface, sample a fraction of\
            the thickness along the surface normal.
        projfrac_max: When sampling a volume onto the surface, find max along\
            projection for vol2surf.
        projfrac_avg: Compute average along projection for vol2surf.
        no_mask_non_cortex: Do not mask out non-cortex in vol2surf.
        session_file: FS-FAST session file.
        dir_file: FS-FAST session directory file.
        analysis: FS-FAST analysis.
        contrast: FS-FAST contrast.
        cvar_flag: Use fsfast contrast variance (cesvar).
        offset_flag: Use fsfast mean offset (h-offset).
        map_: Use fsfast contrast/map.
        etiv_flag: Divide each subject's value by the Estimated Total Intra\
            Cranial Volume as found in aseg.stats.
        fwhm: Smooth by fwhm mm on the target surface.
        fwhm_src: Smooth by fwhm mm on the source surface.
        niters: Smooth by niters on the target surface.
        niters_src: Smooth by niters on the source surface.
        cortex_only: Exclude medial wall.
        mgz_flag: Use mgz format internally.
        no_jac_flag: Turn off jacobian correction.
        paired_diff_flag: Compute paired differences after concatenating all\
            inputs together.
        cache_out: Cache the output in the specified cache file.
        cache_in: Use the pre-computed cached data from the specified cache\
            file.
        cache_out_only: Cache data without actually creating an output.
        no_prune_flag: Do not prune the inputs.
        mean_flag: Compute the mean of all inputs.
        std_flag: Compute the standard deviation of all inputs.
        reshape_flag: Reshape spatial dimensions.
        surfreg: Use specified surface registration to the common space.
        subjects_dir: Set SUBJECTS_DIR environment variable.
        synth_flag: Synthesize the input data with white gaussian noise.
        tmpdir: Use specified temporary directory.
        nocleanup_flag: Do not delete temporary files.
        cleanup_flag: Delete temporary files (default).
        log: Specify log file.
        nolog_flag: Do not create a log file.
        debug_flag: Enable debug mode.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_preproc",
        "outfile": outfile,
        "target_subject": target_subject,
        "hemi": hemi,
        "no_mask_non_cortex": no_mask_non_cortex,
        "cvar_flag": cvar_flag,
        "offset_flag": offset_flag,
        "etiv_flag": etiv_flag,
        "cortex_only": cortex_only,
        "mgz_flag": mgz_flag,
        "no_jac_flag": no_jac_flag,
        "paired_diff_flag": paired_diff_flag,
        "no_prune_flag": no_prune_flag,
        "mean_flag": mean_flag,
        "std_flag": std_flag,
        "reshape_flag": reshape_flag,
        "synth_flag": synth_flag,
        "nocleanup_flag": nocleanup_flag,
        "cleanup_flag": cleanup_flag,
        "nolog_flag": nolog_flag,
        "debug_flag": debug_flag,
    }
    if meas is not None:
        params["meas"] = meas
    if label is not None:
        params["label"] = label
    if measdir is not None:
        params["measdir"] = measdir
    if subjects is not None:
        params["subjects"] = subjects
    if fsgd is not None:
        params["fsgd"] = fsgd
    if subjectlist is not None:
        params["subjectlist"] = subjectlist
    if qdec is not None:
        params["qdec"] = qdec
    if qdec_long is not None:
        params["qdec_long"] = qdec_long
    if surfmeasfile is not None:
        params["surfmeasfile"] = surfmeasfile
    if volmeasfile_reg is not None:
        params["volmeasfile_reg"] = volmeasfile_reg
    if projfrac is not None:
        params["projfrac"] = projfrac
    if projfrac_max is not None:
        params["projfrac_max"] = projfrac_max
    if projfrac_avg is not None:
        params["projfrac_avg"] = projfrac_avg
    if session_file is not None:
        params["session_file"] = session_file
    if dir_file is not None:
        params["dir_file"] = dir_file
    if analysis is not None:
        params["analysis"] = analysis
    if contrast is not None:
        params["contrast"] = contrast
    if map_ is not None:
        params["map"] = map_
    if fwhm is not None:
        params["fwhm"] = fwhm
    if fwhm_src is not None:
        params["fwhm_src"] = fwhm_src
    if niters is not None:
        params["niters"] = niters
    if niters_src is not None:
        params["niters_src"] = niters_src
    if cache_out is not None:
        params["cache_out"] = cache_out
    if cache_in is not None:
        params["cache_in"] = cache_in
    if cache_out_only is not None:
        params["cache_out_only"] = cache_out_only
    if surfreg is not None:
        params["surfreg"] = surfreg
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if tmpdir is not None:
        params["tmpdir"] = tmpdir
    if log is not None:
        params["log"] = log
    return params


def mris_preproc_cargs(
    params: MrisPreprocParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_preproc")
    cargs.extend([
        "--out",
        params.get("outfile", None)
    ])
    cargs.extend([
        "--target",
        params.get("target_subject", None)
    ])
    cargs.extend([
        "--hemi",
        params.get("hemi", None)
    ])
    if params.get("meas", None) is not None:
        cargs.extend([
            "--meas",
            params.get("meas", None)
        ])
    if params.get("label", None) is not None:
        cargs.extend([
            "--label",
            params.get("label", None)
        ])
    if params.get("measdir", None) is not None:
        cargs.extend([
            "--measdir",
            params.get("measdir", None)
        ])
    if params.get("subjects", None) is not None:
        cargs.extend([
            "--s",
            *params.get("subjects", None)
        ])
    if params.get("fsgd", None) is not None:
        cargs.extend([
            "--fsgd",
            execution.input_file(params.get("fsgd", None))
        ])
    if params.get("subjectlist", None) is not None:
        cargs.extend([
            "--f",
            execution.input_file(params.get("subjectlist", None))
        ])
    if params.get("qdec", None) is not None:
        cargs.extend([
            "--qdec",
            execution.input_file(params.get("qdec", None))
        ])
    if params.get("qdec_long", None) is not None:
        cargs.extend([
            "--qdec-long",
            execution.input_file(params.get("qdec_long", None))
        ])
    if params.get("surfmeasfile", None) is not None:
        cargs.extend([
            "--is",
            *[execution.input_file(f) for f in params.get("surfmeasfile", None)]
        ])
    if params.get("volmeasfile_reg", None) is not None:
        cargs.extend([
            "--iv",
            *params.get("volmeasfile_reg", None)
        ])
    if params.get("projfrac", None) is not None:
        cargs.extend([
            "--projfrac",
            str(params.get("projfrac", None))
        ])
    if params.get("projfrac_max", None) is not None:
        cargs.extend([
            "--projfrac-max",
            *map(str, params.get("projfrac_max", None))
        ])
    if params.get("projfrac_avg", None) is not None:
        cargs.extend([
            "--projfrac-avg",
            *map(str, params.get("projfrac_avg", None))
        ])
    if params.get("no_mask_non_cortex", False):
        cargs.append("--no-mask-non-cortex")
    if params.get("session_file", None) is not None:
        cargs.extend([
            "--sf",
            execution.input_file(params.get("session_file", None))
        ])
    if params.get("dir_file", None) is not None:
        cargs.extend([
            "--df",
            execution.input_file(params.get("dir_file", None))
        ])
    if params.get("analysis", None) is not None:
        cargs.extend([
            "--analysis",
            params.get("analysis", None)
        ])
    if params.get("contrast", None) is not None:
        cargs.extend([
            "--contrast",
            params.get("contrast", None)
        ])
    if params.get("cvar_flag", False):
        cargs.append("--cvar")
    if params.get("offset_flag", False):
        cargs.append("--offset")
    if params.get("map", None) is not None:
        cargs.extend([
            "--map",
            params.get("map", None)
        ])
    if params.get("etiv_flag", False):
        cargs.append("--etiv")
    if params.get("fwhm", None) is not None:
        cargs.extend([
            "--fwhm",
            str(params.get("fwhm", None))
        ])
    if params.get("fwhm_src", None) is not None:
        cargs.extend([
            "--fwhm-src",
            str(params.get("fwhm_src", None))
        ])
    if params.get("niters", None) is not None:
        cargs.extend([
            "--niters",
            str(params.get("niters", None))
        ])
    if params.get("niters_src", None) is not None:
        cargs.extend([
            "--niters-src",
            str(params.get("niters_src", None))
        ])
    if params.get("cortex_only", False):
        cargs.append("--cortex-only")
    if params.get("mgz_flag", False):
        cargs.append("--mgz")
    if params.get("no_jac_flag", False):
        cargs.append("--no-jac")
    if params.get("paired_diff_flag", False):
        cargs.append("--paired-diff")
    if params.get("cache_out", None) is not None:
        cargs.extend([
            "--cache-out",
            params.get("cache_out", None)
        ])
    if params.get("cache_in", None) is not None:
        cargs.extend([
            "--cache-in",
            params.get("cache_in", None)
        ])
    if params.get("cache_out_only", None) is not None:
        cargs.extend([
            "--cache-out-only",
            params.get("cache_out_only", None)
        ])
    if params.get("no_prune_flag", False):
        cargs.append("--no-prune")
    if params.get("mean_flag", False):
        cargs.append("--mean")
    if params.get("std_flag", False):
        cargs.append("--std")
    if params.get("reshape_flag", False):
        cargs.append("--reshape")
    if params.get("surfreg", None) is not None:
        cargs.extend([
            "--surfreg",
            params.get("surfreg", None)
        ])
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "--SUBJECTS_DIR",
            params.get("subjects_dir", None)
        ])
    if params.get("synth_flag", False):
        cargs.append("--synth")
    if params.get("tmpdir", None) is not None:
        cargs.extend([
            "--tmpdir",
            params.get("tmpdir", None)
        ])
    if params.get("nocleanup_flag", False):
        cargs.append("--nocleanup")
    if params.get("cleanup_flag", False):
        cargs.append("--cleanup")
    if params.get("log", None) is not None:
        cargs.extend([
            "--log",
            params.get("log", None)
        ])
    if params.get("nolog_flag", False):
        cargs.append("--nolog")
    if params.get("debug_flag", False):
        cargs.append("--debug")
    return cargs


def mris_preproc_outputs(
    params: MrisPreprocParameters,
    execution: Execution,
) -> MrisPreprocOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisPreprocOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_preproc_execute(
    params: MrisPreprocParameters,
    runner: Runner | None = None,
) -> MrisPreprocOutputs:
    """
    mris_preproc
    
    Script to prepare surface-based data for high-level analysis by resampling
    surface or volume source data to a common subject and concatenating them
    into one file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisPreprocOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_PREPROC_METADATA)
    params = execution.params(params)
    cargs = mris_preproc_cargs(params, execution)
    ret = mris_preproc_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_preproc(
    outfile: str,
    target_subject: str,
    hemi: str,
    meas: str | None = None,
    label: str | None = None,
    measdir: str | None = None,
    subjects: list[str] | None = None,
    fsgd: InputPathType | None = None,
    subjectlist: InputPathType | None = None,
    qdec: InputPathType | None = None,
    qdec_long: InputPathType | None = None,
    surfmeasfile: list[InputPathType] | None = None,
    volmeasfile_reg: list[str] | None = None,
    projfrac: float | None = None,
    projfrac_max: list[float] | None = None,
    projfrac_avg: list[float] | None = None,
    no_mask_non_cortex: bool = False,
    session_file: InputPathType | None = None,
    dir_file: InputPathType | None = None,
    analysis: str | None = None,
    contrast: str | None = None,
    cvar_flag: bool = False,
    offset_flag: bool = False,
    map_: str | None = None,
    etiv_flag: bool = False,
    fwhm: float | None = None,
    fwhm_src: float | None = None,
    niters: float | None = None,
    niters_src: float | None = None,
    cortex_only: bool = False,
    mgz_flag: bool = False,
    no_jac_flag: bool = False,
    paired_diff_flag: bool = False,
    cache_out: str | None = None,
    cache_in: str | None = None,
    cache_out_only: str | None = None,
    no_prune_flag: bool = False,
    mean_flag: bool = False,
    std_flag: bool = False,
    reshape_flag: bool = False,
    surfreg: str | None = None,
    subjects_dir: str | None = None,
    synth_flag: bool = False,
    tmpdir: str | None = None,
    nocleanup_flag: bool = False,
    cleanup_flag: bool = False,
    log: str | None = None,
    nolog_flag: bool = False,
    debug_flag: bool = False,
    runner: Runner | None = None,
) -> MrisPreprocOutputs:
    """
    mris_preproc
    
    Script to prepare surface-based data for high-level analysis by resampling
    surface or volume source data to a common subject and concatenating them
    into one file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        outfile: Save output here.
        target_subject: Subject to use as the common-space. All input data will\
            be resampled to the surface of this subject.
        hemi: Use hemisphere for source and target surfaces. Can be lh or rh.
        meas: Use subject/surf/hemi.surfmeasure as input. Implies --srcfmt\
            curv.
        label: Look in label/hemi.annotname.(annot,mgz) and use mapmethod nnf.
        measdir: Look in subdir instead of surf.
        subjects: Specify an input subject on the command-line. All subjects\
            must be specified in this way.
        fsgd: Specify the list of input subjects from the fsgd file.
        subjectlist: List all subjects separated by white space in\
            subjlistfile.
        qdec: Specify list of subjects via qdec table file. Assumes the first\
            column is the "fsid".
        qdec_long: Specify list of subjects via longitudinal qdec table file.
        surfmeasfile: Specify full path to input surface measure file.
        volmeasfile_reg: Specify full path to a volume file and its\
            registration matrix file.
        projfrac: When sampling a volume onto the surface, sample a fraction of\
            the thickness along the surface normal.
        projfrac_max: When sampling a volume onto the surface, find max along\
            projection for vol2surf.
        projfrac_avg: Compute average along projection for vol2surf.
        no_mask_non_cortex: Do not mask out non-cortex in vol2surf.
        session_file: FS-FAST session file.
        dir_file: FS-FAST session directory file.
        analysis: FS-FAST analysis.
        contrast: FS-FAST contrast.
        cvar_flag: Use fsfast contrast variance (cesvar).
        offset_flag: Use fsfast mean offset (h-offset).
        map_: Use fsfast contrast/map.
        etiv_flag: Divide each subject's value by the Estimated Total Intra\
            Cranial Volume as found in aseg.stats.
        fwhm: Smooth by fwhm mm on the target surface.
        fwhm_src: Smooth by fwhm mm on the source surface.
        niters: Smooth by niters on the target surface.
        niters_src: Smooth by niters on the source surface.
        cortex_only: Exclude medial wall.
        mgz_flag: Use mgz format internally.
        no_jac_flag: Turn off jacobian correction.
        paired_diff_flag: Compute paired differences after concatenating all\
            inputs together.
        cache_out: Cache the output in the specified cache file.
        cache_in: Use the pre-computed cached data from the specified cache\
            file.
        cache_out_only: Cache data without actually creating an output.
        no_prune_flag: Do not prune the inputs.
        mean_flag: Compute the mean of all inputs.
        std_flag: Compute the standard deviation of all inputs.
        reshape_flag: Reshape spatial dimensions.
        surfreg: Use specified surface registration to the common space.
        subjects_dir: Set SUBJECTS_DIR environment variable.
        synth_flag: Synthesize the input data with white gaussian noise.
        tmpdir: Use specified temporary directory.
        nocleanup_flag: Do not delete temporary files.
        cleanup_flag: Delete temporary files (default).
        log: Specify log file.
        nolog_flag: Do not create a log file.
        debug_flag: Enable debug mode.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisPreprocOutputs`).
    """
    params = mris_preproc_params(
        outfile=outfile,
        target_subject=target_subject,
        hemi=hemi,
        meas=meas,
        label=label,
        measdir=measdir,
        subjects=subjects,
        fsgd=fsgd,
        subjectlist=subjectlist,
        qdec=qdec,
        qdec_long=qdec_long,
        surfmeasfile=surfmeasfile,
        volmeasfile_reg=volmeasfile_reg,
        projfrac=projfrac,
        projfrac_max=projfrac_max,
        projfrac_avg=projfrac_avg,
        no_mask_non_cortex=no_mask_non_cortex,
        session_file=session_file,
        dir_file=dir_file,
        analysis=analysis,
        contrast=contrast,
        cvar_flag=cvar_flag,
        offset_flag=offset_flag,
        map_=map_,
        etiv_flag=etiv_flag,
        fwhm=fwhm,
        fwhm_src=fwhm_src,
        niters=niters,
        niters_src=niters_src,
        cortex_only=cortex_only,
        mgz_flag=mgz_flag,
        no_jac_flag=no_jac_flag,
        paired_diff_flag=paired_diff_flag,
        cache_out=cache_out,
        cache_in=cache_in,
        cache_out_only=cache_out_only,
        no_prune_flag=no_prune_flag,
        mean_flag=mean_flag,
        std_flag=std_flag,
        reshape_flag=reshape_flag,
        surfreg=surfreg,
        subjects_dir=subjects_dir,
        synth_flag=synth_flag,
        tmpdir=tmpdir,
        nocleanup_flag=nocleanup_flag,
        cleanup_flag=cleanup_flag,
        log=log,
        nolog_flag=nolog_flag,
        debug_flag=debug_flag,
    )
    return mris_preproc_execute(params, runner)


__all__ = [
    "MRIS_PREPROC_METADATA",
    "MrisPreprocOutputs",
    "mris_preproc",
    "mris_preproc_execute",
    "mris_preproc_params",
]
