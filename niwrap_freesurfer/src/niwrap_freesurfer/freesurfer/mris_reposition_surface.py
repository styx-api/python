# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_REPOSITION_SURFACE_METADATA = Metadata(
    id="30d5faac758f4d4e79dcb635f98b995e59376ddf.boutiques",
    name="mris_reposition_surface",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisRepositionSurfaceParameters = typing.TypedDict('MrisRepositionSurfaceParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_reposition_surface"]],
    "surf": InputPathType,
    "volume": InputPathType,
    "points": InputPathType,
    "output": str,
    "size": typing.NotRequired[float | None],
    "sigma": typing.NotRequired[float | None],
    "iterations": typing.NotRequired[float | None],
})
MrisRepositionSurfaceParametersTagged = typing.TypedDict('MrisRepositionSurfaceParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_reposition_surface"],
    "surf": InputPathType,
    "volume": InputPathType,
    "points": InputPathType,
    "output": str,
    "size": typing.NotRequired[float | None],
    "sigma": typing.NotRequired[float | None],
    "iterations": typing.NotRequired[float | None],
})


class MrisRepositionSurfaceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisRepositionSurfaceParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType
    """Output surface file"""


def mris_reposition_surface_params(
    surf: InputPathType,
    volume: InputPathType,
    points: InputPathType,
    output: str,
    size: float | None = None,
    sigma: float | None = None,
    iterations: float | None = None,
) -> MrisRepositionSurfaceParametersTagged:
    """
    Build parameters.
    
    Args:
        surf: Input surface.
        volume: Input volume.
        points: Input points.
        output: Output surface filename.
        size: Size parameter for repositioning. Default is 1.
        sigma: Sigma. Default is 2.0.
        iterations: Number of iterations. Default is 1.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_reposition_surface",
        "surf": surf,
        "volume": volume,
        "points": points,
        "output": output,
    }
    if size is not None:
        params["size"] = size
    if sigma is not None:
        params["sigma"] = sigma
    if iterations is not None:
        params["iterations"] = iterations
    return params


def mris_reposition_surface_cargs(
    params: MrisRepositionSurfaceParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_reposition_surface")
    cargs.extend([
        "-s",
        execution.input_file(params.get("surf", None))
    ])
    cargs.extend([
        "-v",
        execution.input_file(params.get("volume", None))
    ])
    cargs.extend([
        "-p",
        execution.input_file(params.get("points", None))
    ])
    cargs.extend([
        "-o",
        params.get("output", None)
    ])
    if params.get("size", None) is not None:
        cargs.extend([
            "-z",
            str(params.get("size", None))
        ])
    if params.get("sigma", None) is not None:
        cargs.extend([
            "-g",
            str(params.get("sigma", None))
        ])
    if params.get("iterations", None) is not None:
        cargs.extend([
            "-i",
            str(params.get("iterations", None))
        ])
    return cargs


def mris_reposition_surface_outputs(
    params: MrisRepositionSurfaceParameters,
    execution: Execution,
) -> MrisRepositionSurfaceOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisRepositionSurfaceOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file(params.get("output", None)),
    )
    return ret


def mris_reposition_surface_execute(
    params: MrisRepositionSurfaceParameters,
    runner: Runner | None = None,
) -> MrisRepositionSurfaceOutputs:
    """
    mris_reposition_surface
    
    Reposition a surface based on the given control points (in JSON format).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisRepositionSurfaceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_REPOSITION_SURFACE_METADATA)
    params = execution.params(params)
    cargs = mris_reposition_surface_cargs(params, execution)
    ret = mris_reposition_surface_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_reposition_surface(
    surf: InputPathType,
    volume: InputPathType,
    points: InputPathType,
    output: str,
    size: float | None = None,
    sigma: float | None = None,
    iterations: float | None = None,
    runner: Runner | None = None,
) -> MrisRepositionSurfaceOutputs:
    """
    mris_reposition_surface
    
    Reposition a surface based on the given control points (in JSON format).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surf: Input surface.
        volume: Input volume.
        points: Input points.
        output: Output surface filename.
        size: Size parameter for repositioning. Default is 1.
        sigma: Sigma. Default is 2.0.
        iterations: Number of iterations. Default is 1.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisRepositionSurfaceOutputs`).
    """
    params = mris_reposition_surface_params(
        surf=surf,
        volume=volume,
        points=points,
        output=output,
        size=size,
        sigma=sigma,
        iterations=iterations,
    )
    return mris_reposition_surface_execute(params, runner)


__all__ = [
    "MRIS_REPOSITION_SURFACE_METADATA",
    "MrisRepositionSurfaceOutputs",
    "mris_reposition_surface",
    "mris_reposition_surface_execute",
    "mris_reposition_surface_params",
]
