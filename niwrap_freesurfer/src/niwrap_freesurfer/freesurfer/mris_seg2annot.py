# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_SEG2ANNOT_METADATA = Metadata(
    id="2908e47d0e8ec511e03b3869cd0b2a8e89e97657.boutiques",
    name="mris_seg2annot",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisSeg2annotParameters = typing.TypedDict('MrisSeg2annotParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_seg2annot"]],
    "surfseg": InputPathType,
    "colortable": typing.NotRequired[InputPathType | None],
    "auto_ctab": typing.NotRequired[str | None],
    "subject": str,
    "hemi": str,
    "output_annotation": str,
    "surf": typing.NotRequired[str | None],
    "debug": bool,
    "debug_vertex": typing.NotRequired[float | None],
    "checkopts": bool,
    "version": bool,
})
MrisSeg2annotParametersTagged = typing.TypedDict('MrisSeg2annotParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_seg2annot"],
    "surfseg": InputPathType,
    "colortable": typing.NotRequired[InputPathType | None],
    "auto_ctab": typing.NotRequired[str | None],
    "subject": str,
    "hemi": str,
    "output_annotation": str,
    "surf": typing.NotRequired[str | None],
    "debug": bool,
    "debug_vertex": typing.NotRequired[float | None],
    "checkopts": bool,
    "version": bool,
})


class MrisSeg2annotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisSeg2annotParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    annotation_file: OutputPathType
    """Output custom annotation file."""


def mris_seg2annot_params(
    surfseg: InputPathType,
    subject: str,
    hemi: str,
    output_annotation: str,
    colortable: InputPathType | None = None,
    auto_ctab: str | None = None,
    surf: str | None = None,
    debug: bool = False,
    debug_vertex: float | None = None,
    checkopts: bool = False,
    version: bool = False,
) -> MrisSeg2annotParametersTagged:
    """
    Build parameters.
    
    Args:
        surfseg: Volume-encoded surface segmentation. Values are indices into\
            the color table.
        subject: Subject name.
        hemi: Surface hemifield.
        output_annotation: Output annotation file. E.g., lh.aparc.annot.
        colortable: Color table used to map segmentation index to name and\
            color.
        auto_ctab: Create a random color table and optionally save it.
        surf: Surface name, default is white.
        debug: Turn on debugging.
        debug_vertex: Turn on debugging for vertex.
        checkopts: Don't run anything, just check options and exit.
        version: Print out version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_seg2annot",
        "surfseg": surfseg,
        "subject": subject,
        "hemi": hemi,
        "output_annotation": output_annotation,
        "debug": debug,
        "checkopts": checkopts,
        "version": version,
    }
    if colortable is not None:
        params["colortable"] = colortable
    if auto_ctab is not None:
        params["auto_ctab"] = auto_ctab
    if surf is not None:
        params["surf"] = surf
    if debug_vertex is not None:
        params["debug_vertex"] = debug_vertex
    return params


def mris_seg2annot_cargs(
    params: MrisSeg2annotParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_seg2annot")
    cargs.extend([
        "--seg",
        execution.input_file(params.get("surfseg", None))
    ])
    if params.get("colortable", None) is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("colortable", None))
        ])
    if params.get("auto_ctab", None) is not None:
        cargs.extend([
            "--ctab-auto",
            params.get("auto_ctab", None)
        ])
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    cargs.extend([
        "--h",
        params.get("hemi", None)
    ])
    cargs.extend([
        "--o",
        params.get("output_annotation", None)
    ])
    if params.get("surf", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surf", None)
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    if params.get("debug_vertex", None) is not None:
        cargs.extend([
            "--debug-vertex",
            str(params.get("debug_vertex", None))
        ])
    if params.get("checkopts", False):
        cargs.append("--checkopts")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mris_seg2annot_outputs(
    params: MrisSeg2annotParameters,
    execution: Execution,
) -> MrisSeg2annotOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisSeg2annotOutputs(
        root=execution.output_file("."),
        annotation_file=execution.output_file(params.get("output_annotation", None)),
    )
    return ret


def mris_seg2annot_execute(
    params: MrisSeg2annotParameters,
    runner: Runner | None = None,
) -> MrisSeg2annotOutputs:
    """
    mris_seg2annot
    
    Converts a surface-based segmentation into a custom annotation file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSeg2annotOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_SEG2ANNOT_METADATA)
    params = execution.params(params)
    cargs = mris_seg2annot_cargs(params, execution)
    ret = mris_seg2annot_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_seg2annot(
    surfseg: InputPathType,
    subject: str,
    hemi: str,
    output_annotation: str,
    colortable: InputPathType | None = None,
    auto_ctab: str | None = None,
    surf: str | None = None,
    debug: bool = False,
    debug_vertex: float | None = None,
    checkopts: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MrisSeg2annotOutputs:
    """
    mris_seg2annot
    
    Converts a surface-based segmentation into a custom annotation file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surfseg: Volume-encoded surface segmentation. Values are indices into\
            the color table.
        subject: Subject name.
        hemi: Surface hemifield.
        output_annotation: Output annotation file. E.g., lh.aparc.annot.
        colortable: Color table used to map segmentation index to name and\
            color.
        auto_ctab: Create a random color table and optionally save it.
        surf: Surface name, default is white.
        debug: Turn on debugging.
        debug_vertex: Turn on debugging for vertex.
        checkopts: Don't run anything, just check options and exit.
        version: Print out version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSeg2annotOutputs`).
    """
    params = mris_seg2annot_params(
        surfseg=surfseg,
        colortable=colortable,
        auto_ctab=auto_ctab,
        subject=subject,
        hemi=hemi,
        output_annotation=output_annotation,
        surf=surf,
        debug=debug,
        debug_vertex=debug_vertex,
        checkopts=checkopts,
        version=version,
    )
    return mris_seg2annot_execute(params, runner)


__all__ = [
    "MRIS_SEG2ANNOT_METADATA",
    "MrisSeg2annotOutputs",
    "mris_seg2annot",
    "mris_seg2annot_execute",
    "mris_seg2annot_params",
]
