# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_SEGMENT_METADATA = Metadata(
    id="979f25c32508a2ccbda06c306be8702b17a08e1f.boutiques",
    name="mris_segment",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisSegmentParameters = typing.TypedDict('MrisSegmentParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_segment"]],
    "subjects": list[str],
    "output_subject": str,
    "output_file": str,
})
MrisSegmentParametersTagged = typing.TypedDict('MrisSegmentParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_segment"],
    "subjects": list[str],
    "output_subject": str,
    "output_file": str,
})


class MrisSegmentOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisSegmentParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segmented_output: OutputPathType
    """Segmented surfaces output file"""


def mris_segment_params(
    subjects: list[str],
    output_subject: str,
    output_file: str,
) -> MrisSegmentParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects: A list of input subjects.
        output_subject: Output subject name.
        output_file: Output file path.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_segment",
        "subjects": subjects,
        "output_subject": output_subject,
        "output_file": output_file,
    }
    return params


def mris_segment_cargs(
    params: MrisSegmentParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_segment")
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output_subject", None))
    cargs.append(params.get("output_file", None))
    return cargs


def mris_segment_outputs(
    params: MrisSegmentParameters,
    execution: Execution,
) -> MrisSegmentOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisSegmentOutputs(
        root=execution.output_file("."),
        segmented_output=execution.output_file(params.get("output_file", None)),
    )
    return ret


def mris_segment_execute(
    params: MrisSegmentParameters,
    runner: Runner | None = None,
) -> MrisSegmentOutputs:
    """
    mris_segment
    
    A command-line tool for segmenting surfaces in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSegmentOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_SEGMENT_METADATA)
    params = execution.params(params)
    cargs = mris_segment_cargs(params, execution)
    ret = mris_segment_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_segment(
    subjects: list[str],
    output_subject: str,
    output_file: str,
    runner: Runner | None = None,
) -> MrisSegmentOutputs:
    """
    mris_segment
    
    A command-line tool for segmenting surfaces in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: A list of input subjects.
        output_subject: Output subject name.
        output_file: Output file path.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSegmentOutputs`).
    """
    params = mris_segment_params(
        subjects=subjects,
        output_subject=output_subject,
        output_file=output_file,
    )
    return mris_segment_execute(params, runner)


__all__ = [
    "MRIS_SEGMENT_METADATA",
    "MrisSegmentOutputs",
    "mris_segment",
    "mris_segment_execute",
    "mris_segment_params",
]
