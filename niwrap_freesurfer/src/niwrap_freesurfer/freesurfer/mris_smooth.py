# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_SMOOTH_METADATA = Metadata(
    id="00da8d7d3a54e8839cd5f2f0f460ce08b83100a6.boutiques",
    name="mris_smooth",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisSmoothParameters = typing.TypedDict('MrisSmoothParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_smooth"]],
    "input_surface": InputPathType,
    "output_surface": str,
    "average_iters": typing.NotRequired[float | None],
    "smoothing_iters": typing.NotRequired[float | None],
    "no_write": bool,
    "curvature_name": typing.NotRequired[str | None],
    "area_name": typing.NotRequired[str | None],
    "gaussian_params": typing.NotRequired[list[float] | None],
    "normalize_area": bool,
    "momentum": typing.NotRequired[float | None],
    "snapshot_interval": typing.NotRequired[float | None],
})
MrisSmoothParametersTagged = typing.TypedDict('MrisSmoothParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_smooth"],
    "input_surface": InputPathType,
    "output_surface": str,
    "average_iters": typing.NotRequired[float | None],
    "smoothing_iters": typing.NotRequired[float | None],
    "no_write": bool,
    "curvature_name": typing.NotRequired[str | None],
    "area_name": typing.NotRequired[str | None],
    "gaussian_params": typing.NotRequired[list[float] | None],
    "normalize_area": bool,
    "momentum": typing.NotRequired[float | None],
    "snapshot_interval": typing.NotRequired[float | None],
})


class MrisSmoothOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisSmoothParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface_file: OutputPathType
    """Output smoothed surface file."""
    curvature_file: OutputPathType
    """Output curvature file (if written)."""
    area_file: OutputPathType
    """Output area file (if written)."""


def mris_smooth_params(
    input_surface: InputPathType,
    output_surface: str,
    average_iters: float | None = None,
    smoothing_iters: float | None = None,
    no_write: bool = False,
    curvature_name: str | None = None,
    area_name: str | None = None,
    gaussian_params: list[float] | None = None,
    normalize_area: bool = False,
    momentum: float | None = None,
    snapshot_interval: float | None = None,
) -> MrisSmoothParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file for smoothing.
        output_surface: Output surface file after smoothing.
        average_iters: Specify number of curvature averaging iterations\
            (default is 10).
        smoothing_iters: Specify number of smoothing iterations (default is\
            10).
        no_write: Disable writing of curvature and area estimates.
        curvature_name: Write curvature to a specified file name (default\
            'curv').
        area_name: Write area to a specified file name (default 'area').
        gaussian_params: Use Gaussian curvature smoothing with specified norm\
            and steps.
        normalize_area: Normalize area after smoothing.
        momentum: Set momentum value.
        snapshot_interval: Write snapshot every specified number of iterations.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_smooth",
        "input_surface": input_surface,
        "output_surface": output_surface,
        "no_write": no_write,
        "normalize_area": normalize_area,
    }
    if average_iters is not None:
        params["average_iters"] = average_iters
    if smoothing_iters is not None:
        params["smoothing_iters"] = smoothing_iters
    if curvature_name is not None:
        params["curvature_name"] = curvature_name
    if area_name is not None:
        params["area_name"] = area_name
    if gaussian_params is not None:
        params["gaussian_params"] = gaussian_params
    if momentum is not None:
        params["momentum"] = momentum
    if snapshot_interval is not None:
        params["snapshot_interval"] = snapshot_interval
    return params


def mris_smooth_cargs(
    params: MrisSmoothParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_smooth")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(params.get("output_surface", None))
    if params.get("average_iters", None) is not None:
        cargs.extend([
            "-a",
            str(params.get("average_iters", None))
        ])
    if params.get("smoothing_iters", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("smoothing_iters", None))
        ])
    if params.get("no_write", False):
        cargs.append("-nw")
    if params.get("curvature_name", None) is not None:
        cargs.extend([
            "-c",
            params.get("curvature_name", None)
        ])
    if params.get("area_name", None) is not None:
        cargs.extend([
            "-b",
            params.get("area_name", None)
        ])
    if params.get("gaussian_params", None) is not None:
        cargs.extend([
            "-g",
            *map(str, params.get("gaussian_params", None))
        ])
    if params.get("normalize_area", False):
        cargs.append("-area")
    if params.get("momentum", None) is not None:
        cargs.extend([
            "-m",
            str(params.get("momentum", None))
        ])
    if params.get("snapshot_interval", None) is not None:
        cargs.extend([
            "-w",
            str(params.get("snapshot_interval", None))
        ])
    return cargs


def mris_smooth_outputs(
    params: MrisSmoothParameters,
    execution: Execution,
) -> MrisSmoothOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisSmoothOutputs(
        root=execution.output_file("."),
        output_surface_file=execution.output_file(params.get("output_surface", None)),
        curvature_file=execution.output_file("${OUTPUT_SURFACE}_curvature"),
        area_file=execution.output_file("${OUTPUT_SURFACE}_area"),
    )
    return ret


def mris_smooth_execute(
    params: MrisSmoothParameters,
    runner: Runner | None = None,
) -> MrisSmoothOutputs:
    """
    mris_smooth
    
    This program smooths the tessellation of a cortical surface and writes out
    the mean curvature and area files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSmoothOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_SMOOTH_METADATA)
    params = execution.params(params)
    cargs = mris_smooth_cargs(params, execution)
    ret = mris_smooth_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_smooth(
    input_surface: InputPathType,
    output_surface: str,
    average_iters: float | None = None,
    smoothing_iters: float | None = None,
    no_write: bool = False,
    curvature_name: str | None = None,
    area_name: str | None = None,
    gaussian_params: list[float] | None = None,
    normalize_area: bool = False,
    momentum: float | None = None,
    snapshot_interval: float | None = None,
    runner: Runner | None = None,
) -> MrisSmoothOutputs:
    """
    mris_smooth
    
    This program smooths the tessellation of a cortical surface and writes out
    the mean curvature and area files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file for smoothing.
        output_surface: Output surface file after smoothing.
        average_iters: Specify number of curvature averaging iterations\
            (default is 10).
        smoothing_iters: Specify number of smoothing iterations (default is\
            10).
        no_write: Disable writing of curvature and area estimates.
        curvature_name: Write curvature to a specified file name (default\
            'curv').
        area_name: Write area to a specified file name (default 'area').
        gaussian_params: Use Gaussian curvature smoothing with specified norm\
            and steps.
        normalize_area: Normalize area after smoothing.
        momentum: Set momentum value.
        snapshot_interval: Write snapshot every specified number of iterations.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSmoothOutputs`).
    """
    params = mris_smooth_params(
        input_surface=input_surface,
        output_surface=output_surface,
        average_iters=average_iters,
        smoothing_iters=smoothing_iters,
        no_write=no_write,
        curvature_name=curvature_name,
        area_name=area_name,
        gaussian_params=gaussian_params,
        normalize_area=normalize_area,
        momentum=momentum,
        snapshot_interval=snapshot_interval,
    )
    return mris_smooth_execute(params, runner)


__all__ = [
    "MRIS_SMOOTH_METADATA",
    "MrisSmoothOutputs",
    "mris_smooth",
    "mris_smooth_execute",
    "mris_smooth_params",
]
