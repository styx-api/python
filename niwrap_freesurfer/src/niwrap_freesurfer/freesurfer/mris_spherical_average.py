# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_SPHERICAL_AVERAGE_METADATA = Metadata(
    id="49fbe3a280d7a2c1507533169db06a97eaf05a25.boutiques",
    name="mris_spherical_average",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisSphericalAverageParameters = typing.TypedDict('MrisSphericalAverageParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_spherical_average"]],
    "which": typing.Literal["coords", "label", "vals", "curv", "area"],
    "fname": str,
    "hemi": typing.Literal["lh", "rh"],
    "spherical_surf": str,
    "subjects": list[str],
    "output": str,
    "segment": bool,
    "normalize": bool,
    "orig": typing.NotRequired[str | None],
    "output_subject_name": typing.NotRequired[str | None],
    "output_subject_dir": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "average_area": bool,
    "summary_statistics": typing.NotRequired[str | None],
})
MrisSphericalAverageParametersTagged = typing.TypedDict('MrisSphericalAverageParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_spherical_average"],
    "which": typing.Literal["coords", "label", "vals", "curv", "area"],
    "fname": str,
    "hemi": typing.Literal["lh", "rh"],
    "spherical_surf": str,
    "subjects": list[str],
    "output": str,
    "segment": bool,
    "normalize": bool,
    "orig": typing.NotRequired[str | None],
    "output_subject_name": typing.NotRequired[str | None],
    "output_subject_dir": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "average_area": bool,
    "summary_statistics": typing.NotRequired[str | None],
})


class MrisSphericalAverageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisSphericalAverageParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_spherical_average_params(
    which: typing.Literal["coords", "label", "vals", "curv", "area"],
    fname: str,
    hemi: typing.Literal["lh", "rh"],
    spherical_surf: str,
    subjects: list[str],
    output: str,
    segment: bool = False,
    normalize: bool = False,
    orig: str | None = None,
    output_subject_name: str | None = None,
    output_subject_dir: str | None = None,
    subjects_dir: str | None = None,
    average_area: bool = False,
    summary_statistics: str | None = None,
) -> MrisSphericalAverageParametersTagged:
    """
    Build parameters.
    
    Args:
        which: Specifies the type, one of: coords, label, vals, curv, or area.
        fname: Input file name.
        hemi: Hemisphere: one of lh or rh.
        spherical_surf: The spherical surface file.
        subjects: List of subjects.
        output: Output file or directory.
        segment: Only use largest connected component of label.
        normalize: Normalize output so it can be interpreted as a probability.
        orig: Use <name> as original surface position; default=orig.
        output_subject_name: Use <output subject name> as the space to write\
            the results in instead of the last subject given.
        output_subject_dir: Use <output subject dir> as the subjects dir for\
            the output subject.
        subjects_dir: Set the subjects directory.
        average_area: Compute threshold for label that will give the average\
            label approximately the average surface area.
        summary_statistics: Generate summary statistics and write them into\
            sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_spherical_average",
        "which": which,
        "fname": fname,
        "hemi": hemi,
        "spherical_surf": spherical_surf,
        "subjects": subjects,
        "output": output,
        "segment": segment,
        "normalize": normalize,
        "average_area": average_area,
    }
    if orig is not None:
        params["orig"] = orig
    if output_subject_name is not None:
        params["output_subject_name"] = output_subject_name
    if output_subject_dir is not None:
        params["output_subject_dir"] = output_subject_dir
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if summary_statistics is not None:
        params["summary_statistics"] = summary_statistics
    return params


def mris_spherical_average_cargs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_spherical_average")
    cargs.append(params.get("which", None))
    cargs.append(params.get("fname", None))
    cargs.append(params.get("hemi", None))
    cargs.append(params.get("spherical_surf", None))
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output", None))
    if params.get("segment", False):
        cargs.append("-segment")
    if params.get("normalize", False):
        cargs.append("-n")
    if params.get("orig", None) is not None:
        cargs.extend([
            "-orig",
            params.get("orig", None)
        ])
    if params.get("output_subject_name", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_subject_name", None)
        ])
    if params.get("output_subject_dir", None) is not None:
        cargs.extend([
            "-osdir",
            params.get("output_subject_dir", None)
        ])
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "-sdir",
            params.get("subjects_dir", None)
        ])
    if params.get("average_area", False):
        cargs.append("-average_area")
    if params.get("summary_statistics", None) is not None:
        cargs.extend([
            "-s",
            params.get("summary_statistics", None)
        ])
    return cargs


def mris_spherical_average_outputs(
    params: MrisSphericalAverageParameters,
    execution: Execution,
) -> MrisSphericalAverageOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisSphericalAverageOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_spherical_average_execute(
    params: MrisSphericalAverageParameters,
    runner: Runner | None = None,
) -> MrisSphericalAverageOutputs:
    """
    mris_spherical_average
    
    This tool adds a template into an average surface in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_SPHERICAL_AVERAGE_METADATA)
    params = execution.params(params)
    cargs = mris_spherical_average_cargs(params, execution)
    ret = mris_spherical_average_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_spherical_average(
    which: typing.Literal["coords", "label", "vals", "curv", "area"],
    fname: str,
    hemi: typing.Literal["lh", "rh"],
    spherical_surf: str,
    subjects: list[str],
    output: str,
    segment: bool = False,
    normalize: bool = False,
    orig: str | None = None,
    output_subject_name: str | None = None,
    output_subject_dir: str | None = None,
    subjects_dir: str | None = None,
    average_area: bool = False,
    summary_statistics: str | None = None,
    runner: Runner | None = None,
) -> MrisSphericalAverageOutputs:
    """
    mris_spherical_average
    
    This tool adds a template into an average surface in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        which: Specifies the type, one of: coords, label, vals, curv, or area.
        fname: Input file name.
        hemi: Hemisphere: one of lh or rh.
        spherical_surf: The spherical surface file.
        subjects: List of subjects.
        output: Output file or directory.
        segment: Only use largest connected component of label.
        normalize: Normalize output so it can be interpreted as a probability.
        orig: Use <name> as original surface position; default=orig.
        output_subject_name: Use <output subject name> as the space to write\
            the results in instead of the last subject given.
        output_subject_dir: Use <output subject dir> as the subjects dir for\
            the output subject.
        subjects_dir: Set the subjects directory.
        average_area: Compute threshold for label that will give the average\
            label approximately the average surface area.
        summary_statistics: Generate summary statistics and write them into\
            sigavg<cond #>-<hemi>.w and sigvar<cond #>-<hemi>.w.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSphericalAverageOutputs`).
    """
    params = mris_spherical_average_params(
        which=which,
        fname=fname,
        hemi=hemi,
        spherical_surf=spherical_surf,
        subjects=subjects,
        output=output,
        segment=segment,
        normalize=normalize,
        orig=orig,
        output_subject_name=output_subject_name,
        output_subject_dir=output_subject_dir,
        subjects_dir=subjects_dir,
        average_area=average_area,
        summary_statistics=summary_statistics,
    )
    return mris_spherical_average_execute(params, runner)


__all__ = [
    "MRIS_SPHERICAL_AVERAGE_METADATA",
    "MrisSphericalAverageOutputs",
    "mris_spherical_average",
    "mris_spherical_average_execute",
    "mris_spherical_average_params",
]
