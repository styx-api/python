# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_SURFACE_TO_VOL_DISTANCES_METADATA = Metadata(
    id="fafba889762effb030273d18df3d68b319b3f6a6.boutiques",
    name="mris_surface_to_vol_distances",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisSurfaceToVolDistancesParameters = typing.TypedDict('MrisSurfaceToVolDistancesParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_surface_to_vol_distances"]],
    "average_subject": str,
    "hemisphere": str,
    "subjects": list[str],
    "output_prefix": str,
})
MrisSurfaceToVolDistancesParametersTagged = typing.TypedDict('MrisSurfaceToVolDistancesParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_surface_to_vol_distances"],
    "average_subject": str,
    "hemisphere": str,
    "subjects": list[str],
    "output_prefix": str,
})


class MrisSurfaceToVolDistancesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisSurfaceToVolDistancesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_distances: OutputPathType
    """Output file containing surface-to-volume distances."""


def mris_surface_to_vol_distances_params(
    average_subject: str,
    hemisphere: str,
    subjects: list[str],
    output_prefix: str,
) -> MrisSurfaceToVolDistancesParametersTagged:
    """
    Build parameters.
    
    Args:
        average_subject: The average subject.
        hemisphere: Hemisphere identifier (e.g., lh or rh).
        subjects: List of subjects for distance calculation.
        output_prefix: Prefix for output files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_surface_to_vol_distances",
        "average_subject": average_subject,
        "hemisphere": hemisphere,
        "subjects": subjects,
        "output_prefix": output_prefix,
    }
    return params


def mris_surface_to_vol_distances_cargs(
    params: MrisSurfaceToVolDistancesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_surface_to_vol_distances")
    cargs.append(params.get("average_subject", None))
    cargs.append(params.get("hemisphere", None))
    cargs.extend(params.get("subjects", None))
    cargs.append(params.get("output_prefix", None))
    return cargs


def mris_surface_to_vol_distances_outputs(
    params: MrisSurfaceToVolDistancesParameters,
    execution: Execution,
) -> MrisSurfaceToVolDistancesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisSurfaceToVolDistancesOutputs(
        root=execution.output_file("."),
        output_distances=execution.output_file(params.get("output_prefix", None) + "_distances.txt"),
    )
    return ret


def mris_surface_to_vol_distances_execute(
    params: MrisSurfaceToVolDistancesParameters,
    runner: Runner | None = None,
) -> MrisSurfaceToVolDistancesOutputs:
    """
    mris_surface_to_vol_distances
    
    Tool from FreeSurfer to calculate surface-to-volume distances.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSurfaceToVolDistancesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_SURFACE_TO_VOL_DISTANCES_METADATA)
    params = execution.params(params)
    cargs = mris_surface_to_vol_distances_cargs(params, execution)
    ret = mris_surface_to_vol_distances_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_surface_to_vol_distances(
    average_subject: str,
    hemisphere: str,
    subjects: list[str],
    output_prefix: str,
    runner: Runner | None = None,
) -> MrisSurfaceToVolDistancesOutputs:
    """
    mris_surface_to_vol_distances
    
    Tool from FreeSurfer to calculate surface-to-volume distances.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        average_subject: The average subject.
        hemisphere: Hemisphere identifier (e.g., lh or rh).
        subjects: List of subjects for distance calculation.
        output_prefix: Prefix for output files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisSurfaceToVolDistancesOutputs`).
    """
    params = mris_surface_to_vol_distances_params(
        average_subject=average_subject,
        hemisphere=hemisphere,
        subjects=subjects,
        output_prefix=output_prefix,
    )
    return mris_surface_to_vol_distances_execute(params, runner)


__all__ = [
    "MRIS_SURFACE_TO_VOL_DISTANCES_METADATA",
    "MrisSurfaceToVolDistancesOutputs",
    "mris_surface_to_vol_distances",
    "mris_surface_to_vol_distances_execute",
    "mris_surface_to_vol_distances_params",
]
