# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_TARGET_POS_METADATA = Metadata(
    id="a7ad1c96ec12bbd6703e8e4bb8235b624da111f1.boutiques",
    name="mris_target_pos",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisTargetPosParameters = typing.TypedDict('MrisTargetPosParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_target_pos"]],
    "input_volume": InputPathType,
    "input_surface": InputPathType,
    "output_surface": str,
    "adgws_file": str,
    "threshold_values": typing.NotRequired[list[float] | None],
    "label": typing.NotRequired[str | None],
    "interpolation_method": typing.NotRequired[str | None],
    "debug_vertex": typing.NotRequired[float | None],
    "cbv_flag": bool,
    "debug_flag": bool,
    "check_options": bool,
    "help_flag": bool,
    "version_flag": bool,
})
MrisTargetPosParametersTagged = typing.TypedDict('MrisTargetPosParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_target_pos"],
    "input_volume": InputPathType,
    "input_surface": InputPathType,
    "output_surface": str,
    "adgws_file": str,
    "threshold_values": typing.NotRequired[list[float] | None],
    "label": typing.NotRequired[str | None],
    "interpolation_method": typing.NotRequired[str | None],
    "debug_vertex": typing.NotRequired[float | None],
    "cbv_flag": bool,
    "debug_flag": bool,
    "check_options": bool,
    "help_flag": bool,
    "version_flag": bool,
})


class MrisTargetPosOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisTargetPosParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_target_pos_params(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_surface: str,
    adgws_file: str,
    threshold_values: list[float] | None = None,
    label: str | None = None,
    interpolation_method: str | None = None,
    debug_vertex: float | None = None,
    cbv_flag: bool = False,
    debug_flag: bool = False,
    check_options: bool = False,
    help_flag: bool = False,
    version_flag: bool = False,
) -> MrisTargetPosParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input volume file.
        input_surface: Input surface file.
        output_surface: Output surface file.
        adgws_file: ADGWS file.
        threshold_values: Threshold values for inward and outward target\
            positions.
        label: Label for processing.
        interpolation_method: Interpolation method name.
        debug_vertex: Vertex number for debugging.
        cbv_flag: CBV flag.
        debug_flag: Turn on debugging.
        check_options: Check options without running the program.
        help_flag: Display help information.
        version_flag: Display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_target_pos",
        "input_volume": input_volume,
        "input_surface": input_surface,
        "output_surface": output_surface,
        "adgws_file": adgws_file,
        "cbv_flag": cbv_flag,
        "debug_flag": debug_flag,
        "check_options": check_options,
        "help_flag": help_flag,
        "version_flag": version_flag,
    }
    if threshold_values is not None:
        params["threshold_values"] = threshold_values
    if label is not None:
        params["label"] = label
    if interpolation_method is not None:
        params["interpolation_method"] = interpolation_method
    if debug_vertex is not None:
        params["debug_vertex"] = debug_vertex
    return params


def mris_target_pos_cargs(
    params: MrisTargetPosParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_target_pos")
    cargs.extend([
        "--v",
        execution.input_file(params.get("input_volume", None))
    ])
    cargs.extend([
        "--i",
        execution.input_file(params.get("input_surface", None))
    ])
    cargs.extend([
        "--o",
        params.get("output_surface", None)
    ])
    cargs.extend([
        "--adgws",
        params.get("adgws_file", None)
    ])
    if params.get("threshold_values", None) is not None:
        cargs.extend([
            "--thresh",
            *map(str, params.get("threshold_values", None))
        ])
    if params.get("label", None) is not None:
        cargs.extend([
            "--l",
            params.get("label", None)
        ])
    if params.get("interpolation_method", None) is not None:
        cargs.extend([
            "--interp",
            params.get("interpolation_method", None)
        ])
    if params.get("debug_vertex", None) is not None:
        cargs.extend([
            "--debug-vertex",
            str(params.get("debug_vertex", None))
        ])
    if params.get("cbv_flag", False):
        cargs.append("--cbv")
    if params.get("debug_flag", False):
        cargs.append("--debug")
    if params.get("check_options", False):
        cargs.append("--checkopts")
    if params.get("help_flag", False):
        cargs.append("--help")
    if params.get("version_flag", False):
        cargs.append("--version")
    return cargs


def mris_target_pos_outputs(
    params: MrisTargetPosParameters,
    execution: Execution,
) -> MrisTargetPosOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisTargetPosOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_target_pos_execute(
    params: MrisTargetPosParameters,
    runner: Runner | None = None,
) -> MrisTargetPosOutputs:
    """
    mris_target_pos
    
    Tool for setting target positions of a surface using input imaging data and
    other parameters.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTargetPosOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_TARGET_POS_METADATA)
    params = execution.params(params)
    cargs = mris_target_pos_cargs(params, execution)
    ret = mris_target_pos_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_target_pos(
    input_volume: InputPathType,
    input_surface: InputPathType,
    output_surface: str,
    adgws_file: str,
    threshold_values: list[float] | None = None,
    label: str | None = None,
    interpolation_method: str | None = None,
    debug_vertex: float | None = None,
    cbv_flag: bool = False,
    debug_flag: bool = False,
    check_options: bool = False,
    help_flag: bool = False,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> MrisTargetPosOutputs:
    """
    mris_target_pos
    
    Tool for setting target positions of a surface using input imaging data and
    other parameters.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume file.
        input_surface: Input surface file.
        output_surface: Output surface file.
        adgws_file: ADGWS file.
        threshold_values: Threshold values for inward and outward target\
            positions.
        label: Label for processing.
        interpolation_method: Interpolation method name.
        debug_vertex: Vertex number for debugging.
        cbv_flag: CBV flag.
        debug_flag: Turn on debugging.
        check_options: Check options without running the program.
        help_flag: Display help information.
        version_flag: Display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTargetPosOutputs`).
    """
    params = mris_target_pos_params(
        input_volume=input_volume,
        input_surface=input_surface,
        output_surface=output_surface,
        adgws_file=adgws_file,
        threshold_values=threshold_values,
        label=label,
        interpolation_method=interpolation_method,
        debug_vertex=debug_vertex,
        cbv_flag=cbv_flag,
        debug_flag=debug_flag,
        check_options=check_options,
        help_flag=help_flag,
        version_flag=version_flag,
    )
    return mris_target_pos_execute(params, runner)


__all__ = [
    "MRIS_TARGET_POS_METADATA",
    "MrisTargetPosOutputs",
    "mris_target_pos",
    "mris_target_pos_execute",
    "mris_target_pos_params",
]
