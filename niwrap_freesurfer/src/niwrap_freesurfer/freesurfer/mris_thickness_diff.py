# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_THICKNESS_DIFF_METADATA = Metadata(
    id="a3ec581547cad53689b40c2404afc383dac2983f.boutiques",
    name="mris_thickness_diff",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisThicknessDiffParameters = typing.TypedDict('MrisThicknessDiffParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_thickness_diff"]],
    "src_type": typing.NotRequired[str | None],
    "trg_type": typing.NotRequired[str | None],
    "out_file": str,
    "out_resampled": typing.NotRequired[str | None],
    "nsmooth": typing.NotRequired[float | None],
    "register": bool,
    "xform": typing.NotRequired[InputPathType | None],
    "invert": bool,
    "src_volume": typing.NotRequired[InputPathType | None],
    "dst_volume": typing.NotRequired[InputPathType | None],
    "abs": bool,
    "log_file": typing.NotRequired[InputPathType | None],
    "subject_name": typing.NotRequired[str | None],
})
MrisThicknessDiffParametersTagged = typing.TypedDict('MrisThicknessDiffParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_thickness_diff"],
    "src_type": typing.NotRequired[str | None],
    "trg_type": typing.NotRequired[str | None],
    "out_file": str,
    "out_resampled": typing.NotRequired[str | None],
    "nsmooth": typing.NotRequired[float | None],
    "register": bool,
    "xform": typing.NotRequired[InputPathType | None],
    "invert": bool,
    "src_volume": typing.NotRequired[InputPathType | None],
    "dst_volume": typing.NotRequired[InputPathType | None],
    "abs": bool,
    "log_file": typing.NotRequired[InputPathType | None],
    "subject_name": typing.NotRequired[str | None],
})


class MrisThicknessDiffOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisThicknessDiffParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_difference: OutputPathType
    """Output file with the difference mapped onto the surface"""
    output_resampled: OutputPathType | None
    """Resampled output thickness file"""


def mris_thickness_diff_params(
    out_file: str,
    src_type: str | None = None,
    trg_type: str | None = None,
    out_resampled: str | None = None,
    nsmooth: float | None = None,
    register: bool = False,
    xform: InputPathType | None = None,
    invert: bool = False,
    src_volume: InputPathType | None = None,
    dst_volume: InputPathType | None = None,
    abs_: bool = False,
    log_file: InputPathType | None = None,
    subject_name: str | None = None,
) -> MrisThicknessDiffParametersTagged:
    """
    Build parameters.
    
    Args:
        out_file: Output file name.
        src_type: Input surface data format (curv, paint or w).
        trg_type: Output format (paint or w).
        out_resampled: Output resampled thickness.
        nsmooth: Number of smoothing steps.
        register: Perform ICP rigid registration.
        xform: Apply LTA transform to align input surface1 to surface2.
        invert: Reversely apply -xform.
        src_volume: Source volume for -xform.
        dst_volume: Target volume for -xform.
        abs_: Compute the std of abs-thickness-diff.
        log_file: Log file name.
        subject_name: Subject name (to be recorded in logfile).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_thickness_diff",
        "out_file": out_file,
        "register": register,
        "invert": invert,
        "abs": abs_,
    }
    if src_type is not None:
        params["src_type"] = src_type
    if trg_type is not None:
        params["trg_type"] = trg_type
    if out_resampled is not None:
        params["out_resampled"] = out_resampled
    if nsmooth is not None:
        params["nsmooth"] = nsmooth
    if xform is not None:
        params["xform"] = xform
    if src_volume is not None:
        params["src_volume"] = src_volume
    if dst_volume is not None:
        params["dst_volume"] = dst_volume
    if log_file is not None:
        params["log_file"] = log_file
    if subject_name is not None:
        params["subject_name"] = subject_name
    return params


def mris_thickness_diff_cargs(
    params: MrisThicknessDiffParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_thickness_diff")
    if params.get("src_type", None) is not None:
        cargs.extend([
            "-src_type",
            params.get("src_type", None)
        ])
    if params.get("trg_type", None) is not None:
        cargs.extend([
            "-trg_type",
            params.get("trg_type", None)
        ])
    cargs.extend([
        "-out",
        params.get("out_file", None)
    ])
    if params.get("out_resampled", None) is not None:
        cargs.extend([
            "-out_resampled",
            params.get("out_resampled", None)
        ])
    if params.get("nsmooth", None) is not None:
        cargs.extend([
            "-nsmooth",
            str(params.get("nsmooth", None))
        ])
    if params.get("register", False):
        cargs.append("-register")
    if params.get("xform", None) is not None:
        cargs.extend([
            "-xform",
            execution.input_file(params.get("xform", None))
        ])
    if params.get("invert", False):
        cargs.append("-invert")
    if params.get("src_volume", None) is not None:
        cargs.extend([
            "-src",
            execution.input_file(params.get("src_volume", None))
        ])
    if params.get("dst_volume", None) is not None:
        cargs.extend([
            "-dst",
            execution.input_file(params.get("dst_volume", None))
        ])
    if params.get("abs", False):
        cargs.append("-abs")
    if params.get("log_file", None) is not None:
        cargs.extend([
            "-L",
            execution.input_file(params.get("log_file", None))
        ])
    if params.get("subject_name", None) is not None:
        cargs.extend([
            "-S",
            params.get("subject_name", None)
        ])
    return cargs


def mris_thickness_diff_outputs(
    params: MrisThicknessDiffParameters,
    execution: Execution,
) -> MrisThicknessDiffOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisThicknessDiffOutputs(
        root=execution.output_file("."),
        output_difference=execution.output_file(params.get("out_file", None)),
        output_resampled=execution.output_file(params.get("out_resampled", None)) if (params.get("out_resampled") is not None) else None,
    )
    return ret


def mris_thickness_diff_execute(
    params: MrisThicknessDiffParameters,
    runner: Runner | None = None,
) -> MrisThicknessDiffOutputs:
    """
    mris_thickness_diff
    
    Computes the difference of two surface data sets defined on two surface
    meshes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisThicknessDiffOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_THICKNESS_DIFF_METADATA)
    params = execution.params(params)
    cargs = mris_thickness_diff_cargs(params, execution)
    ret = mris_thickness_diff_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_thickness_diff(
    out_file: str,
    src_type: str | None = None,
    trg_type: str | None = None,
    out_resampled: str | None = None,
    nsmooth: float | None = None,
    register: bool = False,
    xform: InputPathType | None = None,
    invert: bool = False,
    src_volume: InputPathType | None = None,
    dst_volume: InputPathType | None = None,
    abs_: bool = False,
    log_file: InputPathType | None = None,
    subject_name: str | None = None,
    runner: Runner | None = None,
) -> MrisThicknessDiffOutputs:
    """
    mris_thickness_diff
    
    Computes the difference of two surface data sets defined on two surface
    meshes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        out_file: Output file name.
        src_type: Input surface data format (curv, paint or w).
        trg_type: Output format (paint or w).
        out_resampled: Output resampled thickness.
        nsmooth: Number of smoothing steps.
        register: Perform ICP rigid registration.
        xform: Apply LTA transform to align input surface1 to surface2.
        invert: Reversely apply -xform.
        src_volume: Source volume for -xform.
        dst_volume: Target volume for -xform.
        abs_: Compute the std of abs-thickness-diff.
        log_file: Log file name.
        subject_name: Subject name (to be recorded in logfile).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisThicknessDiffOutputs`).
    """
    params = mris_thickness_diff_params(
        src_type=src_type,
        trg_type=trg_type,
        out_file=out_file,
        out_resampled=out_resampled,
        nsmooth=nsmooth,
        register=register,
        xform=xform,
        invert=invert,
        src_volume=src_volume,
        dst_volume=dst_volume,
        abs_=abs_,
        log_file=log_file,
        subject_name=subject_name,
    )
    return mris_thickness_diff_execute(params, runner)


__all__ = [
    "MRIS_THICKNESS_DIFF_METADATA",
    "MrisThicknessDiffOutputs",
    "mris_thickness_diff",
    "mris_thickness_diff_execute",
    "mris_thickness_diff_params",
]
