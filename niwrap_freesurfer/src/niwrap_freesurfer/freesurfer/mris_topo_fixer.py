# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_TOPO_FIXER_METADATA = Metadata(
    id="130981631be6b9b28baff8c72da137e074e52936.boutiques",
    name="mris_topo_fixer",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisTopoFixerParameters = typing.TypedDict('MrisTopoFixerParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_topo_fixer"]],
    "input_surface": InputPathType,
    "output_surface": str,
})
MrisTopoFixerParametersTagged = typing.TypedDict('MrisTopoFixerParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_topo_fixer"],
    "input_surface": InputPathType,
    "output_surface": str,
})


class MrisTopoFixerOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisTopoFixerParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fixed_surface: OutputPathType
    """Surface file with fixed topology."""


def mris_topo_fixer_params(
    input_surface: InputPathType,
    output_surface: str,
) -> MrisTopoFixerParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Input surface file that needs topological fixing.
        output_surface: Output surface file with fixed topology.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_topo_fixer",
        "input_surface": input_surface,
        "output_surface": output_surface,
    }
    return params


def mris_topo_fixer_cargs(
    params: MrisTopoFixerParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_topo_fixer")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(params.get("output_surface", None))
    return cargs


def mris_topo_fixer_outputs(
    params: MrisTopoFixerParameters,
    execution: Execution,
) -> MrisTopoFixerOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisTopoFixerOutputs(
        root=execution.output_file("."),
        fixed_surface=execution.output_file(params.get("output_surface", None)),
    )
    return ret


def mris_topo_fixer_execute(
    params: MrisTopoFixerParameters,
    runner: Runner | None = None,
) -> MrisTopoFixerOutputs:
    """
    mris_topo_fixer
    
    FreeSurfer tool for fixing topological defects in cortical surface meshes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTopoFixerOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_TOPO_FIXER_METADATA)
    params = execution.params(params)
    cargs = mris_topo_fixer_cargs(params, execution)
    ret = mris_topo_fixer_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_topo_fixer(
    input_surface: InputPathType,
    output_surface: str,
    runner: Runner | None = None,
) -> MrisTopoFixerOutputs:
    """
    mris_topo_fixer
    
    FreeSurfer tool for fixing topological defects in cortical surface meshes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Input surface file that needs topological fixing.
        output_surface: Output surface file with fixed topology.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTopoFixerOutputs`).
    """
    params = mris_topo_fixer_params(
        input_surface=input_surface,
        output_surface=output_surface,
    )
    return mris_topo_fixer_execute(params, runner)


__all__ = [
    "MRIS_TOPO_FIXER_METADATA",
    "MrisTopoFixerOutputs",
    "mris_topo_fixer",
    "mris_topo_fixer_execute",
    "mris_topo_fixer_params",
]
