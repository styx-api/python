# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_TRANSLATE_ANNOTATION_METADATA = Metadata(
    id="ff0cfbba26df08e97c0f75744311fd74364e37d6.boutiques",
    name="mris_translate_annotation",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisTranslateAnnotationParameters = typing.TypedDict('MrisTranslateAnnotationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_translate_annotation"]],
    "subject": str,
    "hemi": str,
    "in_annot": InputPathType,
    "translation_file": InputPathType,
    "out_annot": str,
})
MrisTranslateAnnotationParametersTagged = typing.TypedDict('MrisTranslateAnnotationParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_translate_annotation"],
    "subject": str,
    "hemi": str,
    "in_annot": InputPathType,
    "translation_file": InputPathType,
    "out_annot": str,
})


class MrisTranslateAnnotationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisTranslateAnnotationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_annotation: OutputPathType
    """The output file with the translated annotation."""


def mris_translate_annotation_params(
    subject: str,
    hemi: str,
    in_annot: InputPathType,
    translation_file: InputPathType,
    out_annot: str,
) -> MrisTranslateAnnotationParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: The subject identifier.
        hemi: Hemisphere identifier (e.g., lh or rh).
        in_annot: Input annotation file.
        translation_file: Translation table file.
        out_annot: Output annotation file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_translate_annotation",
        "subject": subject,
        "hemi": hemi,
        "in_annot": in_annot,
        "translation_file": translation_file,
        "out_annot": out_annot,
    }
    return params


def mris_translate_annotation_cargs(
    params: MrisTranslateAnnotationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_translate_annotation")
    cargs.append(params.get("subject", None))
    cargs.append(params.get("hemi", None))
    cargs.append(execution.input_file(params.get("in_annot", None)))
    cargs.append(execution.input_file(params.get("translation_file", None)))
    cargs.append(params.get("out_annot", None))
    return cargs


def mris_translate_annotation_outputs(
    params: MrisTranslateAnnotationParameters,
    execution: Execution,
) -> MrisTranslateAnnotationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisTranslateAnnotationOutputs(
        root=execution.output_file("."),
        output_annotation=execution.output_file(params.get("out_annot", None)),
    )
    return ret


def mris_translate_annotation_execute(
    params: MrisTranslateAnnotationParameters,
    runner: Runner | None = None,
) -> MrisTranslateAnnotationOutputs:
    """
    mris_translate_annotation
    
    This program applies a translation table to an annotation file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTranslateAnnotationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_TRANSLATE_ANNOTATION_METADATA)
    params = execution.params(params)
    cargs = mris_translate_annotation_cargs(params, execution)
    ret = mris_translate_annotation_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_translate_annotation(
    subject: str,
    hemi: str,
    in_annot: InputPathType,
    translation_file: InputPathType,
    out_annot: str,
    runner: Runner | None = None,
) -> MrisTranslateAnnotationOutputs:
    """
    mris_translate_annotation
    
    This program applies a translation table to an annotation file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: The subject identifier.
        hemi: Hemisphere identifier (e.g., lh or rh).
        in_annot: Input annotation file.
        translation_file: Translation table file.
        out_annot: Output annotation file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTranslateAnnotationOutputs`).
    """
    params = mris_translate_annotation_params(
        subject=subject,
        hemi=hemi,
        in_annot=in_annot,
        translation_file=translation_file,
        out_annot=out_annot,
    )
    return mris_translate_annotation_execute(params, runner)


__all__ = [
    "MRIS_TRANSLATE_ANNOTATION_METADATA",
    "MrisTranslateAnnotationOutputs",
    "mris_translate_annotation",
    "mris_translate_annotation_execute",
    "mris_translate_annotation_params",
]
