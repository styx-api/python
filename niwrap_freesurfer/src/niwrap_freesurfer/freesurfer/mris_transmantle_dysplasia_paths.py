# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA = Metadata(
    id="6c1501436959b09276745921386660fe7b7fc0fb.boutiques",
    name="mris_transmantle_dysplasia_paths",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisTransmantleDysplasiaPathsParameters = typing.TypedDict('MrisTransmantleDysplasiaPathsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_transmantle_dysplasia_paths"]],
    "surface": InputPathType,
    "aseg_volume": InputPathType,
    "intensity_volume": InputPathType,
    "xform": InputPathType,
    "output_volume": str,
    "filter": typing.NotRequired[list[float] | None],
    "noise_sensitivity": bool,
})
MrisTransmantleDysplasiaPathsParametersTagged = typing.TypedDict('MrisTransmantleDysplasiaPathsParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_transmantle_dysplasia_paths"],
    "surface": InputPathType,
    "aseg_volume": InputPathType,
    "intensity_volume": InputPathType,
    "xform": InputPathType,
    "output_volume": str,
    "filter": typing.NotRequired[list[float] | None],
    "noise_sensitivity": bool,
})


class MrisTransmantleDysplasiaPathsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisTransmantleDysplasiaPathsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output volume file"""


def mris_transmantle_dysplasia_paths_params(
    surface: InputPathType,
    aseg_volume: InputPathType,
    intensity_volume: InputPathType,
    xform: InputPathType,
    output_volume: str,
    filter_: list[float] | None = None,
    noise_sensitivity: bool = False,
) -> MrisTransmantleDysplasiaPathsParametersTagged:
    """
    Build parameters.
    
    Args:
        surface: Surface file.
        aseg_volume: ASEG volume file.
        intensity_volume: Intensity volume file.
        xform: Transformation file.
        output_volume: Output volume file.
        filter_: Apply specified filter with low and high values (not\
            implemented yet).
        noise_sensitivity: Noise-sensitivity normalize inverse (default=1).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_transmantle_dysplasia_paths",
        "surface": surface,
        "aseg_volume": aseg_volume,
        "intensity_volume": intensity_volume,
        "xform": xform,
        "output_volume": output_volume,
        "noise_sensitivity": noise_sensitivity,
    }
    if filter_ is not None:
        params["filter"] = filter_
    return params


def mris_transmantle_dysplasia_paths_cargs(
    params: MrisTransmantleDysplasiaPathsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_transmantle_dysplasia_paths")
    cargs.append(execution.input_file(params.get("surface", None)))
    cargs.append(execution.input_file(params.get("aseg_volume", None)))
    cargs.append(execution.input_file(params.get("intensity_volume", None)))
    cargs.append(execution.input_file(params.get("xform", None)))
    cargs.append(params.get("output_volume", None))
    if params.get("filter", None) is not None:
        cargs.extend([
            "-f",
            *map(str, params.get("filter", None))
        ])
    if params.get("noise_sensitivity", False):
        cargs.append("-n")
    return cargs


def mris_transmantle_dysplasia_paths_outputs(
    params: MrisTransmantleDysplasiaPathsParameters,
    execution: Execution,
) -> MrisTransmantleDysplasiaPathsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisTransmantleDysplasiaPathsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_volume", None)),
    )
    return ret


def mris_transmantle_dysplasia_paths_execute(
    params: MrisTransmantleDysplasiaPathsParameters,
    runner: Runner | None = None,
) -> MrisTransmantleDysplasiaPathsOutputs:
    """
    mris_transmantle_dysplasia_paths
    
    Tool for transmantle dysplasia path computation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTransmantleDysplasiaPathsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA)
    params = execution.params(params)
    cargs = mris_transmantle_dysplasia_paths_cargs(params, execution)
    ret = mris_transmantle_dysplasia_paths_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_transmantle_dysplasia_paths(
    surface: InputPathType,
    aseg_volume: InputPathType,
    intensity_volume: InputPathType,
    xform: InputPathType,
    output_volume: str,
    filter_: list[float] | None = None,
    noise_sensitivity: bool = False,
    runner: Runner | None = None,
) -> MrisTransmantleDysplasiaPathsOutputs:
    """
    mris_transmantle_dysplasia_paths
    
    Tool for transmantle dysplasia path computation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        surface: Surface file.
        aseg_volume: ASEG volume file.
        intensity_volume: Intensity volume file.
        xform: Transformation file.
        output_volume: Output volume file.
        filter_: Apply specified filter with low and high values (not\
            implemented yet).
        noise_sensitivity: Noise-sensitivity normalize inverse (default=1).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisTransmantleDysplasiaPathsOutputs`).
    """
    params = mris_transmantle_dysplasia_paths_params(
        surface=surface,
        aseg_volume=aseg_volume,
        intensity_volume=intensity_volume,
        xform=xform,
        output_volume=output_volume,
        filter_=filter_,
        noise_sensitivity=noise_sensitivity,
    )
    return mris_transmantle_dysplasia_paths_execute(params, runner)


__all__ = [
    "MRIS_TRANSMANTLE_DYSPLASIA_PATHS_METADATA",
    "MrisTransmantleDysplasiaPathsOutputs",
    "mris_transmantle_dysplasia_paths",
    "mris_transmantle_dysplasia_paths_execute",
    "mris_transmantle_dysplasia_paths_params",
]
