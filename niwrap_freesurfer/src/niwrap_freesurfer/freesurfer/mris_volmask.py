# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_VOLMASK_METADATA = Metadata(
    id="259bb456f2d2a05f76cbe5db73c6152ad588bccf.boutiques",
    name="mris_volmask",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisVolmaskParameters = typing.TypedDict('MrisVolmaskParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_volmask"]],
    "cap_distance": typing.NotRequired[float | None],
    "label_background": typing.NotRequired[float | None],
    "label_left_white": typing.NotRequired[float | None],
    "label_left_ribbon": typing.NotRequired[float | None],
    "label_right_white": typing.NotRequired[float | None],
    "label_right_ribbon": typing.NotRequired[float | None],
    "surf_white": typing.NotRequired[str | None],
    "surf_pial": typing.NotRequired[str | None],
    "aseg_name": typing.NotRequired[str | None],
    "out_root": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "save_distance": bool,
    "lh_only": bool,
    "rh_only": bool,
    "parallel": bool,
    "edit_aseg": bool,
    "save_ribbon": bool,
    "io": str,
})
MrisVolmaskParametersTagged = typing.TypedDict('MrisVolmaskParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_volmask"],
    "cap_distance": typing.NotRequired[float | None],
    "label_background": typing.NotRequired[float | None],
    "label_left_white": typing.NotRequired[float | None],
    "label_left_ribbon": typing.NotRequired[float | None],
    "label_right_white": typing.NotRequired[float | None],
    "label_right_ribbon": typing.NotRequired[float | None],
    "surf_white": typing.NotRequired[str | None],
    "surf_pial": typing.NotRequired[str | None],
    "aseg_name": typing.NotRequired[str | None],
    "out_root": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "save_distance": bool,
    "lh_only": bool,
    "rh_only": bool,
    "parallel": bool,
    "edit_aseg": bool,
    "save_ribbon": bool,
    "io": str,
})


class MrisVolmaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisVolmaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_volmask_params(
    io_: str,
    cap_distance: float | None = None,
    label_background: float | None = None,
    label_left_white: float | None = None,
    label_left_ribbon: float | None = None,
    label_right_white: float | None = None,
    label_right_ribbon: float | None = None,
    surf_white: str | None = None,
    surf_pial: str | None = None,
    aseg_name: str | None = None,
    out_root: str | None = None,
    subjects_dir: str | None = None,
    save_distance: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    parallel: bool = False,
    edit_aseg: bool = False,
    save_ribbon: bool = False,
) -> MrisVolmaskParametersTagged:
    """
    Build parameters.
    
    Args:
        io_: Positional argument that represents input/output settings.
        cap_distance: Maximum distance up to which the signed distance function\
            computation is accurate.
        label_background: Override default value for background label value\
            (0).
        label_left_white: Override default value for left white matter label\
            (20).
        label_left_ribbon: Override default value for left ribbon label (10).
        label_right_white: Override default value for right white matter label\
            (120).
        label_right_ribbon: Override default value for right ribbon label\
            (110).
        surf_white: Surface root name (e.g. <subject>/surf/$hemi.<NAME> -\
            default value is white).
        surf_pial: Surface root name (e.g. <subject>/surf/$hemi.<NAME> -\
            default value is pial).
        aseg_name: Specify a different name for the aseg input file (default is\
            aseg).
        out_root: Output root name (default is ribbon). Output files would be,\
            for example, mri/ribbon.mgz.
        subjects_dir: Specify SUBJECTS_DIR, default is read from environment.
        save_distance: Save the signed distance function as ?h.dwhite.mgz and\
            ?h.dpial.mgz.
        lh_only: Only process left hemisphere.
        rh_only: Only process right hemisphere.
        parallel: Run hemispheres in parallel and combine the result.
        edit_aseg: Edit the aseg using the ribbons and save to aseg.ribbon.mgz.
        save_ribbon: Save just the ribbon for the hemispheres - in the format\
            ?h.ribbon.mgz.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_volmask",
        "save_distance": save_distance,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "parallel": parallel,
        "edit_aseg": edit_aseg,
        "save_ribbon": save_ribbon,
        "io": io_,
    }
    if cap_distance is not None:
        params["cap_distance"] = cap_distance
    if label_background is not None:
        params["label_background"] = label_background
    if label_left_white is not None:
        params["label_left_white"] = label_left_white
    if label_left_ribbon is not None:
        params["label_left_ribbon"] = label_left_ribbon
    if label_right_white is not None:
        params["label_right_white"] = label_right_white
    if label_right_ribbon is not None:
        params["label_right_ribbon"] = label_right_ribbon
    if surf_white is not None:
        params["surf_white"] = surf_white
    if surf_pial is not None:
        params["surf_pial"] = surf_pial
    if aseg_name is not None:
        params["aseg_name"] = aseg_name
    if out_root is not None:
        params["out_root"] = out_root
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    return params


def mris_volmask_cargs(
    params: MrisVolmaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_volmask")
    if params.get("cap_distance", None) is not None:
        cargs.extend([
            "--cap_distance",
            str(params.get("cap_distance", None))
        ])
    if params.get("label_background", None) is not None:
        cargs.extend([
            "--label_background",
            str(params.get("label_background", None))
        ])
    if params.get("label_left_white", None) is not None:
        cargs.extend([
            "--label_left_white",
            str(params.get("label_left_white", None))
        ])
    if params.get("label_left_ribbon", None) is not None:
        cargs.extend([
            "--label_left_ribbon",
            str(params.get("label_left_ribbon", None))
        ])
    if params.get("label_right_white", None) is not None:
        cargs.extend([
            "--label_right_white",
            str(params.get("label_right_white", None))
        ])
    if params.get("label_right_ribbon", None) is not None:
        cargs.extend([
            "--label_right_ribbon",
            str(params.get("label_right_ribbon", None))
        ])
    if params.get("surf_white", None) is not None:
        cargs.extend([
            "--surf_white",
            params.get("surf_white", None)
        ])
    if params.get("surf_pial", None) is not None:
        cargs.extend([
            "--surf_pial",
            params.get("surf_pial", None)
        ])
    if params.get("aseg_name", None) is not None:
        cargs.extend([
            "--aseg_name",
            params.get("aseg_name", None)
        ])
    if params.get("out_root", None) is not None:
        cargs.extend([
            "--out_root",
            params.get("out_root", None)
        ])
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_dir", None)
        ])
    if params.get("save_distance", False):
        cargs.append("--save_distance")
    if params.get("lh_only", False):
        cargs.append("--lh-only")
    if params.get("rh_only", False):
        cargs.append("--rh-only")
    if params.get("parallel", False):
        cargs.append("--parallel")
    if params.get("edit_aseg", False):
        cargs.append("--edit_aseg")
    if params.get("save_ribbon", False):
        cargs.append("--save_ribbon")
    cargs.append(params.get("io", None))
    return cargs


def mris_volmask_outputs(
    params: MrisVolmaskParameters,
    execution: Execution,
) -> MrisVolmaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisVolmaskOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_volmask_execute(
    params: MrisVolmaskParameters,
    runner: Runner | None = None,
) -> MrisVolmaskOutputs:
    """
    mris_volmask
    
    Computes a volume mask, at the same resolution as the
    <subject>/mri/brain.mgz. The volume mask contains 4 values: LH_WM (default
    10), LH_GM (default 100), RH_WM (default 20), RH_GM (default 200).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisVolmaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_VOLMASK_METADATA)
    params = execution.params(params)
    cargs = mris_volmask_cargs(params, execution)
    ret = mris_volmask_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_volmask(
    io_: str,
    cap_distance: float | None = None,
    label_background: float | None = None,
    label_left_white: float | None = None,
    label_left_ribbon: float | None = None,
    label_right_white: float | None = None,
    label_right_ribbon: float | None = None,
    surf_white: str | None = None,
    surf_pial: str | None = None,
    aseg_name: str | None = None,
    out_root: str | None = None,
    subjects_dir: str | None = None,
    save_distance: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    parallel: bool = False,
    edit_aseg: bool = False,
    save_ribbon: bool = False,
    runner: Runner | None = None,
) -> MrisVolmaskOutputs:
    """
    mris_volmask
    
    Computes a volume mask, at the same resolution as the
    <subject>/mri/brain.mgz. The volume mask contains 4 values: LH_WM (default
    10), LH_GM (default 100), RH_WM (default 20), RH_GM (default 200).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        io_: Positional argument that represents input/output settings.
        cap_distance: Maximum distance up to which the signed distance function\
            computation is accurate.
        label_background: Override default value for background label value\
            (0).
        label_left_white: Override default value for left white matter label\
            (20).
        label_left_ribbon: Override default value for left ribbon label (10).
        label_right_white: Override default value for right white matter label\
            (120).
        label_right_ribbon: Override default value for right ribbon label\
            (110).
        surf_white: Surface root name (e.g. <subject>/surf/$hemi.<NAME> -\
            default value is white).
        surf_pial: Surface root name (e.g. <subject>/surf/$hemi.<NAME> -\
            default value is pial).
        aseg_name: Specify a different name for the aseg input file (default is\
            aseg).
        out_root: Output root name (default is ribbon). Output files would be,\
            for example, mri/ribbon.mgz.
        subjects_dir: Specify SUBJECTS_DIR, default is read from environment.
        save_distance: Save the signed distance function as ?h.dwhite.mgz and\
            ?h.dpial.mgz.
        lh_only: Only process left hemisphere.
        rh_only: Only process right hemisphere.
        parallel: Run hemispheres in parallel and combine the result.
        edit_aseg: Edit the aseg using the ribbons and save to aseg.ribbon.mgz.
        save_ribbon: Save just the ribbon for the hemispheres - in the format\
            ?h.ribbon.mgz.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisVolmaskOutputs`).
    """
    params = mris_volmask_params(
        cap_distance=cap_distance,
        label_background=label_background,
        label_left_white=label_left_white,
        label_left_ribbon=label_left_ribbon,
        label_right_white=label_right_white,
        label_right_ribbon=label_right_ribbon,
        surf_white=surf_white,
        surf_pial=surf_pial,
        aseg_name=aseg_name,
        out_root=out_root,
        subjects_dir=subjects_dir,
        save_distance=save_distance,
        lh_only=lh_only,
        rh_only=rh_only,
        parallel=parallel,
        edit_aseg=edit_aseg,
        save_ribbon=save_ribbon,
        io_=io_,
    )
    return mris_volmask_execute(params, runner)


__all__ = [
    "MRIS_VOLMASK_METADATA",
    "MrisVolmaskOutputs",
    "mris_volmask",
    "mris_volmask_execute",
    "mris_volmask_params",
]
