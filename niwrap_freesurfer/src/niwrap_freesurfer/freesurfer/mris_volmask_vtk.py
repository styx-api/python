# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_VOLMASK_VTK_METADATA = Metadata(
    id="18075f3e0f86b04df853ca3f2d12d30d3e8248fb.boutiques",
    name="mris_volmask_vtk",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisVolmaskVtkParameters = typing.TypedDict('MrisVolmaskVtkParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_volmask_vtk"]],
    "cap_distance": typing.NotRequired[float | None],
    "label_background": typing.NotRequired[float | None],
    "label_left_white": typing.NotRequired[float | None],
    "label_left_ribbon": typing.NotRequired[float | None],
    "label_right_white": typing.NotRequired[float | None],
    "label_right_ribbon": typing.NotRequired[float | None],
    "surf_white": typing.NotRequired[str | None],
    "surf_pial": typing.NotRequired[str | None],
    "aseg_name": typing.NotRequired[str | None],
    "out_root": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "save_distance": bool,
    "lh_only": bool,
    "rh_only": bool,
    "parallel": bool,
    "edit_aseg": bool,
    "save_ribbon": bool,
    "io_param": str,
})
MrisVolmaskVtkParametersTagged = typing.TypedDict('MrisVolmaskVtkParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_volmask_vtk"],
    "cap_distance": typing.NotRequired[float | None],
    "label_background": typing.NotRequired[float | None],
    "label_left_white": typing.NotRequired[float | None],
    "label_left_ribbon": typing.NotRequired[float | None],
    "label_right_white": typing.NotRequired[float | None],
    "label_right_ribbon": typing.NotRequired[float | None],
    "surf_white": typing.NotRequired[str | None],
    "surf_pial": typing.NotRequired[str | None],
    "aseg_name": typing.NotRequired[str | None],
    "out_root": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "save_distance": bool,
    "lh_only": bool,
    "rh_only": bool,
    "parallel": bool,
    "edit_aseg": bool,
    "save_ribbon": bool,
    "io_param": str,
})


class MrisVolmaskVtkOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisVolmaskVtkParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_mask: OutputPathType | None
    """Output volume mask file."""
    left_ribbon_output: OutputPathType | None
    """Left hemisphere ribbon output file."""
    right_ribbon_output: OutputPathType | None
    """Right hemisphere ribbon output file."""
    edited_aseg_output: OutputPathType
    """Edited aseg output using ribbons."""
    lh_dwhite_output: OutputPathType
    """Signed distance output for the left hemisphere white matter."""
    lh_dpial_output: OutputPathType
    """Signed distance output for the left hemisphere pial surface."""
    rh_dwhite_output: OutputPathType
    """Signed distance output for the right hemisphere white matter."""
    rh_dpial_output: OutputPathType
    """Signed distance output for the right hemisphere pial surface."""


def mris_volmask_vtk_params(
    io_param: str,
    cap_distance: float | None = None,
    label_background: float | None = None,
    label_left_white: float | None = None,
    label_left_ribbon: float | None = None,
    label_right_white: float | None = None,
    label_right_ribbon: float | None = None,
    surf_white: str | None = None,
    surf_pial: str | None = None,
    aseg_name: str | None = None,
    out_root: str | None = None,
    subjects_dir: str | None = None,
    save_distance: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    parallel: bool = False,
    edit_aseg: bool = False,
    save_ribbon: bool = False,
) -> MrisVolmaskVtkParametersTagged:
    """
    Build parameters.
    
    Args:
        io_param: Input-Output parameter as positional argument.
        cap_distance: Maximum distance up to which the signed distance function\
            computation is accurate.
        label_background: Override the default background label value (0).
        label_left_white: Override the default left white matter label (20).
        label_left_ribbon: Override the default left ribbon label (10).
        label_right_white: Override the default right white matter label (120).
        label_right_ribbon: Override the default right ribbon label (110).
        surf_white: Surface root name for white matter surfaces (default:\
            white).
        surf_pial: Surface root name for pial surfaces (default: pial).
        aseg_name: Specify a different name for the aseg input file (default:\
            aseg).
        out_root: Output root name (default: ribbon) for generated output\
            files.
        subjects_dir: Specify the SUBJECTS_DIR, default is read from\
            environment.
        save_distance: Option to save the signed distance function.
        lh_only: Only process left hemisphere.
        rh_only: Only process right hemisphere.
        parallel: Run hemispheres in parallel and combine the result.
        edit_aseg: Edit the aseg using the ribbons and save it.
        save_ribbon: Save only the ribbon for the hemispheres.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_volmask_vtk",
        "save_distance": save_distance,
        "lh_only": lh_only,
        "rh_only": rh_only,
        "parallel": parallel,
        "edit_aseg": edit_aseg,
        "save_ribbon": save_ribbon,
        "io_param": io_param,
    }
    if cap_distance is not None:
        params["cap_distance"] = cap_distance
    if label_background is not None:
        params["label_background"] = label_background
    if label_left_white is not None:
        params["label_left_white"] = label_left_white
    if label_left_ribbon is not None:
        params["label_left_ribbon"] = label_left_ribbon
    if label_right_white is not None:
        params["label_right_white"] = label_right_white
    if label_right_ribbon is not None:
        params["label_right_ribbon"] = label_right_ribbon
    if surf_white is not None:
        params["surf_white"] = surf_white
    if surf_pial is not None:
        params["surf_pial"] = surf_pial
    if aseg_name is not None:
        params["aseg_name"] = aseg_name
    if out_root is not None:
        params["out_root"] = out_root
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    return params


def mris_volmask_vtk_cargs(
    params: MrisVolmaskVtkParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_volmask_vtk")
    if params.get("cap_distance", None) is not None:
        cargs.extend([
            "--cap_distance",
            str(params.get("cap_distance", None))
        ])
    if params.get("label_background", None) is not None:
        cargs.extend([
            "--label_background",
            str(params.get("label_background", None))
        ])
    if params.get("label_left_white", None) is not None:
        cargs.extend([
            "--label_left_white",
            str(params.get("label_left_white", None))
        ])
    if params.get("label_left_ribbon", None) is not None:
        cargs.extend([
            "--label_left_ribbon",
            str(params.get("label_left_ribbon", None))
        ])
    if params.get("label_right_white", None) is not None:
        cargs.extend([
            "--label_right_white",
            str(params.get("label_right_white", None))
        ])
    if params.get("label_right_ribbon", None) is not None:
        cargs.extend([
            "--label_right_ribbon",
            str(params.get("label_right_ribbon", None))
        ])
    if params.get("surf_white", None) is not None:
        cargs.extend([
            "--surf_white",
            params.get("surf_white", None)
        ])
    if params.get("surf_pial", None) is not None:
        cargs.extend([
            "--surf_pial",
            params.get("surf_pial", None)
        ])
    if params.get("aseg_name", None) is not None:
        cargs.extend([
            "--aseg_name",
            params.get("aseg_name", None)
        ])
    if params.get("out_root", None) is not None:
        cargs.extend([
            "--out_root",
            params.get("out_root", None)
        ])
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_dir", None)
        ])
    if params.get("save_distance", False):
        cargs.append("--save_distance")
    if params.get("lh_only", False):
        cargs.append("--lh-only")
    if params.get("rh_only", False):
        cargs.append("--rh-only")
    if params.get("parallel", False):
        cargs.append("--parallel")
    if params.get("edit_aseg", False):
        cargs.append("--edit_aseg")
    if params.get("save_ribbon", False):
        cargs.append("--save_ribbon")
    cargs.append(params.get("io_param", None))
    return cargs


def mris_volmask_vtk_outputs(
    params: MrisVolmaskVtkParameters,
    execution: Execution,
) -> MrisVolmaskVtkOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisVolmaskVtkOutputs(
        root=execution.output_file("."),
        output_volume_mask=execution.output_file("mri/" + params.get("out_root", None) + ".mgz") if (params.get("out_root") is not None) else None,
        left_ribbon_output=execution.output_file("mri/lh." + params.get("out_root", None) + ".mgz") if (params.get("out_root") is not None) else None,
        right_ribbon_output=execution.output_file("mri/rh." + params.get("out_root", None) + ".mgz") if (params.get("out_root") is not None) else None,
        edited_aseg_output=execution.output_file("mri/aseg.ribbon.mgz"),
        lh_dwhite_output=execution.output_file("mri/lh.dwhite.mgz"),
        lh_dpial_output=execution.output_file("mri/lh.dpial.mgz"),
        rh_dwhite_output=execution.output_file("mri/rh.dwhite.mgz"),
        rh_dpial_output=execution.output_file("mri/rh.dpial.mgz"),
    )
    return ret


def mris_volmask_vtk_execute(
    params: MrisVolmaskVtkParameters,
    runner: Runner | None = None,
) -> MrisVolmaskVtkOutputs:
    """
    mris_volmask_vtk
    
    Computes a volume mask at the resolution of the brain.mgz file, containing
    labels for various brain structures using surface files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisVolmaskVtkOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_VOLMASK_VTK_METADATA)
    params = execution.params(params)
    cargs = mris_volmask_vtk_cargs(params, execution)
    ret = mris_volmask_vtk_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_volmask_vtk(
    io_param: str,
    cap_distance: float | None = None,
    label_background: float | None = None,
    label_left_white: float | None = None,
    label_left_ribbon: float | None = None,
    label_right_white: float | None = None,
    label_right_ribbon: float | None = None,
    surf_white: str | None = None,
    surf_pial: str | None = None,
    aseg_name: str | None = None,
    out_root: str | None = None,
    subjects_dir: str | None = None,
    save_distance: bool = False,
    lh_only: bool = False,
    rh_only: bool = False,
    parallel: bool = False,
    edit_aseg: bool = False,
    save_ribbon: bool = False,
    runner: Runner | None = None,
) -> MrisVolmaskVtkOutputs:
    """
    mris_volmask_vtk
    
    Computes a volume mask at the resolution of the brain.mgz file, containing
    labels for various brain structures using surface files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        io_param: Input-Output parameter as positional argument.
        cap_distance: Maximum distance up to which the signed distance function\
            computation is accurate.
        label_background: Override the default background label value (0).
        label_left_white: Override the default left white matter label (20).
        label_left_ribbon: Override the default left ribbon label (10).
        label_right_white: Override the default right white matter label (120).
        label_right_ribbon: Override the default right ribbon label (110).
        surf_white: Surface root name for white matter surfaces (default:\
            white).
        surf_pial: Surface root name for pial surfaces (default: pial).
        aseg_name: Specify a different name for the aseg input file (default:\
            aseg).
        out_root: Output root name (default: ribbon) for generated output\
            files.
        subjects_dir: Specify the SUBJECTS_DIR, default is read from\
            environment.
        save_distance: Option to save the signed distance function.
        lh_only: Only process left hemisphere.
        rh_only: Only process right hemisphere.
        parallel: Run hemispheres in parallel and combine the result.
        edit_aseg: Edit the aseg using the ribbons and save it.
        save_ribbon: Save only the ribbon for the hemispheres.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisVolmaskVtkOutputs`).
    """
    params = mris_volmask_vtk_params(
        cap_distance=cap_distance,
        label_background=label_background,
        label_left_white=label_left_white,
        label_left_ribbon=label_left_ribbon,
        label_right_white=label_right_white,
        label_right_ribbon=label_right_ribbon,
        surf_white=surf_white,
        surf_pial=surf_pial,
        aseg_name=aseg_name,
        out_root=out_root,
        subjects_dir=subjects_dir,
        save_distance=save_distance,
        lh_only=lh_only,
        rh_only=rh_only,
        parallel=parallel,
        edit_aseg=edit_aseg,
        save_ribbon=save_ribbon,
        io_param=io_param,
    )
    return mris_volmask_vtk_execute(params, runner)


__all__ = [
    "MRIS_VOLMASK_VTK_METADATA",
    "MrisVolmaskVtkOutputs",
    "mris_volmask_vtk",
    "mris_volmask_vtk_execute",
    "mris_volmask_vtk_params",
]
