# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_WARP_METADATA = Metadata(
    id="e858eca5a999ef2c6d76f6c13248ad58052c6ec0.boutiques",
    name="mris_warp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisWarpParameters = typing.TypedDict('MrisWarpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_warp"]],
    "deformvol": typing.NotRequired[str | None],
    "m3z": typing.NotRequired[str | None],
    "regfile": typing.NotRequired[str | None],
    "surf": typing.NotRequired[str | None],
    "out": typing.NotRequired[str | None],
    "abs": bool,
    "help": bool,
    "version": bool,
})
MrisWarpParametersTagged = typing.TypedDict('MrisWarpParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_warp"],
    "deformvol": typing.NotRequired[str | None],
    "m3z": typing.NotRequired[str | None],
    "regfile": typing.NotRequired[str | None],
    "surf": typing.NotRequired[str | None],
    "out": typing.NotRequired[str | None],
    "abs": bool,
    "help": bool,
    "version": bool,
})


class MrisWarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisWarpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType | None
    """Output surface file"""


def mris_warp_params(
    deformvol: str | None = None,
    m3z: str | None = None,
    regfile: str | None = None,
    surf: str | None = None,
    out: str | None = None,
    abs_: bool = False,
    help_: bool = False,
    version: bool = False,
) -> MrisWarpParametersTagged:
    """
    Build parameters.
    
    Args:
        deformvol: Volume containing deformation.
        m3z: M3Z file containing deformation.
        regfile: register.dat file between surface and volume.
        surf: Surface file to warp.
        out: Name for output surface (if does not contain '/', outputs to same\
            directory as input surface).
        abs_: Absolute coordinate displacement convention (default).
        help_: Print out information on how to use this program.
        version: Print out version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_warp",
        "abs": abs_,
        "help": help_,
        "version": version,
    }
    if deformvol is not None:
        params["deformvol"] = deformvol
    if m3z is not None:
        params["m3z"] = m3z
    if regfile is not None:
        params["regfile"] = regfile
    if surf is not None:
        params["surf"] = surf
    if out is not None:
        params["out"] = out
    return params


def mris_warp_cargs(
    params: MrisWarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_warp")
    if params.get("deformvol", None) is not None:
        cargs.extend([
            "--deformvol",
            params.get("deformvol", None)
        ])
    if params.get("m3z", None) is not None:
        cargs.extend([
            "--m3z",
            params.get("m3z", None)
        ])
    if params.get("regfile", None) is not None:
        cargs.extend([
            "--reg",
            params.get("regfile", None)
        ])
    if params.get("surf", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surf", None)
        ])
    if params.get("out", None) is not None:
        cargs.extend([
            "--out",
            params.get("out", None)
        ])
    if params.get("abs", False):
        cargs.append("--abs")
    if params.get("help", False):
        cargs.append("--help")
    if params.get("version", False):
        cargs.append("--version")
    return cargs


def mris_warp_outputs(
    params: MrisWarpParameters,
    execution: Execution,
) -> MrisWarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisWarpOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file(params.get("out", None)) if (params.get("out") is not None) else None,
    )
    return ret


def mris_warp_execute(
    params: MrisWarpParameters,
    runner: Runner | None = None,
) -> MrisWarpOutputs:
    """
    mris_warp
    
    This program will warp a surface using a specified deformation field.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisWarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_WARP_METADATA)
    params = execution.params(params)
    cargs = mris_warp_cargs(params, execution)
    ret = mris_warp_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_warp(
    deformvol: str | None = None,
    m3z: str | None = None,
    regfile: str | None = None,
    surf: str | None = None,
    out: str | None = None,
    abs_: bool = False,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MrisWarpOutputs:
    """
    mris_warp
    
    This program will warp a surface using a specified deformation field.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        deformvol: Volume containing deformation.
        m3z: M3Z file containing deformation.
        regfile: register.dat file between surface and volume.
        surf: Surface file to warp.
        out: Name for output surface (if does not contain '/', outputs to same\
            directory as input surface).
        abs_: Absolute coordinate displacement convention (default).
        help_: Print out information on how to use this program.
        version: Print out version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisWarpOutputs`).
    """
    params = mris_warp_params(
        deformvol=deformvol,
        m3z=m3z,
        regfile=regfile,
        surf=surf,
        out=out,
        abs_=abs_,
        help_=help_,
        version=version,
    )
    return mris_warp_execute(params, runner)


__all__ = [
    "MRIS_WARP_METADATA",
    "MrisWarpOutputs",
    "mris_warp",
    "mris_warp_execute",
    "mris_warp_params",
]
