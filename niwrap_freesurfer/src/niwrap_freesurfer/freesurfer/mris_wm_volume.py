# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRIS_WM_VOLUME_METADATA = Metadata(
    id="7a262143473871cbee9cc9dc098e5db8119e8932.boutiques",
    name="mris_wm_volume",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrisWmVolumeParameters = typing.TypedDict('MrisWmVolumeParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mris_wm_volume"]],
    "subject": str,
    "hemi": str,
    "subjects_dir": typing.NotRequired[str | None],
    "whitesurfname": typing.NotRequired[str | None],
    "asegname": typing.NotRequired[str | None],
    "verbose": bool,
})
MrisWmVolumeParametersTagged = typing.TypedDict('MrisWmVolumeParametersTagged', {
    "@type": typing.Literal["freesurfer/mris_wm_volume"],
    "subject": str,
    "hemi": str,
    "subjects_dir": typing.NotRequired[str | None],
    "whitesurfname": typing.NotRequired[str | None],
    "asegname": typing.NotRequired[str | None],
    "verbose": bool,
})


class MrisWmVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrisWmVolumeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mris_wm_volume_params(
    subject: str,
    hemi: str,
    subjects_dir: str | None = None,
    whitesurfname: str | None = None,
    asegname: str | None = None,
    verbose: bool = False,
) -> MrisWmVolumeParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        hemi: Hemisphere to compute volume for (e.g., lh or rh).
        subjects_dir: The SUBJECTS_DIR where the subject data is stored.
        whitesurfname: Name of the white surface file.
        asegname: Name of the aseg file.
        verbose: Output more messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mris_wm_volume",
        "subject": subject,
        "hemi": hemi,
        "verbose": verbose,
    }
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if whitesurfname is not None:
        params["whitesurfname"] = whitesurfname
    if asegname is not None:
        params["asegname"] = asegname
    return params


def mris_wm_volume_cargs(
    params: MrisWmVolumeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mris_wm_volume")
    cargs.append(params.get("subject", None))
    cargs.append(params.get("hemi", None))
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "-SDIR",
            params.get("subjects_dir", None)
        ])
    if params.get("whitesurfname", None) is not None:
        cargs.extend([
            "-white",
            params.get("whitesurfname", None)
        ])
    if params.get("asegname", None) is not None:
        cargs.extend([
            "-aseg",
            params.get("asegname", None)
        ])
    if params.get("verbose", False):
        cargs.append("-v")
    return cargs


def mris_wm_volume_outputs(
    params: MrisWmVolumeParameters,
    execution: Execution,
) -> MrisWmVolumeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrisWmVolumeOutputs(
        root=execution.output_file("."),
    )
    return ret


def mris_wm_volume_execute(
    params: MrisWmVolumeParameters,
    runner: Runner | None = None,
) -> MrisWmVolumeOutputs:
    """
    mris_wm_volume
    
    Computes the volume of the enclosed hemisphere white matter surface,
    ignoring non-white matter voxels in the aseg.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisWmVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_WM_VOLUME_METADATA)
    params = execution.params(params)
    cargs = mris_wm_volume_cargs(params, execution)
    ret = mris_wm_volume_outputs(params, execution)
    execution.run(cargs)
    return ret


def mris_wm_volume(
    subject: str,
    hemi: str,
    subjects_dir: str | None = None,
    whitesurfname: str | None = None,
    asegname: str | None = None,
    verbose: bool = False,
    runner: Runner | None = None,
) -> MrisWmVolumeOutputs:
    """
    mris_wm_volume
    
    Computes the volume of the enclosed hemisphere white matter surface,
    ignoring non-white matter voxels in the aseg.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        hemi: Hemisphere to compute volume for (e.g., lh or rh).
        subjects_dir: The SUBJECTS_DIR where the subject data is stored.
        whitesurfname: Name of the white surface file.
        asegname: Name of the aseg file.
        verbose: Output more messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisWmVolumeOutputs`).
    """
    params = mris_wm_volume_params(
        subject=subject,
        hemi=hemi,
        subjects_dir=subjects_dir,
        whitesurfname=whitesurfname,
        asegname=asegname,
        verbose=verbose,
    )
    return mris_wm_volume_execute(params, runner)


__all__ = [
    "MRIS_WM_VOLUME_METADATA",
    "MrisWmVolumeOutputs",
    "mris_wm_volume",
    "mris_wm_volume_execute",
    "mris_wm_volume_params",
]
