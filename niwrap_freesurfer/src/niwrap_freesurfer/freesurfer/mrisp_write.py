# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRISP_WRITE_METADATA = Metadata(
    id="81011c1d707f5b750cc6ca9c5a5dc0fa621b36db.boutiques",
    name="mrisp_write",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


MrispWriteParameters = typing.TypedDict('MrispWriteParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/mrisp_write"]],
    "input_surface": InputPathType,
    "overlay_filename": InputPathType,
    "output_name": str,
    "subjects_dir": typing.NotRequired[str | None],
    "coords": typing.NotRequired[str | None],
    "average_curvature": typing.NotRequired[float | None],
    "correlation_matrix": typing.NotRequired[InputPathType | None],
    "scale_factor": typing.NotRequired[float | None],
    "normalize_curvature": bool,
    "verbose_vertex": typing.NotRequired[float | None],
    "write_diagnostics": bool,
})
MrispWriteParametersTagged = typing.TypedDict('MrispWriteParametersTagged', {
    "@type": typing.Literal["freesurfer/mrisp_write"],
    "input_surface": InputPathType,
    "overlay_filename": InputPathType,
    "output_name": str,
    "subjects_dir": typing.NotRequired[str | None],
    "coords": typing.NotRequired[str | None],
    "average_curvature": typing.NotRequired[float | None],
    "correlation_matrix": typing.NotRequired[InputPathType | None],
    "scale_factor": typing.NotRequired[float | None],
    "normalize_curvature": bool,
    "verbose_vertex": typing.NotRequired[float | None],
    "write_diagnostics": bool,
})


class MrispWriteOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrispWriteParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """A file containing a surface-worth of per-vertex values saved in spherical
    coordinates."""


def mrisp_write_params(
    input_surface: InputPathType,
    overlay_filename: InputPathType,
    output_name: str,
    subjects_dir: str | None = None,
    coords: str | None = None,
    average_curvature: float | None = None,
    correlation_matrix: InputPathType | None = None,
    scale_factor: float | None = None,
    normalize_curvature: bool = False,
    verbose_vertex: float | None = None,
    write_diagnostics: bool = False,
) -> MrispWriteParametersTagged:
    """
    Build parameters.
    
    Args:
        input_surface: Full path to input surface.
        overlay_filename: Full path to the overlay to map.
        output_name: Output file name. Can be full path to a .tif or .mgz file.
        subjects_dir: Set SUBJECTS_DIR. Default: uses environment variable.
        coords: Treat overlay as a surface and write it into a 3 frame\
            parameterization.
        average_curvature: Average curvature patterns navgs times.
        correlation_matrix: Use the overlay to compute the correlation matrix\
            within the specified label.
        scale_factor: Scale factor to adjust resolution of the spherical map.
        normalize_curvature: Normalize curvature by variance.
        verbose_vertex: Invoke diagnostics for specified vertex number.
        write_diagnostics: Write some diagnostics.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/mrisp_write",
        "input_surface": input_surface,
        "overlay_filename": overlay_filename,
        "output_name": output_name,
        "normalize_curvature": normalize_curvature,
        "write_diagnostics": write_diagnostics,
    }
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if coords is not None:
        params["coords"] = coords
    if average_curvature is not None:
        params["average_curvature"] = average_curvature
    if correlation_matrix is not None:
        params["correlation_matrix"] = correlation_matrix
    if scale_factor is not None:
        params["scale_factor"] = scale_factor
    if verbose_vertex is not None:
        params["verbose_vertex"] = verbose_vertex
    return params


def mrisp_write_cargs(
    params: MrispWriteParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mrisp_write")
    cargs.append(execution.input_file(params.get("input_surface", None)))
    cargs.append(execution.input_file(params.get("overlay_filename", None)))
    cargs.append(params.get("output_name", None))
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "-SDIR",
            params.get("subjects_dir", None)
        ])
    if params.get("coords", None) is not None:
        cargs.extend([
            "-coords",
            params.get("coords", None)
        ])
    if params.get("average_curvature", None) is not None:
        cargs.extend([
            "-A",
            str(params.get("average_curvature", None))
        ])
    if params.get("correlation_matrix", None) is not None:
        cargs.extend([
            "-CORR",
            execution.input_file(params.get("correlation_matrix", None))
        ])
    if params.get("scale_factor", None) is not None:
        cargs.extend([
            "-SCALE",
            str(params.get("scale_factor", None))
        ])
    if params.get("normalize_curvature", False):
        cargs.append("-N")
    if params.get("verbose_vertex", None) is not None:
        cargs.extend([
            "-V",
            str(params.get("verbose_vertex", None))
        ])
    if params.get("write_diagnostics", False):
        cargs.append("-W")
    return cargs


def mrisp_write_outputs(
    params: MrispWriteParameters,
    execution: Execution,
) -> MrispWriteOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrispWriteOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_name", None)),
    )
    return ret


def mrisp_write_execute(
    params: MrispWriteParameters,
    runner: Runner | None = None,
) -> MrispWriteOutputs:
    """
    mrisp_write
    
    This tool converts a surface overlay on a sphere into spherical coordinates.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrispWriteOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRISP_WRITE_METADATA)
    params = execution.params(params)
    cargs = mrisp_write_cargs(params, execution)
    ret = mrisp_write_outputs(params, execution)
    execution.run(cargs)
    return ret


def mrisp_write(
    input_surface: InputPathType,
    overlay_filename: InputPathType,
    output_name: str,
    subjects_dir: str | None = None,
    coords: str | None = None,
    average_curvature: float | None = None,
    correlation_matrix: InputPathType | None = None,
    scale_factor: float | None = None,
    normalize_curvature: bool = False,
    verbose_vertex: float | None = None,
    write_diagnostics: bool = False,
    runner: Runner | None = None,
) -> MrispWriteOutputs:
    """
    mrisp_write
    
    This tool converts a surface overlay on a sphere into spherical coordinates.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_surface: Full path to input surface.
        overlay_filename: Full path to the overlay to map.
        output_name: Output file name. Can be full path to a .tif or .mgz file.
        subjects_dir: Set SUBJECTS_DIR. Default: uses environment variable.
        coords: Treat overlay as a surface and write it into a 3 frame\
            parameterization.
        average_curvature: Average curvature patterns navgs times.
        correlation_matrix: Use the overlay to compute the correlation matrix\
            within the specified label.
        scale_factor: Scale factor to adjust resolution of the spherical map.
        normalize_curvature: Normalize curvature by variance.
        verbose_vertex: Invoke diagnostics for specified vertex number.
        write_diagnostics: Write some diagnostics.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrispWriteOutputs`).
    """
    params = mrisp_write_params(
        input_surface=input_surface,
        overlay_filename=overlay_filename,
        output_name=output_name,
        subjects_dir=subjects_dir,
        coords=coords,
        average_curvature=average_curvature,
        correlation_matrix=correlation_matrix,
        scale_factor=scale_factor,
        normalize_curvature=normalize_curvature,
        verbose_vertex=verbose_vertex,
        write_diagnostics=write_diagnostics,
    )
    return mrisp_write_execute(params, runner)


__all__ = [
    "MRISP_WRITE_METADATA",
    "MrispWriteOutputs",
    "mrisp_write",
    "mrisp_write_execute",
    "mrisp_write_params",
]
