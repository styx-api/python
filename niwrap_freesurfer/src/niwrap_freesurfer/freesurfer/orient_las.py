# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ORIENT_LAS_METADATA = Metadata(
    id="bf21dfa61b8f78898dd05f089d55ed40743032e8.boutiques",
    name="orientLAS",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


OrientLasParameters = typing.TypedDict('OrientLasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/orientLAS"]],
    "input_image": InputPathType,
    "output_image": str,
    "check": bool,
})
OrientLasParametersTagged = typing.TypedDict('OrientLasParametersTagged', {
    "@type": typing.Literal["freesurfer/orientLAS"],
    "input_image": InputPathType,
    "output_image": str,
    "check": bool,
})


class OrientLasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `OrientLasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_las_image: OutputPathType
    """Output image with LAS orientation"""


def orient_las_params(
    input_image: InputPathType,
    output_image: str,
    check: bool = False,
) -> OrientLasParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input image in NIfTI format.
        output_image: Output image in NIfTI format with LAS orientation.
        check: Check the match of input and output images using tkregister, and\
            for diffusion data, run dtifit and show tensors with fslview.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/orientLAS",
        "input_image": input_image,
        "output_image": output_image,
        "check": check,
    }
    return params


def orient_las_cargs(
    params: OrientLasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("orientLAS")
    cargs.append(execution.input_file(params.get("input_image", None)))
    cargs.append(params.get("output_image", None))
    if params.get("check", False):
        cargs.append("--check")
    return cargs


def orient_las_outputs(
    params: OrientLasParameters,
    execution: Execution,
) -> OrientLasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = OrientLasOutputs(
        root=execution.output_file("."),
        output_las_image=execution.output_file(params.get("output_image", None)),
    )
    return ret


def orient_las_execute(
    params: OrientLasParameters,
    runner: Runner | None = None,
) -> OrientLasOutputs:
    """
    orientLAS
    
    Convert image to LAS orientation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `OrientLasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ORIENT_LAS_METADATA)
    params = execution.params(params)
    cargs = orient_las_cargs(params, execution)
    ret = orient_las_outputs(params, execution)
    execution.run(cargs)
    return ret


def orient_las(
    input_image: InputPathType,
    output_image: str,
    check: bool = False,
    runner: Runner | None = None,
) -> OrientLasOutputs:
    """
    orientLAS
    
    Convert image to LAS orientation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Input image in NIfTI format.
        output_image: Output image in NIfTI format with LAS orientation.
        check: Check the match of input and output images using tkregister, and\
            for diffusion data, run dtifit and show tensors with fslview.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `OrientLasOutputs`).
    """
    params = orient_las_params(
        input_image=input_image,
        output_image=output_image,
        check=check,
    )
    return orient_las_execute(params, runner)


__all__ = [
    "ORIENT_LAS_METADATA",
    "OrientLasOutputs",
    "orient_las",
    "orient_las_execute",
    "orient_las_params",
]
