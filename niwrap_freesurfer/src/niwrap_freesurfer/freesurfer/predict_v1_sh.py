# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

PREDICT_V1_SH_METADATA = Metadata(
    id="a30a6b09004e916461882f1652d289e2a24e590a.boutiques",
    name="predict_v1.sh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


PredictV1ShParameters = typing.TypedDict('PredictV1ShParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/predict_v1.sh"]],
    "template": typing.NotRequired[str | None],
    "inflated_surface_flag": bool,
    "hemisphere": typing.NotRequired[str | None],
    "print_mode_flag": bool,
    "subjects": list[str],
    "usage_flag": bool,
})
PredictV1ShParametersTagged = typing.TypedDict('PredictV1ShParametersTagged', {
    "@type": typing.Literal["freesurfer/predict_v1.sh"],
    "template": typing.NotRequired[str | None],
    "inflated_surface_flag": bool,
    "hemisphere": typing.NotRequired[str | None],
    "print_mode_flag": bool,
    "subjects": list[str],
    "usage_flag": bool,
})


class PredictV1ShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `PredictV1ShParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def predict_v1_sh_params(
    subjects: list[str],
    template: str | None = None,
    inflated_surface_flag: bool = False,
    hemisphere: str | None = None,
    print_mode_flag: bool = False,
    usage_flag: bool = False,
) -> PredictV1ShParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects: Subjects for prediction.
        template: Target image for registration (exvivo or invivo [default]).
        inflated_surface_flag: Don't use inflated surface as initial\
            registration (backward compatibility).
        hemisphere: Hemisphere (rh or lh) default is both hemispheres.
        print_mode_flag: Print mode (do not run commands, just print them).
        usage_flag: Print usage.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/predict_v1.sh",
        "inflated_surface_flag": inflated_surface_flag,
        "print_mode_flag": print_mode_flag,
        "subjects": subjects,
        "usage_flag": usage_flag,
    }
    if template is not None:
        params["template"] = template
    if hemisphere is not None:
        params["hemisphere"] = hemisphere
    return params


def predict_v1_sh_cargs(
    params: PredictV1ShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("predict_v1.sh")
    if params.get("template", None) is not None:
        cargs.extend([
            "-t",
            params.get("template", None)
        ])
    if params.get("inflated_surface_flag", False):
        cargs.append("-i")
    if params.get("hemisphere", None) is not None:
        cargs.extend([
            "-h",
            params.get("hemisphere", None)
        ])
    if params.get("print_mode_flag", False):
        cargs.append("-p")
    cargs.extend(params.get("subjects", None))
    if params.get("usage_flag", False):
        cargs.append("-u")
    return cargs


def predict_v1_sh_outputs(
    params: PredictV1ShParameters,
    execution: Execution,
) -> PredictV1ShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PredictV1ShOutputs(
        root=execution.output_file("."),
    )
    return ret


def predict_v1_sh_execute(
    params: PredictV1ShParameters,
    runner: Runner | None = None,
) -> PredictV1ShOutputs:
    """
    predict_v1.sh
    
    A script for predicting brain images using registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PredictV1ShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PREDICT_V1_SH_METADATA)
    params = execution.params(params)
    cargs = predict_v1_sh_cargs(params, execution)
    ret = predict_v1_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def predict_v1_sh(
    subjects: list[str],
    template: str | None = None,
    inflated_surface_flag: bool = False,
    hemisphere: str | None = None,
    print_mode_flag: bool = False,
    usage_flag: bool = False,
    runner: Runner | None = None,
) -> PredictV1ShOutputs:
    """
    predict_v1.sh
    
    A script for predicting brain images using registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects: Subjects for prediction.
        template: Target image for registration (exvivo or invivo [default]).
        inflated_surface_flag: Don't use inflated surface as initial\
            registration (backward compatibility).
        hemisphere: Hemisphere (rh or lh) default is both hemispheres.
        print_mode_flag: Print mode (do not run commands, just print them).
        usage_flag: Print usage.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PredictV1ShOutputs`).
    """
    params = predict_v1_sh_params(
        template=template,
        inflated_surface_flag=inflated_surface_flag,
        hemisphere=hemisphere,
        print_mode_flag=print_mode_flag,
        subjects=subjects,
        usage_flag=usage_flag,
    )
    return predict_v1_sh_execute(params, runner)


__all__ = [
    "PREDICT_V1_SH_METADATA",
    "PredictV1ShOutputs",
    "predict_v1_sh",
    "predict_v1_sh_execute",
    "predict_v1_sh_params",
]
