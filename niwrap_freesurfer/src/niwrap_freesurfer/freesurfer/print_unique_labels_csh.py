# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

PRINT_UNIQUE_LABELS_CSH_METADATA = Metadata(
    id="48fe28c3cd4e1b6bc6c3d6a4373c5b626603010e.boutiques",
    name="print_unique_labels.csh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


PrintUniqueLabelsCshParameters = typing.TypedDict('PrintUniqueLabelsCshParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/print_unique_labels.csh"]],
    "label_volume": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "list_only": bool,
    "version": bool,
    "help": bool,
})
PrintUniqueLabelsCshParametersTagged = typing.TypedDict('PrintUniqueLabelsCshParametersTagged', {
    "@type": typing.Literal["freesurfer/print_unique_labels.csh"],
    "label_volume": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "list_only": bool,
    "version": bool,
    "help": bool,
})


class PrintUniqueLabelsCshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `PrintUniqueLabelsCshParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    results_file: OutputPathType | None
    """Output file with the list of unique labels"""


def print_unique_labels_csh_params(
    label_volume: InputPathType,
    output_file: str | None = None,
    list_only: bool = False,
    version: bool = False,
    help_: bool = False,
) -> PrintUniqueLabelsCshParametersTagged:
    """
    Build parameters.
    
    Args:
        label_volume: Label volume to be analyzed.
        output_file: Text file where the results are written.
        list_only: Only list the labels.
        version: Print version and exit.
        help_: Print help and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/print_unique_labels.csh",
        "label_volume": label_volume,
        "list_only": list_only,
        "version": version,
        "help": help_,
    }
    if output_file is not None:
        params["output_file"] = output_file
    return params


def print_unique_labels_csh_cargs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("print_unique_labels.csh")
    cargs.extend([
        "--vol",
        execution.input_file(params.get("label_volume", None))
    ])
    if params.get("output_file", None) is not None:
        cargs.extend([
            "--out",
            params.get("output_file", None)
        ])
    if params.get("list_only", False):
        cargs.append("--list")
    if params.get("version", False):
        cargs.append("--version")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def print_unique_labels_csh_outputs(
    params: PrintUniqueLabelsCshParameters,
    execution: Execution,
) -> PrintUniqueLabelsCshOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PrintUniqueLabelsCshOutputs(
        root=execution.output_file("."),
        results_file=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def print_unique_labels_csh_execute(
    params: PrintUniqueLabelsCshParameters,
    runner: Runner | None = None,
) -> PrintUniqueLabelsCshOutputs:
    """
    print_unique_labels.csh
    
    Prints the list of unique labels (with structure name) in the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PRINT_UNIQUE_LABELS_CSH_METADATA)
    params = execution.params(params)
    cargs = print_unique_labels_csh_cargs(params, execution)
    ret = print_unique_labels_csh_outputs(params, execution)
    execution.run(cargs)
    return ret


def print_unique_labels_csh(
    label_volume: InputPathType,
    output_file: str | None = None,
    list_only: bool = False,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> PrintUniqueLabelsCshOutputs:
    """
    print_unique_labels.csh
    
    Prints the list of unique labels (with structure name) in the input volume.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        label_volume: Label volume to be analyzed.
        output_file: Text file where the results are written.
        list_only: Only list the labels.
        version: Print version and exit.
        help_: Print help and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PrintUniqueLabelsCshOutputs`).
    """
    params = print_unique_labels_csh_params(
        label_volume=label_volume,
        output_file=output_file,
        list_only=list_only,
        version=version,
        help_=help_,
    )
    return print_unique_labels_csh_execute(params, runner)


__all__ = [
    "PRINT_UNIQUE_LABELS_CSH_METADATA",
    "PrintUniqueLabelsCshOutputs",
    "print_unique_labels_csh",
    "print_unique_labels_csh_execute",
    "print_unique_labels_csh_params",
]
