# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

QATOOLS_PY_METADATA = Metadata(
    id="be8bffcb0766232f6ad42ad88f6d89654a43fdb4.boutiques",
    name="qatools.py",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


QatoolsPyParameters = typing.TypedDict('QatoolsPyParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/qatools.py"]],
    "subjects_dir": str,
    "output_dir": str,
    "subjects": typing.NotRequired[list[str] | None],
    "screenshots": bool,
    "fornix": bool,
    "outlier": bool,
    "outlier_table": typing.NotRequired[InputPathType | None],
})
QatoolsPyParametersTagged = typing.TypedDict('QatoolsPyParametersTagged', {
    "@type": typing.Literal["freesurfer/qatools.py"],
    "subjects_dir": str,
    "output_dir": str,
    "subjects": typing.NotRequired[list[str] | None],
    "screenshots": bool,
    "fornix": bool,
    "outlier": bool,
    "outlier_table": typing.NotRequired[InputPathType | None],
})


class QatoolsPyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `QatoolsPyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    summary_csv: OutputPathType
    """Summary CSV file containing quality metrics."""
    screenshots_output: OutputPathType
    """Directory containing screenshots of individual brains if screenshots
    option is selected."""


def qatools_py_params(
    subjects_dir: str,
    output_dir: str,
    subjects: list[str] | None = None,
    screenshots: bool = False,
    fornix: bool = False,
    outlier: bool = False,
    outlier_table: InputPathType | None = None,
) -> QatoolsPyParametersTagged:
    """
    Build parameters.
    
    Args:
        subjects_dir: Subjects directory containing a set of Freesurfer 6.0\
            processed individual datasets.
        output_dir: Output directory for the generated results.
        subjects: List of subject IDs. If omitted, all suitable subdirectories\
            within the subjects directory will be used.
        screenshots: Create screenshots of individual brains.
        fornix: Check fornix segmentation.
        outlier: Run outlier detection.
        outlier_table: Specify normative values for outlier detection.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/qatools.py",
        "subjects_dir": subjects_dir,
        "output_dir": output_dir,
        "screenshots": screenshots,
        "fornix": fornix,
        "outlier": outlier,
    }
    if subjects is not None:
        params["subjects"] = subjects
    if outlier_table is not None:
        params["outlier_table"] = outlier_table
    return params


def qatools_py_cargs(
    params: QatoolsPyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("qatools.py")
    cargs.extend([
        "--subjects_dir",
        params.get("subjects_dir", None)
    ])
    cargs.extend([
        "--output_dir",
        params.get("output_dir", None)
    ])
    if params.get("subjects", None) is not None:
        cargs.extend([
            "--subjects",
            *params.get("subjects", None)
        ])
    if params.get("screenshots", False):
        cargs.append("--screenshots")
    if params.get("fornix", False):
        cargs.append("--fornix")
    if params.get("outlier", False):
        cargs.append("--outlier")
    if params.get("outlier_table", None) is not None:
        cargs.extend([
            "--outlier-table",
            execution.input_file(params.get("outlier_table", None))
        ])
    return cargs


def qatools_py_outputs(
    params: QatoolsPyParameters,
    execution: Execution,
) -> QatoolsPyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = QatoolsPyOutputs(
        root=execution.output_file("."),
        summary_csv=execution.output_file(params.get("output_dir", None) + "/summary.csv"),
        screenshots_output=execution.output_file(params.get("output_dir", None) + "/screenshots/"),
    )
    return ret


def qatools_py_execute(
    params: QatoolsPyParameters,
    runner: Runner | None = None,
) -> QatoolsPyOutputs:
    """
    qatools.py
    
    A tool to compute quality metrics from Freesurfer 6.0 analysis results.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `QatoolsPyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(QATOOLS_PY_METADATA)
    params = execution.params(params)
    cargs = qatools_py_cargs(params, execution)
    ret = qatools_py_outputs(params, execution)
    execution.run(cargs)
    return ret


def qatools_py(
    subjects_dir: str,
    output_dir: str,
    subjects: list[str] | None = None,
    screenshots: bool = False,
    fornix: bool = False,
    outlier: bool = False,
    outlier_table: InputPathType | None = None,
    runner: Runner | None = None,
) -> QatoolsPyOutputs:
    """
    qatools.py
    
    A tool to compute quality metrics from Freesurfer 6.0 analysis results.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjects_dir: Subjects directory containing a set of Freesurfer 6.0\
            processed individual datasets.
        output_dir: Output directory for the generated results.
        subjects: List of subject IDs. If omitted, all suitable subdirectories\
            within the subjects directory will be used.
        screenshots: Create screenshots of individual brains.
        fornix: Check fornix segmentation.
        outlier: Run outlier detection.
        outlier_table: Specify normative values for outlier detection.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `QatoolsPyOutputs`).
    """
    params = qatools_py_params(
        subjects_dir=subjects_dir,
        output_dir=output_dir,
        subjects=subjects,
        screenshots=screenshots,
        fornix=fornix,
        outlier=outlier,
        outlier_table=outlier_table,
    )
    return qatools_py_execute(params, runner)


__all__ = [
    "QATOOLS_PY_METADATA",
    "QatoolsPyOutputs",
    "qatools_py",
    "qatools_py_execute",
    "qatools_py_params",
]
