# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RCA_CONFIG2CSH_METADATA = Metadata(
    id="14b4009919a087ddbdec70bbbbc62ee544d46b4c.boutiques",
    name="rca-config2csh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RcaConfig2cshParameters = typing.TypedDict('RcaConfig2cshParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/rca-config2csh"]],
    "configfile": InputPathType,
})
RcaConfig2cshParametersTagged = typing.TypedDict('RcaConfig2cshParametersTagged', {
    "@type": typing.Literal["freesurfer/rca-config2csh"],
    "configfile": InputPathType,
})


class RcaConfig2cshOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RcaConfig2cshParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def rca_config2csh_params(
    configfile: InputPathType,
) -> RcaConfig2cshParametersTagged:
    """
    Build parameters.
    
    Args:
        configfile: Configuration file to be converted.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/rca-config2csh",
        "configfile": configfile,
    }
    return params


def rca_config2csh_cargs(
    params: RcaConfig2cshParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("rca-config2csh")
    cargs.extend([
        "-config2csh",
        execution.input_file(params.get("configfile", None))
    ])
    return cargs


def rca_config2csh_outputs(
    params: RcaConfig2cshParameters,
    execution: Execution,
) -> RcaConfig2cshOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RcaConfig2cshOutputs(
        root=execution.output_file("."),
    )
    return ret


def rca_config2csh_execute(
    params: RcaConfig2cshParameters,
    runner: Runner | None = None,
) -> RcaConfig2cshOutputs:
    """
    rca-config2csh
    
    rca-config2csh is a utility to convert configuration files into C-shell
    syntax.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RcaConfig2cshOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RCA_CONFIG2CSH_METADATA)
    params = execution.params(params)
    cargs = rca_config2csh_cargs(params, execution)
    ret = rca_config2csh_outputs(params, execution)
    execution.run(cargs)
    return ret


def rca_config2csh(
    configfile: InputPathType,
    runner: Runner | None = None,
) -> RcaConfig2cshOutputs:
    """
    rca-config2csh
    
    rca-config2csh is a utility to convert configuration files into C-shell
    syntax.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        configfile: Configuration file to be converted.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RcaConfig2cshOutputs`).
    """
    params = rca_config2csh_params(
        configfile=configfile,
    )
    return rca_config2csh_execute(params, runner)


__all__ = [
    "RCA_CONFIG2CSH_METADATA",
    "RcaConfig2cshOutputs",
    "rca_config2csh",
    "rca_config2csh_execute",
    "rca_config2csh_params",
]
