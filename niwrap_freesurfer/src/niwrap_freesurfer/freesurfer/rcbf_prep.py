# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RCBF_PREP_METADATA = Metadata(
    id="a2a794e834812de03067fdf1855b089c743ba4de.boutiques",
    name="rcbf-prep",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RcbfPrepParameters = typing.TypedDict('RcbfPrepParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/rcbf-prep"]],
    "outdir": str,
    "rcbfvol": InputPathType,
    "subject": typing.NotRequired[str | None],
    "roitab": typing.NotRequired[InputPathType | None],
    "register": typing.NotRequired[InputPathType | None],
    "template": typing.NotRequired[InputPathType | None],
})
RcbfPrepParametersTagged = typing.TypedDict('RcbfPrepParametersTagged', {
    "@type": typing.Literal["freesurfer/rcbf-prep"],
    "outdir": str,
    "rcbfvol": InputPathType,
    "subject": typing.NotRequired[str | None],
    "roitab": typing.NotRequired[InputPathType | None],
    "register": typing.NotRequired[InputPathType | None],
    "template": typing.NotRequired[InputPathType | None],
})


class RcbfPrepOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RcbfPrepParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    lh_hemisphere_rcbf: OutputPathType
    """Registered and resampled rCBF volume for left hemisphere."""
    rh_hemisphere_rcbf_right: OutputPathType
    """Registered and resampled rCBF volume for right hemisphere."""
    mni305_rcbf: OutputPathType
    """rCBF volume resampled to MNI305 space."""
    roi_stats: OutputPathType
    """Stats file summarizing the ROIs."""


def rcbf_prep_params(
    outdir: str,
    rcbfvol: InputPathType,
    subject: str | None = None,
    roitab: InputPathType | None = None,
    register: InputPathType | None = None,
    template: InputPathType | None = None,
) -> RcbfPrepParametersTagged:
    """
    Build parameters.
    
    Args:
        outdir: Output directory where results will be stored.
        rcbfvol: Input rCBF volume to be registered to the FreeSurfer\
            anatomical.
        subject: Subject identifier for FreeSurfer anatomical registration.
        roitab: ROI table specifying which ROIs will be summarized, e.g.,\
            FreeSurferColorLUT.txt.
        register: Registration data file instead of a subject.
        template: Template file used instead of rCBF itself.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/rcbf-prep",
        "outdir": outdir,
        "rcbfvol": rcbfvol,
    }
    if subject is not None:
        params["subject"] = subject
    if roitab is not None:
        params["roitab"] = roitab
    if register is not None:
        params["register"] = register
    if template is not None:
        params["template"] = template
    return params


def rcbf_prep_cargs(
    params: RcbfPrepParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("rcbf-prep")
    cargs.extend([
        "--o",
        params.get("outdir", None)
    ])
    cargs.extend([
        "--rcbf",
        execution.input_file(params.get("rcbfvol", None))
    ])
    if params.get("subject", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject", None)
        ])
    if params.get("roitab", None) is not None:
        cargs.extend([
            "--roitab",
            execution.input_file(params.get("roitab", None))
        ])
    if params.get("register", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("register", None))
        ])
    if params.get("template", None) is not None:
        cargs.extend([
            "--t",
            execution.input_file(params.get("template", None))
        ])
    return cargs


def rcbf_prep_outputs(
    params: RcbfPrepParameters,
    execution: Execution,
) -> RcbfPrepOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RcbfPrepOutputs(
        root=execution.output_file("."),
        lh_hemisphere_rcbf=execution.output_file(params.get("outdir", None) + "/lh.rcbf.mgh"),
        rh_hemisphere_rcbf_right=execution.output_file(params.get("outdir", None) + "/rh.rcbf.mgh"),
        mni305_rcbf=execution.output_file(params.get("outdir", None) + "/rcbf.mni305.nii"),
        roi_stats=execution.output_file(params.get("outdir", None) + "/roi.dat"),
    )
    return ret


def rcbf_prep_execute(
    params: RcbfPrepParameters,
    runner: Runner | None = None,
) -> RcbfPrepOutputs:
    """
    rcbf-prep
    
    Performs integration of rCBF as produced by Siemens scanners with FreeSurfer
    analysis in preparation for group analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RcbfPrepOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RCBF_PREP_METADATA)
    params = execution.params(params)
    cargs = rcbf_prep_cargs(params, execution)
    ret = rcbf_prep_outputs(params, execution)
    execution.run(cargs)
    return ret


def rcbf_prep(
    outdir: str,
    rcbfvol: InputPathType,
    subject: str | None = None,
    roitab: InputPathType | None = None,
    register: InputPathType | None = None,
    template: InputPathType | None = None,
    runner: Runner | None = None,
) -> RcbfPrepOutputs:
    """
    rcbf-prep
    
    Performs integration of rCBF as produced by Siemens scanners with FreeSurfer
    analysis in preparation for group analysis.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        outdir: Output directory where results will be stored.
        rcbfvol: Input rCBF volume to be registered to the FreeSurfer\
            anatomical.
        subject: Subject identifier for FreeSurfer anatomical registration.
        roitab: ROI table specifying which ROIs will be summarized, e.g.,\
            FreeSurferColorLUT.txt.
        register: Registration data file instead of a subject.
        template: Template file used instead of rCBF itself.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RcbfPrepOutputs`).
    """
    params = rcbf_prep_params(
        outdir=outdir,
        rcbfvol=rcbfvol,
        subject=subject,
        roitab=roitab,
        register=register,
        template=template,
    )
    return rcbf_prep_execute(params, runner)


__all__ = [
    "RCBF_PREP_METADATA",
    "RcbfPrepOutputs",
    "rcbf_prep",
    "rcbf_prep_execute",
    "rcbf_prep_params",
]
