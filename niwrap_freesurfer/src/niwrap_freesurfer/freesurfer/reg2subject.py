# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

REG2SUBJECT_METADATA = Metadata(
    id="cefd2546e44a6b96bd7ddf7a1b9cf638824d614e.boutiques",
    name="reg2subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Reg2subjectParameters = typing.TypedDict('Reg2subjectParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/reg2subject"]],
    "regfile": InputPathType,
})
Reg2subjectParametersTagged = typing.TypedDict('Reg2subjectParametersTagged', {
    "@type": typing.Literal["freesurfer/reg2subject"],
    "regfile": InputPathType,
})


class Reg2subjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Reg2subjectParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def reg2subject_params(
    regfile: InputPathType,
) -> Reg2subjectParametersTagged:
    """
    Build parameters.
    
    Args:
        regfile: Input registration file, either in LTA or register.dat format.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/reg2subject",
        "regfile": regfile,
    }
    return params


def reg2subject_cargs(
    params: Reg2subjectParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("reg2subject")
    cargs.extend([
        "--r",
        execution.input_file(params.get("regfile", None))
    ])
    return cargs


def reg2subject_outputs(
    params: Reg2subjectParameters,
    execution: Execution,
) -> Reg2subjectOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Reg2subjectOutputs(
        root=execution.output_file("."),
    )
    return ret


def reg2subject_execute(
    params: Reg2subjectParameters,
    runner: Runner | None = None,
) -> Reg2subjectOutputs:
    """
    reg2subject
    
    Returns the name of the subject in the registration file, whether it is an
    LTA or register.dat file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Reg2subjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REG2SUBJECT_METADATA)
    params = execution.params(params)
    cargs = reg2subject_cargs(params, execution)
    ret = reg2subject_outputs(params, execution)
    execution.run(cargs)
    return ret


def reg2subject(
    regfile: InputPathType,
    runner: Runner | None = None,
) -> Reg2subjectOutputs:
    """
    reg2subject
    
    Returns the name of the subject in the registration file, whether it is an
    LTA or register.dat file.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        regfile: Input registration file, either in LTA or register.dat format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Reg2subjectOutputs`).
    """
    params = reg2subject_params(
        regfile=regfile,
    )
    return reg2subject_execute(params, runner)


__all__ = [
    "REG2SUBJECT_METADATA",
    "Reg2subjectOutputs",
    "reg2subject",
    "reg2subject_execute",
    "reg2subject_params",
]
