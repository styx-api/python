# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

REGISTER_CHILD_METADATA = Metadata(
    id="5ad59ad1bdaf919d442f6ac4815e4288ed92e116.boutiques",
    name="register_child",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RegisterChildParameters = typing.TypedDict('RegisterChildParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/register_child"]],
    "input_volume": InputPathType,
    "output_directory": str,
})
RegisterChildParametersTagged = typing.TypedDict('RegisterChildParametersTagged', {
    "@type": typing.Literal["freesurfer/register_child"],
    "input_volume": InputPathType,
    "output_directory": str,
})


class RegisterChildOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RegisterChildParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    transformed_control_points: OutputPathType
    """File where transformed control points are written."""
    intensity_normalized_volume: OutputPathType
    """File where intensity normalized volume is written."""


def register_child_params(
    input_volume: InputPathType,
    output_directory: str,
) -> RegisterChildParametersTagged:
    """
    Build parameters.
    
    Args:
        input_volume: Input MR volume to be used for registration.
        output_directory: Directory where output files will be written.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/register_child",
        "input_volume": input_volume,
        "output_directory": output_directory,
    }
    return params


def register_child_cargs(
    params: RegisterChildParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("register_child")
    cargs.append(execution.input_file(params.get("input_volume", None)))
    cargs.append(params.get("output_directory", None))
    return cargs


def register_child_outputs(
    params: RegisterChildParameters,
    execution: Execution,
) -> RegisterChildOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RegisterChildOutputs(
        root=execution.output_file("."),
        transformed_control_points=execution.output_file(params.get("output_directory", None) + "/fsamples"),
        intensity_normalized_volume=execution.output_file(params.get("output_directory", None) + "/norm"),
    )
    return ret


def register_child_execute(
    params: RegisterChildParameters,
    runner: Runner | None = None,
) -> RegisterChildOutputs:
    """
    register_child
    
    A tool used for registering MR volumes with a child's atlas in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegisterChildOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REGISTER_CHILD_METADATA)
    params = execution.params(params)
    cargs = register_child_cargs(params, execution)
    ret = register_child_outputs(params, execution)
    execution.run(cargs)
    return ret


def register_child(
    input_volume: InputPathType,
    output_directory: str,
    runner: Runner | None = None,
) -> RegisterChildOutputs:
    """
    register_child
    
    A tool used for registering MR volumes with a child's atlas in Freesurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input MR volume to be used for registration.
        output_directory: Directory where output files will be written.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegisterChildOutputs`).
    """
    params = register_child_params(
        input_volume=input_volume,
        output_directory=output_directory,
    )
    return register_child_execute(params, runner)


__all__ = [
    "REGISTER_CHILD_METADATA",
    "RegisterChildOutputs",
    "register_child",
    "register_child_execute",
    "register_child_params",
]
