# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RUN_SAMSEG_METADATA = Metadata(
    id="2dc519f954ca7e55d495aafad88c9c72bb041830.boutiques",
    name="run_samseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


RunSamsegParameters = typing.TypedDict('RunSamsegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/run_samseg"]],
    "output_dir": str,
    "input_files": list[InputPathType],
    "input_mode": typing.NotRequired[list[str] | None],
    "threads": typing.NotRequired[float | None],
    "reg_only": bool,
    "reg_file": typing.NotRequired[InputPathType | None],
    "init_reg_file": typing.NotRequired[InputPathType | None],
    "atlas_dir": typing.NotRequired[str | None],
    "gmm_file": typing.NotRequired[InputPathType | None],
    "ignore_unknown": bool,
    "options_file": typing.NotRequired[InputPathType | None],
    "pallidum_separate": bool,
    "mesh_stiffness": typing.NotRequired[float | None],
    "smooth_wm_cortex_priors": typing.NotRequired[float | None],
    "bias_field_smoothing_kernel": typing.NotRequired[float | None],
    "lesion": bool,
    "threshold": typing.NotRequired[float | None],
    "samples": typing.NotRequired[float | None],
    "burnin": typing.NotRequired[float | None],
    "lesion_pseudo_samples": typing.NotRequired[list[float] | None],
    "lesion_rho": typing.NotRequired[float | None],
    "lesion_mask_structure": typing.NotRequired[str | None],
    "lesion_mask_pattern": typing.NotRequired[list[float] | None],
    "random_seed": typing.NotRequired[float | None],
    "dissection_photo": typing.NotRequired[str | None],
    "history": bool,
    "save_posteriors": typing.NotRequired[list[str] | None],
    "save_probabilities": bool,
    "showfigs": bool,
    "save_mesh": bool,
    "save_warp": bool,
    "movie": bool,
})
RunSamsegParametersTagged = typing.TypedDict('RunSamsegParametersTagged', {
    "@type": typing.Literal["freesurfer/run_samseg"],
    "output_dir": str,
    "input_files": list[InputPathType],
    "input_mode": typing.NotRequired[list[str] | None],
    "threads": typing.NotRequired[float | None],
    "reg_only": bool,
    "reg_file": typing.NotRequired[InputPathType | None],
    "init_reg_file": typing.NotRequired[InputPathType | None],
    "atlas_dir": typing.NotRequired[str | None],
    "gmm_file": typing.NotRequired[InputPathType | None],
    "ignore_unknown": bool,
    "options_file": typing.NotRequired[InputPathType | None],
    "pallidum_separate": bool,
    "mesh_stiffness": typing.NotRequired[float | None],
    "smooth_wm_cortex_priors": typing.NotRequired[float | None],
    "bias_field_smoothing_kernel": typing.NotRequired[float | None],
    "lesion": bool,
    "threshold": typing.NotRequired[float | None],
    "samples": typing.NotRequired[float | None],
    "burnin": typing.NotRequired[float | None],
    "lesion_pseudo_samples": typing.NotRequired[list[float] | None],
    "lesion_rho": typing.NotRequired[float | None],
    "lesion_mask_structure": typing.NotRequired[str | None],
    "lesion_mask_pattern": typing.NotRequired[list[float] | None],
    "random_seed": typing.NotRequired[float | None],
    "dissection_photo": typing.NotRequired[str | None],
    "history": bool,
    "save_posteriors": typing.NotRequired[list[str] | None],
    "save_probabilities": bool,
    "showfigs": bool,
    "save_mesh": bool,
    "save_warp": bool,
    "movie": bool,
})


class RunSamsegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RunSamsegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def run_samseg_params(
    output_dir: str,
    input_files: list[InputPathType],
    input_mode: list[str] | None = None,
    threads: float | None = None,
    reg_only: bool = False,
    reg_file: InputPathType | None = None,
    init_reg_file: InputPathType | None = None,
    atlas_dir: str | None = None,
    gmm_file: InputPathType | None = None,
    ignore_unknown: bool = False,
    options_file: InputPathType | None = None,
    pallidum_separate: bool = False,
    mesh_stiffness: float | None = None,
    smooth_wm_cortex_priors: float | None = None,
    bias_field_smoothing_kernel: float | None = None,
    lesion: bool = False,
    threshold: float | None = None,
    samples: float | None = None,
    burnin: float | None = None,
    lesion_pseudo_samples: list[float] | None = None,
    lesion_rho: float | None = None,
    lesion_mask_structure: str | None = None,
    lesion_mask_pattern: list[float] | None = None,
    random_seed: float | None = None,
    dissection_photo: str | None = None,
    history: bool = False,
    save_posteriors: list[str] | None = None,
    save_probabilities: bool = False,
    showfigs: bool = False,
    save_mesh: bool = False,
    save_warp: bool = False,
    movie: bool = False,
) -> RunSamsegParametersTagged:
    """
    Build parameters.
    
    Args:
        output_dir: Target directory for output.
        input_files: Input image(s) for segmentation.
        input_mode: Output basenames for the input image mode.
        threads: Number of threads to use.
        reg_only: Only perform initial affine registration.
        reg_file: Skip initial affine registration and read transform from\
            file.
        init_reg_file: Initial affine registration.
        atlas_dir: Point to an alternative atlas directory.
        gmm_file: Point to an alternative GMM file.
        ignore_unknown: Ignore final priors corresponding to unknown class.
        options_file: Override advanced options via a JSON file.
        pallidum_separate: Move pallidum outside of global white matter class.
        mesh_stiffness: Override mesh stiffness.
        smooth_wm_cortex_priors: Sigma value to smooth the WM and cortex atlas\
            priors.
        bias_field_smoothing_kernel: Distance in mm of sinc function center to\
            first zero crossing.
        lesion: Enable lesion segmentation (requires tensorflow).
        threshold: Lesion threshold for final segmentation.
        samples: Number of samples for lesion segmentation.
        burnin: Number of burn-in samples for lesion segmentation.
        lesion_pseudo_samples: Lesion pseudo samples mean and variance.
        lesion_rho: Lesion ratio.
        lesion_mask_structure: Intensity mask brain structure.
        lesion_mask_pattern: Lesion mask pattern for each input volume.
        random_seed: Random seed.
        dissection_photo: Specify hemispheres: left, right, or both.
        history: Save history of segmentation.
        save_posteriors: Save posterior volumes.
        save_probabilities: Save modal class probabilities.
        showfigs: Show figures during run.
        save_mesh: Save final mesh in template space.
        save_warp: Save image->template warp field.
        movie: Show history as controlled time sequence.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/run_samseg",
        "output_dir": output_dir,
        "input_files": input_files,
        "reg_only": reg_only,
        "ignore_unknown": ignore_unknown,
        "pallidum_separate": pallidum_separate,
        "lesion": lesion,
        "history": history,
        "save_probabilities": save_probabilities,
        "showfigs": showfigs,
        "save_mesh": save_mesh,
        "save_warp": save_warp,
        "movie": movie,
    }
    if input_mode is not None:
        params["input_mode"] = input_mode
    if threads is not None:
        params["threads"] = threads
    if reg_file is not None:
        params["reg_file"] = reg_file
    if init_reg_file is not None:
        params["init_reg_file"] = init_reg_file
    if atlas_dir is not None:
        params["atlas_dir"] = atlas_dir
    if gmm_file is not None:
        params["gmm_file"] = gmm_file
    if options_file is not None:
        params["options_file"] = options_file
    if mesh_stiffness is not None:
        params["mesh_stiffness"] = mesh_stiffness
    if smooth_wm_cortex_priors is not None:
        params["smooth_wm_cortex_priors"] = smooth_wm_cortex_priors
    if bias_field_smoothing_kernel is not None:
        params["bias_field_smoothing_kernel"] = bias_field_smoothing_kernel
    if threshold is not None:
        params["threshold"] = threshold
    if samples is not None:
        params["samples"] = samples
    if burnin is not None:
        params["burnin"] = burnin
    if lesion_pseudo_samples is not None:
        params["lesion_pseudo_samples"] = lesion_pseudo_samples
    if lesion_rho is not None:
        params["lesion_rho"] = lesion_rho
    if lesion_mask_structure is not None:
        params["lesion_mask_structure"] = lesion_mask_structure
    if lesion_mask_pattern is not None:
        params["lesion_mask_pattern"] = lesion_mask_pattern
    if random_seed is not None:
        params["random_seed"] = random_seed
    if dissection_photo is not None:
        params["dissection_photo"] = dissection_photo
    if save_posteriors is not None:
        params["save_posteriors"] = save_posteriors
    return params


def run_samseg_cargs(
    params: RunSamsegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("run_samseg")
    cargs.extend([
        "-o",
        params.get("output_dir", None)
    ])
    cargs.extend([
        "-i",
        *[execution.input_file(f) for f in params.get("input_files", None)]
    ])
    if params.get("input_mode", None) is not None:
        cargs.extend([
            "-m",
            *params.get("input_mode", None)
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("reg_only", False):
        cargs.append("--reg-only")
    if params.get("reg_file", None) is not None:
        cargs.extend([
            "-r",
            execution.input_file(params.get("reg_file", None))
        ])
    if params.get("init_reg_file", None) is not None:
        cargs.extend([
            "--init-reg",
            execution.input_file(params.get("init_reg_file", None))
        ])
    if params.get("atlas_dir", None) is not None:
        cargs.extend([
            "-a",
            params.get("atlas_dir", None)
        ])
    if params.get("gmm_file", None) is not None:
        cargs.extend([
            "--gmm",
            execution.input_file(params.get("gmm_file", None))
        ])
    if params.get("ignore_unknown", False):
        cargs.append("--ignore-unknown")
    if params.get("options_file", None) is not None:
        cargs.extend([
            "--options",
            execution.input_file(params.get("options_file", None))
        ])
    if params.get("pallidum_separate", False):
        cargs.append("--pallidum-separate")
    if params.get("mesh_stiffness", None) is not None:
        cargs.extend([
            "--mesh-stiffness",
            str(params.get("mesh_stiffness", None))
        ])
    if params.get("smooth_wm_cortex_priors", None) is not None:
        cargs.extend([
            "--smooth-wm-cortex-priors",
            str(params.get("smooth_wm_cortex_priors", None))
        ])
    if params.get("bias_field_smoothing_kernel", None) is not None:
        cargs.extend([
            "--bias-field-smoothing-kernel",
            str(params.get("bias_field_smoothing_kernel", None))
        ])
    if params.get("lesion", False):
        cargs.append("--lesion")
    if params.get("threshold", None) is not None:
        cargs.extend([
            "--threshold",
            str(params.get("threshold", None))
        ])
    if params.get("samples", None) is not None:
        cargs.extend([
            "--samples",
            str(params.get("samples", None))
        ])
    if params.get("burnin", None) is not None:
        cargs.extend([
            "--burnin",
            str(params.get("burnin", None))
        ])
    if params.get("lesion_pseudo_samples", None) is not None:
        cargs.extend([
            "--lesion-pseudo-samples",
            *map(str, params.get("lesion_pseudo_samples", None))
        ])
    if params.get("lesion_rho", None) is not None:
        cargs.extend([
            "--lesion-rho",
            str(params.get("lesion_rho", None))
        ])
    if params.get("lesion_mask_structure", None) is not None:
        cargs.extend([
            "--lesion-mask-structure",
            params.get("lesion_mask_structure", None)
        ])
    if params.get("lesion_mask_pattern", None) is not None:
        cargs.extend([
            "--lesion-mask-pattern",
            *map(str, params.get("lesion_mask_pattern", None))
        ])
    if params.get("random_seed", None) is not None:
        cargs.extend([
            "--random-seed",
            str(params.get("random_seed", None))
        ])
    if params.get("dissection_photo", None) is not None:
        cargs.extend([
            "--dissection-photo",
            params.get("dissection_photo", None)
        ])
    if params.get("history", False):
        cargs.append("--history")
    if params.get("save_posteriors", None) is not None:
        cargs.extend([
            "--save-posteriors",
            *params.get("save_posteriors", None)
        ])
    if params.get("save_probabilities", False):
        cargs.append("--save-probabilities")
    if params.get("showfigs", False):
        cargs.append("--showfigs")
    if params.get("save_mesh", False):
        cargs.append("--save-mesh")
    if params.get("save_warp", False):
        cargs.append("--save-warp")
    if params.get("movie", False):
        cargs.append("--movie")
    return cargs


def run_samseg_outputs(
    params: RunSamsegParameters,
    execution: Execution,
) -> RunSamsegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RunSamsegOutputs(
        root=execution.output_file("."),
    )
    return ret


def run_samseg_execute(
    params: RunSamsegParameters,
    runner: Runner | None = None,
) -> RunSamsegOutputs:
    """
    run_samseg
    
    SAMSEG (Sequence Adaptive Multimodal SEGmentation) is a tool for automated
    segmentation of brain MRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunSamsegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RUN_SAMSEG_METADATA)
    params = execution.params(params)
    cargs = run_samseg_cargs(params, execution)
    ret = run_samseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def run_samseg(
    output_dir: str,
    input_files: list[InputPathType],
    input_mode: list[str] | None = None,
    threads: float | None = None,
    reg_only: bool = False,
    reg_file: InputPathType | None = None,
    init_reg_file: InputPathType | None = None,
    atlas_dir: str | None = None,
    gmm_file: InputPathType | None = None,
    ignore_unknown: bool = False,
    options_file: InputPathType | None = None,
    pallidum_separate: bool = False,
    mesh_stiffness: float | None = None,
    smooth_wm_cortex_priors: float | None = None,
    bias_field_smoothing_kernel: float | None = None,
    lesion: bool = False,
    threshold: float | None = None,
    samples: float | None = None,
    burnin: float | None = None,
    lesion_pseudo_samples: list[float] | None = None,
    lesion_rho: float | None = None,
    lesion_mask_structure: str | None = None,
    lesion_mask_pattern: list[float] | None = None,
    random_seed: float | None = None,
    dissection_photo: str | None = None,
    history: bool = False,
    save_posteriors: list[str] | None = None,
    save_probabilities: bool = False,
    showfigs: bool = False,
    save_mesh: bool = False,
    save_warp: bool = False,
    movie: bool = False,
    runner: Runner | None = None,
) -> RunSamsegOutputs:
    """
    run_samseg
    
    SAMSEG (Sequence Adaptive Multimodal SEGmentation) is a tool for automated
    segmentation of brain MRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_dir: Target directory for output.
        input_files: Input image(s) for segmentation.
        input_mode: Output basenames for the input image mode.
        threads: Number of threads to use.
        reg_only: Only perform initial affine registration.
        reg_file: Skip initial affine registration and read transform from\
            file.
        init_reg_file: Initial affine registration.
        atlas_dir: Point to an alternative atlas directory.
        gmm_file: Point to an alternative GMM file.
        ignore_unknown: Ignore final priors corresponding to unknown class.
        options_file: Override advanced options via a JSON file.
        pallidum_separate: Move pallidum outside of global white matter class.
        mesh_stiffness: Override mesh stiffness.
        smooth_wm_cortex_priors: Sigma value to smooth the WM and cortex atlas\
            priors.
        bias_field_smoothing_kernel: Distance in mm of sinc function center to\
            first zero crossing.
        lesion: Enable lesion segmentation (requires tensorflow).
        threshold: Lesion threshold for final segmentation.
        samples: Number of samples for lesion segmentation.
        burnin: Number of burn-in samples for lesion segmentation.
        lesion_pseudo_samples: Lesion pseudo samples mean and variance.
        lesion_rho: Lesion ratio.
        lesion_mask_structure: Intensity mask brain structure.
        lesion_mask_pattern: Lesion mask pattern for each input volume.
        random_seed: Random seed.
        dissection_photo: Specify hemispheres: left, right, or both.
        history: Save history of segmentation.
        save_posteriors: Save posterior volumes.
        save_probabilities: Save modal class probabilities.
        showfigs: Show figures during run.
        save_mesh: Save final mesh in template space.
        save_warp: Save image->template warp field.
        movie: Show history as controlled time sequence.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunSamsegOutputs`).
    """
    params = run_samseg_params(
        output_dir=output_dir,
        input_files=input_files,
        input_mode=input_mode,
        threads=threads,
        reg_only=reg_only,
        reg_file=reg_file,
        init_reg_file=init_reg_file,
        atlas_dir=atlas_dir,
        gmm_file=gmm_file,
        ignore_unknown=ignore_unknown,
        options_file=options_file,
        pallidum_separate=pallidum_separate,
        mesh_stiffness=mesh_stiffness,
        smooth_wm_cortex_priors=smooth_wm_cortex_priors,
        bias_field_smoothing_kernel=bias_field_smoothing_kernel,
        lesion=lesion,
        threshold=threshold,
        samples=samples,
        burnin=burnin,
        lesion_pseudo_samples=lesion_pseudo_samples,
        lesion_rho=lesion_rho,
        lesion_mask_structure=lesion_mask_structure,
        lesion_mask_pattern=lesion_mask_pattern,
        random_seed=random_seed,
        dissection_photo=dissection_photo,
        history=history,
        save_posteriors=save_posteriors,
        save_probabilities=save_probabilities,
        showfigs=showfigs,
        save_mesh=save_mesh,
        save_warp=save_warp,
        movie=movie,
    )
    return run_samseg_execute(params, runner)


__all__ = [
    "RUN_SAMSEG_METADATA",
    "RunSamsegOutputs",
    "run_samseg",
    "run_samseg_execute",
    "run_samseg_params",
]
