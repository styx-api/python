# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SAMSEG_METADATA = Metadata(
    id="3ccf335cc3fe2ab6d00adcb3be6ab89b75cf70f5.boutiques",
    name="samseg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SamsegParameters = typing.TypedDict('SamsegParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/samseg"]],
    "input_files": list[InputPathType],
    "t1w_files": typing.NotRequired[list[InputPathType] | None],
    "t2w_files": typing.NotRequired[list[InputPathType] | None],
    "flair_files": typing.NotRequired[list[InputPathType] | None],
    "other_modality_files": typing.NotRequired[list[InputPathType] | None],
    "output_directory": str,
    "options_file": typing.NotRequired[InputPathType | None],
    "dissection_photo_mode": typing.NotRequired[str | None],
    "save_history": bool,
    "subject": typing.NotRequired[str | None],
    "save_posteriors": bool,
    "save_probabilities": bool,
    "no_save_warp": bool,
    "mrf": bool,
    "no_mrf": bool,
    "threads": typing.NotRequired[float | None],
    "atlas_directory": typing.NotRequired[str | None],
    "gmm_file": typing.NotRequired[InputPathType | None],
    "no_block_coordinate_descent": bool,
    "logdomain_costandgradient_calculator": bool,
    "no_logdomain_costandgradient_calculator": bool,
    "recon": bool,
    "fill": bool,
    "normalization2": bool,
    "use_t2w": bool,
    "use_flair": bool,
    "hires": bool,
    "subjects_directory": typing.NotRequired[str | None],
    "pallidum_separate": bool,
    "stiffness": typing.NotRequired[float | None],
    "lesion": bool,
    "lesion_mask_pattern": typing.NotRequired[list[float] | None],
    "bias_field_smoothing_kernel": typing.NotRequired[float | None],
    "registration_file": typing.NotRequired[InputPathType | None],
    "regmat_file": typing.NotRequired[InputPathType | None],
    "init_lta": typing.NotRequired[InputPathType | None],
    "reg_only": bool,
    "ssdd_directory": typing.NotRequired[str | None],
    "save_mesh": bool,
    "max_iters": typing.NotRequired[float | None],
    "dice_file": typing.NotRequired[InputPathType | None],
    "ignore_unknown": bool,
    "smooth_wm_cortex": typing.NotRequired[float | None],
    "profile_file": typing.NotRequired[InputPathType | None],
})
SamsegParametersTagged = typing.TypedDict('SamsegParametersTagged', {
    "@type": typing.Literal["freesurfer/samseg"],
    "input_files": list[InputPathType],
    "t1w_files": typing.NotRequired[list[InputPathType] | None],
    "t2w_files": typing.NotRequired[list[InputPathType] | None],
    "flair_files": typing.NotRequired[list[InputPathType] | None],
    "other_modality_files": typing.NotRequired[list[InputPathType] | None],
    "output_directory": str,
    "options_file": typing.NotRequired[InputPathType | None],
    "dissection_photo_mode": typing.NotRequired[str | None],
    "save_history": bool,
    "subject": typing.NotRequired[str | None],
    "save_posteriors": bool,
    "save_probabilities": bool,
    "no_save_warp": bool,
    "mrf": bool,
    "no_mrf": bool,
    "threads": typing.NotRequired[float | None],
    "atlas_directory": typing.NotRequired[str | None],
    "gmm_file": typing.NotRequired[InputPathType | None],
    "no_block_coordinate_descent": bool,
    "logdomain_costandgradient_calculator": bool,
    "no_logdomain_costandgradient_calculator": bool,
    "recon": bool,
    "fill": bool,
    "normalization2": bool,
    "use_t2w": bool,
    "use_flair": bool,
    "hires": bool,
    "subjects_directory": typing.NotRequired[str | None],
    "pallidum_separate": bool,
    "stiffness": typing.NotRequired[float | None],
    "lesion": bool,
    "lesion_mask_pattern": typing.NotRequired[list[float] | None],
    "bias_field_smoothing_kernel": typing.NotRequired[float | None],
    "registration_file": typing.NotRequired[InputPathType | None],
    "regmat_file": typing.NotRequired[InputPathType | None],
    "init_lta": typing.NotRequired[InputPathType | None],
    "reg_only": bool,
    "ssdd_directory": typing.NotRequired[str | None],
    "save_mesh": bool,
    "max_iters": typing.NotRequired[float | None],
    "dice_file": typing.NotRequired[InputPathType | None],
    "ignore_unknown": bool,
    "smooth_wm_cortex": typing.NotRequired[float | None],
    "profile_file": typing.NotRequired[InputPathType | None],
})


class SamsegOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SamsegParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segmentation_output: OutputPathType
    """Segmentation output file."""
    posteriors_output: OutputPathType
    """Posterior probabilities output file."""
    probabilities_output: OutputPathType
    """Probabilities output file, including post, prior, and likelihood."""
    mesh_output: OutputPathType
    """Mesh output file (if save-mesh is enabled)."""


def samseg_params(
    input_files: list[InputPathType],
    output_directory: str,
    t1w_files: list[InputPathType] | None = None,
    t2w_files: list[InputPathType] | None = None,
    flair_files: list[InputPathType] | None = None,
    other_modality_files: list[InputPathType] | None = None,
    options_file: InputPathType | None = None,
    dissection_photo_mode: str | None = None,
    save_history: bool = False,
    subject: str | None = None,
    save_posteriors: bool = False,
    save_probabilities: bool = False,
    no_save_warp: bool = False,
    mrf: bool = False,
    no_mrf: bool = False,
    threads: float | None = None,
    atlas_directory: str | None = None,
    gmm_file: InputPathType | None = None,
    no_block_coordinate_descent: bool = False,
    logdomain_costandgradient_calculator: bool = False,
    no_logdomain_costandgradient_calculator: bool = False,
    recon: bool = False,
    fill: bool = False,
    normalization2: bool = False,
    use_t2w: bool = False,
    use_flair: bool = False,
    hires: bool = False,
    subjects_directory: str | None = None,
    pallidum_separate: bool = False,
    stiffness: float | None = None,
    lesion: bool = False,
    lesion_mask_pattern: list[float] | None = None,
    bias_field_smoothing_kernel: float | None = None,
    registration_file: InputPathType | None = None,
    regmat_file: InputPathType | None = None,
    init_lta: InputPathType | None = None,
    reg_only: bool = False,
    ssdd_directory: str | None = None,
    save_mesh: bool = False,
    max_iters: float | None = None,
    dice_file: InputPathType | None = None,
    ignore_unknown: bool = False,
    smooth_wm_cortex: float | None = None,
    profile_file: InputPathType | None = None,
) -> SamsegParametersTagged:
    """
    Build parameters.
    
    Args:
        input_files: Input image files, must be in registration with each\
            other.
        output_directory: Output directory where results will be saved.
        t1w_files: T1-weighted input file, causes input to be conformed unless\
            --hires is used.
        t2w_files: T2-weighted input file.
        flair_files: FLAIR-weighted input file.
        other_modality_files: Specific mode input files, each associated with a\
            custom modality name.
        options_file: JSON file for specifying advanced options.
        dissection_photo_mode: Mode for processing 3D reconstructed dissection\
            photos, specifying left/right/both.
        save_history: Turns on saving of processing history.
        subject: Subject identifier, sets output directory to\
            subject/mri/samseg. The first input must be the conformed T1 weighted\
            input.
        save_posteriors: Save posterior probabilities.
        save_probabilities: Save posterior, prior, and likelihood as 3-frame\
            volume for each tissue type.
        no_save_warp: Do not save m3z-style warp.
        mrf: Perform Markov Random Field processing.
        no_mrf: Do not perform Markov Random Field processing.
        threads: Set the number of CPUs to use.
        atlas_directory: Path to the SAMSEG atlas directory.
        gmm_file: Gaussian Mixture Model file.
        no_block_coordinate_descent: Do not use block coordinate descent.
        logdomain_costandgradient_calculator: Use log-domain cost and gradient\
            calculator.
        no_logdomain_costandgradient_calculator: Do not use log-domain cost and\
            gradient calculator.
        recon: Run recon-all.
        fill: Use samseg to create filled.mgz instead of recon-all.
        normalization2: Use samseg to create brain.mgz instead of recon-all\
            (with --recon).
        use_t2w: Use the T2-weighted input when running recon-all.
        use_flair: Use the FLAIR-weighted input when running recon-all.
        hires: Use -hires when running recon-all.
        subjects_directory: Path to the SUBJECTS_DIR.
        pallidum_separate: Move pallidum outside of global white matter class,\
            used for analyzing T2 or FLAIR.
        stiffness: Set mesh stiffness.
        lesion: Turn on lesion segmentation.
        lesion_mask_pattern: Pattern needed when using T2 for lesion mask,\
            e.g., 0 1.
        bias_field_smoothing_kernel: Width of bias field smoothness.
        registration_file: Registration file (LTA or MAT) as output by samseg.
        regmat_file: Same as --reg.
        init_lta: Initial registration LTA file.
        reg_only: Only perform registration.
        ssdd_directory: Path to SAMSEG_Data_DIR where the atlas is located.
        save_mesh: Save the mesh, useful for longitudinal analysis.
        max_iters: Maximum number of iterations.
        dice_file: DICE coefficient file for segmentation.
        ignore_unknown: Ignore unknown flags.
        smooth_wm_cortex: Smooth white matter and cortex priors using specified\
            sigma value.
        profile_file: Run using the cProfile Python profiler, with the\
            specified profile file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/samseg",
        "input_files": input_files,
        "output_directory": output_directory,
        "save_history": save_history,
        "save_posteriors": save_posteriors,
        "save_probabilities": save_probabilities,
        "no_save_warp": no_save_warp,
        "mrf": mrf,
        "no_mrf": no_mrf,
        "no_block_coordinate_descent": no_block_coordinate_descent,
        "logdomain_costandgradient_calculator": logdomain_costandgradient_calculator,
        "no_logdomain_costandgradient_calculator": no_logdomain_costandgradient_calculator,
        "recon": recon,
        "fill": fill,
        "normalization2": normalization2,
        "use_t2w": use_t2w,
        "use_flair": use_flair,
        "hires": hires,
        "pallidum_separate": pallidum_separate,
        "lesion": lesion,
        "reg_only": reg_only,
        "save_mesh": save_mesh,
        "ignore_unknown": ignore_unknown,
    }
    if t1w_files is not None:
        params["t1w_files"] = t1w_files
    if t2w_files is not None:
        params["t2w_files"] = t2w_files
    if flair_files is not None:
        params["flair_files"] = flair_files
    if other_modality_files is not None:
        params["other_modality_files"] = other_modality_files
    if options_file is not None:
        params["options_file"] = options_file
    if dissection_photo_mode is not None:
        params["dissection_photo_mode"] = dissection_photo_mode
    if subject is not None:
        params["subject"] = subject
    if threads is not None:
        params["threads"] = threads
    if atlas_directory is not None:
        params["atlas_directory"] = atlas_directory
    if gmm_file is not None:
        params["gmm_file"] = gmm_file
    if subjects_directory is not None:
        params["subjects_directory"] = subjects_directory
    if stiffness is not None:
        params["stiffness"] = stiffness
    if lesion_mask_pattern is not None:
        params["lesion_mask_pattern"] = lesion_mask_pattern
    if bias_field_smoothing_kernel is not None:
        params["bias_field_smoothing_kernel"] = bias_field_smoothing_kernel
    if registration_file is not None:
        params["registration_file"] = registration_file
    if regmat_file is not None:
        params["regmat_file"] = regmat_file
    if init_lta is not None:
        params["init_lta"] = init_lta
    if ssdd_directory is not None:
        params["ssdd_directory"] = ssdd_directory
    if max_iters is not None:
        params["max_iters"] = max_iters
    if dice_file is not None:
        params["dice_file"] = dice_file
    if smooth_wm_cortex is not None:
        params["smooth_wm_cortex"] = smooth_wm_cortex
    if profile_file is not None:
        params["profile_file"] = profile_file
    return params


def samseg_cargs(
    params: SamsegParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("samseg")
    cargs.extend([
        "--i",
        *[execution.input_file(f) for f in params.get("input_files", None)]
    ])
    if params.get("t1w_files", None) is not None:
        cargs.extend([
            "--t1w",
            *[execution.input_file(f) for f in params.get("t1w_files", None)]
        ])
    if params.get("t2w_files", None) is not None:
        cargs.extend([
            "--t2w",
            *[execution.input_file(f) for f in params.get("t2w_files", None)]
        ])
    if params.get("flair_files", None) is not None:
        cargs.extend([
            "--flair",
            *[execution.input_file(f) for f in params.get("flair_files", None)]
        ])
    if params.get("other_modality_files", None) is not None:
        cargs.extend([
            "--mode",
            *[execution.input_file(f) for f in params.get("other_modality_files", None)]
        ])
    cargs.extend([
        "--o",
        params.get("output_directory", None)
    ])
    if params.get("options_file", None) is not None:
        cargs.extend([
            "--options",
            execution.input_file(params.get("options_file", None))
        ])
    if params.get("dissection_photo_mode", None) is not None:
        cargs.extend([
            "--dissection-photo",
            params.get("dissection_photo_mode", None)
        ])
    if params.get("save_history", False):
        cargs.append("--history")
    if params.get("subject", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject", None)
        ])
    if params.get("save_posteriors", False):
        cargs.append("--save-posteriors")
    if params.get("save_probabilities", False):
        cargs.append("--save-probabilities")
    if params.get("no_save_warp", False):
        cargs.append("--no-save-warp")
    if params.get("mrf", False):
        cargs.append("--mrf")
    if params.get("no_mrf", False):
        cargs.append("--no-mrf")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("atlas_directory", None) is not None:
        cargs.extend([
            "--atlas",
            params.get("atlas_directory", None)
        ])
    if params.get("gmm_file", None) is not None:
        cargs.extend([
            "--gmm",
            execution.input_file(params.get("gmm_file", None))
        ])
    if params.get("no_block_coordinate_descent", False):
        cargs.append("--no-block-coordinate-descent")
    if params.get("logdomain_costandgradient_calculator", False):
        cargs.append("--logdomain-costandgradient-calculator")
    if params.get("no_logdomain_costandgradient_calculator", False):
        cargs.append("--no-logdomain-costandgradient-calculator")
    if params.get("recon", False):
        cargs.append("--recon")
    if params.get("fill", False):
        cargs.append("--fill")
    if params.get("normalization2", False):
        cargs.append("--normalization2")
    if params.get("use_t2w", False):
        cargs.append("--use-t2w")
    if params.get("use_flair", False):
        cargs.append("--use-flair")
    if params.get("hires", False):
        cargs.append("--hires")
    if params.get("subjects_directory", None) is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_directory", None)
        ])
    if params.get("pallidum_separate", False):
        cargs.append("--pallidum-separate")
    if params.get("stiffness", None) is not None:
        cargs.extend([
            "--stiffness",
            str(params.get("stiffness", None))
        ])
    if params.get("lesion", False):
        cargs.append("--lesion")
    if params.get("lesion_mask_pattern", None) is not None:
        cargs.extend([
            "--lesion-mask-pattern",
            *map(str, params.get("lesion_mask_pattern", None))
        ])
    if params.get("bias_field_smoothing_kernel", None) is not None:
        cargs.extend([
            "--bias-field-smoothing-kernel",
            str(params.get("bias_field_smoothing_kernel", None))
        ])
    if params.get("registration_file", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("registration_file", None))
        ])
    if params.get("regmat_file", None) is not None:
        cargs.extend([
            "--regmat",
            execution.input_file(params.get("regmat_file", None))
        ])
    if params.get("init_lta", None) is not None:
        cargs.extend([
            "--initlta",
            execution.input_file(params.get("init_lta", None))
        ])
    if params.get("reg_only", False):
        cargs.append("--reg-only")
    if params.get("ssdd_directory", None) is not None:
        cargs.extend([
            "--ssdd",
            params.get("ssdd_directory", None)
        ])
    if params.get("save_mesh", False):
        cargs.append("--save-mesh")
    if params.get("max_iters", None) is not None:
        cargs.extend([
            "--max-iters",
            str(params.get("max_iters", None))
        ])
    if params.get("dice_file", None) is not None:
        cargs.extend([
            "--dice",
            execution.input_file(params.get("dice_file", None))
        ])
    if params.get("ignore_unknown", False):
        cargs.append("--ignore-unknown")
    if params.get("smooth_wm_cortex", None) is not None:
        cargs.extend([
            "--smooth-wm-cortex",
            str(params.get("smooth_wm_cortex", None))
        ])
    if params.get("profile_file", None) is not None:
        cargs.extend([
            "--profile",
            execution.input_file(params.get("profile_file", None))
        ])
    return cargs


def samseg_outputs(
    params: SamsegParameters,
    execution: Execution,
) -> SamsegOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SamsegOutputs(
        root=execution.output_file("."),
        segmentation_output=execution.output_file(params.get("output_directory", None) + "/seg.mgz"),
        posteriors_output=execution.output_file(params.get("output_directory", None) + "/posteriors.mgz"),
        probabilities_output=execution.output_file(params.get("output_directory", None) + "/probabilities.mgz"),
        mesh_output=execution.output_file(params.get("output_directory", None) + "/mesh.stl"),
    )
    return ret


def samseg_execute(
    params: SamsegParameters,
    runner: Runner | None = None,
) -> SamsegOutputs:
    """
    samseg
    
    SAMSEG (Statistical and Algorithmic Methods for Segmentation) is a tool for
    segmenting neuroimaging data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SamsegOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SAMSEG_METADATA)
    params = execution.params(params)
    cargs = samseg_cargs(params, execution)
    ret = samseg_outputs(params, execution)
    execution.run(cargs)
    return ret


def samseg(
    input_files: list[InputPathType],
    output_directory: str,
    t1w_files: list[InputPathType] | None = None,
    t2w_files: list[InputPathType] | None = None,
    flair_files: list[InputPathType] | None = None,
    other_modality_files: list[InputPathType] | None = None,
    options_file: InputPathType | None = None,
    dissection_photo_mode: str | None = None,
    save_history: bool = False,
    subject: str | None = None,
    save_posteriors: bool = False,
    save_probabilities: bool = False,
    no_save_warp: bool = False,
    mrf: bool = False,
    no_mrf: bool = False,
    threads: float | None = None,
    atlas_directory: str | None = None,
    gmm_file: InputPathType | None = None,
    no_block_coordinate_descent: bool = False,
    logdomain_costandgradient_calculator: bool = False,
    no_logdomain_costandgradient_calculator: bool = False,
    recon: bool = False,
    fill: bool = False,
    normalization2: bool = False,
    use_t2w: bool = False,
    use_flair: bool = False,
    hires: bool = False,
    subjects_directory: str | None = None,
    pallidum_separate: bool = False,
    stiffness: float | None = None,
    lesion: bool = False,
    lesion_mask_pattern: list[float] | None = None,
    bias_field_smoothing_kernel: float | None = None,
    registration_file: InputPathType | None = None,
    regmat_file: InputPathType | None = None,
    init_lta: InputPathType | None = None,
    reg_only: bool = False,
    ssdd_directory: str | None = None,
    save_mesh: bool = False,
    max_iters: float | None = None,
    dice_file: InputPathType | None = None,
    ignore_unknown: bool = False,
    smooth_wm_cortex: float | None = None,
    profile_file: InputPathType | None = None,
    runner: Runner | None = None,
) -> SamsegOutputs:
    """
    samseg
    
    SAMSEG (Statistical and Algorithmic Methods for Segmentation) is a tool for
    segmenting neuroimaging data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_files: Input image files, must be in registration with each\
            other.
        output_directory: Output directory where results will be saved.
        t1w_files: T1-weighted input file, causes input to be conformed unless\
            --hires is used.
        t2w_files: T2-weighted input file.
        flair_files: FLAIR-weighted input file.
        other_modality_files: Specific mode input files, each associated with a\
            custom modality name.
        options_file: JSON file for specifying advanced options.
        dissection_photo_mode: Mode for processing 3D reconstructed dissection\
            photos, specifying left/right/both.
        save_history: Turns on saving of processing history.
        subject: Subject identifier, sets output directory to\
            subject/mri/samseg. The first input must be the conformed T1 weighted\
            input.
        save_posteriors: Save posterior probabilities.
        save_probabilities: Save posterior, prior, and likelihood as 3-frame\
            volume for each tissue type.
        no_save_warp: Do not save m3z-style warp.
        mrf: Perform Markov Random Field processing.
        no_mrf: Do not perform Markov Random Field processing.
        threads: Set the number of CPUs to use.
        atlas_directory: Path to the SAMSEG atlas directory.
        gmm_file: Gaussian Mixture Model file.
        no_block_coordinate_descent: Do not use block coordinate descent.
        logdomain_costandgradient_calculator: Use log-domain cost and gradient\
            calculator.
        no_logdomain_costandgradient_calculator: Do not use log-domain cost and\
            gradient calculator.
        recon: Run recon-all.
        fill: Use samseg to create filled.mgz instead of recon-all.
        normalization2: Use samseg to create brain.mgz instead of recon-all\
            (with --recon).
        use_t2w: Use the T2-weighted input when running recon-all.
        use_flair: Use the FLAIR-weighted input when running recon-all.
        hires: Use -hires when running recon-all.
        subjects_directory: Path to the SUBJECTS_DIR.
        pallidum_separate: Move pallidum outside of global white matter class,\
            used for analyzing T2 or FLAIR.
        stiffness: Set mesh stiffness.
        lesion: Turn on lesion segmentation.
        lesion_mask_pattern: Pattern needed when using T2 for lesion mask,\
            e.g., 0 1.
        bias_field_smoothing_kernel: Width of bias field smoothness.
        registration_file: Registration file (LTA or MAT) as output by samseg.
        regmat_file: Same as --reg.
        init_lta: Initial registration LTA file.
        reg_only: Only perform registration.
        ssdd_directory: Path to SAMSEG_Data_DIR where the atlas is located.
        save_mesh: Save the mesh, useful for longitudinal analysis.
        max_iters: Maximum number of iterations.
        dice_file: DICE coefficient file for segmentation.
        ignore_unknown: Ignore unknown flags.
        smooth_wm_cortex: Smooth white matter and cortex priors using specified\
            sigma value.
        profile_file: Run using the cProfile Python profiler, with the\
            specified profile file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SamsegOutputs`).
    """
    params = samseg_params(
        input_files=input_files,
        t1w_files=t1w_files,
        t2w_files=t2w_files,
        flair_files=flair_files,
        other_modality_files=other_modality_files,
        output_directory=output_directory,
        options_file=options_file,
        dissection_photo_mode=dissection_photo_mode,
        save_history=save_history,
        subject=subject,
        save_posteriors=save_posteriors,
        save_probabilities=save_probabilities,
        no_save_warp=no_save_warp,
        mrf=mrf,
        no_mrf=no_mrf,
        threads=threads,
        atlas_directory=atlas_directory,
        gmm_file=gmm_file,
        no_block_coordinate_descent=no_block_coordinate_descent,
        logdomain_costandgradient_calculator=logdomain_costandgradient_calculator,
        no_logdomain_costandgradient_calculator=no_logdomain_costandgradient_calculator,
        recon=recon,
        fill=fill,
        normalization2=normalization2,
        use_t2w=use_t2w,
        use_flair=use_flair,
        hires=hires,
        subjects_directory=subjects_directory,
        pallidum_separate=pallidum_separate,
        stiffness=stiffness,
        lesion=lesion,
        lesion_mask_pattern=lesion_mask_pattern,
        bias_field_smoothing_kernel=bias_field_smoothing_kernel,
        registration_file=registration_file,
        regmat_file=regmat_file,
        init_lta=init_lta,
        reg_only=reg_only,
        ssdd_directory=ssdd_directory,
        save_mesh=save_mesh,
        max_iters=max_iters,
        dice_file=dice_file,
        ignore_unknown=ignore_unknown,
        smooth_wm_cortex=smooth_wm_cortex,
        profile_file=profile_file,
    )
    return samseg_execute(params, runner)


__all__ = [
    "SAMSEG_METADATA",
    "SamsegOutputs",
    "samseg",
    "samseg_execute",
    "samseg_params",
]
