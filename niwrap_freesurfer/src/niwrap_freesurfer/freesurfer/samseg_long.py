# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SAMSEG_LONG_METADATA = Metadata(
    id="d33d740bdb8772937d1e2f0bc11ecb17fca74eda.boutiques",
    name="samseg-long",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SamsegLongParameters = typing.TypedDict('SamsegLongParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/samseg-long"]],
    "output_dir": str,
    "input_files": list[InputPathType],
    "align_mc": bool,
    "align_no_mc": bool,
    "threads": typing.NotRequired[float | None],
    "save_posteriors": bool,
    "force_update": bool,
})
SamsegLongParametersTagged = typing.TypedDict('SamsegLongParametersTagged', {
    "@type": typing.Literal["freesurfer/samseg-long"],
    "output_dir": str,
    "input_files": list[InputPathType],
    "align_mc": bool,
    "align_no_mc": bool,
    "threads": typing.NotRequired[float | None],
    "save_posteriors": bool,
    "force_update": bool,
})


class SamsegLongOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SamsegLongParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    tp001_output: OutputPathType
    """Samseg output folder for the first time point."""
    tp002_output: OutputPathType
    """Samseg output folder for the second time point."""
    base_output: OutputPathType
    """Base folder created by the samseg-long process."""


def samseg_long_params(
    output_dir: str,
    input_files: list[InputPathType],
    align_mc: bool = False,
    align_no_mc: bool = False,
    threads: float | None = None,
    save_posteriors: bool = False,
    force_update: bool = False,
) -> SamsegLongParametersTagged:
    """
    Build parameters.
    
    Args:
        output_dir: Output directory.
        input_files: Input image files. All inputs must be a single modality.
        align_mc: Align all inputs using robust register.
        align_no_mc: Do not align inputs using robust register.
        threads: Number of threads to use.
        save_posteriors: Save posterior probabilities.
        force_update: Force update of outputs.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/samseg-long",
        "output_dir": output_dir,
        "input_files": input_files,
        "align_mc": align_mc,
        "align_no_mc": align_no_mc,
        "save_posteriors": save_posteriors,
        "force_update": force_update,
    }
    if threads is not None:
        params["threads"] = threads
    return params


def samseg_long_cargs(
    params: SamsegLongParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("samseg-long")
    cargs.extend([
        "--o",
        params.get("output_dir", None)
    ])
    cargs.extend([
        "--i",
        *[execution.input_file(f) for f in params.get("input_files", None)]
    ])
    if params.get("align_mc", False):
        cargs.append("--mc")
    if params.get("align_no_mc", False):
        cargs.append("--no-mc")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("save_posteriors", False):
        cargs.append("--save-posteriors")
    if params.get("force_update", False):
        cargs.append("--force-update")
    return cargs


def samseg_long_outputs(
    params: SamsegLongParameters,
    execution: Execution,
) -> SamsegLongOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SamsegLongOutputs(
        root=execution.output_file("."),
        tp001_output=execution.output_file(params.get("output_dir", None) + "/tp001"),
        tp002_output=execution.output_file(params.get("output_dir", None) + "/tp002"),
        base_output=execution.output_file(params.get("output_dir", None) + "/base"),
    )
    return ret


def samseg_long_execute(
    params: SamsegLongParameters,
    runner: Runner | None = None,
) -> SamsegLongOutputs:
    """
    samseg-long
    
    Longitudinal analysis tool using SAMSEG in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SamsegLongOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SAMSEG_LONG_METADATA)
    params = execution.params(params)
    cargs = samseg_long_cargs(params, execution)
    ret = samseg_long_outputs(params, execution)
    execution.run(cargs)
    return ret


def samseg_long(
    output_dir: str,
    input_files: list[InputPathType],
    align_mc: bool = False,
    align_no_mc: bool = False,
    threads: float | None = None,
    save_posteriors: bool = False,
    force_update: bool = False,
    runner: Runner | None = None,
) -> SamsegLongOutputs:
    """
    samseg-long
    
    Longitudinal analysis tool using SAMSEG in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_dir: Output directory.
        input_files: Input image files. All inputs must be a single modality.
        align_mc: Align all inputs using robust register.
        align_no_mc: Do not align inputs using robust register.
        threads: Number of threads to use.
        save_posteriors: Save posterior probabilities.
        force_update: Force update of outputs.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SamsegLongOutputs`).
    """
    params = samseg_long_params(
        output_dir=output_dir,
        input_files=input_files,
        align_mc=align_mc,
        align_no_mc=align_no_mc,
        threads=threads,
        save_posteriors=save_posteriors,
        force_update=force_update,
    )
    return samseg_long_execute(params, runner)


__all__ = [
    "SAMSEG_LONG_METADATA",
    "SamsegLongOutputs",
    "samseg_long",
    "samseg_long_execute",
    "samseg_long_params",
]
