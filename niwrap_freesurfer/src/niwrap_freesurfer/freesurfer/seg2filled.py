# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEG2FILLED_METADATA = Metadata(
    id="3d9ced8d4db53346a6df52570992a83793860107.boutiques",
    name="seg2filled",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Seg2filledParameters = typing.TypedDict('Seg2filledParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/seg2filled"]],
    "seg_file": InputPathType,
    "norm_file": InputPathType,
    "output_file": str,
    "ndil": typing.NotRequired[int | None],
    "cavity_flag": bool,
    "surf_name": typing.NotRequired[str | None],
    "surf_dir": typing.NotRequired[str | None],
})
Seg2filledParametersTagged = typing.TypedDict('Seg2filledParametersTagged', {
    "@type": typing.Literal["freesurfer/seg2filled"],
    "seg_file": InputPathType,
    "norm_file": InputPathType,
    "output_file": str,
    "ndil": typing.NotRequired[int | None],
    "cavity_flag": bool,
    "surf_name": typing.NotRequired[str | None],
    "surf_dir": typing.NotRequired[str | None],
})


class Seg2filledOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Seg2filledParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_filled_mgz: OutputPathType
    """The output filled MGZ file."""


def seg2filled_params(
    seg_file: InputPathType,
    norm_file: InputPathType,
    output_file: str,
    ndil: int | None = None,
    cavity_flag: bool = False,
    surf_name: str | None = None,
    surf_dir: str | None = None,
) -> Seg2filledParametersTagged:
    """
    Build parameters.
    
    Args:
        seg_file: Input aseg-style segmentation file (e.g., seg.mgz).
        norm_file: Normalization file (e.g., norm.mgz).
        output_file: Filled output file (e.g., filled.mgz).
        ndil: Number of iterations for dilation used to speed cavity detection.
        cavity_flag: Simulate a cavity to test the filling operation.
        surf_name: Name for the surface output (creates ?h.surfname).
        surf_dir: Directory to put the surface (default is same as filled).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/seg2filled",
        "seg_file": seg_file,
        "norm_file": norm_file,
        "output_file": output_file,
        "cavity_flag": cavity_flag,
    }
    if ndil is not None:
        params["ndil"] = ndil
    if surf_name is not None:
        params["surf_name"] = surf_name
    if surf_dir is not None:
        params["surf_dir"] = surf_dir
    return params


def seg2filled_cargs(
    params: Seg2filledParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("seg2filled")
    cargs.extend([
        "-seg",
        execution.input_file(params.get("seg_file", None))
    ])
    cargs.extend([
        "-norm",
        execution.input_file(params.get("norm_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    if params.get("ndil", None) is not None:
        cargs.extend([
            "--ndil",
            str(params.get("ndil", None))
        ])
    if params.get("cavity_flag", False):
        cargs.append("--cavity")
    if params.get("surf_name", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surf_name", None)
        ])
    if params.get("surf_dir", None) is not None:
        cargs.extend([
            "--surfdir",
            params.get("surf_dir", None)
        ])
    return cargs


def seg2filled_outputs(
    params: Seg2filledParameters,
    execution: Execution,
) -> Seg2filledOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Seg2filledOutputs(
        root=execution.output_file("."),
        out_filled_mgz=execution.output_file(params.get("output_file", None)),
    )
    return ret


def seg2filled_execute(
    params: Seg2filledParameters,
    runner: Runner | None = None,
) -> Seg2filledOutputs:
    """
    seg2filled
    
    Creates a filled.mgz from an aseg-style segmentation using SAMSEG
    segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Seg2filledOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEG2FILLED_METADATA)
    params = execution.params(params)
    cargs = seg2filled_cargs(params, execution)
    ret = seg2filled_outputs(params, execution)
    execution.run(cargs)
    return ret


def seg2filled(
    seg_file: InputPathType,
    norm_file: InputPathType,
    output_file: str,
    ndil: int | None = None,
    cavity_flag: bool = False,
    surf_name: str | None = None,
    surf_dir: str | None = None,
    runner: Runner | None = None,
) -> Seg2filledOutputs:
    """
    seg2filled
    
    Creates a filled.mgz from an aseg-style segmentation using SAMSEG
    segmentation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        seg_file: Input aseg-style segmentation file (e.g., seg.mgz).
        norm_file: Normalization file (e.g., norm.mgz).
        output_file: Filled output file (e.g., filled.mgz).
        ndil: Number of iterations for dilation used to speed cavity detection.
        cavity_flag: Simulate a cavity to test the filling operation.
        surf_name: Name for the surface output (creates ?h.surfname).
        surf_dir: Directory to put the surface (default is same as filled).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Seg2filledOutputs`).
    """
    params = seg2filled_params(
        seg_file=seg_file,
        norm_file=norm_file,
        output_file=output_file,
        ndil=ndil,
        cavity_flag=cavity_flag,
        surf_name=surf_name,
        surf_dir=surf_dir,
    )
    return seg2filled_execute(params, runner)


__all__ = [
    "SEG2FILLED_METADATA",
    "Seg2filledOutputs",
    "seg2filled",
    "seg2filled_execute",
    "seg2filled_params",
]
