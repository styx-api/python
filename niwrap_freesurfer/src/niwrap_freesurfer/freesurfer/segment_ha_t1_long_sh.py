# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_HA_T1_LONG_SH_METADATA = Metadata(
    id="a1f9c93161c055366f2333e5725968d68fd10303.boutiques",
    name="segmentHA_T1_long.sh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentHaT1LongShParameters = typing.TypedDict('SegmentHaT1LongShParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/segmentHA_T1_long.sh"]],
    "subject_dir": str,
    "subject_id": str,
})
SegmentHaT1LongShParametersTagged = typing.TypedDict('SegmentHaT1LongShParametersTagged', {
    "@type": typing.Literal["freesurfer/segmentHA_T1_long.sh"],
    "subject_dir": str,
    "subject_id": str,
})


class SegmentHaT1LongShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SegmentHaT1LongShParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dir: OutputPathType
    """Output directory containing segmentation results"""


def segment_ha_t1_long_sh_params(
    subject_dir: str,
    subject_id: str,
) -> SegmentHaT1LongShParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_dir: Directory containing subject data.
        subject_id: Identifier for the subject within the subject directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/segmentHA_T1_long.sh",
        "subject_dir": subject_dir,
        "subject_id": subject_id,
    }
    return params


def segment_ha_t1_long_sh_cargs(
    params: SegmentHaT1LongShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segmentHA_T1_long.sh")
    cargs.append(params.get("subject_dir", None))
    cargs.append(params.get("subject_id", None))
    return cargs


def segment_ha_t1_long_sh_outputs(
    params: SegmentHaT1LongShParameters,
    execution: Execution,
) -> SegmentHaT1LongShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentHaT1LongShOutputs(
        root=execution.output_file("."),
        output_dir=execution.output_file(params.get("subject_dir", None) + "/" + params.get("subject_id", None) + "_long_segment/output"),
    )
    return ret


def segment_ha_t1_long_sh_execute(
    params: SegmentHaT1LongShParameters,
    runner: Runner | None = None,
) -> SegmentHaT1LongShOutputs:
    """
    segmentHA_T1_long.sh
    
    A script for longitudinal segmentation of the hippocampal/amygdala regions.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentHaT1LongShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_HA_T1_LONG_SH_METADATA)
    params = execution.params(params)
    cargs = segment_ha_t1_long_sh_cargs(params, execution)
    ret = segment_ha_t1_long_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_ha_t1_long_sh(
    subject_dir: str,
    subject_id: str,
    runner: Runner | None = None,
) -> SegmentHaT1LongShOutputs:
    """
    segmentHA_T1_long.sh
    
    A script for longitudinal segmentation of the hippocampal/amygdala regions.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_dir: Directory containing subject data.
        subject_id: Identifier for the subject within the subject directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentHaT1LongShOutputs`).
    """
    params = segment_ha_t1_long_sh_params(
        subject_dir=subject_dir,
        subject_id=subject_id,
    )
    return segment_ha_t1_long_sh_execute(params, runner)


__all__ = [
    "SEGMENT_HA_T1_LONG_SH_METADATA",
    "SegmentHaT1LongShOutputs",
    "segment_ha_t1_long_sh",
    "segment_ha_t1_long_sh_execute",
    "segment_ha_t1_long_sh_params",
]
