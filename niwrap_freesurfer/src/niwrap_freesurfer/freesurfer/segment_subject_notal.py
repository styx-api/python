# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_SUBJECT_NOTAL_METADATA = Metadata(
    id="2cc454d43b3f94b2bc424f0960f6cbaa1eee9ce0.boutiques",
    name="segment_subject_notal",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentSubjectNotalParameters = typing.TypedDict('SegmentSubjectNotalParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/segment_subject_notal"]],
    "subject_path": str,
})
SegmentSubjectNotalParametersTagged = typing.TypedDict('SegmentSubjectNotalParametersTagged', {
    "@type": typing.Literal["freesurfer/segment_subject_notal"],
    "subject_path": str,
})


class SegmentSubjectNotalOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SegmentSubjectNotalParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def segment_subject_notal_params(
    subject_path: str,
) -> SegmentSubjectNotalParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_path: Path to the subject's directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/segment_subject_notal",
        "subject_path": subject_path,
    }
    return params


def segment_subject_notal_cargs(
    params: SegmentSubjectNotalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segment_subject_notal")
    cargs.append(params.get("subject_path", None))
    return cargs


def segment_subject_notal_outputs(
    params: SegmentSubjectNotalParameters,
    execution: Execution,
) -> SegmentSubjectNotalOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentSubjectNotalOutputs(
        root=execution.output_file("."),
    )
    return ret


def segment_subject_notal_execute(
    params: SegmentSubjectNotalParameters,
    runner: Runner | None = None,
) -> SegmentSubjectNotalOutputs:
    """
    segment_subject_notal
    
    A script to segment subjects (notal).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectNotalOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_SUBJECT_NOTAL_METADATA)
    params = execution.params(params)
    cargs = segment_subject_notal_cargs(params, execution)
    ret = segment_subject_notal_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_subject_notal(
    subject_path: str,
    runner: Runner | None = None,
) -> SegmentSubjectNotalOutputs:
    """
    segment_subject_notal
    
    A script to segment subjects (notal).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_path: Path to the subject's directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectNotalOutputs`).
    """
    params = segment_subject_notal_params(
        subject_path=subject_path,
    )
    return segment_subject_notal_execute(params, runner)


__all__ = [
    "SEGMENT_SUBJECT_NOTAL_METADATA",
    "SegmentSubjectNotalOutputs",
    "segment_subject_notal",
    "segment_subject_notal_execute",
    "segment_subject_notal_params",
]
