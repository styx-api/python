# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA = Metadata(
    id="789d1c27dc21ca8762405d55ea7fbad93c1f0204.boutiques",
    name="segmentSubjectT1_autoEstimateAlveusML",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentSubjectT1AutoEstimateAlveusMlParameters = typing.TypedDict('SegmentSubjectT1AutoEstimateAlveusMlParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/segmentSubjectT1_autoEstimateAlveusML"]],
    "t1_file": InputPathType,
    "output_folder": str,
})
SegmentSubjectT1AutoEstimateAlveusMlParametersTagged = typing.TypedDict('SegmentSubjectT1AutoEstimateAlveusMlParametersTagged', {
    "@type": typing.Literal["freesurfer/segmentSubjectT1_autoEstimateAlveusML"],
    "t1_file": InputPathType,
    "output_folder": str,
})


class SegmentSubjectT1AutoEstimateAlveusMlOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SegmentSubjectT1AutoEstimateAlveusMlParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segmentation_output: OutputPathType
    """The file containing segmented MRI data."""


def segment_subject_t1_auto_estimate_alveus_ml_params(
    t1_file: InputPathType,
    output_folder: str,
) -> SegmentSubjectT1AutoEstimateAlveusMlParametersTagged:
    """
    Build parameters.
    
    Args:
        t1_file: Input T1-weighted MRI file to be segmented.
        output_folder: Path to the folder where the outputs will be saved.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/segmentSubjectT1_autoEstimateAlveusML",
        "t1_file": t1_file,
        "output_folder": output_folder,
    }
    return params


def segment_subject_t1_auto_estimate_alveus_ml_cargs(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("segmentSubjectT1_autoEstimateAlveusML")
    cargs.append(execution.input_file(params.get("t1_file", None)))
    cargs.append(params.get("output_folder", None))
    return cargs


def segment_subject_t1_auto_estimate_alveus_ml_outputs(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    execution: Execution,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentSubjectT1AutoEstimateAlveusMlOutputs(
        root=execution.output_file("."),
        segmentation_output=execution.output_file(params.get("output_folder", None) + "/segmented_output.nii.gz"),
    )
    return ret


def segment_subject_t1_auto_estimate_alveus_ml_execute(
    params: SegmentSubjectT1AutoEstimateAlveusMlParameters,
    runner: Runner | None = None,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    segmentSubjectT1_autoEstimateAlveusML
    
    A tool that segments T1-weighted MRI data and automatically estimates the
    Alveus.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectT1AutoEstimateAlveusMlOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA)
    params = execution.params(params)
    cargs = segment_subject_t1_auto_estimate_alveus_ml_cargs(params, execution)
    ret = segment_subject_t1_auto_estimate_alveus_ml_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_subject_t1_auto_estimate_alveus_ml(
    t1_file: InputPathType,
    output_folder: str,
    runner: Runner | None = None,
) -> SegmentSubjectT1AutoEstimateAlveusMlOutputs:
    """
    segmentSubjectT1_autoEstimateAlveusML
    
    A tool that segments T1-weighted MRI data and automatically estimates the
    Alveus.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        t1_file: Input T1-weighted MRI file to be segmented.
        output_folder: Path to the folder where the outputs will be saved.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectT1AutoEstimateAlveusMlOutputs`).
    """
    params = segment_subject_t1_auto_estimate_alveus_ml_params(
        t1_file=t1_file,
        output_folder=output_folder,
    )
    return segment_subject_t1_auto_estimate_alveus_ml_execute(params, runner)


__all__ = [
    "SEGMENT_SUBJECT_T1_AUTO_ESTIMATE_ALVEUS_ML_METADATA",
    "SegmentSubjectT1AutoEstimateAlveusMlOutputs",
    "segment_subject_t1_auto_estimate_alveus_ml",
    "segment_subject_t1_auto_estimate_alveus_ml_execute",
    "segment_subject_t1_auto_estimate_alveus_ml_params",
]
