# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SEGMENT_THALAMIC_NUCLEI_METADATA = Metadata(
    id="c58974ded86d3485652bb5e12314988d875a05f5.boutiques",
    name="SegmentThalamicNuclei",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SegmentThalamicNucleiParameters = typing.TypedDict('SegmentThalamicNucleiParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/SegmentThalamicNuclei"]],
    "t1_image": InputPathType,
    "output_dir": str,
})
SegmentThalamicNucleiParametersTagged = typing.TypedDict('SegmentThalamicNucleiParametersTagged', {
    "@type": typing.Literal["freesurfer/SegmentThalamicNuclei"],
    "t1_image": InputPathType,
    "output_dir": str,
})


class SegmentThalamicNucleiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SegmentThalamicNucleiParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    seg_output: OutputPathType
    """The output segmentation file of thalamic nuclei."""


def segment_thalamic_nuclei_params(
    t1_image: InputPathType,
    output_dir: str,
) -> SegmentThalamicNucleiParametersTagged:
    """
    Build parameters.
    
    Args:
        t1_image: The T1-weighted image to process.
        output_dir: Directory to store segmentation results.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/SegmentThalamicNuclei",
        "t1_image": t1_image,
        "output_dir": output_dir,
    }
    return params


def segment_thalamic_nuclei_cargs(
    params: SegmentThalamicNucleiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("SegmentThalamicNuclei")
    cargs.append(execution.input_file(params.get("t1_image", None)))
    cargs.append(params.get("output_dir", None))
    return cargs


def segment_thalamic_nuclei_outputs(
    params: SegmentThalamicNucleiParameters,
    execution: Execution,
) -> SegmentThalamicNucleiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SegmentThalamicNucleiOutputs(
        root=execution.output_file("."),
        seg_output=execution.output_file(params.get("output_dir", None) + "/thalamic_nuclei_seg.nii.gz"),
    )
    return ret


def segment_thalamic_nuclei_execute(
    params: SegmentThalamicNucleiParameters,
    runner: Runner | None = None,
) -> SegmentThalamicNucleiOutputs:
    """
    SegmentThalamicNuclei
    
    A tool for segmenting thalamic nuclei using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentThalamicNucleiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_THALAMIC_NUCLEI_METADATA)
    params = execution.params(params)
    cargs = segment_thalamic_nuclei_cargs(params, execution)
    ret = segment_thalamic_nuclei_outputs(params, execution)
    execution.run(cargs)
    return ret


def segment_thalamic_nuclei(
    t1_image: InputPathType,
    output_dir: str,
    runner: Runner | None = None,
) -> SegmentThalamicNucleiOutputs:
    """
    SegmentThalamicNuclei
    
    A tool for segmenting thalamic nuclei using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        t1_image: The T1-weighted image to process.
        output_dir: Directory to store segmentation results.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentThalamicNucleiOutputs`).
    """
    params = segment_thalamic_nuclei_params(
        t1_image=t1_image,
        output_dir=output_dir,
    )
    return segment_thalamic_nuclei_execute(params, runner)


__all__ = [
    "SEGMENT_THALAMIC_NUCLEI_METADATA",
    "SegmentThalamicNucleiOutputs",
    "segment_thalamic_nuclei",
    "segment_thalamic_nuclei_execute",
    "segment_thalamic_nuclei_params",
]
