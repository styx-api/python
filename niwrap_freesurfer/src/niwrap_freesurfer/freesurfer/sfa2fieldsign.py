# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SFA2FIELDSIGN_METADATA = Metadata(
    id="a31f34e180604d273b75695a96957bbe9c820533.boutiques",
    name="sfa2fieldsign",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Sfa2fieldsignParameters = typing.TypedDict('Sfa2fieldsignParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/sfa2fieldsign"]],
    "sfadir": str,
    "register_dat": str,
    "threshold": typing.NotRequired[float | None],
    "fwhm": typing.NotRequired[float | None],
    "proj_frac": typing.NotRequired[float | None],
    "occip": bool,
    "patch": typing.NotRequired[str | None],
    "osd": typing.NotRequired[str | None],
    "lh": bool,
    "rh": bool,
})
Sfa2fieldsignParametersTagged = typing.TypedDict('Sfa2fieldsignParametersTagged', {
    "@type": typing.Literal["freesurfer/sfa2fieldsign"],
    "sfadir": str,
    "register_dat": str,
    "threshold": typing.NotRequired[float | None],
    "fwhm": typing.NotRequired[float | None],
    "proj_frac": typing.NotRequired[float | None],
    "occip": bool,
    "patch": typing.NotRequired[str | None],
    "osd": typing.NotRequired[str | None],
    "lh": bool,
    "rh": bool,
})


class Sfa2fieldsignOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Sfa2fieldsignParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fsig_bin: OutputPathType | None
    """Intersection of polar and eccentricity thresholded fieldsigns"""
    eccen_masked: OutputPathType | None
    """Eccentricity angle (rad) volume masked by fieldsign bin"""
    polar_masked: OutputPathType | None
    """Polar angle (rad) volume masked by fieldsign bin"""
    left_eccen_masked_mgh: OutputPathType | None
    """Masked eccentricity angle sampled on the left hemisphere surface"""
    left_polar_masked_mgh: OutputPathType | None
    """Masked polar angle sampled on the left hemisphere surface"""
    left_fieldsign_masked_mgh: OutputPathType | None
    """Masked fieldsign map on left hemispehre"""
    right_eccen_masked_mgh: OutputPathType | None
    """Masked eccentricity angle sampled on the right hemisphere surface"""
    right_polar_masked_mgh: OutputPathType | None
    """Masked polar angle sampled on the right hemisphere surface"""
    right_fieldsign_masked_mgh: OutputPathType | None
    """Masked fieldsign map on the right hemisphere"""


def sfa2fieldsign_params(
    sfadir: str,
    register_dat: str,
    threshold: float | None = None,
    fwhm: float | None = None,
    proj_frac: float | None = None,
    occip: bool = False,
    patch: str | None = None,
    osd: str | None = None,
    lh: bool = False,
    rh: bool = False,
) -> Sfa2fieldsignParametersTagged:
    """
    Build parameters.
    
    Args:
        sfadir: Output directory of sfa-sess.
        register_dat: Registration file.
        threshold: Sigthresh threshold (Default: 2).
        fwhm: Full width at half maximum (FWHM) (Default: 10mm).
        proj_frac: Projection fraction (Default: 0.5).
        occip: Use rh.occip.patch.flat.
        patch: Use specific patch (?)h.patch.
        osd: Directory under SFA to put output (Default: fieldsign).
        lh: Process left hemisphere only.
        rh: Process right hemisphere only.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/sfa2fieldsign",
        "sfadir": sfadir,
        "register_dat": register_dat,
        "occip": occip,
        "lh": lh,
        "rh": rh,
    }
    if threshold is not None:
        params["threshold"] = threshold
    if fwhm is not None:
        params["fwhm"] = fwhm
    if proj_frac is not None:
        params["proj_frac"] = proj_frac
    if patch is not None:
        params["patch"] = patch
    if osd is not None:
        params["osd"] = osd
    return params


def sfa2fieldsign_cargs(
    params: Sfa2fieldsignParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("sfa2fieldsign")
    cargs.extend([
        "--sfa",
        params.get("sfadir", None)
    ])
    cargs.extend([
        "--reg",
        params.get("register_dat", None)
    ])
    if params.get("threshold", None) is not None:
        cargs.extend([
            "--thresh",
            str(params.get("threshold", None))
        ])
    if params.get("fwhm", None) is not None:
        cargs.extend([
            "--fwhm",
            str(params.get("fwhm", None))
        ])
    if params.get("proj_frac", None) is not None:
        cargs.extend([
            "--proj-frac",
            str(params.get("proj_frac", None))
        ])
    if params.get("occip", False):
        cargs.append("--occip")
    if params.get("patch", None) is not None:
        cargs.extend([
            "--patch",
            params.get("patch", None)
        ])
    if params.get("osd", None) is not None:
        cargs.extend([
            "--osd",
            params.get("osd", None)
        ])
    if params.get("lh", False):
        cargs.append("--lh")
    if params.get("rh", False):
        cargs.append("--rh")
    return cargs


def sfa2fieldsign_outputs(
    params: Sfa2fieldsignParameters,
    execution: Execution,
) -> Sfa2fieldsignOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Sfa2fieldsignOutputs(
        root=execution.output_file("."),
        fsig_bin=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/fsig.bin.nii") if (params.get("osd") is not None) else None,
        eccen_masked=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/eccen.masked.nii") if (params.get("osd") is not None) else None,
        polar_masked=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/polar.masked.nii") if (params.get("osd") is not None) else None,
        left_eccen_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/lh.eccen.masked.mgh") if (params.get("osd") is not None) else None,
        left_polar_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/lh.polar.masked.mgh") if (params.get("osd") is not None) else None,
        left_fieldsign_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/lh.fieldsign.masked.mgh") if (params.get("osd") is not None) else None,
        right_eccen_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/rh.eccen.masked.mgh") if (params.get("osd") is not None) else None,
        right_polar_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/rh.polar.masked.mgh") if (params.get("osd") is not None) else None,
        right_fieldsign_masked_mgh=execution.output_file(params.get("sfadir", None) + "/" + params.get("osd", None) + "/rh.fieldsign.masked.mgh") if (params.get("osd") is not None) else None,
    )
    return ret


def sfa2fieldsign_execute(
    params: Sfa2fieldsignParameters,
    runner: Runner | None = None,
) -> Sfa2fieldsignOutputs:
    """
    sfa2fieldsign
    
    Computes fieldsign map from sfa-sess output. Masks the angle volumes and
    samples them to the surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Sfa2fieldsignOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SFA2FIELDSIGN_METADATA)
    params = execution.params(params)
    cargs = sfa2fieldsign_cargs(params, execution)
    ret = sfa2fieldsign_outputs(params, execution)
    execution.run(cargs)
    return ret


def sfa2fieldsign(
    sfadir: str,
    register_dat: str,
    threshold: float | None = None,
    fwhm: float | None = None,
    proj_frac: float | None = None,
    occip: bool = False,
    patch: str | None = None,
    osd: str | None = None,
    lh: bool = False,
    rh: bool = False,
    runner: Runner | None = None,
) -> Sfa2fieldsignOutputs:
    """
    sfa2fieldsign
    
    Computes fieldsign map from sfa-sess output. Masks the angle volumes and
    samples them to the surface.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        sfadir: Output directory of sfa-sess.
        register_dat: Registration file.
        threshold: Sigthresh threshold (Default: 2).
        fwhm: Full width at half maximum (FWHM) (Default: 10mm).
        proj_frac: Projection fraction (Default: 0.5).
        occip: Use rh.occip.patch.flat.
        patch: Use specific patch (?)h.patch.
        osd: Directory under SFA to put output (Default: fieldsign).
        lh: Process left hemisphere only.
        rh: Process right hemisphere only.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Sfa2fieldsignOutputs`).
    """
    params = sfa2fieldsign_params(
        sfadir=sfadir,
        register_dat=register_dat,
        threshold=threshold,
        fwhm=fwhm,
        proj_frac=proj_frac,
        occip=occip,
        patch=patch,
        osd=osd,
        lh=lh,
        rh=rh,
    )
    return sfa2fieldsign_execute(params, runner)


__all__ = [
    "SFA2FIELDSIGN_METADATA",
    "Sfa2fieldsignOutputs",
    "sfa2fieldsign",
    "sfa2fieldsign_execute",
    "sfa2fieldsign_params",
]
