# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SPHERE_SUBJECT_LH_METADATA = Metadata(
    id="428035e4e89c94b9f57f1bd2c8bf7fba3885bfa2.boutiques",
    name="sphere_subject-lh",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SphereSubjectLhParameters = typing.TypedDict('SphereSubjectLhParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/sphere_subject-lh"]],
    "license_file": InputPathType,
})
SphereSubjectLhParametersTagged = typing.TypedDict('SphereSubjectLhParametersTagged', {
    "@type": typing.Literal["freesurfer/sphere_subject-lh"],
    "license_file": InputPathType,
})


class SphereSubjectLhOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SphereSubjectLhParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def sphere_subject_lh_params(
    license_file: InputPathType,
) -> SphereSubjectLhParametersTagged:
    """
    Build parameters.
    
    Args:
        license_file: Path to the FreeSurfer license file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/sphere_subject-lh",
        "license_file": license_file,
    }
    return params


def sphere_subject_lh_cargs(
    params: SphereSubjectLhParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("sphere_subject-lh")
    cargs.extend([
        "-lh",
        execution.input_file(params.get("license_file", None))
    ])
    return cargs


def sphere_subject_lh_outputs(
    params: SphereSubjectLhParameters,
    execution: Execution,
) -> SphereSubjectLhOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SphereSubjectLhOutputs(
        root=execution.output_file("."),
    )
    return ret


def sphere_subject_lh_execute(
    params: SphereSubjectLhParameters,
    runner: Runner | None = None,
) -> SphereSubjectLhOutputs:
    """
    sphere_subject-lh
    
    Tool for processing spherical representations in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SphereSubjectLhOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SPHERE_SUBJECT_LH_METADATA)
    params = execution.params(params)
    cargs = sphere_subject_lh_cargs(params, execution)
    ret = sphere_subject_lh_outputs(params, execution)
    execution.run(cargs)
    return ret


def sphere_subject_lh(
    license_file: InputPathType,
    runner: Runner | None = None,
) -> SphereSubjectLhOutputs:
    """
    sphere_subject-lh
    
    Tool for processing spherical representations in FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        license_file: Path to the FreeSurfer license file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SphereSubjectLhOutputs`).
    """
    params = sphere_subject_lh_params(
        license_file=license_file,
    )
    return sphere_subject_lh_execute(params, runner)


__all__ = [
    "SPHERE_SUBJECT_LH_METADATA",
    "SphereSubjectLhOutputs",
    "sphere_subject_lh",
    "sphere_subject_lh_execute",
    "sphere_subject_lh_params",
]
