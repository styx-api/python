# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SURFREG_METADATA = Metadata(
    id="7926379a00df2da00c284be09c4c92596bd13d58.boutiques",
    name="surfreg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


SurfregParameters = typing.TypedDict('SurfregParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/surfreg"]],
    "subject": str,
    "target": str,
    "cross_hemi": bool,
    "reg_lh": bool,
    "reg_rh": bool,
    "reg_both": bool,
    "no_annot": bool,
    "annot": typing.NotRequired[str | None],
    "aparc": bool,
    "noneg": bool,
    "init_reg": typing.NotRequired[str | None],
    "lta": typing.NotRequired[str | None],
    "init_from_tal": bool,
    "outsurf": typing.NotRequired[str | None],
    "no_set_vol_geom": bool,
    "threads": typing.NotRequired[float | None],
})
SurfregParametersTagged = typing.TypedDict('SurfregParametersTagged', {
    "@type": typing.Literal["freesurfer/surfreg"],
    "subject": str,
    "target": str,
    "cross_hemi": bool,
    "reg_lh": bool,
    "reg_rh": bool,
    "reg_both": bool,
    "no_annot": bool,
    "annot": typing.NotRequired[str | None],
    "aparc": bool,
    "noneg": bool,
    "init_reg": typing.NotRequired[str | None],
    "lta": typing.NotRequired[str | None],
    "init_from_tal": bool,
    "outsurf": typing.NotRequired[str | None],
    "no_set_vol_geom": bool,
    "threads": typing.NotRequired[float | None],
})


class SurfregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SurfregParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_surface: OutputPathType
    """Output surface registration file"""


def surfreg_params(
    subject: str,
    target: str,
    cross_hemi: bool = False,
    reg_lh: bool = False,
    reg_rh: bool = False,
    reg_both: bool = False,
    no_annot: bool = False,
    annot: str | None = None,
    aparc: bool = False,
    noneg: bool = False,
    init_reg: str | None = None,
    lta: str | None = None,
    init_from_tal: bool = False,
    outsurf: str | None = None,
    no_set_vol_geom: bool = False,
    threads: float | None = None,
) -> SurfregParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject to register.
        target: Target average subject to use as a registration target.
        cross_hemi: Perform cross-hemi registration.
        reg_lh: Register left hemisphere only.
        reg_rh: Register right hemisphere only.
        reg_both: Register both left and right hemispheres.
        no_annot: Do not use annot to rip.
        annot: Use specified annotation name.
        aparc: Set annotation name to aparc.annot.
        noneg: Option flag with unspecified behavior in the provided help text.
        init_reg: Initial registration name, default is sphere.
        lta: Apply rotational components of affine registration.
        init_from_tal: Use talaiach.xfm.lta for initial spherical registration.
        outsurf: Output surface name, default depends on the target.
        no_set_vol_geom: Do not set volume geometry and center the sphere.
        threads: Number of threads to run in parallel.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/surfreg",
        "subject": subject,
        "target": target,
        "cross_hemi": cross_hemi,
        "reg_lh": reg_lh,
        "reg_rh": reg_rh,
        "reg_both": reg_both,
        "no_annot": no_annot,
        "aparc": aparc,
        "noneg": noneg,
        "init_from_tal": init_from_tal,
        "no_set_vol_geom": no_set_vol_geom,
    }
    if annot is not None:
        params["annot"] = annot
    if init_reg is not None:
        params["init_reg"] = init_reg
    if lta is not None:
        params["lta"] = lta
    if outsurf is not None:
        params["outsurf"] = outsurf
    if threads is not None:
        params["threads"] = threads
    return params


def surfreg_cargs(
    params: SurfregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("surfreg")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    cargs.extend([
        "--t",
        params.get("target", None)
    ])
    if params.get("cross_hemi", False):
        cargs.append("--xhemi")
    if params.get("reg_lh", False):
        cargs.append("--lh")
    if params.get("reg_rh", False):
        cargs.append("--rh")
    if params.get("reg_both", False):
        cargs.append("--lhrh")
    if params.get("no_annot", False):
        cargs.append("--no-annot")
    if params.get("annot", None) is not None:
        cargs.extend([
            "--annot",
            params.get("annot", None)
        ])
    if params.get("aparc", False):
        cargs.append("--aparc")
    if params.get("noneg", False):
        cargs.append("--noneg")
    if params.get("init_reg", None) is not None:
        cargs.extend([
            "--init-reg",
            params.get("init_reg", None)
        ])
    if params.get("lta", None) is not None:
        cargs.extend([
            "--lta",
            params.get("lta", None)
        ])
    if params.get("init_from_tal", False):
        cargs.append("--init-from-tal")
    if params.get("outsurf", None) is not None:
        cargs.extend([
            "--o",
            params.get("outsurf", None)
        ])
    if params.get("no_set_vol_geom", False):
        cargs.append("--no-set-vol-geom")
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    return cargs


def surfreg_outputs(
    params: SurfregParameters,
    execution: Execution,
) -> SurfregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SurfregOutputs(
        root=execution.output_file("."),
        output_surface=execution.output_file("subject/surf/hemi.target.sphere.reg"),
    )
    return ret


def surfreg_execute(
    params: SurfregParameters,
    runner: Runner | None = None,
) -> SurfregOutputs:
    """
    surfreg
    
    Performs surface registration (mris_register) between a subject and a target
    average subject based on the hemi.reg.template.tif atlas in the average
    subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURFREG_METADATA)
    params = execution.params(params)
    cargs = surfreg_cargs(params, execution)
    ret = surfreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def surfreg(
    subject: str,
    target: str,
    cross_hemi: bool = False,
    reg_lh: bool = False,
    reg_rh: bool = False,
    reg_both: bool = False,
    no_annot: bool = False,
    annot: str | None = None,
    aparc: bool = False,
    noneg: bool = False,
    init_reg: str | None = None,
    lta: str | None = None,
    init_from_tal: bool = False,
    outsurf: str | None = None,
    no_set_vol_geom: bool = False,
    threads: float | None = None,
    runner: Runner | None = None,
) -> SurfregOutputs:
    """
    surfreg
    
    Performs surface registration (mris_register) between a subject and a target
    average subject based on the hemi.reg.template.tif atlas in the average
    subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject to register.
        target: Target average subject to use as a registration target.
        cross_hemi: Perform cross-hemi registration.
        reg_lh: Register left hemisphere only.
        reg_rh: Register right hemisphere only.
        reg_both: Register both left and right hemispheres.
        no_annot: Do not use annot to rip.
        annot: Use specified annotation name.
        aparc: Set annotation name to aparc.annot.
        noneg: Option flag with unspecified behavior in the provided help text.
        init_reg: Initial registration name, default is sphere.
        lta: Apply rotational components of affine registration.
        init_from_tal: Use talaiach.xfm.lta for initial spherical registration.
        outsurf: Output surface name, default depends on the target.
        no_set_vol_geom: Do not set volume geometry and center the sphere.
        threads: Number of threads to run in parallel.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfregOutputs`).
    """
    params = surfreg_params(
        subject=subject,
        target=target,
        cross_hemi=cross_hemi,
        reg_lh=reg_lh,
        reg_rh=reg_rh,
        reg_both=reg_both,
        no_annot=no_annot,
        annot=annot,
        aparc=aparc,
        noneg=noneg,
        init_reg=init_reg,
        lta=lta,
        init_from_tal=init_from_tal,
        outsurf=outsurf,
        no_set_vol_geom=no_set_vol_geom,
        threads=threads,
    )
    return surfreg_execute(params, runner)


__all__ = [
    "SURFREG_METADATA",
    "SurfregOutputs",
    "surfreg",
    "surfreg_execute",
    "surfreg_params",
]
