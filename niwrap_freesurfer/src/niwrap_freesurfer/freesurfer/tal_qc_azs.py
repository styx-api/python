# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TAL_QC_AZS_METADATA = Metadata(
    id="ba15945e9f7433adbd377a8a840d236dd9d40a78.boutiques",
    name="tal_QC_AZS",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TalQcAzsParameters = typing.TypedDict('TalQcAzsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/tal_QC_AZS"]],
    "logfile": InputPathType,
})
TalQcAzsParametersTagged = typing.TypedDict('TalQcAzsParametersTagged', {
    "@type": typing.Literal["freesurfer/tal_QC_AZS"],
    "logfile": InputPathType,
})


class TalQcAzsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TalQcAzsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tal_qc_azs_params(
    logfile: InputPathType,
) -> TalQcAzsParametersTagged:
    """
    Build parameters.
    
    Args:
        logfile: Input logfile for processing.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/tal_QC_AZS",
        "logfile": logfile,
    }
    return params


def tal_qc_azs_cargs(
    params: TalQcAzsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tal_QC_AZS")
    cargs.append(execution.input_file(params.get("logfile", None)))
    return cargs


def tal_qc_azs_outputs(
    params: TalQcAzsParameters,
    execution: Execution,
) -> TalQcAzsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TalQcAzsOutputs(
        root=execution.output_file("."),
    )
    return ret


def tal_qc_azs_execute(
    params: TalQcAzsParameters,
    runner: Runner | None = None,
) -> TalQcAzsOutputs:
    """
    tal_QC_AZS
    
    A tool that processes a logfile.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TalQcAzsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TAL_QC_AZS_METADATA)
    params = execution.params(params)
    cargs = tal_qc_azs_cargs(params, execution)
    ret = tal_qc_azs_outputs(params, execution)
    execution.run(cargs)
    return ret


def tal_qc_azs(
    logfile: InputPathType,
    runner: Runner | None = None,
) -> TalQcAzsOutputs:
    """
    tal_QC_AZS
    
    A tool that processes a logfile.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        logfile: Input logfile for processing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TalQcAzsOutputs`).
    """
    params = tal_qc_azs_params(
        logfile=logfile,
    )
    return tal_qc_azs_execute(params, runner)


__all__ = [
    "TAL_QC_AZS_METADATA",
    "TalQcAzsOutputs",
    "tal_qc_azs",
    "tal_qc_azs_execute",
    "tal_qc_azs_params",
]
