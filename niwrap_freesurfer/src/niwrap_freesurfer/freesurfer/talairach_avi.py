# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TALAIRACH_AVI_METADATA = Metadata(
    id="62db8e91323313e662697c3e2bf8d5e807bdecce.boutiques",
    name="talairach_avi",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TalairachAviParameters = typing.TypedDict('TalairachAviParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/talairach_avi"]],
    "input_file": InputPathType,
    "output_xfm": str,
    "atlas": typing.NotRequired[str | None],
    "log": typing.NotRequired[str | None],
    "debug": bool,
})
TalairachAviParametersTagged = typing.TypedDict('TalairachAviParametersTagged', {
    "@type": typing.Literal["freesurfer/talairach_avi"],
    "input_file": InputPathType,
    "output_xfm": str,
    "atlas": typing.NotRequired[str | None],
    "log": typing.NotRequired[str | None],
    "debug": bool,
})


class TalairachAviOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TalairachAviParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_xfm_file: OutputPathType
    """Output transform file"""


def talairach_avi_params(
    input_file: InputPathType,
    output_xfm: str,
    atlas: str | None = None,
    log: str | None = None,
    debug: bool = False,
) -> TalairachAviParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input volume.
        output_xfm: Output transform file.
        atlas: Alternate target atlas (in freesurfer/average dir).
        log: Log file. Default is outdir/talairach_avi.log.
        debug: Turn on debugging.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/talairach_avi",
        "input_file": input_file,
        "output_xfm": output_xfm,
        "debug": debug,
    }
    if atlas is not None:
        params["atlas"] = atlas
    if log is not None:
        params["log"] = log
    return params


def talairach_avi_cargs(
    params: TalairachAviParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("talairach_avi")
    cargs.extend([
        "--i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "--xfm",
        params.get("output_xfm", None)
    ])
    if params.get("atlas", None) is not None:
        cargs.extend([
            "--atlas",
            params.get("atlas", None)
        ])
    if params.get("log", None) is not None:
        cargs.extend([
            "--log",
            params.get("log", None)
        ])
    if params.get("debug", False):
        cargs.append("--debug")
    return cargs


def talairach_avi_outputs(
    params: TalairachAviParameters,
    execution: Execution,
) -> TalairachAviOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TalairachAviOutputs(
        root=execution.output_file("."),
        output_xfm_file=execution.output_file(params.get("output_xfm", None)),
    )
    return ret


def talairach_avi_execute(
    params: TalairachAviParameters,
    runner: Runner | None = None,
) -> TalairachAviOutputs:
    """
    talairach_avi
    
    Front-end for Avi Snyder's image registration tool. Computes the Talairach
    transform that maps the input volume to the MNI average_305.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TalairachAviOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TALAIRACH_AVI_METADATA)
    params = execution.params(params)
    cargs = talairach_avi_cargs(params, execution)
    ret = talairach_avi_outputs(params, execution)
    execution.run(cargs)
    return ret


def talairach_avi(
    input_file: InputPathType,
    output_xfm: str,
    atlas: str | None = None,
    log: str | None = None,
    debug: bool = False,
    runner: Runner | None = None,
) -> TalairachAviOutputs:
    """
    talairach_avi
    
    Front-end for Avi Snyder's image registration tool. Computes the Talairach
    transform that maps the input volume to the MNI average_305.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input volume.
        output_xfm: Output transform file.
        atlas: Alternate target atlas (in freesurfer/average dir).
        log: Log file. Default is outdir/talairach_avi.log.
        debug: Turn on debugging.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TalairachAviOutputs`).
    """
    params = talairach_avi_params(
        input_file=input_file,
        output_xfm=output_xfm,
        atlas=atlas,
        log=log,
        debug=debug,
    )
    return talairach_avi_execute(params, runner)


__all__ = [
    "TALAIRACH_AVI_METADATA",
    "TalairachAviOutputs",
    "talairach_avi",
    "talairach_avi_execute",
    "talairach_avi_params",
]
