# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TEST_ORIENTATION_PLANES_FROM_PARCELLATION_METADATA = Metadata(
    id="a0e7c2d4d564fe47df1edd4a3975b65bd96d8227.boutiques",
    name="testOrientationPlanesFromParcellation",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TestOrientationPlanesFromParcellationParameters = typing.TypedDict('TestOrientationPlanesFromParcellationParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/testOrientationPlanesFromParcellation"]],
    "input_file": InputPathType,
    "output_file": str,
    "bb_flag": bool,
})
TestOrientationPlanesFromParcellationParametersTagged = typing.TypedDict('TestOrientationPlanesFromParcellationParametersTagged', {
    "@type": typing.Literal["freesurfer/testOrientationPlanesFromParcellation"],
    "input_file": InputPathType,
    "output_file": str,
    "bb_flag": bool,
})


class TestOrientationPlanesFromParcellationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TestOrientationPlanesFromParcellationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def test_orientation_planes_from_parcellation_params(
    input_file: InputPathType,
    output_file: str,
    bb_flag: bool = False,
) -> TestOrientationPlanesFromParcellationParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input file for the parcellation data.
        output_file: Output file for the orientation planes results.
        bb_flag: Flag to use bounding box in the computation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/testOrientationPlanesFromParcellation",
        "input_file": input_file,
        "output_file": output_file,
        "bb_flag": bb_flag,
    }
    return params


def test_orientation_planes_from_parcellation_cargs(
    params: TestOrientationPlanesFromParcellationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("testOrientationPlanesFromParcellation")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    if params.get("bb_flag", False):
        cargs.append("-bb")
    return cargs


def test_orientation_planes_from_parcellation_outputs(
    params: TestOrientationPlanesFromParcellationParameters,
    execution: Execution,
) -> TestOrientationPlanesFromParcellationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TestOrientationPlanesFromParcellationOutputs(
        root=execution.output_file("."),
    )
    return ret


def test_orientation_planes_from_parcellation_execute(
    params: TestOrientationPlanesFromParcellationParameters,
    runner: Runner | None = None,
) -> TestOrientationPlanesFromParcellationOutputs:
    """
    testOrientationPlanesFromParcellation
    
    Tests orientation planes from a given parcellation using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TestOrientationPlanesFromParcellationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TEST_ORIENTATION_PLANES_FROM_PARCELLATION_METADATA)
    params = execution.params(params)
    cargs = test_orientation_planes_from_parcellation_cargs(params, execution)
    ret = test_orientation_planes_from_parcellation_outputs(params, execution)
    execution.run(cargs)
    return ret


def test_orientation_planes_from_parcellation(
    input_file: InputPathType,
    output_file: str,
    bb_flag: bool = False,
    runner: Runner | None = None,
) -> TestOrientationPlanesFromParcellationOutputs:
    """
    testOrientationPlanesFromParcellation
    
    Tests orientation planes from a given parcellation using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input file for the parcellation data.
        output_file: Output file for the orientation planes results.
        bb_flag: Flag to use bounding box in the computation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TestOrientationPlanesFromParcellationOutputs`).
    """
    params = test_orientation_planes_from_parcellation_params(
        input_file=input_file,
        output_file=output_file,
        bb_flag=bb_flag,
    )
    return test_orientation_planes_from_parcellation_execute(params, runner)


__all__ = [
    "TEST_ORIENTATION_PLANES_FROM_PARCELLATION_METADATA",
    "TestOrientationPlanesFromParcellationOutputs",
    "test_orientation_planes_from_parcellation",
    "test_orientation_planes_from_parcellation_execute",
    "test_orientation_planes_from_parcellation_params",
]
