# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TKREGISTER2_CMDL_METADATA = Metadata(
    id="3c265476564c72007cd82dd01a3552816a012f13.boutiques",
    name="tkregister2_cmdl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Tkregister2CmdlParameters = typing.TypedDict('Tkregister2CmdlParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/tkregister2_cmdl"]],
    "movable_volume": InputPathType,
    "target_volume": InputPathType,
    "fstarg_flag": bool,
    "reg_file": typing.NotRequired[InputPathType | None],
    "check_reg_flag": bool,
    "regheader_flag": bool,
    "regheader_center_flag": bool,
    "fsl_targ_flag": bool,
    "fsl_targ_lr_flag": bool,
    "gca_subject": typing.NotRequired[str | None],
    "gca_skull_subject": typing.NotRequired[str | None],
    "no_zero_cras_flag": bool,
    "movbright": typing.NotRequired[float | None],
    "no_inorm_flag": bool,
    "fmov": typing.NotRequired[float | None],
    "fmov_targ_flag": bool,
    "plane": typing.NotRequired[str | None],
    "slice": typing.NotRequired[float | None],
    "volview": typing.NotRequired[str | None],
    "fov": typing.NotRequired[float | None],
    "movscale": typing.NotRequired[float | None],
    "surf": typing.NotRequired[str | None],
    "surf_rgb": typing.NotRequired[list[float] | None],
    "lh_only_flag": bool,
    "rh_only_flag": bool,
    "fstal_flag": bool,
    "talxfmname": typing.NotRequired[str | None],
    "ixfm": typing.NotRequired[InputPathType | None],
    "xfm": typing.NotRequired[InputPathType | None],
    "xfmout": typing.NotRequired[InputPathType | None],
    "fsl": typing.NotRequired[InputPathType | None],
    "fslregout": typing.NotRequired[InputPathType | None],
    "freeview": typing.NotRequired[InputPathType | None],
    "vox2vox": typing.NotRequired[InputPathType | None],
    "lta": typing.NotRequired[InputPathType | None],
    "lta_inv": typing.NotRequired[InputPathType | None],
    "ltaout": typing.NotRequired[InputPathType | None],
    "ltaout_inv_flag": bool,
    "feat": typing.NotRequired[str | None],
    "fsfeat": typing.NotRequired[str | None],
    "identity_flag": bool,
    "subject_id": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "nofix_flag": bool,
    "float2int": typing.NotRequired[str | None],
    "title": typing.NotRequired[str | None],
    "tag_flag": bool,
    "mov_orientation": typing.NotRequired[str | None],
    "targ_orientation": typing.NotRequired[str | None],
    "int": typing.NotRequired[list[str] | None],
    "double_window_size_flag": bool,
    "window_scale": typing.NotRequired[float | None],
    "det": typing.NotRequired[InputPathType | None],
    "aseg_flag": bool,
    "aparc_flag": bool,
    "wmparc_flag": bool,
    "gdiagno": typing.NotRequired[float | None],
    "trans": typing.NotRequired[list[float] | None],
    "rot": typing.NotRequired[list[float] | None],
    "conf_targ_flag": bool,
})
Tkregister2CmdlParametersTagged = typing.TypedDict('Tkregister2CmdlParametersTagged', {
    "@type": typing.Literal["freesurfer/tkregister2_cmdl"],
    "movable_volume": InputPathType,
    "target_volume": InputPathType,
    "fstarg_flag": bool,
    "reg_file": typing.NotRequired[InputPathType | None],
    "check_reg_flag": bool,
    "regheader_flag": bool,
    "regheader_center_flag": bool,
    "fsl_targ_flag": bool,
    "fsl_targ_lr_flag": bool,
    "gca_subject": typing.NotRequired[str | None],
    "gca_skull_subject": typing.NotRequired[str | None],
    "no_zero_cras_flag": bool,
    "movbright": typing.NotRequired[float | None],
    "no_inorm_flag": bool,
    "fmov": typing.NotRequired[float | None],
    "fmov_targ_flag": bool,
    "plane": typing.NotRequired[str | None],
    "slice": typing.NotRequired[float | None],
    "volview": typing.NotRequired[str | None],
    "fov": typing.NotRequired[float | None],
    "movscale": typing.NotRequired[float | None],
    "surf": typing.NotRequired[str | None],
    "surf_rgb": typing.NotRequired[list[float] | None],
    "lh_only_flag": bool,
    "rh_only_flag": bool,
    "fstal_flag": bool,
    "talxfmname": typing.NotRequired[str | None],
    "ixfm": typing.NotRequired[InputPathType | None],
    "xfm": typing.NotRequired[InputPathType | None],
    "xfmout": typing.NotRequired[InputPathType | None],
    "fsl": typing.NotRequired[InputPathType | None],
    "fslregout": typing.NotRequired[InputPathType | None],
    "freeview": typing.NotRequired[InputPathType | None],
    "vox2vox": typing.NotRequired[InputPathType | None],
    "lta": typing.NotRequired[InputPathType | None],
    "lta_inv": typing.NotRequired[InputPathType | None],
    "ltaout": typing.NotRequired[InputPathType | None],
    "ltaout_inv_flag": bool,
    "feat": typing.NotRequired[str | None],
    "fsfeat": typing.NotRequired[str | None],
    "identity_flag": bool,
    "subject_id": typing.NotRequired[str | None],
    "subjects_dir": typing.NotRequired[str | None],
    "nofix_flag": bool,
    "float2int": typing.NotRequired[str | None],
    "title": typing.NotRequired[str | None],
    "tag_flag": bool,
    "mov_orientation": typing.NotRequired[str | None],
    "targ_orientation": typing.NotRequired[str | None],
    "int": typing.NotRequired[list[str] | None],
    "double_window_size_flag": bool,
    "window_scale": typing.NotRequired[float | None],
    "det": typing.NotRequired[InputPathType | None],
    "aseg_flag": bool,
    "aparc_flag": bool,
    "wmparc_flag": bool,
    "gdiagno": typing.NotRequired[float | None],
    "trans": typing.NotRequired[list[float] | None],
    "rot": typing.NotRequired[list[float] | None],
    "conf_targ_flag": bool,
})


class Tkregister2CmdlOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Tkregister2CmdlParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tkregister2_cmdl_params(
    movable_volume: InputPathType,
    target_volume: InputPathType,
    fstarg_flag: bool = False,
    reg_file: InputPathType | None = None,
    check_reg_flag: bool = False,
    regheader_flag: bool = False,
    regheader_center_flag: bool = False,
    fsl_targ_flag: bool = False,
    fsl_targ_lr_flag: bool = False,
    gca_subject: str | None = None,
    gca_skull_subject: str | None = None,
    no_zero_cras_flag: bool = False,
    movbright: float | None = None,
    no_inorm_flag: bool = False,
    fmov: float | None = None,
    fmov_targ_flag: bool = False,
    plane: str | None = None,
    slice_: float | None = None,
    volview: str | None = None,
    fov: float | None = None,
    movscale: float | None = None,
    surf: str | None = None,
    surf_rgb: list[float] | None = None,
    lh_only_flag: bool = False,
    rh_only_flag: bool = False,
    fstal_flag: bool = False,
    talxfmname: str | None = None,
    ixfm: InputPathType | None = None,
    xfm: InputPathType | None = None,
    xfmout: InputPathType | None = None,
    fsl: InputPathType | None = None,
    fslregout: InputPathType | None = None,
    freeview: InputPathType | None = None,
    vox2vox: InputPathType | None = None,
    lta: InputPathType | None = None,
    lta_inv: InputPathType | None = None,
    ltaout: InputPathType | None = None,
    ltaout_inv_flag: bool = False,
    feat: str | None = None,
    fsfeat: str | None = None,
    identity_flag: bool = False,
    subject_id: str | None = None,
    subjects_dir: str | None = None,
    nofix_flag: bool = False,
    float2int: str | None = None,
    title: str | None = None,
    tag_flag: bool = False,
    mov_orientation: str | None = None,
    targ_orientation: str | None = None,
    int_: list[str] | None = None,
    double_window_size_flag: bool = False,
    window_scale: float | None = None,
    det: InputPathType | None = None,
    aseg_flag: bool = False,
    aparc_flag: bool = False,
    wmparc_flag: bool = False,
    gdiagno: float | None = None,
    trans: list[float] | None = None,
    rot: list[float] | None = None,
    conf_targ_flag: bool = False,
) -> Tkregister2CmdlParametersTagged:
    """
    Build parameters.
    
    Args:
        movable_volume: Path to the movable volume.
        target_volume: Path to the target volume.
        fstarg_flag: Target is relative to subjectid/mri.
        reg_file: Path to input/output registration file.
        check_reg_flag: Only check, no --reg needed.
        regheader_flag: Compute registration from headers.
        regheader_center_flag: Same as --regheader but aligns volume centers.
        fsl_targ_flag: Use FSLDIR/data/standard/avg152T1.nii.gz.
        fsl_targ_lr_flag: Use FSLDIR/data/standard/avg152T1_LR-marked.nii.gz.
        gca_subject: Subject ID for linear GCA registration check.
        gca_skull_subject: Subject ID for linear 'with skull' GCA registration\
            check.
        no_zero_cras_flag: Do not zero target cras (done with --fstal).
        movbright: Brightness of movable volume.
        no_inorm_flag: Turn off intensity normalization.
        fmov: Set movable volume brightness.
        fmov_targ_flag: Apply movable brightness to the target.
        plane: Startup view plane: cor, sag, ax.
        slice_: Startup slice number.
        volview: Startup with targ or mov.
        fov: Window FOV in mm (default is 256).
        movscale: Scale size of movable volume by scale.
        surf: Display surface as an overlay.
        surf_rgb: Set surface color (0-255) for R G B.
        lh_only_flag: Only load/display left hemisphere.
        rh_only_flag: Only load/display right hemisphere.
        fstal_flag: Set movable to be tal and reg to be taliarach.xfm.
        talxfmname: Set movable to be tal and reg to be talxfmname.
        ixfm: MNI-style inverse registration input matrix.
        xfm: MNI-style registration input matrix.
        xfmout: MNI-style registration output matrix.
        fsl: FSL-style registration input matrix.
        fslregout: FSL-Style registration output matrix.
        freeview: FreeView registration output matrix.
        vox2vox: Vox2vox matrix in ascii.
        lta: Linear Transform Array file.
        lta_inv: Read in LTA and invert.
        ltaout: Output a Linear Transform Array.
        ltaout_inv_flag: Invert transform in ltaoutfile.
        feat: Check example_func2standard registration.
        fsfeat: Check reg/freesurfer/register.dat registration.
        identity_flag: Use identity as registration matrix.
        subject_id: Set subject id.
        subjects_dir: Use specified directory as SUBJECTS_DIR.
        nofix_flag: Don't fix old tkregister matrices.
        float2int: Specify old tkregister float2int.
        title: Set window title.
        tag_flag: Tag movable volume near the col/row origin.
        mov_orientation: Supply orientation string for movable volume.
        targ_orientation: Supply orientation string for target volume.
        int_: Use registration from intermediate volume.
        double_window_size_flag: Double window size.
        window_scale: Scale window by specified scale.
        det: Save determinant of registration matrix to specified file.
        aseg_flag: Load aseg and hit 'd' to toggle.
        aparc_flag: Load aparc+aseg and hit 'c' to toggle.
        wmparc_flag: Load wmparc and hit 'c' to toggle.
        gdiagno: Set debug level.
        trans: Translation (mm) to apply to registration matrix.
        rot: Rotation angles (deg) to apply to registration matrix.
        conf_targ_flag: Conform target (assumes reg computed to conform target,\
            eg, GCA).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/tkregister2_cmdl",
        "movable_volume": movable_volume,
        "target_volume": target_volume,
        "fstarg_flag": fstarg_flag,
        "check_reg_flag": check_reg_flag,
        "regheader_flag": regheader_flag,
        "regheader_center_flag": regheader_center_flag,
        "fsl_targ_flag": fsl_targ_flag,
        "fsl_targ_lr_flag": fsl_targ_lr_flag,
        "no_zero_cras_flag": no_zero_cras_flag,
        "no_inorm_flag": no_inorm_flag,
        "fmov_targ_flag": fmov_targ_flag,
        "lh_only_flag": lh_only_flag,
        "rh_only_flag": rh_only_flag,
        "fstal_flag": fstal_flag,
        "ltaout_inv_flag": ltaout_inv_flag,
        "identity_flag": identity_flag,
        "nofix_flag": nofix_flag,
        "tag_flag": tag_flag,
        "double_window_size_flag": double_window_size_flag,
        "aseg_flag": aseg_flag,
        "aparc_flag": aparc_flag,
        "wmparc_flag": wmparc_flag,
        "conf_targ_flag": conf_targ_flag,
    }
    if reg_file is not None:
        params["reg_file"] = reg_file
    if gca_subject is not None:
        params["gca_subject"] = gca_subject
    if gca_skull_subject is not None:
        params["gca_skull_subject"] = gca_skull_subject
    if movbright is not None:
        params["movbright"] = movbright
    if fmov is not None:
        params["fmov"] = fmov
    if plane is not None:
        params["plane"] = plane
    if slice_ is not None:
        params["slice"] = slice_
    if volview is not None:
        params["volview"] = volview
    if fov is not None:
        params["fov"] = fov
    if movscale is not None:
        params["movscale"] = movscale
    if surf is not None:
        params["surf"] = surf
    if surf_rgb is not None:
        params["surf_rgb"] = surf_rgb
    if talxfmname is not None:
        params["talxfmname"] = talxfmname
    if ixfm is not None:
        params["ixfm"] = ixfm
    if xfm is not None:
        params["xfm"] = xfm
    if xfmout is not None:
        params["xfmout"] = xfmout
    if fsl is not None:
        params["fsl"] = fsl
    if fslregout is not None:
        params["fslregout"] = fslregout
    if freeview is not None:
        params["freeview"] = freeview
    if vox2vox is not None:
        params["vox2vox"] = vox2vox
    if lta is not None:
        params["lta"] = lta
    if lta_inv is not None:
        params["lta_inv"] = lta_inv
    if ltaout is not None:
        params["ltaout"] = ltaout
    if feat is not None:
        params["feat"] = feat
    if fsfeat is not None:
        params["fsfeat"] = fsfeat
    if subject_id is not None:
        params["subject_id"] = subject_id
    if subjects_dir is not None:
        params["subjects_dir"] = subjects_dir
    if float2int is not None:
        params["float2int"] = float2int
    if title is not None:
        params["title"] = title
    if mov_orientation is not None:
        params["mov_orientation"] = mov_orientation
    if targ_orientation is not None:
        params["targ_orientation"] = targ_orientation
    if int_ is not None:
        params["int"] = int_
    if window_scale is not None:
        params["window_scale"] = window_scale
    if det is not None:
        params["det"] = det
    if gdiagno is not None:
        params["gdiagno"] = gdiagno
    if trans is not None:
        params["trans"] = trans
    if rot is not None:
        params["rot"] = rot
    return params


def tkregister2_cmdl_cargs(
    params: Tkregister2CmdlParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tkregister2_cmdl")
    cargs.extend([
        "--mov",
        execution.input_file(params.get("movable_volume", None))
    ])
    cargs.extend([
        "--targ",
        execution.input_file(params.get("target_volume", None))
    ])
    if params.get("fstarg_flag", False):
        cargs.append("--fstarg")
    if params.get("reg_file", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("reg_file", None))
        ])
    if params.get("check_reg_flag", False):
        cargs.append("--check-reg")
    if params.get("regheader_flag", False):
        cargs.append("--regheader")
    if params.get("regheader_center_flag", False):
        cargs.append("--regheader-center")
    if params.get("fsl_targ_flag", False):
        cargs.append("--fsl-targ")
    if params.get("fsl_targ_lr_flag", False):
        cargs.append("--fsl-targ-lr")
    if params.get("gca_subject", None) is not None:
        cargs.extend([
            "--gca",
            params.get("gca_subject", None)
        ])
    if params.get("gca_skull_subject", None) is not None:
        cargs.extend([
            "--gca-skull",
            params.get("gca_skull_subject", None)
        ])
    if params.get("no_zero_cras_flag", False):
        cargs.append("--no-zero-cras")
    if params.get("movbright", None) is not None:
        cargs.extend([
            "--movbright",
            str(params.get("movbright", None))
        ])
    if params.get("no_inorm_flag", False):
        cargs.append("--no-inorm")
    if params.get("fmov", None) is not None:
        cargs.extend([
            "--fmov",
            str(params.get("fmov", None))
        ])
    if params.get("fmov_targ_flag", False):
        cargs.append("--fmov-targ")
    if params.get("plane", None) is not None:
        cargs.extend([
            "--plane",
            params.get("plane", None)
        ])
    if params.get("slice", None) is not None:
        cargs.extend([
            "--slice",
            str(params.get("slice", None))
        ])
    if params.get("volview", None) is not None:
        cargs.extend([
            "--volview",
            params.get("volview", None)
        ])
    if params.get("fov", None) is not None:
        cargs.extend([
            "--fov",
            str(params.get("fov", None))
        ])
    if params.get("movscale", None) is not None:
        cargs.extend([
            "--movscale",
            str(params.get("movscale", None))
        ])
    if params.get("surf", None) is not None:
        cargs.extend([
            "--surf",
            params.get("surf", None)
        ])
    if params.get("surf_rgb", None) is not None:
        cargs.extend([
            "--surf-rgb",
            *map(str, params.get("surf_rgb", None))
        ])
    if params.get("lh_only_flag", False):
        cargs.append("--lh-only")
    if params.get("rh_only_flag", False):
        cargs.append("--rh-only")
    if params.get("fstal_flag", False):
        cargs.append("--fstal")
    if params.get("talxfmname", None) is not None:
        cargs.extend([
            "--talxfmname",
            params.get("talxfmname", None)
        ])
    if params.get("ixfm", None) is not None:
        cargs.extend([
            "--ixfm",
            execution.input_file(params.get("ixfm", None))
        ])
    if params.get("xfm", None) is not None:
        cargs.extend([
            "--xfm",
            execution.input_file(params.get("xfm", None))
        ])
    if params.get("xfmout", None) is not None:
        cargs.extend([
            "--xfmout",
            execution.input_file(params.get("xfmout", None))
        ])
    if params.get("fsl", None) is not None:
        cargs.extend([
            "--fsl",
            execution.input_file(params.get("fsl", None))
        ])
    if params.get("fslregout", None) is not None:
        cargs.extend([
            "--fslregout",
            execution.input_file(params.get("fslregout", None))
        ])
    if params.get("freeview", None) is not None:
        cargs.extend([
            "--freeview",
            execution.input_file(params.get("freeview", None))
        ])
    if params.get("vox2vox", None) is not None:
        cargs.extend([
            "--vox2vox",
            execution.input_file(params.get("vox2vox", None))
        ])
    if params.get("lta", None) is not None:
        cargs.extend([
            "--lta",
            execution.input_file(params.get("lta", None))
        ])
    if params.get("lta_inv", None) is not None:
        cargs.extend([
            "--lta-inv",
            execution.input_file(params.get("lta_inv", None))
        ])
    if params.get("ltaout", None) is not None:
        cargs.extend([
            "--ltaout",
            execution.input_file(params.get("ltaout", None))
        ])
    if params.get("ltaout_inv_flag", False):
        cargs.append("--ltaout-inv")
    if params.get("feat", None) is not None:
        cargs.extend([
            "--feat",
            params.get("feat", None)
        ])
    if params.get("fsfeat", None) is not None:
        cargs.extend([
            "--fsfeat",
            params.get("fsfeat", None)
        ])
    if params.get("identity_flag", False):
        cargs.append("--identity")
    if params.get("subject_id", None) is not None:
        cargs.extend([
            "--s",
            params.get("subject_id", None)
        ])
    if params.get("subjects_dir", None) is not None:
        cargs.extend([
            "--sd",
            params.get("subjects_dir", None)
        ])
    if params.get("nofix_flag", False):
        cargs.append("--nofix")
    if params.get("float2int", None) is not None:
        cargs.extend([
            "--float2int",
            params.get("float2int", None)
        ])
    if params.get("title", None) is not None:
        cargs.extend([
            "--title",
            params.get("title", None)
        ])
    if params.get("tag_flag", False):
        cargs.append("--tag")
    if params.get("mov_orientation", None) is not None:
        cargs.extend([
            "--mov-orientation",
            params.get("mov_orientation", None)
        ])
    if params.get("targ_orientation", None) is not None:
        cargs.extend([
            "--targ-orientation",
            params.get("targ_orientation", None)
        ])
    if params.get("int", None) is not None:
        cargs.extend([
            "--int",
            *params.get("int", None)
        ])
    if params.get("double_window_size_flag", False):
        cargs.append("--2")
    if params.get("window_scale", None) is not None:
        cargs.extend([
            "--size",
            str(params.get("window_scale", None))
        ])
    if params.get("det", None) is not None:
        cargs.extend([
            "--det",
            execution.input_file(params.get("det", None))
        ])
    if params.get("aseg_flag", False):
        cargs.append("--aseg")
    if params.get("aparc_flag", False):
        cargs.append("--aparc+aseg")
    if params.get("wmparc_flag", False):
        cargs.append("--wmparc")
    if params.get("gdiagno", None) is not None:
        cargs.extend([
            "--gdiagno",
            str(params.get("gdiagno", None))
        ])
    if params.get("trans", None) is not None:
        cargs.extend([
            "--trans",
            *map(str, params.get("trans", None))
        ])
    if params.get("rot", None) is not None:
        cargs.extend([
            "--rot",
            *map(str, params.get("rot", None))
        ])
    if params.get("conf_targ_flag", False):
        cargs.append("--conf-targ")
    return cargs


def tkregister2_cmdl_outputs(
    params: Tkregister2CmdlParameters,
    execution: Execution,
) -> Tkregister2CmdlOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Tkregister2CmdlOutputs(
        root=execution.output_file("."),
    )
    return ret


def tkregister2_cmdl_execute(
    params: Tkregister2CmdlParameters,
    runner: Runner | None = None,
) -> Tkregister2CmdlOutputs:
    """
    tkregister2_cmdl
    
    tkregister2 is a tool to assist in the manual tuning of the linear
    registration between two volumes, mainly for the purpose of interacting with
    the FreeSurfer anatomical stream.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Tkregister2CmdlOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TKREGISTER2_CMDL_METADATA)
    params = execution.params(params)
    cargs = tkregister2_cmdl_cargs(params, execution)
    ret = tkregister2_cmdl_outputs(params, execution)
    execution.run(cargs)
    return ret


def tkregister2_cmdl(
    movable_volume: InputPathType,
    target_volume: InputPathType,
    fstarg_flag: bool = False,
    reg_file: InputPathType | None = None,
    check_reg_flag: bool = False,
    regheader_flag: bool = False,
    regheader_center_flag: bool = False,
    fsl_targ_flag: bool = False,
    fsl_targ_lr_flag: bool = False,
    gca_subject: str | None = None,
    gca_skull_subject: str | None = None,
    no_zero_cras_flag: bool = False,
    movbright: float | None = None,
    no_inorm_flag: bool = False,
    fmov: float | None = None,
    fmov_targ_flag: bool = False,
    plane: str | None = None,
    slice_: float | None = None,
    volview: str | None = None,
    fov: float | None = None,
    movscale: float | None = None,
    surf: str | None = None,
    surf_rgb: list[float] | None = None,
    lh_only_flag: bool = False,
    rh_only_flag: bool = False,
    fstal_flag: bool = False,
    talxfmname: str | None = None,
    ixfm: InputPathType | None = None,
    xfm: InputPathType | None = None,
    xfmout: InputPathType | None = None,
    fsl: InputPathType | None = None,
    fslregout: InputPathType | None = None,
    freeview: InputPathType | None = None,
    vox2vox: InputPathType | None = None,
    lta: InputPathType | None = None,
    lta_inv: InputPathType | None = None,
    ltaout: InputPathType | None = None,
    ltaout_inv_flag: bool = False,
    feat: str | None = None,
    fsfeat: str | None = None,
    identity_flag: bool = False,
    subject_id: str | None = None,
    subjects_dir: str | None = None,
    nofix_flag: bool = False,
    float2int: str | None = None,
    title: str | None = None,
    tag_flag: bool = False,
    mov_orientation: str | None = None,
    targ_orientation: str | None = None,
    int_: list[str] | None = None,
    double_window_size_flag: bool = False,
    window_scale: float | None = None,
    det: InputPathType | None = None,
    aseg_flag: bool = False,
    aparc_flag: bool = False,
    wmparc_flag: bool = False,
    gdiagno: float | None = None,
    trans: list[float] | None = None,
    rot: list[float] | None = None,
    conf_targ_flag: bool = False,
    runner: Runner | None = None,
) -> Tkregister2CmdlOutputs:
    """
    tkregister2_cmdl
    
    tkregister2 is a tool to assist in the manual tuning of the linear
    registration between two volumes, mainly for the purpose of interacting with
    the FreeSurfer anatomical stream.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        movable_volume: Path to the movable volume.
        target_volume: Path to the target volume.
        fstarg_flag: Target is relative to subjectid/mri.
        reg_file: Path to input/output registration file.
        check_reg_flag: Only check, no --reg needed.
        regheader_flag: Compute registration from headers.
        regheader_center_flag: Same as --regheader but aligns volume centers.
        fsl_targ_flag: Use FSLDIR/data/standard/avg152T1.nii.gz.
        fsl_targ_lr_flag: Use FSLDIR/data/standard/avg152T1_LR-marked.nii.gz.
        gca_subject: Subject ID for linear GCA registration check.
        gca_skull_subject: Subject ID for linear 'with skull' GCA registration\
            check.
        no_zero_cras_flag: Do not zero target cras (done with --fstal).
        movbright: Brightness of movable volume.
        no_inorm_flag: Turn off intensity normalization.
        fmov: Set movable volume brightness.
        fmov_targ_flag: Apply movable brightness to the target.
        plane: Startup view plane: cor, sag, ax.
        slice_: Startup slice number.
        volview: Startup with targ or mov.
        fov: Window FOV in mm (default is 256).
        movscale: Scale size of movable volume by scale.
        surf: Display surface as an overlay.
        surf_rgb: Set surface color (0-255) for R G B.
        lh_only_flag: Only load/display left hemisphere.
        rh_only_flag: Only load/display right hemisphere.
        fstal_flag: Set movable to be tal and reg to be taliarach.xfm.
        talxfmname: Set movable to be tal and reg to be talxfmname.
        ixfm: MNI-style inverse registration input matrix.
        xfm: MNI-style registration input matrix.
        xfmout: MNI-style registration output matrix.
        fsl: FSL-style registration input matrix.
        fslregout: FSL-Style registration output matrix.
        freeview: FreeView registration output matrix.
        vox2vox: Vox2vox matrix in ascii.
        lta: Linear Transform Array file.
        lta_inv: Read in LTA and invert.
        ltaout: Output a Linear Transform Array.
        ltaout_inv_flag: Invert transform in ltaoutfile.
        feat: Check example_func2standard registration.
        fsfeat: Check reg/freesurfer/register.dat registration.
        identity_flag: Use identity as registration matrix.
        subject_id: Set subject id.
        subjects_dir: Use specified directory as SUBJECTS_DIR.
        nofix_flag: Don't fix old tkregister matrices.
        float2int: Specify old tkregister float2int.
        title: Set window title.
        tag_flag: Tag movable volume near the col/row origin.
        mov_orientation: Supply orientation string for movable volume.
        targ_orientation: Supply orientation string for target volume.
        int_: Use registration from intermediate volume.
        double_window_size_flag: Double window size.
        window_scale: Scale window by specified scale.
        det: Save determinant of registration matrix to specified file.
        aseg_flag: Load aseg and hit 'd' to toggle.
        aparc_flag: Load aparc+aseg and hit 'c' to toggle.
        wmparc_flag: Load wmparc and hit 'c' to toggle.
        gdiagno: Set debug level.
        trans: Translation (mm) to apply to registration matrix.
        rot: Rotation angles (deg) to apply to registration matrix.
        conf_targ_flag: Conform target (assumes reg computed to conform target,\
            eg, GCA).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Tkregister2CmdlOutputs`).
    """
    params = tkregister2_cmdl_params(
        movable_volume=movable_volume,
        target_volume=target_volume,
        fstarg_flag=fstarg_flag,
        reg_file=reg_file,
        check_reg_flag=check_reg_flag,
        regheader_flag=regheader_flag,
        regheader_center_flag=regheader_center_flag,
        fsl_targ_flag=fsl_targ_flag,
        fsl_targ_lr_flag=fsl_targ_lr_flag,
        gca_subject=gca_subject,
        gca_skull_subject=gca_skull_subject,
        no_zero_cras_flag=no_zero_cras_flag,
        movbright=movbright,
        no_inorm_flag=no_inorm_flag,
        fmov=fmov,
        fmov_targ_flag=fmov_targ_flag,
        plane=plane,
        slice_=slice_,
        volview=volview,
        fov=fov,
        movscale=movscale,
        surf=surf,
        surf_rgb=surf_rgb,
        lh_only_flag=lh_only_flag,
        rh_only_flag=rh_only_flag,
        fstal_flag=fstal_flag,
        talxfmname=talxfmname,
        ixfm=ixfm,
        xfm=xfm,
        xfmout=xfmout,
        fsl=fsl,
        fslregout=fslregout,
        freeview=freeview,
        vox2vox=vox2vox,
        lta=lta,
        lta_inv=lta_inv,
        ltaout=ltaout,
        ltaout_inv_flag=ltaout_inv_flag,
        feat=feat,
        fsfeat=fsfeat,
        identity_flag=identity_flag,
        subject_id=subject_id,
        subjects_dir=subjects_dir,
        nofix_flag=nofix_flag,
        float2int=float2int,
        title=title,
        tag_flag=tag_flag,
        mov_orientation=mov_orientation,
        targ_orientation=targ_orientation,
        int_=int_,
        double_window_size_flag=double_window_size_flag,
        window_scale=window_scale,
        det=det,
        aseg_flag=aseg_flag,
        aparc_flag=aparc_flag,
        wmparc_flag=wmparc_flag,
        gdiagno=gdiagno,
        trans=trans,
        rot=rot,
        conf_targ_flag=conf_targ_flag,
    )
    return tkregister2_cmdl_execute(params, runner)


__all__ = [
    "TKREGISTER2_CMDL_METADATA",
    "Tkregister2CmdlOutputs",
    "tkregister2_cmdl",
    "tkregister2_cmdl_execute",
    "tkregister2_cmdl_params",
]
