# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TKSURFER_METADATA = Metadata(
    id="b02b5bf307c6379fb8e881e8e4042e5a2fb7f3f9.boutiques",
    name="tksurfer",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TksurferParameters = typing.TypedDict('TksurferParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/tksurfer"]],
    "subject_id": str,
    "hemisphere": str,
    "surface_name": str,
    "options": typing.NotRequired[str | None],
})
TksurferParametersTagged = typing.TypedDict('TksurferParametersTagged', {
    "@type": typing.Literal["freesurfer/tksurfer"],
    "subject_id": str,
    "hemisphere": str,
    "surface_name": str,
    "options": typing.NotRequired[str | None],
})


class TksurferOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TksurferParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tksurfer_params(
    subject_id: str,
    hemisphere: str,
    surface_name: str,
    options: str | None = None,
) -> TksurferParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_id: Subject identifier.
        hemisphere: Cortical hemisphere (e.g., lh or rh).
        surface_name: Surface name (e.g., inflated, sphere, white).
        options: Optional flags and parameters.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/tksurfer",
        "subject_id": subject_id,
        "hemisphere": hemisphere,
        "surface_name": surface_name,
    }
    if options is not None:
        params["options"] = options
    return params


def tksurfer_cargs(
    params: TksurferParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tksurfer")
    cargs.append(params.get("subject_id", None))
    cargs.append(params.get("hemisphere", None))
    cargs.append(params.get("surface_name", None))
    if params.get("options", None) is not None:
        cargs.append(params.get("options", None))
    return cargs


def tksurfer_outputs(
    params: TksurferParameters,
    execution: Execution,
) -> TksurferOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TksurferOutputs(
        root=execution.output_file("."),
    )
    return ret


def tksurfer_execute(
    params: TksurferParameters,
    runner: Runner | None = None,
) -> TksurferOutputs:
    """
    tksurfer
    
    3D visualization tool for cortical surface models (part of FreeSurfer).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TksurferOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TKSURFER_METADATA)
    params = execution.params(params)
    cargs = tksurfer_cargs(params, execution)
    ret = tksurfer_outputs(params, execution)
    execution.run(cargs)
    return ret


def tksurfer(
    subject_id: str,
    hemisphere: str,
    surface_name: str,
    options: str | None = None,
    runner: Runner | None = None,
) -> TksurferOutputs:
    """
    tksurfer
    
    3D visualization tool for cortical surface models (part of FreeSurfer).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_id: Subject identifier.
        hemisphere: Cortical hemisphere (e.g., lh or rh).
        surface_name: Surface name (e.g., inflated, sphere, white).
        options: Optional flags and parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TksurferOutputs`).
    """
    params = tksurfer_params(
        subject_id=subject_id,
        hemisphere=hemisphere,
        surface_name=surface_name,
        options=options,
    )
    return tksurfer_execute(params, runner)


__all__ = [
    "TKSURFER_METADATA",
    "TksurferOutputs",
    "tksurfer",
    "tksurfer_execute",
    "tksurfer_params",
]
