# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TRAC_PATHS_METADATA = Metadata(
    id="e6e0a90c1596483e2f89bd23a9b38b773f7b3348.boutiques",
    name="trac-paths",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TracPathsParameters = typing.TypedDict('TracPathsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/trac-paths"]],
    "dmrirc_file": InputPathType,
    "log_file": typing.NotRequired[str | None],
    "no_log": bool,
    "cmd_file": typing.NotRequired[str | None],
    "no_cmd": bool,
    "no_isrunning": bool,
    "umask": typing.NotRequired[str | None],
    "group_id": typing.NotRequired[str | None],
    "allow_core_dump": bool,
    "debug": bool,
    "dontrun": bool,
    "version": bool,
    "help": bool,
})
TracPathsParametersTagged = typing.TypedDict('TracPathsParametersTagged', {
    "@type": typing.Literal["freesurfer/trac-paths"],
    "dmrirc_file": InputPathType,
    "log_file": typing.NotRequired[str | None],
    "no_log": bool,
    "cmd_file": typing.NotRequired[str | None],
    "no_cmd": bool,
    "no_isrunning": bool,
    "umask": typing.NotRequired[str | None],
    "group_id": typing.NotRequired[str | None],
    "allow_core_dump": bool,
    "debug": bool,
    "dontrun": bool,
    "version": bool,
    "help": bool,
})


class TracPathsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TracPathsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def trac_paths_params(
    dmrirc_file: InputPathType,
    log_file: str | None = None,
    no_log: bool = False,
    cmd_file: str | None = None,
    no_cmd: bool = False,
    no_isrunning: bool = False,
    umask: str | None = None,
    group_id: str | None = None,
    allow_core_dump: bool = False,
    debug: bool = False,
    dontrun: bool = False,
    version: bool = False,
    help_: bool = False,
) -> TracPathsParametersTagged:
    """
    Build parameters.
    
    Args:
        dmrirc_file: dmrirc file (see dmrirc.example).
        log_file: Log file, default is trac-all.log in the same directory as\
            dmrirc.
        no_log: Do not save a log file.
        cmd_file: Cmd file, default is trac-all.cmd in the same directory as\
            dmrirc.
        no_cmd: Do not save a cmd file.
        no_isrunning: Do not check whether this subject is currently being\
            processed.
        umask: Set Unix file permission mask (default 002).
        group_id: Check that current group is alpha groupid.
        allow_core_dump: Set coredump limit to unlimited.
        debug: Generate much more output.
        dontrun: Do everything but execute each command.
        version: Print version of this script and exit.
        help_: Print full contents of help.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/trac-paths",
        "dmrirc_file": dmrirc_file,
        "no_log": no_log,
        "no_cmd": no_cmd,
        "no_isrunning": no_isrunning,
        "allow_core_dump": allow_core_dump,
        "debug": debug,
        "dontrun": dontrun,
        "version": version,
        "help": help_,
    }
    if log_file is not None:
        params["log_file"] = log_file
    if cmd_file is not None:
        params["cmd_file"] = cmd_file
    if umask is not None:
        params["umask"] = umask
    if group_id is not None:
        params["group_id"] = group_id
    return params


def trac_paths_cargs(
    params: TracPathsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("trac-paths")
    cargs.extend([
        "-c",
        execution.input_file(params.get("dmrirc_file", None))
    ])
    if params.get("log_file", None) is not None:
        cargs.extend([
            "-log",
            params.get("log_file", None)
        ])
    if params.get("no_log", False):
        cargs.append("-nolog")
    if params.get("cmd_file", None) is not None:
        cargs.extend([
            "-cmd",
            params.get("cmd_file", None)
        ])
    if params.get("no_cmd", False):
        cargs.append("-nocmd")
    if params.get("no_isrunning", False):
        cargs.append("-no-isrunning")
    if params.get("umask", None) is not None:
        cargs.extend([
            "-umask",
            params.get("umask", None)
        ])
    if params.get("group_id", None) is not None:
        cargs.extend([
            "-grp",
            params.get("group_id", None)
        ])
    if params.get("allow_core_dump", False):
        cargs.append("-allowcoredump")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("dontrun", False):
        cargs.append("-dontrun")
    if params.get("version", False):
        cargs.append("-version")
    if params.get("help", False):
        cargs.append("-help")
    return cargs


def trac_paths_outputs(
    params: TracPathsParameters,
    execution: Execution,
) -> TracPathsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TracPathsOutputs(
        root=execution.output_file("."),
    )
    return ret


def trac_paths_execute(
    params: TracPathsParameters,
    runner: Runner | None = None,
) -> TracPathsOutputs:
    """
    trac-paths
    
    Tractography for a single subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TracPathsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TRAC_PATHS_METADATA)
    params = execution.params(params)
    cargs = trac_paths_cargs(params, execution)
    ret = trac_paths_outputs(params, execution)
    execution.run(cargs)
    return ret


def trac_paths(
    dmrirc_file: InputPathType,
    log_file: str | None = None,
    no_log: bool = False,
    cmd_file: str | None = None,
    no_cmd: bool = False,
    no_isrunning: bool = False,
    umask: str | None = None,
    group_id: str | None = None,
    allow_core_dump: bool = False,
    debug: bool = False,
    dontrun: bool = False,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> TracPathsOutputs:
    """
    trac-paths
    
    Tractography for a single subject.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        dmrirc_file: dmrirc file (see dmrirc.example).
        log_file: Log file, default is trac-all.log in the same directory as\
            dmrirc.
        no_log: Do not save a log file.
        cmd_file: Cmd file, default is trac-all.cmd in the same directory as\
            dmrirc.
        no_cmd: Do not save a cmd file.
        no_isrunning: Do not check whether this subject is currently being\
            processed.
        umask: Set Unix file permission mask (default 002).
        group_id: Check that current group is alpha groupid.
        allow_core_dump: Set coredump limit to unlimited.
        debug: Generate much more output.
        dontrun: Do everything but execute each command.
        version: Print version of this script and exit.
        help_: Print full contents of help.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TracPathsOutputs`).
    """
    params = trac_paths_params(
        dmrirc_file=dmrirc_file,
        log_file=log_file,
        no_log=no_log,
        cmd_file=cmd_file,
        no_cmd=no_cmd,
        no_isrunning=no_isrunning,
        umask=umask,
        group_id=group_id,
        allow_core_dump=allow_core_dump,
        debug=debug,
        dontrun=dontrun,
        version=version,
        help_=help_,
    )
    return trac_paths_execute(params, runner)


__all__ = [
    "TRAC_PATHS_METADATA",
    "TracPathsOutputs",
    "trac_paths",
    "trac_paths_execute",
    "trac_paths_params",
]
