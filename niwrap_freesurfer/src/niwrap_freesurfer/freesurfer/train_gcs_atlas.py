# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TRAIN_GCS_ATLAS_METADATA = Metadata(
    id="a1af0dade42962e79b309666f7e6a29a25239ed2.boutiques",
    name="train-gcs-atlas",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TrainGcsAtlasParameters = typing.TypedDict('TrainGcsAtlasParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/train-gcs-atlas"]],
    "manual_parcellation": typing.NotRequired[str | None],
    "subjlist_file": typing.NotRequired[InputPathType | None],
    "left_hemi": bool,
    "right_hemi": bool,
    "hemi_spec": typing.NotRequired[str | None],
    "output_gcs": str,
    "surf_reg": typing.NotRequired[InputPathType | None],
    "color_table": typing.NotRequired[InputPathType | None],
    "exclude_subject": typing.NotRequired[str | None],
    "jackknife_flag": bool,
    "aseg_filename": typing.NotRequired[str | None],
    "threads": typing.NotRequired[float | None],
})
TrainGcsAtlasParametersTagged = typing.TypedDict('TrainGcsAtlasParametersTagged', {
    "@type": typing.Literal["freesurfer/train-gcs-atlas"],
    "manual_parcellation": typing.NotRequired[str | None],
    "subjlist_file": typing.NotRequired[InputPathType | None],
    "left_hemi": bool,
    "right_hemi": bool,
    "hemi_spec": typing.NotRequired[str | None],
    "output_gcs": str,
    "surf_reg": typing.NotRequired[InputPathType | None],
    "color_table": typing.NotRequired[InputPathType | None],
    "exclude_subject": typing.NotRequired[str | None],
    "jackknife_flag": bool,
    "aseg_filename": typing.NotRequired[str | None],
    "threads": typing.NotRequired[float | None],
})


class TrainGcsAtlasOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TrainGcsAtlasParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_gcs_file: OutputPathType
    """Output GCS file produced by training"""


def train_gcs_atlas_params(
    output_gcs: str,
    manual_parcellation: str | None = None,
    subjlist_file: InputPathType | None = None,
    left_hemi: bool = False,
    right_hemi: bool = False,
    hemi_spec: str | None = None,
    surf_reg: InputPathType | None = None,
    color_table: InputPathType | None = None,
    exclude_subject: str | None = None,
    jackknife_flag: bool = False,
    aseg_filename: str | None = None,
    threads: float | None = None,
) -> TrainGcsAtlasParametersTagged:
    """
    Build parameters.
    
    Args:
        output_gcs: Output GCS file.
        manual_parcellation: Manual parcellation; default is aparc_edited.
        subjlist_file: File containing the list of subjects.
        left_hemi: Left hemisphere processing.
        right_hemi: Right hemisphere processing.
        hemi_spec: Specify hemisphere for processing.
        surf_reg: Surface registration file; default is sphere.reg.
        color_table: Color table file.
        exclude_subject: Exclude a subject from the atlas.
        jackknife_flag: Submit a job for each subject excluding it.
        aseg_filename: Aseg filename; default is aseg.auto.mgz.
        threads: Number of threads to use.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/train-gcs-atlas",
        "left_hemi": left_hemi,
        "right_hemi": right_hemi,
        "output_gcs": output_gcs,
        "jackknife_flag": jackknife_flag,
    }
    if manual_parcellation is not None:
        params["manual_parcellation"] = manual_parcellation
    if subjlist_file is not None:
        params["subjlist_file"] = subjlist_file
    if hemi_spec is not None:
        params["hemi_spec"] = hemi_spec
    if surf_reg is not None:
        params["surf_reg"] = surf_reg
    if color_table is not None:
        params["color_table"] = color_table
    if exclude_subject is not None:
        params["exclude_subject"] = exclude_subject
    if aseg_filename is not None:
        params["aseg_filename"] = aseg_filename
    if threads is not None:
        params["threads"] = threads
    return params


def train_gcs_atlas_cargs(
    params: TrainGcsAtlasParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("train-gcs-atlas")
    if params.get("manual_parcellation", None) is not None:
        cargs.extend([
            "--man",
            params.get("manual_parcellation", None)
        ])
    if params.get("subjlist_file", None) is not None:
        cargs.extend([
            "--f",
            execution.input_file(params.get("subjlist_file", None))
        ])
    if params.get("left_hemi", False):
        cargs.append("--lh")
    if params.get("right_hemi", False):
        cargs.append("--rh")
    if params.get("hemi_spec", None) is not None:
        cargs.extend([
            "--hemi",
            params.get("hemi_spec", None)
        ])
    cargs.extend([
        "--o",
        params.get("output_gcs", None)
    ])
    if params.get("surf_reg", None) is not None:
        cargs.extend([
            "--reg",
            execution.input_file(params.get("surf_reg", None))
        ])
    if params.get("color_table", None) is not None:
        cargs.extend([
            "--ctab",
            execution.input_file(params.get("color_table", None))
        ])
    if params.get("exclude_subject", None) is not None:
        cargs.extend([
            "--x",
            params.get("exclude_subject", None)
        ])
    if params.get("jackknife_flag", False):
        cargs.append("--jackknife")
    if params.get("aseg_filename", None) is not None:
        cargs.extend([
            "--aseg",
            params.get("aseg_filename", None)
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    return cargs


def train_gcs_atlas_outputs(
    params: TrainGcsAtlasParameters,
    execution: Execution,
) -> TrainGcsAtlasOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TrainGcsAtlasOutputs(
        root=execution.output_file("."),
        output_gcs_file=execution.output_file(params.get("output_gcs", None)),
    )
    return ret


def train_gcs_atlas_execute(
    params: TrainGcsAtlasParameters,
    runner: Runner | None = None,
) -> TrainGcsAtlasOutputs:
    """
    train-gcs-atlas
    
    Script to train a surface-based gaussian classifier for cortical surface
    parcellation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TrainGcsAtlasOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TRAIN_GCS_ATLAS_METADATA)
    params = execution.params(params)
    cargs = train_gcs_atlas_cargs(params, execution)
    ret = train_gcs_atlas_outputs(params, execution)
    execution.run(cargs)
    return ret


def train_gcs_atlas(
    output_gcs: str,
    manual_parcellation: str | None = None,
    subjlist_file: InputPathType | None = None,
    left_hemi: bool = False,
    right_hemi: bool = False,
    hemi_spec: str | None = None,
    surf_reg: InputPathType | None = None,
    color_table: InputPathType | None = None,
    exclude_subject: str | None = None,
    jackknife_flag: bool = False,
    aseg_filename: str | None = None,
    threads: float | None = None,
    runner: Runner | None = None,
) -> TrainGcsAtlasOutputs:
    """
    train-gcs-atlas
    
    Script to train a surface-based gaussian classifier for cortical surface
    parcellation.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        output_gcs: Output GCS file.
        manual_parcellation: Manual parcellation; default is aparc_edited.
        subjlist_file: File containing the list of subjects.
        left_hemi: Left hemisphere processing.
        right_hemi: Right hemisphere processing.
        hemi_spec: Specify hemisphere for processing.
        surf_reg: Surface registration file; default is sphere.reg.
        color_table: Color table file.
        exclude_subject: Exclude a subject from the atlas.
        jackknife_flag: Submit a job for each subject excluding it.
        aseg_filename: Aseg filename; default is aseg.auto.mgz.
        threads: Number of threads to use.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TrainGcsAtlasOutputs`).
    """
    params = train_gcs_atlas_params(
        manual_parcellation=manual_parcellation,
        subjlist_file=subjlist_file,
        left_hemi=left_hemi,
        right_hemi=right_hemi,
        hemi_spec=hemi_spec,
        output_gcs=output_gcs,
        surf_reg=surf_reg,
        color_table=color_table,
        exclude_subject=exclude_subject,
        jackknife_flag=jackknife_flag,
        aseg_filename=aseg_filename,
        threads=threads,
    )
    return train_gcs_atlas_execute(params, runner)


__all__ = [
    "TRAIN_GCS_ATLAS_METADATA",
    "TrainGcsAtlasOutputs",
    "train_gcs_atlas",
    "train_gcs_atlas_execute",
    "train_gcs_atlas_params",
]
