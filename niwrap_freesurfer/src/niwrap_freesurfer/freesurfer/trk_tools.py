# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TRK_TOOLS_METADATA = Metadata(
    id="113c2ab5e4181b985d590456b9c41a26b1525c4f.boutiques",
    name="trk_tools",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


TrkToolsParameters = typing.TypedDict('TrkToolsParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/trk_tools"]],
    "reference_image": InputPathType,
    "input_trk": InputPathType,
    "output_trk": typing.NotRequired[str | None],
    "output_image": typing.NotRequired[str | None],
    "update_header": bool,
    "output_vtk": typing.NotRequired[str | None],
})
TrkToolsParametersTagged = typing.TypedDict('TrkToolsParametersTagged', {
    "@type": typing.Literal["freesurfer/trk_tools"],
    "reference_image": InputPathType,
    "input_trk": InputPathType,
    "output_trk": typing.NotRequired[str | None],
    "output_image": typing.NotRequired[str | None],
    "update_header": bool,
    "output_vtk": typing.NotRequired[str | None],
})


class TrkToolsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TrkToolsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    trk_output_file: OutputPathType | None
    """The processed output TRK file"""
    image_output_file: OutputPathType | None
    """Image exported from TRK file"""
    vtk_output_file: OutputPathType | None
    """VTK file containing streamlines"""


def trk_tools_params(
    reference_image: InputPathType,
    input_trk: InputPathType,
    output_trk: str | None = None,
    output_image: str | None = None,
    update_header: bool = False,
    output_vtk: str | None = None,
) -> TrkToolsParametersTagged:
    """
    Build parameters.
    
    Args:
        reference_image: Reference image for TRK processing.
        input_trk: Input TRK file to be processed.
        output_trk: Output TRK file.
        output_image: Export TRK into an image.
        update_header: Update TRK header with reference image.
        output_vtk: Output streamlines in VTK format.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/trk_tools",
        "reference_image": reference_image,
        "input_trk": input_trk,
        "update_header": update_header,
    }
    if output_trk is not None:
        params["output_trk"] = output_trk
    if output_image is not None:
        params["output_image"] = output_image
    if output_vtk is not None:
        params["output_vtk"] = output_vtk
    return params


def trk_tools_cargs(
    params: TrkToolsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("trk_tools")
    cargs.extend([
        "-i",
        execution.input_file(params.get("reference_image", None))
    ])
    cargs.extend([
        "-f",
        execution.input_file(params.get("input_trk", None))
    ])
    if params.get("output_trk", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_trk", None)
        ])
    if params.get("output_image", None) is not None:
        cargs.extend([
            "-e",
            params.get("output_image", None)
        ])
    if params.get("update_header", False):
        cargs.append("-u")
    if params.get("output_vtk", None) is not None:
        cargs.extend([
            "-v",
            params.get("output_vtk", None)
        ])
    return cargs


def trk_tools_outputs(
    params: TrkToolsParameters,
    execution: Execution,
) -> TrkToolsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TrkToolsOutputs(
        root=execution.output_file("."),
        trk_output_file=execution.output_file(params.get("output_trk", None)) if (params.get("output_trk") is not None) else None,
        image_output_file=execution.output_file(params.get("output_image", None)) if (params.get("output_image") is not None) else None,
        vtk_output_file=execution.output_file(params.get("output_vtk", None)) if (params.get("output_vtk") is not None) else None,
    )
    return ret


def trk_tools_execute(
    params: TrkToolsParameters,
    runner: Runner | None = None,
) -> TrkToolsOutputs:
    """
    trk_tools
    
    Tool for processing TRK files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TrkToolsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TRK_TOOLS_METADATA)
    params = execution.params(params)
    cargs = trk_tools_cargs(params, execution)
    ret = trk_tools_outputs(params, execution)
    execution.run(cargs)
    return ret


def trk_tools(
    reference_image: InputPathType,
    input_trk: InputPathType,
    output_trk: str | None = None,
    output_image: str | None = None,
    update_header: bool = False,
    output_vtk: str | None = None,
    runner: Runner | None = None,
) -> TrkToolsOutputs:
    """
    trk_tools
    
    Tool for processing TRK files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        reference_image: Reference image for TRK processing.
        input_trk: Input TRK file to be processed.
        output_trk: Output TRK file.
        output_image: Export TRK into an image.
        update_header: Update TRK header with reference image.
        output_vtk: Output streamlines in VTK format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TrkToolsOutputs`).
    """
    params = trk_tools_params(
        reference_image=reference_image,
        input_trk=input_trk,
        output_trk=output_trk,
        output_image=output_image,
        update_header=update_header,
        output_vtk=output_vtk,
    )
    return trk_tools_execute(params, runner)


__all__ = [
    "TRK_TOOLS_METADATA",
    "TrkToolsOutputs",
    "trk_tools",
    "trk_tools_execute",
    "trk_tools_params",
]
