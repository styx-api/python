# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

UNPACK_IMA1_TCL_METADATA = Metadata(
    id="879dfc4e2c1cd294a8c370964cc378f77296eb2a.boutiques",
    name="unpack_ima1.tcl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


UnpackIma1TclParameters = typing.TypedDict('UnpackIma1TclParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/unpack_ima1.tcl"]],
    "input_directory": str,
    "output_directory": str,
})
UnpackIma1TclParametersTagged = typing.TypedDict('UnpackIma1TclParametersTagged', {
    "@type": typing.Literal["freesurfer/unpack_ima1.tcl"],
    "input_directory": str,
    "output_directory": str,
})


class UnpackIma1TclOutputs(typing.NamedTuple):
    """
    Output object returned when calling `UnpackIma1TclParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_directory: OutputPathType
    """Output directory containing unpacked files"""


def unpack_ima1_tcl_params(
    input_directory: str,
    output_directory: str,
) -> UnpackIma1TclParametersTagged:
    """
    Build parameters.
    
    Args:
        input_directory: The directory containing the input files to be\
            unpacked.
        output_directory: The directory where the unpacked files will be\
            stored.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/unpack_ima1.tcl",
        "input_directory": input_directory,
        "output_directory": output_directory,
    }
    return params


def unpack_ima1_tcl_cargs(
    params: UnpackIma1TclParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("unpack_ima1.tcl")
    cargs.append(params.get("input_directory", None))
    cargs.append(params.get("output_directory", None))
    return cargs


def unpack_ima1_tcl_outputs(
    params: UnpackIma1TclParameters,
    execution: Execution,
) -> UnpackIma1TclOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = UnpackIma1TclOutputs(
        root=execution.output_file("."),
        output_directory=execution.output_file(params.get("output_directory", None)),
    )
    return ret


def unpack_ima1_tcl_execute(
    params: UnpackIma1TclParameters,
    runner: Runner | None = None,
) -> UnpackIma1TclOutputs:
    """
    unpack_ima1.tcl
    
    A tool for unpacking images using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackIma1TclOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UNPACK_IMA1_TCL_METADATA)
    params = execution.params(params)
    cargs = unpack_ima1_tcl_cargs(params, execution)
    ret = unpack_ima1_tcl_outputs(params, execution)
    execution.run(cargs)
    return ret


def unpack_ima1_tcl(
    input_directory: str,
    output_directory: str,
    runner: Runner | None = None,
) -> UnpackIma1TclOutputs:
    """
    unpack_ima1.tcl
    
    A tool for unpacking images using FreeSurfer.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_directory: The directory containing the input files to be\
            unpacked.
        output_directory: The directory where the unpacked files will be\
            stored.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackIma1TclOutputs`).
    """
    params = unpack_ima1_tcl_params(
        input_directory=input_directory,
        output_directory=output_directory,
    )
    return unpack_ima1_tcl_execute(params, runner)


__all__ = [
    "UNPACK_IMA1_TCL_METADATA",
    "UnpackIma1TclOutputs",
    "unpack_ima1_tcl",
    "unpack_ima1_tcl_execute",
    "unpack_ima1_tcl_params",
]
