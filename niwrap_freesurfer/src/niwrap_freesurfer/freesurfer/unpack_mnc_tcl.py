# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

UNPACK_MNC_TCL_METADATA = Metadata(
    id="94dabaf49b0dbd76599a446af7424766e944571e.boutiques",
    name="unpack_mnc.tcl",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


UnpackMncTclParameters = typing.TypedDict('UnpackMncTclParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/unpack_mnc.tcl"]],
    "verbose": bool,
    "output_dir": typing.NotRequired[str | None],
    "input_file": typing.NotRequired[InputPathType | None],
})
UnpackMncTclParametersTagged = typing.TypedDict('UnpackMncTclParametersTagged', {
    "@type": typing.Literal["freesurfer/unpack_mnc.tcl"],
    "verbose": bool,
    "output_dir": typing.NotRequired[str | None],
    "input_file": typing.NotRequired[InputPathType | None],
})


class UnpackMncTclOutputs(typing.NamedTuple):
    """
    Output object returned when calling `UnpackMncTclParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    unpacked_file: OutputPathType | None
    """Unpacked output MINC file"""


def unpack_mnc_tcl_params(
    verbose: bool = False,
    output_dir: str | None = None,
    input_file: InputPathType | None = None,
) -> UnpackMncTclParametersTagged:
    """
    Build parameters.
    
    Args:
        verbose: Verbose output messages.
        output_dir: Output directory for unpacked files.
        input_file: Specify a custom input file for unpacking.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/unpack_mnc.tcl",
        "verbose": verbose,
    }
    if output_dir is not None:
        params["output_dir"] = output_dir
    if input_file is not None:
        params["input_file"] = input_file
    return params


def unpack_mnc_tcl_cargs(
    params: UnpackMncTclParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("unpack_mnc.tcl")
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_dir", None)
        ])
    if params.get("input_file", None) is not None:
        cargs.extend([
            "-i",
            execution.input_file(params.get("input_file", None))
        ])
    return cargs


def unpack_mnc_tcl_outputs(
    params: UnpackMncTclParameters,
    execution: Execution,
) -> UnpackMncTclOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = UnpackMncTclOutputs(
        root=execution.output_file("."),
        unpacked_file=execution.output_file(params.get("output_dir", None) + "/unpacked_data.mnc") if (params.get("output_dir") is not None) else None,
    )
    return ret


def unpack_mnc_tcl_execute(
    params: UnpackMncTclParameters,
    runner: Runner | None = None,
) -> UnpackMncTclOutputs:
    """
    unpack_mnc.tcl
    
    A tool for unpacking MINC format images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackMncTclOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UNPACK_MNC_TCL_METADATA)
    params = execution.params(params)
    cargs = unpack_mnc_tcl_cargs(params, execution)
    ret = unpack_mnc_tcl_outputs(params, execution)
    execution.run(cargs)
    return ret


def unpack_mnc_tcl(
    verbose: bool = False,
    output_dir: str | None = None,
    input_file: InputPathType | None = None,
    runner: Runner | None = None,
) -> UnpackMncTclOutputs:
    """
    unpack_mnc.tcl
    
    A tool for unpacking MINC format images.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        verbose: Verbose output messages.
        output_dir: Output directory for unpacked files.
        input_file: Specify a custom input file for unpacking.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackMncTclOutputs`).
    """
    params = unpack_mnc_tcl_params(
        verbose=verbose,
        output_dir=output_dir,
        input_file=input_file,
    )
    return unpack_mnc_tcl_execute(params, runner)


__all__ = [
    "UNPACK_MNC_TCL_METADATA",
    "UnpackMncTclOutputs",
    "unpack_mnc_tcl",
    "unpack_mnc_tcl_execute",
    "unpack_mnc_tcl_params",
]
