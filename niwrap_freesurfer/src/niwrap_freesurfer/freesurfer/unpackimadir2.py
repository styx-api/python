# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

UNPACKIMADIR2_METADATA = Metadata(
    id="a9223f4f9bff668d7fd030c3934c5982e5b81aa3.boutiques",
    name="unpackimadir2",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


Unpackimadir2Parameters = typing.TypedDict('Unpackimadir2Parameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/unpackimadir2"]],
    "directory": InputPathType,
})
Unpackimadir2ParametersTagged = typing.TypedDict('Unpackimadir2ParametersTagged', {
    "@type": typing.Literal["freesurfer/unpackimadir2"],
    "directory": InputPathType,
})


class Unpackimadir2Outputs(typing.NamedTuple):
    """
    Output object returned when calling `Unpackimadir2Parameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def unpackimadir2_params(
    directory: InputPathType,
) -> Unpackimadir2ParametersTagged:
    """
    Build parameters.
    
    Args:
        directory: Image directory to unpack.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/unpackimadir2",
        "directory": directory,
    }
    return params


def unpackimadir2_cargs(
    params: Unpackimadir2Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("unpackimadir2")
    cargs.append(execution.input_file(params.get("directory", None)))
    return cargs


def unpackimadir2_outputs(
    params: Unpackimadir2Parameters,
    execution: Execution,
) -> Unpackimadir2Outputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Unpackimadir2Outputs(
        root=execution.output_file("."),
    )
    return ret


def unpackimadir2_execute(
    params: Unpackimadir2Parameters,
    runner: Runner | None = None,
) -> Unpackimadir2Outputs:
    """
    unpackimadir2
    
    Tool to unpack image directories, from FreeSurfer suite.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Unpackimadir2Outputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UNPACKIMADIR2_METADATA)
    params = execution.params(params)
    cargs = unpackimadir2_cargs(params, execution)
    ret = unpackimadir2_outputs(params, execution)
    execution.run(cargs)
    return ret


def unpackimadir2(
    directory: InputPathType,
    runner: Runner | None = None,
) -> Unpackimadir2Outputs:
    """
    unpackimadir2
    
    Tool to unpack image directories, from FreeSurfer suite.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        directory: Image directory to unpack.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Unpackimadir2Outputs`).
    """
    params = unpackimadir2_params(
        directory=directory,
    )
    return unpackimadir2_execute(params, runner)


__all__ = [
    "UNPACKIMADIR2_METADATA",
    "Unpackimadir2Outputs",
    "unpackimadir2",
    "unpackimadir2_execute",
    "unpackimadir2_params",
]
