# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

UNPACKMINCDIR_METADATA = Metadata(
    id="7110e5930638ffed1d35700999de9827614bdb2e.boutiques",
    name="unpackmincdir",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


UnpackmincdirParameters = typing.TypedDict('UnpackmincdirParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/unpackmincdir"]],
    "source_directory": str,
    "target_directory": str,
    "scan_sequence_info": typing.NotRequired[str | None],
    "functional_sequence": typing.NotRequired[str | None],
    "functional_subdirectory": typing.NotRequired[str | None],
    "minc_only": bool,
    "no_copy": bool,
    "umask": typing.NotRequired[str | None],
})
UnpackmincdirParametersTagged = typing.TypedDict('UnpackmincdirParametersTagged', {
    "@type": typing.Literal["freesurfer/unpackmincdir"],
    "source_directory": str,
    "target_directory": str,
    "scan_sequence_info": typing.NotRequired[str | None],
    "functional_sequence": typing.NotRequired[str | None],
    "functional_subdirectory": typing.NotRequired[str | None],
    "minc_only": bool,
    "no_copy": bool,
    "umask": typing.NotRequired[str | None],
})


class UnpackmincdirOutputs(typing.NamedTuple):
    """
    Output object returned when calling `UnpackmincdirParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def unpackmincdir_params(
    source_directory: str,
    target_directory: str,
    scan_sequence_info: str | None = None,
    functional_sequence: str | None = None,
    functional_subdirectory: str | None = None,
    minc_only: bool = False,
    no_copy: bool = False,
    umask: str | None = None,
) -> UnpackmincdirParametersTagged:
    """
    Build parameters.
    
    Args:
        source_directory: Source directory containing the MINC files.
        target_directory: Target directory to unpack the contents to.
        scan_sequence_info: Scan sequence directives file, e.g.,\
            freesurfer_alpha/scanseq.info.
        functional_sequence: Use seqname for functionals (example:\
            ep2d_fid_ts_20b2604).
        functional_subdirectory: Functional subdirectory, e.g., bold.
        minc_only: Do not unpack into bshorts.
        no_copy: Create directories but do not copy/convert data.
        umask: Unix file permission mask (default: 22).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/unpackmincdir",
        "source_directory": source_directory,
        "target_directory": target_directory,
        "minc_only": minc_only,
        "no_copy": no_copy,
    }
    if scan_sequence_info is not None:
        params["scan_sequence_info"] = scan_sequence_info
    if functional_sequence is not None:
        params["functional_sequence"] = functional_sequence
    if functional_subdirectory is not None:
        params["functional_subdirectory"] = functional_subdirectory
    if umask is not None:
        params["umask"] = umask
    return params


def unpackmincdir_cargs(
    params: UnpackmincdirParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("unpackmincdir")
    cargs.extend([
        "-src",
        params.get("source_directory", None)
    ])
    cargs.extend([
        "-targ",
        params.get("target_directory", None)
    ])
    if params.get("scan_sequence_info", None) is not None:
        cargs.extend([
            "-scanseqinfo",
            params.get("scan_sequence_info", None)
        ])
    if params.get("functional_sequence", None) is not None:
        cargs.extend([
            "-funcseq",
            params.get("functional_sequence", None)
        ])
    if params.get("functional_subdirectory", None) is not None:
        cargs.extend([
            "-fsd",
            params.get("functional_subdirectory", None)
        ])
    if params.get("minc_only", False):
        cargs.append("-minconly")
    if params.get("no_copy", False):
        cargs.append("-nocopy")
    if params.get("umask", None) is not None:
        cargs.extend([
            "-umask",
            params.get("umask", None)
        ])
    return cargs


def unpackmincdir_outputs(
    params: UnpackmincdirParameters,
    execution: Execution,
) -> UnpackmincdirOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = UnpackmincdirOutputs(
        root=execution.output_file("."),
    )
    return ret


def unpackmincdir_execute(
    params: UnpackmincdirParameters,
    runner: Runner | None = None,
) -> UnpackmincdirOutputs:
    """
    unpackmincdir
    
    Tool for unpacking directories with MINC files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackmincdirOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(UNPACKMINCDIR_METADATA)
    params = execution.params(params)
    cargs = unpackmincdir_cargs(params, execution)
    ret = unpackmincdir_outputs(params, execution)
    execution.run(cargs)
    return ret


def unpackmincdir(
    source_directory: str,
    target_directory: str,
    scan_sequence_info: str | None = None,
    functional_sequence: str | None = None,
    functional_subdirectory: str | None = None,
    minc_only: bool = False,
    no_copy: bool = False,
    umask: str | None = None,
    runner: Runner | None = None,
) -> UnpackmincdirOutputs:
    """
    unpackmincdir
    
    Tool for unpacking directories with MINC files.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        source_directory: Source directory containing the MINC files.
        target_directory: Target directory to unpack the contents to.
        scan_sequence_info: Scan sequence directives file, e.g.,\
            freesurfer_alpha/scanseq.info.
        functional_sequence: Use seqname for functionals (example:\
            ep2d_fid_ts_20b2604).
        functional_subdirectory: Functional subdirectory, e.g., bold.
        minc_only: Do not unpack into bshorts.
        no_copy: Create directories but do not copy/convert data.
        umask: Unix file permission mask (default: 22).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `UnpackmincdirOutputs`).
    """
    params = unpackmincdir_params(
        source_directory=source_directory,
        target_directory=target_directory,
        scan_sequence_info=scan_sequence_info,
        functional_sequence=functional_sequence,
        functional_subdirectory=functional_subdirectory,
        minc_only=minc_only,
        no_copy=no_copy,
        umask=umask,
    )
    return unpackmincdir_execute(params, runner)


__all__ = [
    "UNPACKMINCDIR_METADATA",
    "UnpackmincdirOutputs",
    "unpackmincdir",
    "unpackmincdir_execute",
    "unpackmincdir_params",
]
