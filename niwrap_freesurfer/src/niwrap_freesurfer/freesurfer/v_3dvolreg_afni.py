# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_3DVOLREG_AFNI_METADATA = Metadata(
    id="f05024124f93d18d98ace7dc462475521ea11012.boutiques",
    name="3dvolreg.afni",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


V3dvolregAfniParameters = typing.TypedDict('V3dvolregAfniParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/3dvolreg.afni"]],
    "input_file": InputPathType,
    "output_file": str,
    "options": typing.NotRequired[str | None],
})
V3dvolregAfniParametersTagged = typing.TypedDict('V3dvolregAfniParametersTagged', {
    "@type": typing.Literal["freesurfer/3dvolreg.afni"],
    "input_file": InputPathType,
    "output_file": str,
    "options": typing.NotRequired[str | None],
})


class V3dvolregAfniOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V3dvolregAfniParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    registered_output: OutputPathType
    """Output of the registered dataset"""


def v_3dvolreg_afni_params(
    input_file: InputPathType,
    output_file: str,
    options: str | None = None,
) -> V3dvolregAfniParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input dataset to be registered.
        output_file: Output dataset with applied registration.
        options: Options for 3dvolreg (consult AFNI documentation for details).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/3dvolreg.afni",
        "input_file": input_file,
        "output_file": output_file,
    }
    if options is not None:
        params["options"] = options
    return params


def v_3dvolreg_afni_cargs(
    params: V3dvolregAfniParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("3dvolreg.afni")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    if params.get("options", None) is not None:
        cargs.append(params.get("options", None))
    return cargs


def v_3dvolreg_afni_outputs(
    params: V3dvolregAfniParameters,
    execution: Execution,
) -> V3dvolregAfniOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V3dvolregAfniOutputs(
        root=execution.output_file("."),
        registered_output=execution.output_file(params.get("output_file", None) + ".nii"),
    )
    return ret


def v_3dvolreg_afni_execute(
    params: V3dvolregAfniParameters,
    runner: Runner | None = None,
) -> V3dvolregAfniOutputs:
    """
    3dvolreg.afni
    
    AFNI program for volume registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dvolregAfniOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_3DVOLREG_AFNI_METADATA)
    params = execution.params(params)
    cargs = v_3dvolreg_afni_cargs(params, execution)
    ret = v_3dvolreg_afni_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_3dvolreg_afni(
    input_file: InputPathType,
    output_file: str,
    options: str | None = None,
    runner: Runner | None = None,
) -> V3dvolregAfniOutputs:
    """
    3dvolreg.afni
    
    AFNI program for volume registration.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input dataset to be registered.
        output_file: Output dataset with applied registration.
        options: Options for 3dvolreg (consult AFNI documentation for details).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V3dvolregAfniOutputs`).
    """
    params = v_3dvolreg_afni_params(
        input_file=input_file,
        output_file=output_file,
        options=options,
    )
    return v_3dvolreg_afni_execute(params, runner)


__all__ = [
    "V3dvolregAfniOutputs",
    "V_3DVOLREG_AFNI_METADATA",
    "v_3dvolreg_afni",
    "v_3dvolreg_afni_execute",
    "v_3dvolreg_afni_params",
]
