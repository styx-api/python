# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VENTFIX_METADATA = Metadata(
    id="06158b94512724cbe2e29b5e7e1c80b3bc5380d4.boutiques",
    name="ventfix",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


VentfixParameters = typing.TypedDict('VentfixParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/ventfix"]],
    "subject_dir": str,
    "option1": typing.NotRequired[str | None],
})
VentfixParametersTagged = typing.TypedDict('VentfixParametersTagged', {
    "@type": typing.Literal["freesurfer/ventfix"],
    "subject_dir": str,
    "option1": typing.NotRequired[str | None],
})


class VentfixOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VentfixParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fixed_ventricles: OutputPathType
    """Output image with fixed ventricles"""


def ventfix_params(
    subject_dir: str,
    option1: str | None = None,
) -> VentfixParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_dir: Path to the subject's directory containing MRI scans.
        option1: Description of option 1.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/ventfix",
        "subject_dir": subject_dir,
    }
    if option1 is not None:
        params["option1"] = option1
    return params


def ventfix_cargs(
    params: VentfixParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("ventfix")
    cargs.append(params.get("subject_dir", None))
    if params.get("option1", None) is not None:
        cargs.extend([
            "--option1",
            params.get("option1", None)
        ])
    return cargs


def ventfix_outputs(
    params: VentfixParameters,
    execution: Execution,
) -> VentfixOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VentfixOutputs(
        root=execution.output_file("."),
        fixed_ventricles=execution.output_file(params.get("subject_dir", None) + "/fixed_ventricles.nii.gz"),
    )
    return ret


def ventfix_execute(
    params: VentfixParameters,
    runner: Runner | None = None,
) -> VentfixOutputs:
    """
    ventfix
    
    Tool for fixing ventricles in MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VentfixOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VENTFIX_METADATA)
    params = execution.params(params)
    cargs = ventfix_cargs(params, execution)
    ret = ventfix_outputs(params, execution)
    execution.run(cargs)
    return ret


def ventfix(
    subject_dir: str,
    option1: str | None = None,
    runner: Runner | None = None,
) -> VentfixOutputs:
    """
    ventfix
    
    Tool for fixing ventricles in MRI scans.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject_dir: Path to the subject's directory containing MRI scans.
        option1: Description of option 1.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VentfixOutputs`).
    """
    params = ventfix_params(
        subject_dir=subject_dir,
        option1=option1,
    )
    return ventfix_execute(params, runner)


__all__ = [
    "VENTFIX_METADATA",
    "VentfixOutputs",
    "ventfix",
    "ventfix_execute",
    "ventfix_params",
]
