# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VERTEXVOL_METADATA = Metadata(
    id="8baaecedc11fde7b13401f036b6eb18a6aa86e88.boutiques",
    name="vertexvol",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


VertexvolParameters = typing.TypedDict('VertexvolParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/vertexvol"]],
    "subject": str,
    "left_hemisphere": bool,
    "right_hemisphere": bool,
    "output_file": typing.NotRequired[str | None],
    "use_th3": bool,
    "no_th3": bool,
})
VertexvolParametersTagged = typing.TypedDict('VertexvolParametersTagged', {
    "@type": typing.Literal["freesurfer/vertexvol"],
    "subject": str,
    "left_hemisphere": bool,
    "right_hemisphere": bool,
    "output_file": typing.NotRequired[str | None],
    "use_th3": bool,
    "no_th3": bool,
})


class VertexvolOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VertexvolParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_volume_file: OutputPathType | None
    """Output file containing vertex-wise volume"""


def vertexvol_params(
    subject: str,
    left_hemisphere: bool = False,
    right_hemisphere: bool = False,
    output_file: str | None = None,
    use_th3: bool = False,
    no_th3: bool = False,
) -> VertexvolParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject identifier.
        left_hemisphere: Select left hemisphere.
        right_hemisphere: Select right hemisphere.
        output_file: Output file name, default is ?h.volume.
        use_th3: Use TH3 method for computation.
        no_th3: Don't use TH3 method for computation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/vertexvol",
        "subject": subject,
        "left_hemisphere": left_hemisphere,
        "right_hemisphere": right_hemisphere,
        "use_th3": use_th3,
        "no_th3": no_th3,
    }
    if output_file is not None:
        params["output_file"] = output_file
    return params


def vertexvol_cargs(
    params: VertexvolParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("vertexvol")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    if params.get("left_hemisphere", False):
        cargs.append("--lh")
    if params.get("right_hemisphere", False):
        cargs.append("--rh")
    if params.get("output_file", None) is not None:
        cargs.extend([
            "--o",
            params.get("output_file", None)
        ])
    if params.get("use_th3", False):
        cargs.append("--th3")
    if params.get("no_th3", False):
        cargs.append("--no-th3")
    return cargs


def vertexvol_outputs(
    params: VertexvolParameters,
    execution: Execution,
) -> VertexvolOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VertexvolOutputs(
        root=execution.output_file("."),
        output_volume_file=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def vertexvol_execute(
    params: VertexvolParameters,
    runner: Runner | None = None,
) -> VertexvolOutputs:
    """
    vertexvol
    
    Computes vertex-wise volume (and mid.area).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VertexvolOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VERTEXVOL_METADATA)
    params = execution.params(params)
    cargs = vertexvol_cargs(params, execution)
    ret = vertexvol_outputs(params, execution)
    execution.run(cargs)
    return ret


def vertexvol(
    subject: str,
    left_hemisphere: bool = False,
    right_hemisphere: bool = False,
    output_file: str | None = None,
    use_th3: bool = False,
    no_th3: bool = False,
    runner: Runner | None = None,
) -> VertexvolOutputs:
    """
    vertexvol
    
    Computes vertex-wise volume (and mid.area).
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject identifier.
        left_hemisphere: Select left hemisphere.
        right_hemisphere: Select right hemisphere.
        output_file: Output file name, default is ?h.volume.
        use_th3: Use TH3 method for computation.
        no_th3: Don't use TH3 method for computation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VertexvolOutputs`).
    """
    params = vertexvol_params(
        subject=subject,
        left_hemisphere=left_hemisphere,
        right_hemisphere=right_hemisphere,
        output_file=output_file,
        use_th3=use_th3,
        no_th3=no_th3,
    )
    return vertexvol_execute(params, runner)


__all__ = [
    "VERTEXVOL_METADATA",
    "VertexvolOutputs",
    "vertexvol",
    "vertexvol_execute",
    "vertexvol_params",
]
