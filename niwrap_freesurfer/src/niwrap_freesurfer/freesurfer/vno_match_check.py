# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VNO_MATCH_CHECK_METADATA = Metadata(
    id="9a3a5462fe2518cc3bd6acf304f950d94e93ceac.boutiques",
    name="vno_match_check",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


VnoMatchCheckParameters = typing.TypedDict('VnoMatchCheckParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/vno_match_check"]],
    "subjid": str,
    "debug": bool,
    "right_hemi": bool,
    "left_hemi": bool,
})
VnoMatchCheckParametersTagged = typing.TypedDict('VnoMatchCheckParametersTagged', {
    "@type": typing.Literal["freesurfer/vno_match_check"],
    "subjid": str,
    "debug": bool,
    "right_hemi": bool,
    "left_hemi": bool,
})


class VnoMatchCheckOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VnoMatchCheckParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def vno_match_check_params(
    subjid: str,
    debug: bool = False,
    right_hemi: bool = False,
    left_hemi: bool = False,
) -> VnoMatchCheckParametersTagged:
    """
    Build parameters.
    
    Args:
        subjid: Subject ID for which the vertex number check is performed.
        debug: Prints progress text.
        right_hemi: Checks only the right hemisphere.
        left_hemi: Checks only the left hemisphere.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/vno_match_check",
        "subjid": subjid,
        "debug": debug,
        "right_hemi": right_hemi,
        "left_hemi": left_hemi,
    }
    return params


def vno_match_check_cargs(
    params: VnoMatchCheckParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("vno_match_check")
    cargs.append(params.get("subjid", None))
    if params.get("debug", False):
        cargs.append("debug")
    if params.get("right_hemi", False):
        cargs.append("rh")
    if params.get("left_hemi", False):
        cargs.append("lh")
    return cargs


def vno_match_check_outputs(
    params: VnoMatchCheckParameters,
    execution: Execution,
) -> VnoMatchCheckOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VnoMatchCheckOutputs(
        root=execution.output_file("."),
    )
    return ret


def vno_match_check_execute(
    params: VnoMatchCheckParameters,
    runner: Runner | None = None,
) -> VnoMatchCheckOutputs:
    """
    vno_match_check
    
    Checks that all surfaces and surface data files for a subject have the same
    number of vertices.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VnoMatchCheckOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VNO_MATCH_CHECK_METADATA)
    params = execution.params(params)
    cargs = vno_match_check_cargs(params, execution)
    ret = vno_match_check_outputs(params, execution)
    execution.run(cargs)
    return ret


def vno_match_check(
    subjid: str,
    debug: bool = False,
    right_hemi: bool = False,
    left_hemi: bool = False,
    runner: Runner | None = None,
) -> VnoMatchCheckOutputs:
    """
    vno_match_check
    
    Checks that all surfaces and surface data files for a subject have the same
    number of vertices.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subjid: Subject ID for which the vertex number check is performed.
        debug: Prints progress text.
        right_hemi: Checks only the right hemisphere.
        left_hemi: Checks only the left hemisphere.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VnoMatchCheckOutputs`).
    """
    params = vno_match_check_params(
        subjid=subjid,
        debug=debug,
        right_hemi=right_hemi,
        left_hemi=left_hemi,
    )
    return vno_match_check_execute(params, runner)


__all__ = [
    "VNO_MATCH_CHECK_METADATA",
    "VnoMatchCheckOutputs",
    "vno_match_check",
    "vno_match_check_execute",
    "vno_match_check_params",
]
