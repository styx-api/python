# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

WFILEMASK_METADATA = Metadata(
    id="fc866e920f78fa34baf268cd3a0920066c7272ec.boutiques",
    name="wfilemask",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


WfilemaskParameters = typing.TypedDict('WfilemaskParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/wfilemask"]],
    "w_file": InputPathType,
    "label_file": InputPathType,
    "output_file": str,
    "permission_mask": typing.NotRequired[str | None],
    "help_flag": bool,
    "version_flag": bool,
})
WfilemaskParametersTagged = typing.TypedDict('WfilemaskParametersTagged', {
    "@type": typing.Literal["freesurfer/wfilemask"],
    "w_file": InputPathType,
    "label_file": InputPathType,
    "output_file": str,
    "permission_mask": typing.NotRequired[str | None],
    "help_flag": bool,
    "version_flag": bool,
})


class WfilemaskOutputs(typing.NamedTuple):
    """
    Output object returned when calling `WfilemaskParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_w_file: OutputPathType
    """Output file with specified label regions zeroed out"""


def wfilemask_params(
    w_file: InputPathType,
    label_file: InputPathType,
    output_file: str,
    permission_mask: str | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
) -> WfilemaskParametersTagged:
    """
    Build parameters.
    
    Args:
        w_file: Input w file.
        label_file: Label file to use as a mask.
        output_file: Output w file.
        permission_mask: Set Unix file permission mask.
        help_flag: Display help message and exit.
        version_flag: Print version and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/wfilemask",
        "w_file": w_file,
        "label_file": label_file,
        "output_file": output_file,
        "help_flag": help_flag,
        "version_flag": version_flag,
    }
    if permission_mask is not None:
        params["permission_mask"] = permission_mask
    return params


def wfilemask_cargs(
    params: WfilemaskParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wfilemask")
    cargs.extend([
        "-w",
        execution.input_file(params.get("w_file", None))
    ])
    cargs.extend([
        "-l",
        execution.input_file(params.get("label_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    if params.get("permission_mask", None) is not None:
        cargs.extend([
            "-umask",
            params.get("permission_mask", None)
        ])
    if params.get("help_flag", False):
        cargs.append("-help")
    if params.get("version_flag", False):
        cargs.append("-version")
    return cargs


def wfilemask_outputs(
    params: WfilemaskParameters,
    execution: Execution,
) -> WfilemaskOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = WfilemaskOutputs(
        root=execution.output_file("."),
        output_w_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def wfilemask_execute(
    params: WfilemaskParameters,
    runner: Runner | None = None,
) -> WfilemaskOutputs:
    """
    wfilemask
    
    Zero-out regions of a surface value file (.w file) using a label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `WfilemaskOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(WFILEMASK_METADATA)
    params = execution.params(params)
    cargs = wfilemask_cargs(params, execution)
    ret = wfilemask_outputs(params, execution)
    execution.run(cargs)
    return ret


def wfilemask(
    w_file: InputPathType,
    label_file: InputPathType,
    output_file: str,
    permission_mask: str | None = None,
    help_flag: bool = False,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> WfilemaskOutputs:
    """
    wfilemask
    
    Zero-out regions of a surface value file (.w file) using a label.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        w_file: Input w file.
        label_file: Label file to use as a mask.
        output_file: Output w file.
        permission_mask: Set Unix file permission mask.
        help_flag: Display help message and exit.
        version_flag: Print version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `WfilemaskOutputs`).
    """
    params = wfilemask_params(
        w_file=w_file,
        label_file=label_file,
        output_file=output_file,
        permission_mask=permission_mask,
        help_flag=help_flag,
        version_flag=version_flag,
    )
    return wfilemask_execute(params, runner)


__all__ = [
    "WFILEMASK_METADATA",
    "WfilemaskOutputs",
    "wfilemask",
    "wfilemask_execute",
    "wfilemask_params",
]
