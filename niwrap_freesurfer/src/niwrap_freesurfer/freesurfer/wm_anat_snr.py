# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

WM_ANAT_SNR_METADATA = Metadata(
    id="3893529b0bfaaaa154cf69dfd9caf679b5ffd38a.boutiques",
    name="wm-anat-snr",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


WmAnatSnrParameters = typing.TypedDict('WmAnatSnrParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/wm-anat-snr"]],
    "subject": str,
    "output_file": str,
    "force": bool,
    "nerode": typing.NotRequired[int | None],
    "tmp_dir": typing.NotRequired[str | None],
    "cleanup": bool,
    "no_cleanup": bool,
})
WmAnatSnrParametersTagged = typing.TypedDict('WmAnatSnrParametersTagged', {
    "@type": typing.Literal["freesurfer/wm-anat-snr"],
    "subject": str,
    "output_file": str,
    "force": bool,
    "nerode": typing.NotRequired[int | None],
    "tmp_dir": typing.NotRequired[str | None],
    "cleanup": bool,
    "no_cleanup": bool,
})


class WmAnatSnrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `WmAnatSnrParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_datafile: OutputPathType
    """Output data file containing SNR and associated metrics"""


def wm_anat_snr_params(
    subject: str,
    output_file: str,
    force: bool = False,
    nerode: int | None = None,
    tmp_dir: str | None = None,
    cleanup: bool = False,
    no_cleanup: bool = False,
) -> WmAnatSnrParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: FreeSurfer subject name.
        output_file: Output file.
        force: Force analysis even if output is up-to-date.
        nerode: Number of erosions for the WM mask.
        tmp_dir: Temporary directory.
        cleanup: Delete temporary directory after execution.
        no_cleanup: Do not delete temporary directory after execution.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/wm-anat-snr",
        "subject": subject,
        "output_file": output_file,
        "force": force,
        "cleanup": cleanup,
        "no_cleanup": no_cleanup,
    }
    if nerode is not None:
        params["nerode"] = nerode
    if tmp_dir is not None:
        params["tmp_dir"] = tmp_dir
    return params


def wm_anat_snr_cargs(
    params: WmAnatSnrParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wm-anat-snr")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    cargs.extend([
        "--o",
        params.get("output_file", None)
    ])
    if params.get("force", False):
        cargs.append("--force")
    if params.get("nerode", None) is not None:
        cargs.extend([
            "--nerode",
            str(params.get("nerode", None))
        ])
    if params.get("tmp_dir", None) is not None:
        cargs.extend([
            "--tmp",
            params.get("tmp_dir", None)
        ])
    if params.get("cleanup", False):
        cargs.append("--cleanup")
    if params.get("no_cleanup", False):
        cargs.append("--no-cleanup")
    return cargs


def wm_anat_snr_outputs(
    params: WmAnatSnrParameters,
    execution: Execution,
) -> WmAnatSnrOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = WmAnatSnrOutputs(
        root=execution.output_file("."),
        output_datafile=execution.output_file(params.get("output_file", None)),
    )
    return ret


def wm_anat_snr_execute(
    params: WmAnatSnrParameters,
    runner: Runner | None = None,
) -> WmAnatSnrOutputs:
    """
    wm-anat-snr
    
    Measures the anatomical SNR in white matter (WM) for quality assurance (QA).
    This is an experimental metric.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `WmAnatSnrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(WM_ANAT_SNR_METADATA)
    params = execution.params(params)
    cargs = wm_anat_snr_cargs(params, execution)
    ret = wm_anat_snr_outputs(params, execution)
    execution.run(cargs)
    return ret


def wm_anat_snr(
    subject: str,
    output_file: str,
    force: bool = False,
    nerode: int | None = None,
    tmp_dir: str | None = None,
    cleanup: bool = False,
    no_cleanup: bool = False,
    runner: Runner | None = None,
) -> WmAnatSnrOutputs:
    """
    wm-anat-snr
    
    Measures the anatomical SNR in white matter (WM) for quality assurance (QA).
    This is an experimental metric.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: FreeSurfer subject name.
        output_file: Output file.
        force: Force analysis even if output is up-to-date.
        nerode: Number of erosions for the WM mask.
        tmp_dir: Temporary directory.
        cleanup: Delete temporary directory after execution.
        no_cleanup: Do not delete temporary directory after execution.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `WmAnatSnrOutputs`).
    """
    params = wm_anat_snr_params(
        subject=subject,
        output_file=output_file,
        force=force,
        nerode=nerode,
        tmp_dir=tmp_dir,
        cleanup=cleanup,
        no_cleanup=no_cleanup,
    )
    return wm_anat_snr_execute(params, runner)


__all__ = [
    "WM_ANAT_SNR_METADATA",
    "WmAnatSnrOutputs",
    "wm_anat_snr",
    "wm_anat_snr_execute",
    "wm_anat_snr_params",
]
