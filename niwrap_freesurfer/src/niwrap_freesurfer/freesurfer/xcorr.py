# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

XCORR_METADATA = Metadata(
    id="f8b9dd638b9f5e8810aaa75fbf39dd6dbf704d0c.boutiques",
    name="xcorr",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


XcorrParameters = typing.TypedDict('XcorrParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/xcorr"]],
    "input1": InputPathType,
    "input2": InputPathType,
    "output": str,
    "log_file": typing.NotRequired[str | None],
    "tmp_dir": typing.NotRequired[str | None],
    "no_cleanup": bool,
})
XcorrParametersTagged = typing.TypedDict('XcorrParametersTagged', {
    "@type": typing.Literal["freesurfer/xcorr"],
    "input1": InputPathType,
    "input2": InputPathType,
    "output": str,
    "log_file": typing.NotRequired[str | None],
    "tmp_dir": typing.NotRequired[str | None],
    "no_cleanup": bool,
})


class XcorrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `XcorrParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_xcorrfile: OutputPathType
    """Output xcorr file"""
    log_output: OutputPathType | None
    """Log of xcorr execution"""


def xcorr_params(
    input1: InputPathType,
    input2: InputPathType,
    output: str,
    log_file: str | None = None,
    tmp_dir: str | None = None,
    no_cleanup: bool = False,
) -> XcorrParametersTagged:
    """
    Build parameters.
    
    Args:
        input1: First input volume file.
        input2: Second input volume file.
        output: Output xcorr file.
        log_file: Log file.
        tmp_dir: Temporary directory.
        no_cleanup: Prevent cleanup of temporary files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/xcorr",
        "input1": input1,
        "input2": input2,
        "output": output,
        "no_cleanup": no_cleanup,
    }
    if log_file is not None:
        params["log_file"] = log_file
    if tmp_dir is not None:
        params["tmp_dir"] = tmp_dir
    return params


def xcorr_cargs(
    params: XcorrParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("xcorr")
    cargs.extend([
        "--i1",
        execution.input_file(params.get("input1", None))
    ])
    cargs.extend([
        "--i2",
        execution.input_file(params.get("input2", None))
    ])
    cargs.extend([
        "--o",
        params.get("output", None)
    ])
    if params.get("log_file", None) is not None:
        cargs.extend([
            "--log",
            params.get("log_file", None)
        ])
    if params.get("tmp_dir", None) is not None:
        cargs.extend([
            "--tmp",
            params.get("tmp_dir", None)
        ])
    if params.get("no_cleanup", False):
        cargs.append("--no-cleanup")
    return cargs


def xcorr_outputs(
    params: XcorrParameters,
    execution: Execution,
) -> XcorrOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = XcorrOutputs(
        root=execution.output_file("."),
        out_xcorrfile=execution.output_file(params.get("output", None)),
        log_output=execution.output_file(params.get("log_file", None)) if (params.get("log_file") is not None) else None,
    )
    return ret


def xcorr_execute(
    params: XcorrParameters,
    runner: Runner | None = None,
) -> XcorrOutputs:
    """
    xcorr
    
    Computes the voxel-for-voxel correlation coefficient between two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XcorrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XCORR_METADATA)
    params = execution.params(params)
    cargs = xcorr_cargs(params, execution)
    ret = xcorr_outputs(params, execution)
    execution.run(cargs)
    return ret


def xcorr(
    input1: InputPathType,
    input2: InputPathType,
    output: str,
    log_file: str | None = None,
    tmp_dir: str | None = None,
    no_cleanup: bool = False,
    runner: Runner | None = None,
) -> XcorrOutputs:
    """
    xcorr
    
    Computes the voxel-for-voxel correlation coefficient between two volumes.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input1: First input volume file.
        input2: Second input volume file.
        output: Output xcorr file.
        log_file: Log file.
        tmp_dir: Temporary directory.
        no_cleanup: Prevent cleanup of temporary files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XcorrOutputs`).
    """
    params = xcorr_params(
        input1=input1,
        input2=input2,
        output=output,
        log_file=log_file,
        tmp_dir=tmp_dir,
        no_cleanup=no_cleanup,
    )
    return xcorr_execute(params, runner)


__all__ = [
    "XCORR_METADATA",
    "XcorrOutputs",
    "xcorr",
    "xcorr_execute",
    "xcorr_params",
]
