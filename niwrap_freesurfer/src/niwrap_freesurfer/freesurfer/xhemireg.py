# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

XHEMIREG_METADATA = Metadata(
    id="017ee566ff5f9f666189c049c2c6a8988842f2cd.boutiques",
    name="xhemireg",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


XhemiregParameters = typing.TypedDict('XhemiregParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/xhemireg"]],
    "subject": str,
    "output_dir": typing.NotRequired[str | None],
    "map_lh": bool,
    "map_rh": bool,
    "perform_reg": bool,
    "tal_compute": bool,
    "no_tal_compute": bool,
    "tal_estimate": bool,
    "no_tal_estimate": bool,
    "gcaprep": typing.NotRequired[str | None],
    "threads": typing.NotRequired[float | None],
    "version": bool,
    "help": bool,
})
XhemiregParametersTagged = typing.TypedDict('XhemiregParametersTagged', {
    "@type": typing.Literal["freesurfer/xhemireg"],
    "subject": str,
    "output_dir": typing.NotRequired[str | None],
    "map_lh": bool,
    "map_rh": bool,
    "perform_reg": bool,
    "tal_compute": bool,
    "no_tal_compute": bool,
    "tal_estimate": bool,
    "no_tal_estimate": bool,
    "gcaprep": typing.NotRequired[str | None],
    "threads": typing.NotRequired[float | None],
    "version": bool,
    "help": bool,
})


class XhemiregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `XhemiregParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def xhemireg_params(
    subject: str,
    output_dir: str | None = None,
    map_lh: bool = False,
    map_rh: bool = False,
    perform_reg: bool = False,
    tal_compute: bool = False,
    no_tal_compute: bool = False,
    tal_estimate: bool = False,
    no_tal_estimate: bool = False,
    gcaprep: str | None = None,
    threads: float | None = None,
    version: bool = False,
    help_: bool = False,
) -> XhemiregParametersTagged:
    """
    Build parameters.
    
    Args:
        subject: Subject ID for the hemisphere registration process.
        output_dir: Output directory for the hemisphere registration.
        map_lh: Map from left hemisphere to right hemisphere.
        map_rh: Map from right hemisphere to left hemisphere.
        perform_reg: Perform registration to create sphere.reg.
        tal_compute: Recompute Talairach registration.
        no_tal_compute: Do not perform Talairach registration.
        tal_estimate: Compute estimate of Talairach registration from unflipped\
            registration.
        no_tal_estimate: Do not perform estimation of Talairach registration.
        gcaprep: Prepare GCA for training symmetrical GCA atlases.
        threads: Number of threads used, applicable with --gcaprep option.
        version: Print version and exit.
        help_: Print help and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/xhemireg",
        "subject": subject,
        "map_lh": map_lh,
        "map_rh": map_rh,
        "perform_reg": perform_reg,
        "tal_compute": tal_compute,
        "no_tal_compute": no_tal_compute,
        "tal_estimate": tal_estimate,
        "no_tal_estimate": no_tal_estimate,
        "version": version,
        "help": help_,
    }
    if output_dir is not None:
        params["output_dir"] = output_dir
    if gcaprep is not None:
        params["gcaprep"] = gcaprep
    if threads is not None:
        params["threads"] = threads
    return params


def xhemireg_cargs(
    params: XhemiregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("xhemireg")
    cargs.extend([
        "--s",
        params.get("subject", None)
    ])
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "--o",
            params.get("output_dir", None)
        ])
    if params.get("map_lh", False):
        cargs.append("--lh")
    if params.get("map_rh", False):
        cargs.append("--rh")
    if params.get("perform_reg", False):
        cargs.append("--reg")
    if params.get("tal_compute", False):
        cargs.append("--tal-compute")
    if params.get("no_tal_compute", False):
        cargs.append("--no-tal-compute")
    if params.get("tal_estimate", False):
        cargs.append("--tal-estimate")
    if params.get("no_tal_estimate", False):
        cargs.append("--no-tal-estimate")
    if params.get("gcaprep", None) is not None:
        cargs.extend([
            "--gcaprep",
            params.get("gcaprep", None)
        ])
    if params.get("threads", None) is not None:
        cargs.extend([
            "--threads",
            str(params.get("threads", None))
        ])
    if params.get("version", False):
        cargs.append("--version")
    if params.get("help", False):
        cargs.append("--help")
    return cargs


def xhemireg_outputs(
    params: XhemiregParameters,
    execution: Execution,
) -> XhemiregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = XhemiregOutputs(
        root=execution.output_file("."),
    )
    return ret


def xhemireg_execute(
    params: XhemiregParameters,
    runner: Runner | None = None,
) -> XhemiregOutputs:
    """
    xhemireg
    
    Tool for hemisphere registration in neuroimaging.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XhemiregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XHEMIREG_METADATA)
    params = execution.params(params)
    cargs = xhemireg_cargs(params, execution)
    ret = xhemireg_outputs(params, execution)
    execution.run(cargs)
    return ret


def xhemireg(
    subject: str,
    output_dir: str | None = None,
    map_lh: bool = False,
    map_rh: bool = False,
    perform_reg: bool = False,
    tal_compute: bool = False,
    no_tal_compute: bool = False,
    tal_estimate: bool = False,
    no_tal_estimate: bool = False,
    gcaprep: str | None = None,
    threads: float | None = None,
    version: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> XhemiregOutputs:
    """
    xhemireg
    
    Tool for hemisphere registration in neuroimaging.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        subject: Subject ID for the hemisphere registration process.
        output_dir: Output directory for the hemisphere registration.
        map_lh: Map from left hemisphere to right hemisphere.
        map_rh: Map from right hemisphere to left hemisphere.
        perform_reg: Perform registration to create sphere.reg.
        tal_compute: Recompute Talairach registration.
        no_tal_compute: Do not perform Talairach registration.
        tal_estimate: Compute estimate of Talairach registration from unflipped\
            registration.
        no_tal_estimate: Do not perform estimation of Talairach registration.
        gcaprep: Prepare GCA for training symmetrical GCA atlases.
        threads: Number of threads used, applicable with --gcaprep option.
        version: Print version and exit.
        help_: Print help and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XhemiregOutputs`).
    """
    params = xhemireg_params(
        subject=subject,
        output_dir=output_dir,
        map_lh=map_lh,
        map_rh=map_rh,
        perform_reg=perform_reg,
        tal_compute=tal_compute,
        no_tal_compute=no_tal_compute,
        tal_estimate=tal_estimate,
        no_tal_estimate=no_tal_estimate,
        gcaprep=gcaprep,
        threads=threads,
        version=version,
        help_=help_,
    )
    return xhemireg_execute(params, runner)


__all__ = [
    "XHEMIREG_METADATA",
    "XhemiregOutputs",
    "xhemireg",
    "xhemireg_execute",
    "xhemireg_params",
]
