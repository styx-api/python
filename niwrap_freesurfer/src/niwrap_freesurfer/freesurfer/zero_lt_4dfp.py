# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ZERO_LT_4DFP_METADATA = Metadata(
    id="be78b48a8930bf03f5f239110a6f84456c246de3.boutiques",
    name="zero_lt_4dfp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


ZeroLt4dfpParameters = typing.TypedDict('ZeroLt4dfpParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer/zero_lt_4dfp"]],
    "flt_value": float,
    "file_4dfp": InputPathType,
    "outroot": typing.NotRequired[str | None],
    "endianness": typing.NotRequired[str | None],
})
ZeroLt4dfpParametersTagged = typing.TypedDict('ZeroLt4dfpParametersTagged', {
    "@type": typing.Literal["freesurfer/zero_lt_4dfp"],
    "flt_value": float,
    "file_4dfp": InputPathType,
    "outroot": typing.NotRequired[str | None],
    "endianness": typing.NotRequired[str | None],
})


class ZeroLt4dfpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ZeroLt4dfpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_4dfp: OutputPathType | None
    """Output 4dfp file with values less than the threshold zeroed."""


def zero_lt_4dfp_params(
    flt_value: float,
    file_4dfp: InputPathType,
    outroot: str | None = None,
    endianness: str | None = None,
) -> ZeroLt4dfpParametersTagged:
    """
    Build parameters.
    
    Args:
        flt_value: Floating point threshold value. Values less than this in the\
            4dfp file will be zeroed.
        file_4dfp: Input 4dfp file.
        outroot: Output root name for 4dfp file. If not specified, defaults to\
            input file root with 'z' appended.
        endianness: Specify output endian format: 'b' for big endian or 'l' for\
            little endian. Defaults to input endian.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer/zero_lt_4dfp",
        "flt_value": flt_value,
        "file_4dfp": file_4dfp,
    }
    if outroot is not None:
        params["outroot"] = outroot
    if endianness is not None:
        params["endianness"] = endianness
    return params


def zero_lt_4dfp_cargs(
    params: ZeroLt4dfpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("zero_lt_4dfp")
    cargs.append(str(params.get("flt_value", None)))
    cargs.append(execution.input_file(params.get("file_4dfp", None)))
    if params.get("outroot", None) is not None:
        cargs.append(params.get("outroot", None))
    if params.get("endianness", None) is not None:
        cargs.extend([
            "-@",
            params.get("endianness", None)
        ])
    return cargs


def zero_lt_4dfp_outputs(
    params: ZeroLt4dfpParameters,
    execution: Execution,
) -> ZeroLt4dfpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ZeroLt4dfpOutputs(
        root=execution.output_file("."),
        output_4dfp=execution.output_file(params.get("outroot", None) + ".4dfp") if (params.get("outroot") is not None) else None,
    )
    return ret


def zero_lt_4dfp_execute(
    params: ZeroLt4dfpParameters,
    runner: Runner | None = None,
) -> ZeroLt4dfpOutputs:
    """
    zero_lt_4dfp
    
    A tool to process 4dfp image files by zeroing values less than a given float
    threshold.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ZeroLt4dfpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ZERO_LT_4DFP_METADATA)
    params = execution.params(params)
    cargs = zero_lt_4dfp_cargs(params, execution)
    ret = zero_lt_4dfp_outputs(params, execution)
    execution.run(cargs)
    return ret


def zero_lt_4dfp(
    flt_value: float,
    file_4dfp: InputPathType,
    outroot: str | None = None,
    endianness: str | None = None,
    runner: Runner | None = None,
) -> ZeroLt4dfpOutputs:
    """
    zero_lt_4dfp
    
    A tool to process 4dfp image files by zeroing values less than a given float
    threshold.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        flt_value: Floating point threshold value. Values less than this in the\
            4dfp file will be zeroed.
        file_4dfp: Input 4dfp file.
        outroot: Output root name for 4dfp file. If not specified, defaults to\
            input file root with 'z' appended.
        endianness: Specify output endian format: 'b' for big endian or 'l' for\
            little endian. Defaults to input endian.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ZeroLt4dfpOutputs`).
    """
    params = zero_lt_4dfp_params(
        flt_value=flt_value,
        file_4dfp=file_4dfp,
        outroot=outroot,
        endianness=endianness,
    )
    return zero_lt_4dfp_execute(params, runner)


__all__ = [
    "ZERO_LT_4DFP_METADATA",
    "ZeroLt4dfpOutputs",
    "zero_lt_4dfp",
    "zero_lt_4dfp_execute",
    "zero_lt_4dfp_params",
]
