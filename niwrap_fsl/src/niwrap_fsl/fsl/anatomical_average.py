# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ANATOMICAL_AVERAGE_METADATA = Metadata(
    id="35182afbd878ebc0a759c3c32fdb15b29c4fa4ff.boutiques",
    name="AnatomicalAverage",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


AnatomicalAverageParameters = typing.TypedDict('AnatomicalAverageParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/AnatomicalAverage"]],
    "output_basename": str,
    "input_images": list[InputPathType],
    "standard_image": typing.NotRequired[InputPathType | None],
    "standard_brain_mask": typing.NotRequired[InputPathType | None],
    "no_crop_flag": bool,
    "work_dir": typing.NotRequired[str | None],
    "brainsize": typing.NotRequired[float | None],
    "noclean_flag": bool,
    "verbose_flag": bool,
})
AnatomicalAverageParametersTagged = typing.TypedDict('AnatomicalAverageParametersTagged', {
    "@type": typing.Literal["fsl/AnatomicalAverage"],
    "output_basename": str,
    "input_images": list[InputPathType],
    "standard_image": typing.NotRequired[InputPathType | None],
    "standard_brain_mask": typing.NotRequired[InputPathType | None],
    "no_crop_flag": bool,
    "work_dir": typing.NotRequired[str | None],
    "brainsize": typing.NotRequired[float | None],
    "noclean_flag": bool,
    "verbose_flag": bool,
})


class AnatomicalAverageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AnatomicalAverageParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    avg_output: OutputPathType
    """Averaged anatomical image"""


def anatomical_average_params(
    output_basename: str,
    input_images: list[InputPathType],
    standard_image: InputPathType | None = None,
    standard_brain_mask: InputPathType | None = None,
    no_crop_flag: bool = False,
    work_dir: str | None = None,
    brainsize: float | None = None,
    noclean_flag: bool = False,
    verbose_flag: bool = False,
) -> AnatomicalAverageParametersTagged:
    """
    Build parameters.
    
    Args:
        output_basename: Output basename.
        input_images: List of input images.
        standard_image: Standard image (default is MNI152_T1_2mm).
        standard_brain_mask: Standard brain mask (default is\
            MNI152_T1_2mm_brain_mask_dil).
        no_crop_flag: Do not crop images.
        work_dir: Local, temporary working directory (to be cleaned up - i.e.\
            deleted).
        brainsize: Specify brainsize in mm for internal ROI (via robustfov).
        noclean_flag: Do not run the cleanup.
        verbose_flag: Verbose output.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/AnatomicalAverage",
        "output_basename": output_basename,
        "input_images": input_images,
        "no_crop_flag": no_crop_flag,
        "noclean_flag": noclean_flag,
        "verbose_flag": verbose_flag,
    }
    if standard_image is not None:
        params["standard_image"] = standard_image
    if standard_brain_mask is not None:
        params["standard_brain_mask"] = standard_brain_mask
    if work_dir is not None:
        params["work_dir"] = work_dir
    if brainsize is not None:
        params["brainsize"] = brainsize
    return params


def anatomical_average_cargs(
    params: AnatomicalAverageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("AnatomicalAverage")
    cargs.extend([
        "-o",
        params.get("output_basename", None)
    ])
    cargs.extend([execution.input_file(f) for f in params.get("input_images", None)])
    if params.get("standard_image", None) is not None:
        cargs.extend([
            "-s",
            execution.input_file(params.get("standard_image", None))
        ])
    if params.get("standard_brain_mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("standard_brain_mask", None))
        ])
    if params.get("no_crop_flag", False):
        cargs.append("-n")
    if params.get("work_dir", None) is not None:
        cargs.extend([
            "-w",
            params.get("work_dir", None)
        ])
    if params.get("brainsize", None) is not None:
        cargs.extend([
            "-b",
            str(params.get("brainsize", None))
        ])
    if params.get("noclean_flag", False):
        cargs.append("--noclean")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    return cargs


def anatomical_average_outputs(
    params: AnatomicalAverageParameters,
    execution: Execution,
) -> AnatomicalAverageOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AnatomicalAverageOutputs(
        root=execution.output_file("."),
        avg_output=execution.output_file(params.get("output_basename", None) + "_avg.nii.gz"),
    )
    return ret


def anatomical_average_execute(
    params: AnatomicalAverageParameters,
    runner: Runner | None = None,
) -> AnatomicalAverageOutputs:
    """
    AnatomicalAverage
    
    Tool to create an anatomical average of input brain images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AnatomicalAverageOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ANATOMICAL_AVERAGE_METADATA)
    params = execution.params(params)
    cargs = anatomical_average_cargs(params, execution)
    ret = anatomical_average_outputs(params, execution)
    execution.run(cargs)
    return ret


def anatomical_average(
    output_basename: str,
    input_images: list[InputPathType],
    standard_image: InputPathType | None = None,
    standard_brain_mask: InputPathType | None = None,
    no_crop_flag: bool = False,
    work_dir: str | None = None,
    brainsize: float | None = None,
    noclean_flag: bool = False,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> AnatomicalAverageOutputs:
    """
    AnatomicalAverage
    
    Tool to create an anatomical average of input brain images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_basename: Output basename.
        input_images: List of input images.
        standard_image: Standard image (default is MNI152_T1_2mm).
        standard_brain_mask: Standard brain mask (default is\
            MNI152_T1_2mm_brain_mask_dil).
        no_crop_flag: Do not crop images.
        work_dir: Local, temporary working directory (to be cleaned up - i.e.\
            deleted).
        brainsize: Specify brainsize in mm for internal ROI (via robustfov).
        noclean_flag: Do not run the cleanup.
        verbose_flag: Verbose output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AnatomicalAverageOutputs`).
    """
    params = anatomical_average_params(
        output_basename=output_basename,
        input_images=input_images,
        standard_image=standard_image,
        standard_brain_mask=standard_brain_mask,
        no_crop_flag=no_crop_flag,
        work_dir=work_dir,
        brainsize=brainsize,
        noclean_flag=noclean_flag,
        verbose_flag=verbose_flag,
    )
    return anatomical_average_execute(params, runner)


__all__ = [
    "ANATOMICAL_AVERAGE_METADATA",
    "AnatomicalAverageOutputs",
    "anatomical_average",
    "anatomical_average_execute",
    "anatomical_average_params",
]
