# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ASL_FILE_METADATA = Metadata(
    id="bba64fdd11067cc028c4c5d1df1c7359788d0c6a.boutiques",
    name="asl_file",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


AslFileParameters = typing.TypedDict('AslFileParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/asl_file"]],
    "datafile": InputPathType,
    "ntis": float,
    "mask": typing.NotRequired[InputPathType | None],
    "inblockform": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "inaslform": typing.NotRequired[typing.Literal["diff", "tc", "ct", "tcb", "ctb"] | None],
    "rpts": typing.NotRequired[str | None],
    "pairs": bool,
    "spairs": bool,
    "diff": bool,
    "surrdiff": bool,
    "extrapolate": bool,
    "neighbour": typing.NotRequired[float | None],
    "pvgm": typing.NotRequired[InputPathType | None],
    "pvwm": typing.NotRequired[InputPathType | None],
    "kernel": typing.NotRequired[float | None],
    "outfile": str,
    "outblockform": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "mean": bool,
    "split": typing.NotRequired[str | None],
    "epoch": bool,
    "epoch_length": typing.NotRequired[float | None],
    "epoch_overlap": typing.NotRequired[float | None],
    "epoch_unit": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "deconv": bool,
    "aif": typing.NotRequired[InputPathType | None],
    "help": bool,
    "version": bool,
})
AslFileParametersTagged = typing.TypedDict('AslFileParametersTagged', {
    "@type": typing.Literal["fsl/asl_file"],
    "datafile": InputPathType,
    "ntis": float,
    "mask": typing.NotRequired[InputPathType | None],
    "inblockform": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "inaslform": typing.NotRequired[typing.Literal["diff", "tc", "ct", "tcb", "ctb"] | None],
    "rpts": typing.NotRequired[str | None],
    "pairs": bool,
    "spairs": bool,
    "diff": bool,
    "surrdiff": bool,
    "extrapolate": bool,
    "neighbour": typing.NotRequired[float | None],
    "pvgm": typing.NotRequired[InputPathType | None],
    "pvwm": typing.NotRequired[InputPathType | None],
    "kernel": typing.NotRequired[float | None],
    "outfile": str,
    "outblockform": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "mean": bool,
    "split": typing.NotRequired[str | None],
    "epoch": bool,
    "epoch_length": typing.NotRequired[float | None],
    "epoch_overlap": typing.NotRequired[float | None],
    "epoch_unit": typing.NotRequired[typing.Literal["rpt", "tis"] | None],
    "deconv": bool,
    "aif": typing.NotRequired[InputPathType | None],
    "help": bool,
    "version": bool,
})


class AslFileOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AslFileParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_data: OutputPathType
    """Primary output data file"""
    output_mean: OutputPathType
    """Mean output data file"""


def asl_file_params(
    datafile: InputPathType,
    ntis: float,
    outfile: str,
    mask: InputPathType | None = None,
    inblockform: typing.Literal["rpt", "tis"] | None = None,
    inaslform: typing.Literal["diff", "tc", "ct", "tcb", "ctb"] | None = None,
    rpts: str | None = None,
    pairs: bool = False,
    spairs: bool = False,
    diff: bool = False,
    surrdiff: bool = False,
    extrapolate: bool = False,
    neighbour: float | None = None,
    pvgm: InputPathType | None = None,
    pvwm: InputPathType | None = None,
    kernel: float | None = None,
    outblockform: typing.Literal["rpt", "tis"] | None = None,
    mean: bool = False,
    split: str | None = None,
    epoch: bool = False,
    epoch_length: float | None = None,
    epoch_overlap: float | None = None,
    epoch_unit: typing.Literal["rpt", "tis"] | None = None,
    deconv: bool = False,
    aif: InputPathType | None = None,
    help_: bool = False,
    version: bool = False,
) -> AslFileParametersTagged:
    """
    Build parameters.
    
    Args:
        datafile: ASL data file.
        ntis: Number of TIs in the file.
        outfile: Output data file.
        mask: Mask file.
        inblockform: Input block format.
        inaslform: ASL data form.
        rpts: Number of repeats at each TI as comma separated list, not\
            required if the number of repeats is same for all TIs (only for use\
            with --ibf=tis).
        pairs: Data contains adjacent pairs of measurements (e.g. Tag, Control)\
            DEPRECATED use --iaf instead.
        spairs: Split the pairs within the data, e.g. to separate tag and\
            control images in output.
        diff: Take the difference between the pairs, i.e., Tag-control\
            difference.
        surrdiff: Do surround subtraction on the pairs.
        extrapolate: Option to extrapolate the edge of the brain to fix the\
            artefact on the edge of the brain.
        neighbour: Neighbour size for extrapolation, must be an odd number\
            between 3 and 9. Default: 5.
        pvgm: GM partial volume map.
        pvwm: WM partial volume map.
        kernel: Kernel size (in voxels) of partial volume correction, must be\
            an odd number between 3 and 9. Default: 5.
        outblockform: Output block format.
        mean: Output ASL data having taken mean at each TI to file.
        split: Split data into separate files for each TI, specify filename\
            root.
        epoch: Output epochs of ASL data (takes mean at each TI within the\
            epoch).
        epoch_length: Length of epochs in number of repeats.
        epoch_overlap: Amount of overlap between epochs in number of repeats.
        epoch_unit: Epochs to be determined over.
        deconv: Deconvolution of data with arterial input functions.
        aif: Arterial input functions for deconvolution (4D volume, one aif for\
            each voxel within mask).
        help_: Display the help message.
        version: Display version identification.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/asl_file",
        "datafile": datafile,
        "ntis": ntis,
        "pairs": pairs,
        "spairs": spairs,
        "diff": diff,
        "surrdiff": surrdiff,
        "extrapolate": extrapolate,
        "outfile": outfile,
        "mean": mean,
        "epoch": epoch,
        "deconv": deconv,
        "help": help_,
        "version": version,
    }
    if mask is not None:
        params["mask"] = mask
    if inblockform is not None:
        params["inblockform"] = inblockform
    if inaslform is not None:
        params["inaslform"] = inaslform
    if rpts is not None:
        params["rpts"] = rpts
    if neighbour is not None:
        params["neighbour"] = neighbour
    if pvgm is not None:
        params["pvgm"] = pvgm
    if pvwm is not None:
        params["pvwm"] = pvwm
    if kernel is not None:
        params["kernel"] = kernel
    if outblockform is not None:
        params["outblockform"] = outblockform
    if split is not None:
        params["split"] = split
    if epoch_length is not None:
        params["epoch_length"] = epoch_length
    if epoch_overlap is not None:
        params["epoch_overlap"] = epoch_overlap
    if epoch_unit is not None:
        params["epoch_unit"] = epoch_unit
    if aif is not None:
        params["aif"] = aif
    return params


def asl_file_cargs(
    params: AslFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("asl_file")
    cargs.extend([
        "--data",
        execution.input_file(params.get("datafile", None))
    ])
    cargs.extend([
        "--ntis",
        str(params.get("ntis", None))
    ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("inblockform", None) is not None:
        cargs.extend([
            "--ibf",
            params.get("inblockform", None)
        ])
    if params.get("inaslform", None) is not None:
        cargs.extend([
            "--iaf",
            params.get("inaslform", None)
        ])
    if params.get("rpts", None) is not None:
        cargs.extend([
            "--rpts",
            params.get("rpts", None)
        ])
    if params.get("pairs", False):
        cargs.append("--pairs")
    if params.get("spairs", False):
        cargs.append("--spairs")
    if params.get("diff", False):
        cargs.append("--diff")
    if params.get("surrdiff", False):
        cargs.append("--surrdiff")
    if params.get("extrapolate", False):
        cargs.append("--extrapolate")
    if params.get("neighbour", None) is not None:
        cargs.extend([
            "--neighbour",
            str(params.get("neighbour", None))
        ])
    if params.get("pvgm", None) is not None:
        cargs.extend([
            "--pvgm",
            execution.input_file(params.get("pvgm", None))
        ])
    if params.get("pvwm", None) is not None:
        cargs.extend([
            "--pvwm",
            execution.input_file(params.get("pvwm", None))
        ])
    if params.get("kernel", None) is not None:
        cargs.extend([
            "--kernel",
            str(params.get("kernel", None))
        ])
    cargs.extend([
        "--out",
        params.get("outfile", None)
    ])
    if params.get("outblockform", None) is not None:
        cargs.extend([
            "--obf",
            params.get("outblockform", None)
        ])
    if params.get("mean", False):
        cargs.append("--mean")
    if params.get("split", None) is not None:
        cargs.extend([
            "--split",
            params.get("split", None)
        ])
    if params.get("epoch", False):
        cargs.append("--epoch")
    if params.get("epoch_length", None) is not None:
        cargs.extend([
            "--elen",
            str(params.get("epoch_length", None))
        ])
    if params.get("epoch_overlap", None) is not None:
        cargs.extend([
            "--eol",
            str(params.get("epoch_overlap", None))
        ])
    if params.get("epoch_unit", None) is not None:
        cargs.extend([
            "--eunit",
            params.get("epoch_unit", None)
        ])
    if params.get("deconv", False):
        cargs.append("--deconv")
    if params.get("aif", None) is not None:
        cargs.extend([
            "--aif",
            execution.input_file(params.get("aif", None))
        ])
    if params.get("help", False):
        cargs.append("-h")
    if params.get("version", False):
        cargs.append("-v")
    return cargs


def asl_file_outputs(
    params: AslFileParameters,
    execution: Execution,
) -> AslFileOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AslFileOutputs(
        root=execution.output_file("."),
        output_data=execution.output_file(params.get("outfile", None) + ".nii.gz"),
        output_mean=execution.output_file(params.get("outfile", None) + "_mean.nii.gz"),
    )
    return ret


def asl_file_execute(
    params: AslFileParameters,
    runner: Runner | None = None,
) -> AslFileOutputs:
    """
    asl_file
    
    ASL data manipulation tool for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AslFileOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ASL_FILE_METADATA)
    params = execution.params(params)
    cargs = asl_file_cargs(params, execution)
    ret = asl_file_outputs(params, execution)
    execution.run(cargs)
    return ret


def asl_file(
    datafile: InputPathType,
    ntis: float,
    outfile: str,
    mask: InputPathType | None = None,
    inblockform: typing.Literal["rpt", "tis"] | None = None,
    inaslform: typing.Literal["diff", "tc", "ct", "tcb", "ctb"] | None = None,
    rpts: str | None = None,
    pairs: bool = False,
    spairs: bool = False,
    diff: bool = False,
    surrdiff: bool = False,
    extrapolate: bool = False,
    neighbour: float | None = None,
    pvgm: InputPathType | None = None,
    pvwm: InputPathType | None = None,
    kernel: float | None = None,
    outblockform: typing.Literal["rpt", "tis"] | None = None,
    mean: bool = False,
    split: str | None = None,
    epoch: bool = False,
    epoch_length: float | None = None,
    epoch_overlap: float | None = None,
    epoch_unit: typing.Literal["rpt", "tis"] | None = None,
    deconv: bool = False,
    aif: InputPathType | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> AslFileOutputs:
    """
    asl_file
    
    ASL data manipulation tool for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        datafile: ASL data file.
        ntis: Number of TIs in the file.
        outfile: Output data file.
        mask: Mask file.
        inblockform: Input block format.
        inaslform: ASL data form.
        rpts: Number of repeats at each TI as comma separated list, not\
            required if the number of repeats is same for all TIs (only for use\
            with --ibf=tis).
        pairs: Data contains adjacent pairs of measurements (e.g. Tag, Control)\
            DEPRECATED use --iaf instead.
        spairs: Split the pairs within the data, e.g. to separate tag and\
            control images in output.
        diff: Take the difference between the pairs, i.e., Tag-control\
            difference.
        surrdiff: Do surround subtraction on the pairs.
        extrapolate: Option to extrapolate the edge of the brain to fix the\
            artefact on the edge of the brain.
        neighbour: Neighbour size for extrapolation, must be an odd number\
            between 3 and 9. Default: 5.
        pvgm: GM partial volume map.
        pvwm: WM partial volume map.
        kernel: Kernel size (in voxels) of partial volume correction, must be\
            an odd number between 3 and 9. Default: 5.
        outblockform: Output block format.
        mean: Output ASL data having taken mean at each TI to file.
        split: Split data into separate files for each TI, specify filename\
            root.
        epoch: Output epochs of ASL data (takes mean at each TI within the\
            epoch).
        epoch_length: Length of epochs in number of repeats.
        epoch_overlap: Amount of overlap between epochs in number of repeats.
        epoch_unit: Epochs to be determined over.
        deconv: Deconvolution of data with arterial input functions.
        aif: Arterial input functions for deconvolution (4D volume, one aif for\
            each voxel within mask).
        help_: Display the help message.
        version: Display version identification.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AslFileOutputs`).
    """
    params = asl_file_params(
        datafile=datafile,
        ntis=ntis,
        mask=mask,
        inblockform=inblockform,
        inaslform=inaslform,
        rpts=rpts,
        pairs=pairs,
        spairs=spairs,
        diff=diff,
        surrdiff=surrdiff,
        extrapolate=extrapolate,
        neighbour=neighbour,
        pvgm=pvgm,
        pvwm=pvwm,
        kernel=kernel,
        outfile=outfile,
        outblockform=outblockform,
        mean=mean,
        split=split,
        epoch=epoch,
        epoch_length=epoch_length,
        epoch_overlap=epoch_overlap,
        epoch_unit=epoch_unit,
        deconv=deconv,
        aif=aif,
        help_=help_,
        version=version,
    )
    return asl_file_execute(params, runner)


__all__ = [
    "ASL_FILE_METADATA",
    "AslFileOutputs",
    "asl_file",
    "asl_file_execute",
    "asl_file_params",
]
