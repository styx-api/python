# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

ATLASQUERY_METADATA = Metadata(
    id="5415e5c1b8ace5de01581c450d44675ee6346541.boutiques",
    name="atlasquery",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


AtlasqueryParameters = typing.TypedDict('AtlasqueryParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/atlasquery"]],
    "dumpatlases_flag": bool,
    "atlas": typing.NotRequired[str | None],
    "coord": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
})
AtlasqueryParametersTagged = typing.TypedDict('AtlasqueryParametersTagged', {
    "@type": typing.Literal["fsl/atlasquery"],
    "dumpatlases_flag": bool,
    "atlas": typing.NotRequired[str | None],
    "coord": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
})


class AtlasqueryOutputs(typing.NamedTuple):
    """
    Output object returned when calling `AtlasqueryParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def atlasquery_params(
    dumpatlases_flag: bool = False,
    atlas: str | None = None,
    coord: str | None = None,
    mask: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> AtlasqueryParametersTagged:
    """
    Build parameters.
    
    Args:
        dumpatlases_flag: Dump a list of available atlases.
        atlas: Name of atlas to use.
        coord: Coordinate to query in the format X,Y,Z.
        mask: A mask image to use during structural lookups.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Show help message and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/atlasquery",
        "dumpatlases_flag": dumpatlases_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if atlas is not None:
        params["atlas"] = atlas
    if coord is not None:
        params["coord"] = coord
    if mask is not None:
        params["mask"] = mask
    return params


def atlasquery_cargs(
    params: AtlasqueryParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("atlasquery")
    if params.get("dumpatlases_flag", False):
        cargs.append("--dumpatlases")
    if params.get("atlas", None) is not None:
        cargs.extend([
            "-a",
            params.get("atlas", None)
        ])
    if params.get("coord", None) is not None:
        cargs.extend([
            "-c",
            params.get("coord", None)
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-V")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def atlasquery_outputs(
    params: AtlasqueryParameters,
    execution: Execution,
) -> AtlasqueryOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = AtlasqueryOutputs(
        root=execution.output_file("."),
    )
    return ret


def atlasquery_execute(
    params: AtlasqueryParameters,
    runner: Runner | None = None,
) -> AtlasqueryOutputs:
    """
    atlasquery
    
    Structural lookup tool for FSL atlases.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AtlasqueryOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(ATLASQUERY_METADATA)
    params = execution.params(params)
    cargs = atlasquery_cargs(params, execution)
    ret = atlasquery_outputs(params, execution)
    execution.run(cargs)
    return ret


def atlasquery(
    dumpatlases_flag: bool = False,
    atlas: str | None = None,
    coord: str | None = None,
    mask: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> AtlasqueryOutputs:
    """
    atlasquery
    
    Structural lookup tool for FSL atlases.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        dumpatlases_flag: Dump a list of available atlases.
        atlas: Name of atlas to use.
        coord: Coordinate to query in the format X,Y,Z.
        mask: A mask image to use during structural lookups.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Show help message and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `AtlasqueryOutputs`).
    """
    params = atlasquery_params(
        dumpatlases_flag=dumpatlases_flag,
        atlas=atlas,
        coord=coord,
        mask=mask,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return atlasquery_execute(params, runner)


__all__ = [
    "ATLASQUERY_METADATA",
    "AtlasqueryOutputs",
    "atlasquery",
    "atlasquery_execute",
    "atlasquery_params",
]
