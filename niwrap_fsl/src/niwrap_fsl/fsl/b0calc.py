# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

B0CALC_METADATA = Metadata(
    id="dcce84b079f88ba9fdbcf2d4df41528675b69df4.boutiques",
    name="b0calc",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


B0calcParameters = typing.TypedDict('B0calcParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/b0calc"]],
    "input_file": InputPathType,
    "output_file": str,
    "zero_order_x": typing.NotRequired[float | None],
    "zero_order_y": typing.NotRequired[float | None],
    "zero_order_z": typing.NotRequired[float | None],
    "b0_x": typing.NotRequired[float | None],
    "b0_y": typing.NotRequired[float | None],
    "b0_z": typing.NotRequired[float | None],
    "delta": typing.NotRequired[float | None],
    "chi0": typing.NotRequired[float | None],
    "xyz_flag": bool,
    "extend_boundary": typing.NotRequired[float | None],
    "direct_conv": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})
B0calcParametersTagged = typing.TypedDict('B0calcParametersTagged', {
    "@type": typing.Literal["fsl/b0calc"],
    "input_file": InputPathType,
    "output_file": str,
    "zero_order_x": typing.NotRequired[float | None],
    "zero_order_y": typing.NotRequired[float | None],
    "zero_order_z": typing.NotRequired[float | None],
    "b0_x": typing.NotRequired[float | None],
    "b0_y": typing.NotRequired[float | None],
    "b0_z": typing.NotRequired[float | None],
    "delta": typing.NotRequired[float | None],
    "chi0": typing.NotRequired[float | None],
    "xyz_flag": bool,
    "extend_boundary": typing.NotRequired[float | None],
    "direct_conv": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})


class B0calcOutputs(typing.NamedTuple):
    """
    Output object returned when calling `B0calcParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    b0_output: OutputPathType
    """B0 output volume"""
    b0_output_x: OutputPathType
    """B0 x-component output volume (if --xyz is specified)"""
    b0_output_y: OutputPathType
    """B0 y-component output volume (if --xyz is specified)"""
    b0_output_z: OutputPathType
    """B0 z-component output volume (if --xyz is specified)"""


def b0calc_params(
    input_file: InputPathType,
    output_file: str,
    zero_order_x: float | None = None,
    zero_order_y: float | None = None,
    zero_order_z: float | None = None,
    b0_x: float | None = None,
    b0_y: float | None = None,
    b0_z: float | None = None,
    delta: float | None = None,
    chi0: float | None = None,
    xyz_flag: bool = False,
    extend_boundary: float | None = None,
    direct_conv: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> B0calcParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Filename of input image (usually a tissue/air segmentation).
        output_file: Filename of B0 output volume.
        zero_order_x: Value for zeroth-order x-gradient field (per mm);\
            default=0.
        zero_order_y: Value for zeroth-order y-gradient field (per mm);\
            default=0.
        zero_order_z: Value for zeroth-order z-gradient field (per mm);\
            default=0.
        b0_x: Value for zeroth-order B0 field (x-component); default=0.
        b0_y: Value for zeroth-order B0 field (y-component); default=0.
        b0_z: Value for zeroth-order B0 field (z-component); default=1.
        delta: Delta value (chi_tissue - chi_air); default=-9.45e-6.
        chi0: Value for susceptibility of air; default=+4e-7.
        xyz_flag: Calculate and save all 3 field components (i.e. x,y,z).
        extend_boundary: Relative proportion to extend voxels at boundary;\
            default=1.
        direct_conv: Use direct (image space) convolution, not FFT.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/b0calc",
        "input_file": input_file,
        "output_file": output_file,
        "xyz_flag": xyz_flag,
        "direct_conv": direct_conv,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if zero_order_x is not None:
        params["zero_order_x"] = zero_order_x
    if zero_order_y is not None:
        params["zero_order_y"] = zero_order_y
    if zero_order_z is not None:
        params["zero_order_z"] = zero_order_z
    if b0_x is not None:
        params["b0_x"] = b0_x
    if b0_y is not None:
        params["b0_y"] = b0_y
    if b0_z is not None:
        params["b0_z"] = b0_z
    if delta is not None:
        params["delta"] = delta
    if chi0 is not None:
        params["chi0"] = chi0
    if extend_boundary is not None:
        params["extend_boundary"] = extend_boundary
    return params


def b0calc_cargs(
    params: B0calcParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("b0calc")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    if params.get("zero_order_x", None) is not None:
        cargs.extend([
            "--gx",
            str(params.get("zero_order_x", None))
        ])
    if params.get("zero_order_y", None) is not None:
        cargs.extend([
            "--gy",
            str(params.get("zero_order_y", None))
        ])
    if params.get("zero_order_z", None) is not None:
        cargs.extend([
            "--gz",
            str(params.get("zero_order_z", None))
        ])
    if params.get("b0_x", None) is not None:
        cargs.extend([
            "--b0x",
            str(params.get("b0_x", None))
        ])
    if params.get("b0_y", None) is not None:
        cargs.extend([
            "--b0y",
            str(params.get("b0_y", None))
        ])
    if params.get("b0_z", None) is not None:
        cargs.extend([
            "--b0",
            str(params.get("b0_z", None))
        ])
    if params.get("delta", None) is not None:
        cargs.extend([
            "-d",
            str(params.get("delta", None))
        ])
    if params.get("chi0", None) is not None:
        cargs.extend([
            "--chi0",
            str(params.get("chi0", None))
        ])
    if params.get("xyz_flag", False):
        cargs.append("--xyz")
    if params.get("extend_boundary", None) is not None:
        cargs.extend([
            "--extendboundary",
            str(params.get("extend_boundary", None))
        ])
    if params.get("direct_conv", False):
        cargs.append("--directconv")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def b0calc_outputs(
    params: B0calcParameters,
    execution: Execution,
) -> B0calcOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = B0calcOutputs(
        root=execution.output_file("."),
        b0_output=execution.output_file(params.get("output_file", None)),
        b0_output_x=execution.output_file(params.get("output_file", None) + "_x"),
        b0_output_y=execution.output_file(params.get("output_file", None) + "_y"),
        b0_output_z=execution.output_file(params.get("output_file", None) + "_z"),
    )
    return ret


def b0calc_execute(
    params: B0calcParameters,
    runner: Runner | None = None,
) -> B0calcOutputs:
    """
    b0calc
    
    B0 field calculation program.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `B0calcOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(B0CALC_METADATA)
    params = execution.params(params)
    cargs = b0calc_cargs(params, execution)
    ret = b0calc_outputs(params, execution)
    execution.run(cargs)
    return ret


def b0calc(
    input_file: InputPathType,
    output_file: str,
    zero_order_x: float | None = None,
    zero_order_y: float | None = None,
    zero_order_z: float | None = None,
    b0_x: float | None = None,
    b0_y: float | None = None,
    b0_z: float | None = None,
    delta: float | None = None,
    chi0: float | None = None,
    xyz_flag: bool = False,
    extend_boundary: float | None = None,
    direct_conv: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> B0calcOutputs:
    """
    b0calc
    
    B0 field calculation program.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Filename of input image (usually a tissue/air segmentation).
        output_file: Filename of B0 output volume.
        zero_order_x: Value for zeroth-order x-gradient field (per mm);\
            default=0.
        zero_order_y: Value for zeroth-order y-gradient field (per mm);\
            default=0.
        zero_order_z: Value for zeroth-order z-gradient field (per mm);\
            default=0.
        b0_x: Value for zeroth-order B0 field (x-component); default=0.
        b0_y: Value for zeroth-order B0 field (y-component); default=0.
        b0_z: Value for zeroth-order B0 field (z-component); default=1.
        delta: Delta value (chi_tissue - chi_air); default=-9.45e-6.
        chi0: Value for susceptibility of air; default=+4e-7.
        xyz_flag: Calculate and save all 3 field components (i.e. x,y,z).
        extend_boundary: Relative proportion to extend voxels at boundary;\
            default=1.
        direct_conv: Use direct (image space) convolution, not FFT.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `B0calcOutputs`).
    """
    params = b0calc_params(
        input_file=input_file,
        output_file=output_file,
        zero_order_x=zero_order_x,
        zero_order_y=zero_order_y,
        zero_order_z=zero_order_z,
        b0_x=b0_x,
        b0_y=b0_y,
        b0_z=b0_z,
        delta=delta,
        chi0=chi0,
        xyz_flag=xyz_flag,
        extend_boundary=extend_boundary,
        direct_conv=direct_conv,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return b0calc_execute(params, runner)


__all__ = [
    "B0CALC_METADATA",
    "B0calcOutputs",
    "b0calc",
    "b0calc_execute",
    "b0calc_params",
]
