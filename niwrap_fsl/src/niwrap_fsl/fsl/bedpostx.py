# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BEDPOSTX_METADATA = Metadata(
    id="dbb0419f4012e35480761fc6fcb49c5ebab2525f.boutiques",
    name="bedpostx",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BedpostxParameters = typing.TypedDict('BedpostxParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/bedpostx"]],
    "subject_dir": str,
    "num_fibres": typing.NotRequired[float | None],
    "ard_weight": typing.NotRequired[float | None],
    "burnin": typing.NotRequired[float | None],
    "num_jumps": typing.NotRequired[float | None],
    "sample_every": typing.NotRequired[float | None],
    "model_type": typing.NotRequired[float | None],
    "grad_nonlinear": bool,
})
BedpostxParametersTagged = typing.TypedDict('BedpostxParametersTagged', {
    "@type": typing.Literal["fsl/bedpostx"],
    "subject_dir": str,
    "num_fibres": typing.NotRequired[float | None],
    "ard_weight": typing.NotRequired[float | None],
    "burnin": typing.NotRequired[float | None],
    "num_jumps": typing.NotRequired[float | None],
    "sample_every": typing.NotRequired[float | None],
    "model_type": typing.NotRequired[float | None],
    "grad_nonlinear": bool,
})


class BedpostxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BedpostxParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    xfms_output: OutputPathType
    """Output transformations directory."""
    diff_slices_output: OutputPathType
    """Output diffusion slices directory."""


def bedpostx_params(
    subject_dir: str,
    num_fibres: float | None = None,
    ard_weight: float | None = None,
    burnin: float | None = None,
    num_jumps: float | None = None,
    sample_every: float | None = None,
    model_type: float | None = None,
    grad_nonlinear: bool = False,
) -> BedpostxParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_dir: Input subject directory which contains bvals, bvecs, data,\
            and nodif_brain_mask files.
        num_fibres: Number of fibres per voxel (default 3).
        ard_weight: ARD weight, more weight means less secondary fibres per\
            voxel (default 1).
        burnin: Burnin period (default 1000).
        num_jumps: Number of jumps (default 1250).
        sample_every: Sample every (default 25).
        model_type: Deconvolution model. 1: with sticks, 2: with sticks with a\
            range of diffusivities (default), 3: with zeppelins.
        grad_nonlinear: Consider gradient nonlinearities, expects grad_dev in\
            the subject directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/bedpostx",
        "subject_dir": subject_dir,
        "grad_nonlinear": grad_nonlinear,
    }
    if num_fibres is not None:
        params["num_fibres"] = num_fibres
    if ard_weight is not None:
        params["ard_weight"] = ard_weight
    if burnin is not None:
        params["burnin"] = burnin
    if num_jumps is not None:
        params["num_jumps"] = num_jumps
    if sample_every is not None:
        params["sample_every"] = sample_every
    if model_type is not None:
        params["model_type"] = model_type
    return params


def bedpostx_cargs(
    params: BedpostxParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("bedpostx")
    cargs.append(params.get("subject_dir", None))
    if params.get("num_fibres", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("num_fibres", None))
        ])
    if params.get("ard_weight", None) is not None:
        cargs.extend([
            "-w",
            str(params.get("ard_weight", None))
        ])
    if params.get("burnin", None) is not None:
        cargs.extend([
            "-b",
            str(params.get("burnin", None))
        ])
    if params.get("num_jumps", None) is not None:
        cargs.extend([
            "-j",
            str(params.get("num_jumps", None))
        ])
    if params.get("sample_every", None) is not None:
        cargs.extend([
            "-s",
            str(params.get("sample_every", None))
        ])
    if params.get("model_type", None) is not None:
        cargs.extend([
            "-model",
            str(params.get("model_type", None))
        ])
    if params.get("grad_nonlinear", False):
        cargs.append("-g")
    return cargs


def bedpostx_outputs(
    params: BedpostxParameters,
    execution: Execution,
) -> BedpostxOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BedpostxOutputs(
        root=execution.output_file("."),
        xfms_output=execution.output_file(params.get("subject_dir", None) + "_bedpostx/xfms"),
        diff_slices_output=execution.output_file(params.get("subject_dir", None) + "_bedpostx/diff_slices"),
    )
    return ret


def bedpostx_execute(
    params: BedpostxParameters,
    runner: Runner | None = None,
) -> BedpostxOutputs:
    """
    bedpostx
    
    Bayesian Estimation of Diffusion Parameters Obtained using Sampling
    Techniques (BEDPOST) for modeling multiple fibers per voxel.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BedpostxOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BEDPOSTX_METADATA)
    params = execution.params(params)
    cargs = bedpostx_cargs(params, execution)
    ret = bedpostx_outputs(params, execution)
    execution.run(cargs)
    return ret


def bedpostx(
    subject_dir: str,
    num_fibres: float | None = None,
    ard_weight: float | None = None,
    burnin: float | None = None,
    num_jumps: float | None = None,
    sample_every: float | None = None,
    model_type: float | None = None,
    grad_nonlinear: bool = False,
    runner: Runner | None = None,
) -> BedpostxOutputs:
    """
    bedpostx
    
    Bayesian Estimation of Diffusion Parameters Obtained using Sampling
    Techniques (BEDPOST) for modeling multiple fibers per voxel.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        subject_dir: Input subject directory which contains bvals, bvecs, data,\
            and nodif_brain_mask files.
        num_fibres: Number of fibres per voxel (default 3).
        ard_weight: ARD weight, more weight means less secondary fibres per\
            voxel (default 1).
        burnin: Burnin period (default 1000).
        num_jumps: Number of jumps (default 1250).
        sample_every: Sample every (default 25).
        model_type: Deconvolution model. 1: with sticks, 2: with sticks with a\
            range of diffusivities (default), 3: with zeppelins.
        grad_nonlinear: Consider gradient nonlinearities, expects grad_dev in\
            the subject directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BedpostxOutputs`).
    """
    params = bedpostx_params(
        subject_dir=subject_dir,
        num_fibres=num_fibres,
        ard_weight=ard_weight,
        burnin=burnin,
        num_jumps=num_jumps,
        sample_every=sample_every,
        model_type=model_type,
        grad_nonlinear=grad_nonlinear,
    )
    return bedpostx_execute(params, runner)


__all__ = [
    "BEDPOSTX_METADATA",
    "BedpostxOutputs",
    "bedpostx",
    "bedpostx_execute",
    "bedpostx_params",
]
