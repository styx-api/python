# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BEDPOSTX_DATACHECK_METADATA = Metadata(
    id="a42080d72bcf634e50d5dc96b966b9f5052cf873.boutiques",
    name="bedpostx_datacheck",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BedpostxDatacheckParameters = typing.TypedDict('BedpostxDatacheckParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/bedpostx_datacheck"]],
    "data_dir": str,
})
BedpostxDatacheckParametersTagged = typing.TypedDict('BedpostxDatacheckParametersTagged', {
    "@type": typing.Literal["fsl/bedpostx_datacheck"],
    "data_dir": str,
})


class BedpostxDatacheckOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BedpostxDatacheckParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def bedpostx_datacheck_params(
    data_dir: str,
) -> BedpostxDatacheckParametersTagged:
    """
    Build parameters.
    
    Args:
        data_dir: Data directory to check for BEDPOSTX compatibility.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/bedpostx_datacheck",
        "data_dir": data_dir,
    }
    return params


def bedpostx_datacheck_cargs(
    params: BedpostxDatacheckParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("bedpostx_datacheck")
    cargs.append(params.get("data_dir", None))
    return cargs


def bedpostx_datacheck_outputs(
    params: BedpostxDatacheckParameters,
    execution: Execution,
) -> BedpostxDatacheckOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BedpostxDatacheckOutputs(
        root=execution.output_file("."),
    )
    return ret


def bedpostx_datacheck_execute(
    params: BedpostxDatacheckParameters,
    runner: Runner | None = None,
) -> BedpostxDatacheckOutputs:
    """
    bedpostx_datacheck
    
    Check the data directory for BEDPOSTX compatibility.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BedpostxDatacheckOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BEDPOSTX_DATACHECK_METADATA)
    params = execution.params(params)
    cargs = bedpostx_datacheck_cargs(params, execution)
    ret = bedpostx_datacheck_outputs(params, execution)
    execution.run(cargs)
    return ret


def bedpostx_datacheck(
    data_dir: str,
    runner: Runner | None = None,
) -> BedpostxDatacheckOutputs:
    """
    bedpostx_datacheck
    
    Check the data directory for BEDPOSTX compatibility.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        data_dir: Data directory to check for BEDPOSTX compatibility.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BedpostxDatacheckOutputs`).
    """
    params = bedpostx_datacheck_params(
        data_dir=data_dir,
    )
    return bedpostx_datacheck_execute(params, runner)


__all__ = [
    "BEDPOSTX_DATACHECK_METADATA",
    "BedpostxDatacheckOutputs",
    "bedpostx_datacheck",
    "bedpostx_datacheck_execute",
    "bedpostx_datacheck_params",
]
