# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BETSURF_METADATA = Metadata(
    id="2d0d7edff178eb219bf2c22a347dce3e06e59c5c.boutiques",
    name="betsurf",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BetsurfParameters = typing.TypedDict('BetsurfParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/betsurf"]],
    "t1_image": InputPathType,
    "t2_image": typing.NotRequired[InputPathType | None],
    "bet_mesh": InputPathType,
    "t1_to_standard_mat": InputPathType,
    "output_prefix": str,
    "help_flag": bool,
    "verbose_flag": bool,
    "t1only_flag": bool,
    "outline_flag": bool,
    "mask_flag": bool,
    "skull_mask_flag": bool,
    "increased_precision": typing.NotRequired[int | None],
})
BetsurfParametersTagged = typing.TypedDict('BetsurfParametersTagged', {
    "@type": typing.Literal["fsl/betsurf"],
    "t1_image": InputPathType,
    "t2_image": typing.NotRequired[InputPathType | None],
    "bet_mesh": InputPathType,
    "t1_to_standard_mat": InputPathType,
    "output_prefix": str,
    "help_flag": bool,
    "verbose_flag": bool,
    "t1only_flag": bool,
    "outline_flag": bool,
    "mask_flag": bool,
    "skull_mask_flag": bool,
    "increased_precision": typing.NotRequired[int | None],
})


class BetsurfOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BetsurfParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_mask: OutputPathType
    """Generated binary mask"""
    output_outline: OutputPathType
    """Generated surface outline"""
    output_skull: OutputPathType
    """Generated skull mask"""


def betsurf_params(
    t1_image: InputPathType,
    bet_mesh: InputPathType,
    t1_to_standard_mat: InputPathType,
    output_prefix: str,
    t2_image: InputPathType | None = None,
    help_flag: bool = False,
    verbose_flag: bool = False,
    t1only_flag: bool = False,
    outline_flag: bool = False,
    mask_flag: bool = False,
    skull_mask_flag: bool = False,
    increased_precision: int | None = None,
) -> BetsurfParametersTagged:
    """
    Build parameters.
    
    Args:
        t1_image: T1-weighted MRI image.
        bet_mesh: BET Mesh File (.vtk).
        t1_to_standard_mat: Transformation matrix file from T1 to standard\
            space.
        output_prefix: Output prefix for generated files.
        t2_image: T2-weighted MRI image (optional if using --t1only flag).
        help_flag: Displays help message and exits.
        verbose_flag: Switch on diagnostic messages.
        t1only_flag: Extraction with T1 only.
        outline_flag: Generates all surface outlines.
        mask_flag: Generates binary masks from the meshes.
        skull_mask_flag: Generates skull binary mask.
        increased_precision: Retessellates the meshes the indicated number of\
            times (int).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/betsurf",
        "t1_image": t1_image,
        "bet_mesh": bet_mesh,
        "t1_to_standard_mat": t1_to_standard_mat,
        "output_prefix": output_prefix,
        "help_flag": help_flag,
        "verbose_flag": verbose_flag,
        "t1only_flag": t1only_flag,
        "outline_flag": outline_flag,
        "mask_flag": mask_flag,
        "skull_mask_flag": skull_mask_flag,
    }
    if t2_image is not None:
        params["t2_image"] = t2_image
    if increased_precision is not None:
        params["increased_precision"] = increased_precision
    return params


def betsurf_cargs(
    params: BetsurfParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("betsurf")
    cargs.append(execution.input_file(params.get("t1_image", None)))
    if params.get("t2_image", None) is not None:
        cargs.append(execution.input_file(params.get("t2_image", None)))
    cargs.append(execution.input_file(params.get("bet_mesh", None)))
    cargs.append(execution.input_file(params.get("t1_to_standard_mat", None)))
    cargs.append(params.get("output_prefix", None))
    if params.get("help_flag", False):
        cargs.append("-h")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("t1only_flag", False):
        cargs.append("-1")
    if params.get("outline_flag", False):
        cargs.append("-o")
    if params.get("mask_flag", False):
        cargs.append("-m")
    if params.get("skull_mask_flag", False):
        cargs.append("-s")
    if params.get("increased_precision", None) is not None:
        cargs.extend([
            "-p",
            str(params.get("increased_precision", None))
        ])
    return cargs


def betsurf_outputs(
    params: BetsurfParameters,
    execution: Execution,
) -> BetsurfOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BetsurfOutputs(
        root=execution.output_file("."),
        output_mask=execution.output_file(params.get("output_prefix", None) + "_mask.nii.gz"),
        output_outline=execution.output_file(params.get("output_prefix", None) + "_outline.nii.gz"),
        output_skull=execution.output_file(params.get("output_prefix", None) + "_skull.nii.gz"),
    )
    return ret


def betsurf_execute(
    params: BetsurfParameters,
    runner: Runner | None = None,
) -> BetsurfOutputs:
    """
    betsurf
    
    BET Surface Finder to extract brain surfaces using T1 and T2 images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BetsurfOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BETSURF_METADATA)
    params = execution.params(params)
    cargs = betsurf_cargs(params, execution)
    ret = betsurf_outputs(params, execution)
    execution.run(cargs)
    return ret


def betsurf(
    t1_image: InputPathType,
    bet_mesh: InputPathType,
    t1_to_standard_mat: InputPathType,
    output_prefix: str,
    t2_image: InputPathType | None = None,
    help_flag: bool = False,
    verbose_flag: bool = False,
    t1only_flag: bool = False,
    outline_flag: bool = False,
    mask_flag: bool = False,
    skull_mask_flag: bool = False,
    increased_precision: int | None = None,
    runner: Runner | None = None,
) -> BetsurfOutputs:
    """
    betsurf
    
    BET Surface Finder to extract brain surfaces using T1 and T2 images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        t1_image: T1-weighted MRI image.
        bet_mesh: BET Mesh File (.vtk).
        t1_to_standard_mat: Transformation matrix file from T1 to standard\
            space.
        output_prefix: Output prefix for generated files.
        t2_image: T2-weighted MRI image (optional if using --t1only flag).
        help_flag: Displays help message and exits.
        verbose_flag: Switch on diagnostic messages.
        t1only_flag: Extraction with T1 only.
        outline_flag: Generates all surface outlines.
        mask_flag: Generates binary masks from the meshes.
        skull_mask_flag: Generates skull binary mask.
        increased_precision: Retessellates the meshes the indicated number of\
            times (int).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BetsurfOutputs`).
    """
    params = betsurf_params(
        t1_image=t1_image,
        t2_image=t2_image,
        bet_mesh=bet_mesh,
        t1_to_standard_mat=t1_to_standard_mat,
        output_prefix=output_prefix,
        help_flag=help_flag,
        verbose_flag=verbose_flag,
        t1only_flag=t1only_flag,
        outline_flag=outline_flag,
        mask_flag=mask_flag,
        skull_mask_flag=skull_mask_flag,
        increased_precision=increased_precision,
    )
    return betsurf_execute(params, runner)


__all__ = [
    "BETSURF_METADATA",
    "BetsurfOutputs",
    "betsurf",
    "betsurf_execute",
    "betsurf_params",
]
