# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BIANCA_METADATA = Metadata(
    id="4427f0db0149582120e673ba7b3a83cb0d2f156f.boutiques",
    name="bianca",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BiancaParameters = typing.TypedDict('BiancaParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/bianca"]],
    "master_file": InputPathType,
    "label_feature_num": float,
    "brain_mask_feature_num": float,
    "query_subject_num": float,
    "training_nums": typing.NotRequired[str | None],
    "feature_subset": typing.NotRequired[str | None],
    "mat_feature_num": typing.NotRequired[float | None],
    "spatial_weight": typing.NotRequired[float | None],
    "patch_sizes": typing.NotRequired[str | None],
    "patch_3d": bool,
    "select_pts": typing.NotRequired[str | None],
    "training_pts": typing.NotRequired[str | None],
    "non_les_pts": typing.NotRequired[str | None],
    "load_classifier_data": typing.NotRequired[str | None],
    "save_classifier_data": typing.NotRequired[str | None],
    "verbose_flag": bool,
    "out_name": typing.NotRequired[str | None],
})
BiancaParametersTagged = typing.TypedDict('BiancaParametersTagged', {
    "@type": typing.Literal["fsl/bianca"],
    "master_file": InputPathType,
    "label_feature_num": float,
    "brain_mask_feature_num": float,
    "query_subject_num": float,
    "training_nums": typing.NotRequired[str | None],
    "feature_subset": typing.NotRequired[str | None],
    "mat_feature_num": typing.NotRequired[float | None],
    "spatial_weight": typing.NotRequired[float | None],
    "patch_sizes": typing.NotRequired[str | None],
    "patch_3d": bool,
    "select_pts": typing.NotRequired[str | None],
    "training_pts": typing.NotRequired[str | None],
    "non_les_pts": typing.NotRequired[str | None],
    "load_classifier_data": typing.NotRequired[str | None],
    "save_classifier_data": typing.NotRequired[str | None],
    "verbose_flag": bool,
    "out_name": typing.NotRequired[str | None],
})


class BiancaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BiancaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    base_output: OutputPathType | None
    """Base output file generated by BIANCA"""


def bianca_params(
    master_file: InputPathType,
    label_feature_num: float,
    brain_mask_feature_num: float,
    query_subject_num: float,
    training_nums: str | None = None,
    feature_subset: str | None = None,
    mat_feature_num: float | None = None,
    spatial_weight: float | None = None,
    patch_sizes: str | None = None,
    patch_3d: bool = False,
    select_pts: str | None = None,
    training_pts: str | None = None,
    non_les_pts: str | None = None,
    load_classifier_data: str | None = None,
    save_classifier_data: str | None = None,
    verbose_flag: bool = False,
    out_name: str | None = None,
) -> BiancaParametersTagged:
    """
    Build parameters.
    
    Args:
        master_file: Name of the master file.
        label_feature_num: Column number (in the master file) of the manual\
            masks (or any placeholder name for query subjects).
        brain_mask_feature_num: Column number (in the master file) of images to\
            derive non-zero mask from.
        query_subject_num: Row number of query subject (in masterlistfile).
        training_nums: Subjects to be used in training. List of row numbers\
            (comma separated, no spaces) or 'all' to use all the subjects in the\
            master file.
        feature_subset: Set of column numbers (comma separated and no spaces)\
            for features/images to use (default: use all available modalities as\
            intensity features). The image used to derive non-zero mask from must\
            be part of the features subset.
        mat_feature_num: Column number of matrix files (in masterlistfile).\
            Needed to extract spatial features (MNI coordinates).
        spatial_weight: Weighting for spatial coordinates (default = 1, i.e.,\
            variance-normalized MNI coordinates). Requires --matfeaturenum to be\
            specified.
        patch_sizes: List of patch sizes for local averaging.
        patch_3d: Use 3D patches (default is 2D).
        select_pts: "any" (default) or "surround" or "noborder".
        training_pts: Number (max) of (lesion) points to use (per training\
            subject) or "equalpoints" to select all lesion points and equal number\
            of non-lesion points.
        non_les_pts: Number (max) of non-lesion points to use. If not specified\
            will be set to the same amount of lesion points.
        load_classifier_data: Load training data from file.
        save_classifier_data: Save training data to file.
        verbose_flag: Use verbose mode.
        out_name: Specify (base) output name of files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/bianca",
        "master_file": master_file,
        "label_feature_num": label_feature_num,
        "brain_mask_feature_num": brain_mask_feature_num,
        "query_subject_num": query_subject_num,
        "patch_3d": patch_3d,
        "verbose_flag": verbose_flag,
    }
    if training_nums is not None:
        params["training_nums"] = training_nums
    if feature_subset is not None:
        params["feature_subset"] = feature_subset
    if mat_feature_num is not None:
        params["mat_feature_num"] = mat_feature_num
    if spatial_weight is not None:
        params["spatial_weight"] = spatial_weight
    if patch_sizes is not None:
        params["patch_sizes"] = patch_sizes
    if select_pts is not None:
        params["select_pts"] = select_pts
    if training_pts is not None:
        params["training_pts"] = training_pts
    if non_les_pts is not None:
        params["non_les_pts"] = non_les_pts
    if load_classifier_data is not None:
        params["load_classifier_data"] = load_classifier_data
    if save_classifier_data is not None:
        params["save_classifier_data"] = save_classifier_data
    if out_name is not None:
        params["out_name"] = out_name
    return params


def bianca_cargs(
    params: BiancaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("bianca")
    cargs.append("--singlefile=" + execution.input_file(params.get("master_file", None)))
    cargs.append("labelfeaturenum=" + str(params.get("label_feature_num", None)))
    cargs.append("--brainmaskfeaturenum=" + str(params.get("brain_mask_feature_num", None)))
    cargs.append("--querysubjectnum=" + str(params.get("query_subject_num", None)))
    if params.get("training_nums", None) is not None:
        cargs.append("--trainingnums=" + params.get("training_nums", None))
    if params.get("feature_subset", None) is not None:
        cargs.append("--featuresubset=" + params.get("feature_subset", None))
    if params.get("mat_feature_num", None) is not None:
        cargs.append("--matfeaturenum=" + str(params.get("mat_feature_num", None)))
    if params.get("spatial_weight", None) is not None:
        cargs.append("--spatialweight=" + str(params.get("spatial_weight", None)))
    if params.get("patch_sizes", None) is not None:
        cargs.append("--patchsizes=" + params.get("patch_sizes", None))
    if params.get("patch_3d", False):
        cargs.append("--patch3D")
    if params.get("select_pts", None) is not None:
        cargs.append("--selectpts=" + params.get("select_pts", None))
    if params.get("training_pts", None) is not None:
        cargs.append("--trainingpts=" + params.get("training_pts", None))
    if params.get("non_les_pts", None) is not None:
        cargs.append("--nonlespts=" + params.get("non_les_pts", None))
    if params.get("load_classifier_data", None) is not None:
        cargs.append("--loadclassifierdata=" + params.get("load_classifier_data", None))
    if params.get("save_classifier_data", None) is not None:
        cargs.append("--saveclassifierdata=" + params.get("save_classifier_data", None))
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("out_name", None) is not None:
        cargs.extend([
            "-o",
            params.get("out_name", None)
        ])
    return cargs


def bianca_outputs(
    params: BiancaParameters,
    execution: Execution,
) -> BiancaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BiancaOutputs(
        root=execution.output_file("."),
        base_output=execution.output_file(params.get("out_name", None) + "_bianca") if (params.get("out_name") is not None) else None,
    )
    return ret


def bianca_execute(
    params: BiancaParameters,
    runner: Runner | None = None,
) -> BiancaOutputs:
    """
    bianca
    
    BIANCA: Brain Intensity AbNormality Classification Algorithm.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BIANCA_METADATA)
    params = execution.params(params)
    cargs = bianca_cargs(params, execution)
    ret = bianca_outputs(params, execution)
    execution.run(cargs)
    return ret


def bianca(
    master_file: InputPathType,
    label_feature_num: float,
    brain_mask_feature_num: float,
    query_subject_num: float,
    training_nums: str | None = None,
    feature_subset: str | None = None,
    mat_feature_num: float | None = None,
    spatial_weight: float | None = None,
    patch_sizes: str | None = None,
    patch_3d: bool = False,
    select_pts: str | None = None,
    training_pts: str | None = None,
    non_les_pts: str | None = None,
    load_classifier_data: str | None = None,
    save_classifier_data: str | None = None,
    verbose_flag: bool = False,
    out_name: str | None = None,
    runner: Runner | None = None,
) -> BiancaOutputs:
    """
    bianca
    
    BIANCA: Brain Intensity AbNormality Classification Algorithm.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        master_file: Name of the master file.
        label_feature_num: Column number (in the master file) of the manual\
            masks (or any placeholder name for query subjects).
        brain_mask_feature_num: Column number (in the master file) of images to\
            derive non-zero mask from.
        query_subject_num: Row number of query subject (in masterlistfile).
        training_nums: Subjects to be used in training. List of row numbers\
            (comma separated, no spaces) or 'all' to use all the subjects in the\
            master file.
        feature_subset: Set of column numbers (comma separated and no spaces)\
            for features/images to use (default: use all available modalities as\
            intensity features). The image used to derive non-zero mask from must\
            be part of the features subset.
        mat_feature_num: Column number of matrix files (in masterlistfile).\
            Needed to extract spatial features (MNI coordinates).
        spatial_weight: Weighting for spatial coordinates (default = 1, i.e.,\
            variance-normalized MNI coordinates). Requires --matfeaturenum to be\
            specified.
        patch_sizes: List of patch sizes for local averaging.
        patch_3d: Use 3D patches (default is 2D).
        select_pts: "any" (default) or "surround" or "noborder".
        training_pts: Number (max) of (lesion) points to use (per training\
            subject) or "equalpoints" to select all lesion points and equal number\
            of non-lesion points.
        non_les_pts: Number (max) of non-lesion points to use. If not specified\
            will be set to the same amount of lesion points.
        load_classifier_data: Load training data from file.
        save_classifier_data: Save training data to file.
        verbose_flag: Use verbose mode.
        out_name: Specify (base) output name of files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaOutputs`).
    """
    params = bianca_params(
        master_file=master_file,
        label_feature_num=label_feature_num,
        brain_mask_feature_num=brain_mask_feature_num,
        query_subject_num=query_subject_num,
        training_nums=training_nums,
        feature_subset=feature_subset,
        mat_feature_num=mat_feature_num,
        spatial_weight=spatial_weight,
        patch_sizes=patch_sizes,
        patch_3d=patch_3d,
        select_pts=select_pts,
        training_pts=training_pts,
        non_les_pts=non_les_pts,
        load_classifier_data=load_classifier_data,
        save_classifier_data=save_classifier_data,
        verbose_flag=verbose_flag,
        out_name=out_name,
    )
    return bianca_execute(params, runner)


__all__ = [
    "BIANCA_METADATA",
    "BiancaOutputs",
    "bianca",
    "bianca_execute",
    "bianca_params",
]
