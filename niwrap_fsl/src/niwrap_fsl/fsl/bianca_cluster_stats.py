# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

BIANCA_CLUSTER_STATS_METADATA = Metadata(
    id="d1cdd715fcf1f5f48e49045e59f229178144ae7b.boutiques",
    name="bianca_cluster_stats",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


BiancaClusterStatsParameters = typing.TypedDict('BiancaClusterStatsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/bianca_cluster_stats"]],
    "bianca_output_map": InputPathType,
    "threshold": float,
    "min_cluster_size": float,
    "mask": typing.NotRequired[InputPathType | None],
})
BiancaClusterStatsParametersTagged = typing.TypedDict('BiancaClusterStatsParametersTagged', {
    "@type": typing.Literal["fsl/bianca_cluster_stats"],
    "bianca_output_map": InputPathType,
    "threshold": float,
    "min_cluster_size": float,
    "mask": typing.NotRequired[InputPathType | None],
})


class BiancaClusterStatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `BiancaClusterStatsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def bianca_cluster_stats_params(
    bianca_output_map: InputPathType,
    threshold: float,
    min_cluster_size: float,
    mask: InputPathType | None = None,
) -> BiancaClusterStatsParametersTagged:
    """
    Build parameters.
    
    Args:
        bianca_output_map: BIANCA output map file.
        threshold: Threshold value to apply.
        min_cluster_size: Minimum cluster size in voxels.
        mask: Optional mask file (in the same space as the BIANCA output map).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/bianca_cluster_stats",
        "bianca_output_map": bianca_output_map,
        "threshold": threshold,
        "min_cluster_size": min_cluster_size,
    }
    if mask is not None:
        params["mask"] = mask
    return params


def bianca_cluster_stats_cargs(
    params: BiancaClusterStatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("bianca_cluster_stats")
    cargs.append(execution.input_file(params.get("bianca_output_map", None)))
    cargs.append(str(params.get("threshold", None)))
    cargs.append(str(params.get("min_cluster_size", None)))
    if params.get("mask", None) is not None:
        cargs.append(execution.input_file(params.get("mask", None)))
    return cargs


def bianca_cluster_stats_outputs(
    params: BiancaClusterStatsParameters,
    execution: Execution,
) -> BiancaClusterStatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = BiancaClusterStatsOutputs(
        root=execution.output_file("."),
    )
    return ret


def bianca_cluster_stats_execute(
    params: BiancaClusterStatsParameters,
    runner: Runner | None = None,
) -> BiancaClusterStatsOutputs:
    """
    bianca_cluster_stats
    
    Calculate number of clusters and WMH volume in a BIANCA output map.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaClusterStatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(BIANCA_CLUSTER_STATS_METADATA)
    params = execution.params(params)
    cargs = bianca_cluster_stats_cargs(params, execution)
    ret = bianca_cluster_stats_outputs(params, execution)
    execution.run(cargs)
    return ret


def bianca_cluster_stats(
    bianca_output_map: InputPathType,
    threshold: float,
    min_cluster_size: float,
    mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> BiancaClusterStatsOutputs:
    """
    bianca_cluster_stats
    
    Calculate number of clusters and WMH volume in a BIANCA output map.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        bianca_output_map: BIANCA output map file.
        threshold: Threshold value to apply.
        min_cluster_size: Minimum cluster size in voxels.
        mask: Optional mask file (in the same space as the BIANCA output map).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `BiancaClusterStatsOutputs`).
    """
    params = bianca_cluster_stats_params(
        bianca_output_map=bianca_output_map,
        threshold=threshold,
        min_cluster_size=min_cluster_size,
        mask=mask,
    )
    return bianca_cluster_stats_execute(params, runner)


__all__ = [
    "BIANCA_CLUSTER_STATS_METADATA",
    "BiancaClusterStatsOutputs",
    "bianca_cluster_stats",
    "bianca_cluster_stats_execute",
    "bianca_cluster_stats_params",
]
