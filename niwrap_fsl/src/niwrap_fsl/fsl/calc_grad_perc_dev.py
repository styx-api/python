# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CALC_GRAD_PERC_DEV_METADATA = Metadata(
    id="daa606424a8b1552604087055d80939e3d589c2e.boutiques",
    name="calc_grad_perc_dev",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


CalcGradPercDevParameters = typing.TypedDict('CalcGradPercDevParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/calc_grad_perc_dev"]],
    "fullwarp_image": InputPathType,
    "out_basename": str,
    "verbose_flag": bool,
    "help_flag": bool,
})
CalcGradPercDevParametersTagged = typing.TypedDict('CalcGradPercDevParametersTagged', {
    "@type": typing.Literal["fsl/calc_grad_perc_dev"],
    "fullwarp_image": InputPathType,
    "out_basename": str,
    "verbose_flag": bool,
    "help_flag": bool,
})


class CalcGradPercDevOutputs(typing.NamedTuple):
    """
    Output object returned when calling `CalcGradPercDevParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def calc_grad_perc_dev_params(
    fullwarp_image: InputPathType,
    out_basename: str,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> CalcGradPercDevParametersTagged:
    """
    Build parameters.
    
    Args:
        fullwarp_image: Full warp image from gradient_unwarp.py.
        out_basename: Output basename.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display the help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/calc_grad_perc_dev",
        "fullwarp_image": fullwarp_image,
        "out_basename": out_basename,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    return params


def calc_grad_perc_dev_cargs(
    params: CalcGradPercDevParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("calc_grad_perc_dev")
    cargs.extend([
        "--fullwarp",
        execution.input_file(params.get("fullwarp_image", None))
    ])
    cargs.extend([
        "-o,--out",
        params.get("out_basename", None)
    ])
    if params.get("verbose_flag", False):
        cargs.append("-v,--verbose")
    if params.get("help_flag", False):
        cargs.append("-h,--help")
    return cargs


def calc_grad_perc_dev_outputs(
    params: CalcGradPercDevParameters,
    execution: Execution,
) -> CalcGradPercDevOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = CalcGradPercDevOutputs(
        root=execution.output_file("."),
    )
    return ret


def calc_grad_perc_dev_execute(
    params: CalcGradPercDevParameters,
    runner: Runner | None = None,
) -> CalcGradPercDevOutputs:
    """
    calc_grad_perc_dev
    
    Compute the gradient percent deviation based on a full warp image from
    gradient_unwarp.py.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CalcGradPercDevOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CALC_GRAD_PERC_DEV_METADATA)
    params = execution.params(params)
    cargs = calc_grad_perc_dev_cargs(params, execution)
    ret = calc_grad_perc_dev_outputs(params, execution)
    execution.run(cargs)
    return ret


def calc_grad_perc_dev(
    fullwarp_image: InputPathType,
    out_basename: str,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> CalcGradPercDevOutputs:
    """
    calc_grad_perc_dev
    
    Compute the gradient percent deviation based on a full warp image from
    gradient_unwarp.py.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        fullwarp_image: Full warp image from gradient_unwarp.py.
        out_basename: Output basename.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display the help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CalcGradPercDevOutputs`).
    """
    params = calc_grad_perc_dev_params(
        fullwarp_image=fullwarp_image,
        out_basename=out_basename,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return calc_grad_perc_dev_execute(params, runner)


__all__ = [
    "CALC_GRAD_PERC_DEV_METADATA",
    "CalcGradPercDevOutputs",
    "calc_grad_perc_dev",
    "calc_grad_perc_dev_execute",
    "calc_grad_perc_dev_params",
]
