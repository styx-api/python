# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

CONCAT_BVARS_METADATA = Metadata(
    id="7c1a8704e0e73764e6811bca2423e274d04cb632.boutiques",
    name="concat_bvars",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


ConcatBvarsParameters = typing.TypedDict('ConcatBvarsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/concat_bvars"]],
    "output_bvars": str,
    "input_bvars": list[InputPathType],
})
ConcatBvarsParametersTagged = typing.TypedDict('ConcatBvarsParametersTagged', {
    "@type": typing.Literal["fsl/concat_bvars"],
    "output_bvars": str,
    "input_bvars": list[InputPathType],
})


class ConcatBvarsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ConcatBvarsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Concatenated output .bvars file"""


def concat_bvars_params(
    output_bvars: str,
    input_bvars: list[InputPathType],
) -> ConcatBvarsParametersTagged:
    """
    Build parameters.
    
    Args:
        output_bvars: Output .bvars file.
        input_bvars: List of input .bvars files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/concat_bvars",
        "output_bvars": output_bvars,
        "input_bvars": input_bvars,
    }
    return params


def concat_bvars_cargs(
    params: ConcatBvarsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("concat_bvars")
    cargs.append(params.get("output_bvars", None))
    cargs.extend([execution.input_file(f) for f in params.get("input_bvars", None)])
    return cargs


def concat_bvars_outputs(
    params: ConcatBvarsParameters,
    execution: Execution,
) -> ConcatBvarsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ConcatBvarsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_bvars", None)),
    )
    return ret


def concat_bvars_execute(
    params: ConcatBvarsParameters,
    runner: Runner | None = None,
) -> ConcatBvarsOutputs:
    """
    concat_bvars
    
    Concatenate multiple .bvars files into a single .bvars file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConcatBvarsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CONCAT_BVARS_METADATA)
    params = execution.params(params)
    cargs = concat_bvars_cargs(params, execution)
    ret = concat_bvars_outputs(params, execution)
    execution.run(cargs)
    return ret


def concat_bvars(
    output_bvars: str,
    input_bvars: list[InputPathType],
    runner: Runner | None = None,
) -> ConcatBvarsOutputs:
    """
    concat_bvars
    
    Concatenate multiple .bvars files into a single .bvars file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_bvars: Output .bvars file.
        input_bvars: List of input .bvars files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ConcatBvarsOutputs`).
    """
    params = concat_bvars_params(
        output_bvars=output_bvars,
        input_bvars=input_bvars,
    )
    return concat_bvars_execute(params, runner)


__all__ = [
    "CONCAT_BVARS_METADATA",
    "ConcatBvarsOutputs",
    "concat_bvars",
    "concat_bvars_execute",
    "concat_bvars_params",
]
