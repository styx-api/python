# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DISTANCEMAP_METADATA = Metadata(
    id="77f8726ec4784b3ad4754b1cb2d936cdc742eb4c.boutiques",
    name="distancemap",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


DistancemapParameters = typing.TypedDict('DistancemapParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/distancemap"]],
    "input_image": InputPathType,
    "output_image": str,
    "mask_image": typing.NotRequired[InputPathType | None],
    "second_image": typing.NotRequired[InputPathType | None],
    "local_maxima_image": typing.NotRequired[InputPathType | None],
    "segmented_image": typing.NotRequired[InputPathType | None],
    "invert_flag": bool,
    "interpolate_values": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
})
DistancemapParametersTagged = typing.TypedDict('DistancemapParametersTagged', {
    "@type": typing.Literal["fsl/distancemap"],
    "input_image": InputPathType,
    "output_image": str,
    "mask_image": typing.NotRequired[InputPathType | None],
    "second_image": typing.NotRequired[InputPathType | None],
    "local_maxima_image": typing.NotRequired[InputPathType | None],
    "segmented_image": typing.NotRequired[InputPathType | None],
    "invert_flag": bool,
    "interpolate_values": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
})


class DistancemapOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DistancemapParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_distancemap: OutputPathType
    """Output distance map image"""
    output_local_maxima: OutputPathType | None
    """Output local maxima image"""
    output_segmented_image: OutputPathType | None
    """Output segmented distance map image"""


def distancemap_params(
    input_image: InputPathType,
    output_image: str,
    mask_image: InputPathType | None = None,
    second_image: InputPathType | None = None,
    local_maxima_image: InputPathType | None = None,
    segmented_image: InputPathType | None = None,
    invert_flag: bool = False,
    interpolate_values: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> DistancemapParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input image filename (calc distance to non-zero voxels).
        output_image: Output image filename.
        mask_image: Mask image filename (only calc values at these voxels).
        second_image: Second image filename (calc closest distance of this and\
            primary input image, using non-zero voxels, negative distances mean\
            this secondary image is the closer one).
        local_maxima_image: Local maxima output image filename.
        segmented_image: Segmented output image filename (unique value per\
            segment is local maxima label).
        invert_flag: Invert input image.
        interpolate_values: Filename for values to interpolate (sparse sampling\
            interpolation).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/distancemap",
        "input_image": input_image,
        "output_image": output_image,
        "invert_flag": invert_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if mask_image is not None:
        params["mask_image"] = mask_image
    if second_image is not None:
        params["second_image"] = second_image
    if local_maxima_image is not None:
        params["local_maxima_image"] = local_maxima_image
    if segmented_image is not None:
        params["segmented_image"] = segmented_image
    if interpolate_values is not None:
        params["interpolate_values"] = interpolate_values
    return params


def distancemap_cargs(
    params: DistancemapParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("distancemap")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_image", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_image", None)
    ])
    if params.get("mask_image", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask_image", None))
        ])
    if params.get("second_image", None) is not None:
        cargs.extend([
            "--secondim",
            execution.input_file(params.get("second_image", None))
        ])
    if params.get("local_maxima_image", None) is not None:
        cargs.extend([
            "-l",
            execution.input_file(params.get("local_maxima_image", None))
        ])
    if params.get("segmented_image", None) is not None:
        cargs.extend([
            "-s",
            execution.input_file(params.get("segmented_image", None))
        ])
    if params.get("invert_flag", False):
        cargs.append("--invert")
    if params.get("interpolate_values", None) is not None:
        cargs.extend([
            "--interp",
            execution.input_file(params.get("interpolate_values", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def distancemap_outputs(
    params: DistancemapParameters,
    execution: Execution,
) -> DistancemapOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DistancemapOutputs(
        root=execution.output_file("."),
        output_distancemap=execution.output_file(params.get("output_image", None)),
        output_local_maxima=execution.output_file(pathlib.Path(params.get("local_maxima_image", None)).name) if (params.get("local_maxima_image") is not None) else None,
        output_segmented_image=execution.output_file(pathlib.Path(params.get("segmented_image", None)).name) if (params.get("segmented_image") is not None) else None,
    )
    return ret


def distancemap_execute(
    params: DistancemapParameters,
    runner: Runner | None = None,
) -> DistancemapOutputs:
    """
    distancemap
    
    A tool to calculate distance maps using FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DistancemapOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DISTANCEMAP_METADATA)
    params = execution.params(params)
    cargs = distancemap_cargs(params, execution)
    ret = distancemap_outputs(params, execution)
    execution.run(cargs)
    return ret


def distancemap(
    input_image: InputPathType,
    output_image: str,
    mask_image: InputPathType | None = None,
    second_image: InputPathType | None = None,
    local_maxima_image: InputPathType | None = None,
    segmented_image: InputPathType | None = None,
    invert_flag: bool = False,
    interpolate_values: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> DistancemapOutputs:
    """
    distancemap
    
    A tool to calculate distance maps using FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Input image filename (calc distance to non-zero voxels).
        output_image: Output image filename.
        mask_image: Mask image filename (only calc values at these voxels).
        second_image: Second image filename (calc closest distance of this and\
            primary input image, using non-zero voxels, negative distances mean\
            this secondary image is the closer one).
        local_maxima_image: Local maxima output image filename.
        segmented_image: Segmented output image filename (unique value per\
            segment is local maxima label).
        invert_flag: Invert input image.
        interpolate_values: Filename for values to interpolate (sparse sampling\
            interpolation).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DistancemapOutputs`).
    """
    params = distancemap_params(
        input_image=input_image,
        output_image=output_image,
        mask_image=mask_image,
        second_image=second_image,
        local_maxima_image=local_maxima_image,
        segmented_image=segmented_image,
        invert_flag=invert_flag,
        interpolate_values=interpolate_values,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return distancemap_execute(params, runner)


__all__ = [
    "DISTANCEMAP_METADATA",
    "DistancemapOutputs",
    "distancemap",
    "distancemap_execute",
    "distancemap_params",
]
