# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

EDDY_SQUAD_METADATA = Metadata(
    id="6bfaccf7235877e581a3d2076829e13cc5e172e5.boutiques",
    name="eddy_squad",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


EddySquadParameters = typing.TypedDict('EddySquadParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/eddy_squad"]],
    "grouping": typing.NotRequired[str | None],
    "group_db": typing.NotRequired[InputPathType | None],
    "update": bool,
    "output_dir": typing.NotRequired[str | None],
    "subject_list": str,
})
EddySquadParametersTagged = typing.TypedDict('EddySquadParametersTagged', {
    "@type": typing.Literal["fsl/eddy_squad"],
    "grouping": typing.NotRequired[str | None],
    "group_db": typing.NotRequired[InputPathType | None],
    "update": bool,
    "output_dir": typing.NotRequired[str | None],
    "subject_list": str,
})


class EddySquadOutputs(typing.NamedTuple):
    """
    Output object returned when calling `EddySquadParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    qc_results: OutputPathType | None
    """QC results in JSON format"""


def eddy_squad_params(
    subject_list: str,
    grouping: str | None = None,
    group_db: InputPathType | None = None,
    update_: bool = False,
    output_dir: str | None = None,
) -> EddySquadParametersTagged:
    """
    Build parameters.
    
    Args:
        subject_list: List of subject IDs for the QC.
        grouping: Specifies the grouping of studies.
        group_db: Path to the group database.
        update_: Option to update the QC results.
        output_dir: Output directory for the QC results.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/eddy_squad",
        "update": update_,
        "subject_list": subject_list,
    }
    if grouping is not None:
        params["grouping"] = grouping
    if group_db is not None:
        params["group_db"] = group_db
    if output_dir is not None:
        params["output_dir"] = output_dir
    return params


def eddy_squad_cargs(
    params: EddySquadParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("eddy_squad")
    if params.get("grouping", None) is not None:
        cargs.extend([
            "-g",
            params.get("grouping", None)
        ])
    if params.get("group_db", None) is not None:
        cargs.extend([
            "-gdb",
            execution.input_file(params.get("group_db", None))
        ])
    if params.get("update", False):
        cargs.append("-u")
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_dir", None)
        ])
    cargs.append(params.get("subject_list", None))
    return cargs


def eddy_squad_outputs(
    params: EddySquadParameters,
    execution: Execution,
) -> EddySquadOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = EddySquadOutputs(
        root=execution.output_file("."),
        qc_results=execution.output_file(params.get("output_dir", None) + "/qc_results.json") if (params.get("output_dir") is not None) else None,
    )
    return ret


def eddy_squad_execute(
    params: EddySquadParameters,
    runner: Runner | None = None,
) -> EddySquadOutputs:
    """
    eddy_squad
    
    Study-wise QC for dMRI data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `EddySquadOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(EDDY_SQUAD_METADATA)
    params = execution.params(params)
    cargs = eddy_squad_cargs(params, execution)
    ret = eddy_squad_outputs(params, execution)
    execution.run(cargs)
    return ret


def eddy_squad(
    subject_list: str,
    grouping: str | None = None,
    group_db: InputPathType | None = None,
    update_: bool = False,
    output_dir: str | None = None,
    runner: Runner | None = None,
) -> EddySquadOutputs:
    """
    eddy_squad
    
    Study-wise QC for dMRI data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        subject_list: List of subject IDs for the QC.
        grouping: Specifies the grouping of studies.
        group_db: Path to the group database.
        update_: Option to update the QC results.
        output_dir: Output directory for the QC results.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `EddySquadOutputs`).
    """
    params = eddy_squad_params(
        grouping=grouping,
        group_db=group_db,
        update_=update_,
        output_dir=output_dir,
        subject_list=subject_list,
    )
    return eddy_squad_execute(params, runner)


__all__ = [
    "EDDY_SQUAD_METADATA",
    "EddySquadOutputs",
    "eddy_squad",
    "eddy_squad_execute",
    "eddy_squad_params",
]
