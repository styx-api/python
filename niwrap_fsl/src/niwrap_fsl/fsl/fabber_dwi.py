# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FABBER_DWI_METADATA = Metadata(
    id="28dcc8a4a3638f398b153457cd680131d300beab.boutiques",
    name="fabber_dwi",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FabberDwiParameters = typing.TypedDict('FabberDwiParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fabber_dwi"]],
    "output_dir": str,
    "method": str,
    "model": str,
    "data_file": InputPathType,
    "help_flag": bool,
    "listmethods_flag": bool,
    "listmodels_flag": bool,
    "listparams_flag": bool,
    "descparams_flag": bool,
    "listoutputs_flag": bool,
    "evaluate": typing.NotRequired[str | None],
    "evaluate_params": typing.NotRequired[str | None],
    "evaluate_nt": typing.NotRequired[int | None],
    "simple_output_flag": bool,
    "overwrite_flag": bool,
    "link_to_latest_flag": bool,
    "loadmodels": typing.NotRequired[InputPathType | None],
    "multiple_data_files": typing.NotRequired[InputPathType | None],
    "data_order": typing.NotRequired[str | None],
    "mask_file": typing.NotRequired[InputPathType | None],
    "masked_timepoints": typing.NotRequired[int | None],
    "supp_data": typing.NotRequired[InputPathType | None],
    "dump_param_names_flag": bool,
    "save_model_fit_flag": bool,
    "save_residuals_flag": bool,
    "save_model_extras_flag": bool,
    "save_mvn_flag": bool,
    "save_mean_flag": bool,
    "save_std_flag": bool,
    "save_var_flag": bool,
    "save_zstat_flag": bool,
    "save_noise_mean_flag": bool,
    "save_noise_std_flag": bool,
    "save_free_energy_flag": bool,
    "optfile": typing.NotRequired[InputPathType | None],
    "debug_flag": bool,
})
FabberDwiParametersTagged = typing.TypedDict('FabberDwiParametersTagged', {
    "@type": typing.Literal["fsl/fabber_dwi"],
    "output_dir": str,
    "method": str,
    "model": str,
    "data_file": InputPathType,
    "help_flag": bool,
    "listmethods_flag": bool,
    "listmodels_flag": bool,
    "listparams_flag": bool,
    "descparams_flag": bool,
    "listoutputs_flag": bool,
    "evaluate": typing.NotRequired[str | None],
    "evaluate_params": typing.NotRequired[str | None],
    "evaluate_nt": typing.NotRequired[int | None],
    "simple_output_flag": bool,
    "overwrite_flag": bool,
    "link_to_latest_flag": bool,
    "loadmodels": typing.NotRequired[InputPathType | None],
    "multiple_data_files": typing.NotRequired[InputPathType | None],
    "data_order": typing.NotRequired[str | None],
    "mask_file": typing.NotRequired[InputPathType | None],
    "masked_timepoints": typing.NotRequired[int | None],
    "supp_data": typing.NotRequired[InputPathType | None],
    "dump_param_names_flag": bool,
    "save_model_fit_flag": bool,
    "save_residuals_flag": bool,
    "save_model_extras_flag": bool,
    "save_mvn_flag": bool,
    "save_mean_flag": bool,
    "save_std_flag": bool,
    "save_var_flag": bool,
    "save_zstat_flag": bool,
    "save_noise_mean_flag": bool,
    "save_noise_std_flag": bool,
    "save_free_energy_flag": bool,
    "optfile": typing.NotRequired[InputPathType | None],
    "debug_flag": bool,
})


class FabberDwiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FabberDwiParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_files: OutputPathType
    """Specified output directory storing all outputs"""


def fabber_dwi_params(
    output_dir: str,
    method: str,
    model: str,
    data_file: InputPathType,
    help_flag: bool = False,
    listmethods_flag: bool = False,
    listmodels_flag: bool = False,
    listparams_flag: bool = False,
    descparams_flag: bool = False,
    listoutputs_flag: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: int | None = None,
    simple_output_flag: bool = False,
    overwrite_flag: bool = False,
    link_to_latest_flag: bool = False,
    loadmodels: InputPathType | None = None,
    multiple_data_files: InputPathType | None = None,
    data_order: str | None = None,
    mask_file: InputPathType | None = None,
    masked_timepoints: int | None = None,
    supp_data: InputPathType | None = None,
    dump_param_names_flag: bool = False,
    save_model_fit_flag: bool = False,
    save_residuals_flag: bool = False,
    save_model_extras_flag: bool = False,
    save_mvn_flag: bool = False,
    save_mean_flag: bool = False,
    save_std_flag: bool = False,
    save_var_flag: bool = False,
    save_zstat_flag: bool = False,
    save_noise_mean_flag: bool = False,
    save_noise_std_flag: bool = False,
    save_free_energy_flag: bool = False,
    optfile: InputPathType | None = None,
    debug_flag: bool = False,
) -> FabberDwiParametersTagged:
    """
    Build parameters.
    
    Args:
        output_dir: Directory for output files (including logfile).
        method: Use this inference method.
        model: Use this forward model.
        data_file: Specify a single input data file.
        help_flag: Print this usage method. If given with --method or --model,\
            display relevant method/model usage information.
        listmethods_flag: List all known inference methods.
        listmodels_flag: List all known forward models.
        listparams_flag: List model parameters (requires model configuration\
            options to be given).
        descparams_flag: Describe model parameters (name, description, units) -\
            requires model configuration options to be given. Note that not all\
            models provide parameter descriptions.
        listoutputs_flag: List additional model outputs (requires model\
            configuration options to be given).
        evaluate: Evaluate the model. Set to name of output required or blank\
            for default output. Requires model configuration options,\
            --evaluate-params and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output_flag: Instead of usual standard output, simply output a\
            series of lines each giving progress as a percentage.
        overwrite_flag: If set, will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest_flag: Try to create a link to the most recent output\
            directory with the prefix _latest.
        loadmodels: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        multiple_data_files: Specify multiple data files for n=1, 2, 3...
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask_file: Mask file. Inference will only be performed where mask value\
            > 0.
        masked_timepoints: List of masked time points, indexed from 1. These\
            will be ignored in the parameter updates.
        supp_data: 'Supplemental' timeseries data, required for some models.
        dump_param_names_flag: Write the file paramnames.txt containing the\
            names of the model parameters.
        save_model_fit_flag: Output the model prediction as a 4d volume.
        save_residuals_flag: Output the residuals (difference between the data\
            and the model prediction).
        save_model_extras_flag: Output any additional model-specific timeseries\
            data.
        save_mvn_flag: Output the final MVN distributions.
        save_mean_flag: Output the parameter means.
        save_std_flag: Output the parameter standard deviations.
        save_var_flag: Output the parameter variances.
        save_zstat_flag: Output the parameter Z stats.
        save_noise_mean_flag: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std_flag: Output the noise standard deviations.
        save_free_energy_flag: Output the free energy, if calculated.
        optfile: File containing additional options, one per line, in the same\
            form as specified on the command line.
        debug_flag: Output large amounts of debug information. ONLY USE WITH\
            VERY SMALL NUMBERS OF VOXELS.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fabber_dwi",
        "output_dir": output_dir,
        "method": method,
        "model": model,
        "data_file": data_file,
        "help_flag": help_flag,
        "listmethods_flag": listmethods_flag,
        "listmodels_flag": listmodels_flag,
        "listparams_flag": listparams_flag,
        "descparams_flag": descparams_flag,
        "listoutputs_flag": listoutputs_flag,
        "simple_output_flag": simple_output_flag,
        "overwrite_flag": overwrite_flag,
        "link_to_latest_flag": link_to_latest_flag,
        "dump_param_names_flag": dump_param_names_flag,
        "save_model_fit_flag": save_model_fit_flag,
        "save_residuals_flag": save_residuals_flag,
        "save_model_extras_flag": save_model_extras_flag,
        "save_mvn_flag": save_mvn_flag,
        "save_mean_flag": save_mean_flag,
        "save_std_flag": save_std_flag,
        "save_var_flag": save_var_flag,
        "save_zstat_flag": save_zstat_flag,
        "save_noise_mean_flag": save_noise_mean_flag,
        "save_noise_std_flag": save_noise_std_flag,
        "save_free_energy_flag": save_free_energy_flag,
        "debug_flag": debug_flag,
    }
    if evaluate is not None:
        params["evaluate"] = evaluate
    if evaluate_params is not None:
        params["evaluate_params"] = evaluate_params
    if evaluate_nt is not None:
        params["evaluate_nt"] = evaluate_nt
    if loadmodels is not None:
        params["loadmodels"] = loadmodels
    if multiple_data_files is not None:
        params["multiple_data_files"] = multiple_data_files
    if data_order is not None:
        params["data_order"] = data_order
    if mask_file is not None:
        params["mask_file"] = mask_file
    if masked_timepoints is not None:
        params["masked_timepoints"] = masked_timepoints
    if supp_data is not None:
        params["supp_data"] = supp_data
    if optfile is not None:
        params["optfile"] = optfile
    return params


def fabber_dwi_cargs(
    params: FabberDwiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fabber_dwi")
    cargs.extend([
        "--output",
        params.get("output_dir", None)
    ])
    cargs.extend([
        "--method",
        params.get("method", None)
    ])
    cargs.extend([
        "--model",
        params.get("model", None)
    ])
    cargs.extend([
        "--data",
        execution.input_file(params.get("data_file", None))
    ])
    if params.get("help_flag", False):
        cargs.append("--help")
    if params.get("listmethods_flag", False):
        cargs.append("--listmethods")
    if params.get("listmodels_flag", False):
        cargs.append("--listmodels")
    if params.get("listparams_flag", False):
        cargs.append("--listparams")
    if params.get("descparams_flag", False):
        cargs.append("--descparams")
    if params.get("listoutputs_flag", False):
        cargs.append("--listoutputs")
    if params.get("evaluate", None) is not None:
        cargs.extend([
            "--evaluate",
            params.get("evaluate", None)
        ])
    if params.get("evaluate_params", None) is not None:
        cargs.extend([
            "--evaluate-params",
            params.get("evaluate_params", None)
        ])
    if params.get("evaluate_nt", None) is not None:
        cargs.extend([
            "--evaluate-nt",
            str(params.get("evaluate_nt", None))
        ])
    if params.get("simple_output_flag", False):
        cargs.append("--simple-output")
    if params.get("overwrite_flag", False):
        cargs.append("--overwrite")
    if params.get("link_to_latest_flag", False):
        cargs.append("--link-to-latest")
    if params.get("loadmodels", None) is not None:
        cargs.extend([
            "--loadmodels",
            execution.input_file(params.get("loadmodels", None))
        ])
    if params.get("multiple_data_files", None) is not None:
        cargs.extend([
            "--data<n>",
            execution.input_file(params.get("multiple_data_files", None))
        ])
    if params.get("data_order", None) is not None:
        cargs.extend([
            "--data-order",
            params.get("data_order", None)
        ])
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "--mask",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("masked_timepoints", None) is not None:
        cargs.extend([
            "--mt<n>",
            str(params.get("masked_timepoints", None))
        ])
    if params.get("supp_data", None) is not None:
        cargs.extend([
            "--suppdata",
            execution.input_file(params.get("supp_data", None))
        ])
    if params.get("dump_param_names_flag", False):
        cargs.append("--dump-param-names")
    if params.get("save_model_fit_flag", False):
        cargs.append("--save-model-fit")
    if params.get("save_residuals_flag", False):
        cargs.append("--save-residuals")
    if params.get("save_model_extras_flag", False):
        cargs.append("--save-model-extras")
    if params.get("save_mvn_flag", False):
        cargs.append("--save-mvn")
    if params.get("save_mean_flag", False):
        cargs.append("--save-mean")
    if params.get("save_std_flag", False):
        cargs.append("--save-std")
    if params.get("save_var_flag", False):
        cargs.append("--save-var")
    if params.get("save_zstat_flag", False):
        cargs.append("--save-zstat")
    if params.get("save_noise_mean_flag", False):
        cargs.append("--save-noise-mean")
    if params.get("save_noise_std_flag", False):
        cargs.append("--save-noise-std")
    if params.get("save_free_energy_flag", False):
        cargs.append("--save-free-energy")
    if params.get("optfile", None) is not None:
        cargs.extend([
            "--optfile",
            execution.input_file(params.get("optfile", None))
        ])
    if params.get("debug_flag", False):
        cargs.append("--debug")
    return cargs


def fabber_dwi_outputs(
    params: FabberDwiParameters,
    execution: Execution,
) -> FabberDwiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FabberDwiOutputs(
        root=execution.output_file("."),
        output_files=execution.output_file(params.get("output_dir", None)),
    )
    return ret


def fabber_dwi_execute(
    params: FabberDwiParameters,
    runner: Runner | None = None,
) -> FabberDwiOutputs:
    """
    fabber_dwi
    
    Fabber diffusion-weighted imaging tool for model-based analysis using
    forward models and different inference methods.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberDwiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FABBER_DWI_METADATA)
    params = execution.params(params)
    cargs = fabber_dwi_cargs(params, execution)
    ret = fabber_dwi_outputs(params, execution)
    execution.run(cargs)
    return ret


def fabber_dwi(
    output_dir: str,
    method: str,
    model: str,
    data_file: InputPathType,
    help_flag: bool = False,
    listmethods_flag: bool = False,
    listmodels_flag: bool = False,
    listparams_flag: bool = False,
    descparams_flag: bool = False,
    listoutputs_flag: bool = False,
    evaluate: str | None = None,
    evaluate_params: str | None = None,
    evaluate_nt: int | None = None,
    simple_output_flag: bool = False,
    overwrite_flag: bool = False,
    link_to_latest_flag: bool = False,
    loadmodels: InputPathType | None = None,
    multiple_data_files: InputPathType | None = None,
    data_order: str | None = None,
    mask_file: InputPathType | None = None,
    masked_timepoints: int | None = None,
    supp_data: InputPathType | None = None,
    dump_param_names_flag: bool = False,
    save_model_fit_flag: bool = False,
    save_residuals_flag: bool = False,
    save_model_extras_flag: bool = False,
    save_mvn_flag: bool = False,
    save_mean_flag: bool = False,
    save_std_flag: bool = False,
    save_var_flag: bool = False,
    save_zstat_flag: bool = False,
    save_noise_mean_flag: bool = False,
    save_noise_std_flag: bool = False,
    save_free_energy_flag: bool = False,
    optfile: InputPathType | None = None,
    debug_flag: bool = False,
    runner: Runner | None = None,
) -> FabberDwiOutputs:
    """
    fabber_dwi
    
    Fabber diffusion-weighted imaging tool for model-based analysis using
    forward models and different inference methods.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_dir: Directory for output files (including logfile).
        method: Use this inference method.
        model: Use this forward model.
        data_file: Specify a single input data file.
        help_flag: Print this usage method. If given with --method or --model,\
            display relevant method/model usage information.
        listmethods_flag: List all known inference methods.
        listmodels_flag: List all known forward models.
        listparams_flag: List model parameters (requires model configuration\
            options to be given).
        descparams_flag: Describe model parameters (name, description, units) -\
            requires model configuration options to be given. Note that not all\
            models provide parameter descriptions.
        listoutputs_flag: List additional model outputs (requires model\
            configuration options to be given).
        evaluate: Evaluate the model. Set to name of output required or blank\
            for default output. Requires model configuration options,\
            --evaluate-params and --evaluate-nt.
        evaluate_params: List of parameter values for evaluation.
        evaluate_nt: Number of time points for evaluation - must be consistent\
            with model options where appropriate.
        simple_output_flag: Instead of usual standard output, simply output a\
            series of lines each giving progress as a percentage.
        overwrite_flag: If set, will overwrite existing output. If not set, new\
            output directories will be created by appending '+' to the directory\
            name.
        link_to_latest_flag: Try to create a link to the most recent output\
            directory with the prefix _latest.
        loadmodels: Load models dynamically from the specified filename, which\
            should be a DLL/shared library.
        multiple_data_files: Specify multiple data files for n=1, 2, 3...
        data_order: If multiple data files are specified, how they will be\
            handled: concatenate = one after the other, interleave = first record\
            from each file, then second, etc.
        mask_file: Mask file. Inference will only be performed where mask value\
            > 0.
        masked_timepoints: List of masked time points, indexed from 1. These\
            will be ignored in the parameter updates.
        supp_data: 'Supplemental' timeseries data, required for some models.
        dump_param_names_flag: Write the file paramnames.txt containing the\
            names of the model parameters.
        save_model_fit_flag: Output the model prediction as a 4d volume.
        save_residuals_flag: Output the residuals (difference between the data\
            and the model prediction).
        save_model_extras_flag: Output any additional model-specific timeseries\
            data.
        save_mvn_flag: Output the final MVN distributions.
        save_mean_flag: Output the parameter means.
        save_std_flag: Output the parameter standard deviations.
        save_var_flag: Output the parameter variances.
        save_zstat_flag: Output the parameter Z stats.
        save_noise_mean_flag: Output the noise means. The noise distribution\
            inferred is the precision of a Gaussian noise source.
        save_noise_std_flag: Output the noise standard deviations.
        save_free_energy_flag: Output the free energy, if calculated.
        optfile: File containing additional options, one per line, in the same\
            form as specified on the command line.
        debug_flag: Output large amounts of debug information. ONLY USE WITH\
            VERY SMALL NUMBERS OF VOXELS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FabberDwiOutputs`).
    """
    params = fabber_dwi_params(
        output_dir=output_dir,
        method=method,
        model=model,
        data_file=data_file,
        help_flag=help_flag,
        listmethods_flag=listmethods_flag,
        listmodels_flag=listmodels_flag,
        listparams_flag=listparams_flag,
        descparams_flag=descparams_flag,
        listoutputs_flag=listoutputs_flag,
        evaluate=evaluate,
        evaluate_params=evaluate_params,
        evaluate_nt=evaluate_nt,
        simple_output_flag=simple_output_flag,
        overwrite_flag=overwrite_flag,
        link_to_latest_flag=link_to_latest_flag,
        loadmodels=loadmodels,
        multiple_data_files=multiple_data_files,
        data_order=data_order,
        mask_file=mask_file,
        masked_timepoints=masked_timepoints,
        supp_data=supp_data,
        dump_param_names_flag=dump_param_names_flag,
        save_model_fit_flag=save_model_fit_flag,
        save_residuals_flag=save_residuals_flag,
        save_model_extras_flag=save_model_extras_flag,
        save_mvn_flag=save_mvn_flag,
        save_mean_flag=save_mean_flag,
        save_std_flag=save_std_flag,
        save_var_flag=save_var_flag,
        save_zstat_flag=save_zstat_flag,
        save_noise_mean_flag=save_noise_mean_flag,
        save_noise_std_flag=save_noise_std_flag,
        save_free_energy_flag=save_free_energy_flag,
        optfile=optfile,
        debug_flag=debug_flag,
    )
    return fabber_dwi_execute(params, runner)


__all__ = [
    "FABBER_DWI_METADATA",
    "FabberDwiOutputs",
    "fabber_dwi",
    "fabber_dwi_execute",
    "fabber_dwi_params",
]
