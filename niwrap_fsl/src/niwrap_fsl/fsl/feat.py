# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FEAT_METADATA = Metadata(
    id="d3922105c485b7eaef0a89d6cadd2d89f7e5a55b.boutiques",
    name="feat",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FeatParameters = typing.TypedDict('FeatParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/feat"]],
    "design_file": InputPathType,
})
FeatParametersTagged = typing.TypedDict('FeatParametersTagged', {
    "@type": typing.Literal["fsl/feat"],
    "design_file": InputPathType,
})


class FeatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FeatParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dir: OutputPathType
    """Output directory containing all results from FEAT"""


def feat_params(
    design_file: InputPathType,
) -> FeatParametersTagged:
    """
    Build parameters.
    
    Args:
        design_file: FEAT design file (e.g. design.fsf).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/feat",
        "design_file": design_file,
    }
    return params


def feat_cargs(
    params: FeatParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("feat")
    cargs.append(execution.input_file(params.get("design_file", None)))
    return cargs


def feat_outputs(
    params: FeatParameters,
    execution: Execution,
) -> FeatOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FeatOutputs(
        root=execution.output_file("."),
        output_dir=execution.output_file("design.feat"),
    )
    return ret


def feat_execute(
    params: FeatParameters,
    runner: Runner | None = None,
) -> FeatOutputs:
    """
    feat
    
    fMRI Expert Analysis Tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FeatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FEAT_METADATA)
    params = execution.params(params)
    cargs = feat_cargs(params, execution)
    ret = feat_outputs(params, execution)
    execution.run(cargs)
    return ret


def feat(
    design_file: InputPathType,
    runner: Runner | None = None,
) -> FeatOutputs:
    """
    feat
    
    fMRI Expert Analysis Tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        design_file: FEAT design file (e.g. design.fsf).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FeatOutputs`).
    """
    params = feat_params(
        design_file=design_file,
    )
    return feat_execute(params, runner)


__all__ = [
    "FEAT_METADATA",
    "FeatOutputs",
    "feat",
    "feat_execute",
    "feat_params",
]
