# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FEATQUERY_METADATA = Metadata(
    id="064c21b08fd6f2c812d97dd62eadbdebce72aa0e.boutiques",
    name="featquery",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FeatqueryParameters = typing.TypedDict('FeatqueryParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/featquery"]],
    "n_featdirs": float,
    "featdirs": list[str],
    "n_stats": float,
    "stats": list[str],
    "output_rootname": str,
    "atlas_flag": typing.NotRequired[str | None],
    "percent_convert_flag": bool,
    "thresh_flag": bool,
    "interp_thresh": typing.NotRequired[float | None],
    "timeseries_flag": bool,
    "weight_flag": bool,
    "browser_flag": bool,
    "mask_file": InputPathType,
    "coords": typing.NotRequired[list[float] | None],
})
FeatqueryParametersTagged = typing.TypedDict('FeatqueryParametersTagged', {
    "@type": typing.Literal["fsl/featquery"],
    "n_featdirs": float,
    "featdirs": list[str],
    "n_stats": float,
    "stats": list[str],
    "output_rootname": str,
    "atlas_flag": typing.NotRequired[str | None],
    "percent_convert_flag": bool,
    "thresh_flag": bool,
    "interp_thresh": typing.NotRequired[float | None],
    "timeseries_flag": bool,
    "weight_flag": bool,
    "browser_flag": bool,
    "mask_file": InputPathType,
    "coords": typing.NotRequired[list[float] | None],
})


class FeatqueryOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FeatqueryParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    query_report: OutputPathType
    """Generated query report file"""


def featquery_params(
    n_featdirs: float,
    featdirs: list[str],
    n_stats: float,
    stats: list[str],
    output_rootname: str,
    mask_file: InputPathType,
    atlas_flag: str | None = None,
    percent_convert_flag: bool = False,
    thresh_flag: bool = False,
    interp_thresh: float | None = None,
    timeseries_flag: bool = False,
    weight_flag: bool = False,
    browser_flag: bool = False,
    coords: list[float] | None = None,
) -> FeatqueryParametersTagged:
    """
    Build parameters.
    
    Args:
        n_featdirs: Number of feat directories.
        featdirs: List of feat directories.
        n_stats: Number of stats to query.
        stats: List of stats.
        output_rootname: Root name for output files.
        mask_file: Mask file used as a reference for coordinates; if relative,\
            searched within each FEAT directory.
        atlas_flag: Use selected atlas to generate label (etc.) information.
        percent_convert_flag: Convert PE / COPE values into percentages.
        thresh_flag: Threshold stats images.
        interp_thresh: Affect size of resampled masks by changing\
            post-interpolation thresholding (default 0.5).
        timeseries_flag: Create time-series plots.
        weight_flag: Do not binarise mask (allow weighting).
        browser_flag: Popup results in browser when finished.
        coords: Coordinates specified in voxels (X Y Z).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/featquery",
        "n_featdirs": n_featdirs,
        "featdirs": featdirs,
        "n_stats": n_stats,
        "stats": stats,
        "output_rootname": output_rootname,
        "percent_convert_flag": percent_convert_flag,
        "thresh_flag": thresh_flag,
        "timeseries_flag": timeseries_flag,
        "weight_flag": weight_flag,
        "browser_flag": browser_flag,
        "mask_file": mask_file,
    }
    if atlas_flag is not None:
        params["atlas_flag"] = atlas_flag
    if interp_thresh is not None:
        params["interp_thresh"] = interp_thresh
    if coords is not None:
        params["coords"] = coords
    return params


def featquery_cargs(
    params: FeatqueryParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("featquery")
    cargs.append(str(params.get("n_featdirs", None)))
    cargs.extend(params.get("featdirs", None))
    cargs.append(str(params.get("n_stats", None)))
    cargs.extend(params.get("stats", None))
    cargs.append(params.get("output_rootname", None))
    if params.get("atlas_flag", None) is not None:
        cargs.extend([
            "-a",
            params.get("atlas_flag", None)
        ])
    if params.get("percent_convert_flag", False):
        cargs.append("-p")
    if params.get("thresh_flag", False):
        cargs.append("-t")
    if params.get("interp_thresh", None) is not None:
        cargs.extend([
            "-i",
            str(params.get("interp_thresh", None))
        ])
    if params.get("timeseries_flag", False):
        cargs.append("-s")
    if params.get("weight_flag", False):
        cargs.append("-w")
    if params.get("browser_flag", False):
        cargs.append("-b")
    cargs.append(execution.input_file(params.get("mask_file", None)))
    if params.get("coords", None) is not None:
        cargs.extend([
            "-vox",
            *map(str, params.get("coords", None))
        ])
    return cargs


def featquery_outputs(
    params: FeatqueryParameters,
    execution: Execution,
) -> FeatqueryOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FeatqueryOutputs(
        root=execution.output_file("."),
        query_report=execution.output_file(params.get("output_rootname", None) + "_queryreport.txt"),
    )
    return ret


def featquery_execute(
    params: FeatqueryParameters,
    runner: Runner | None = None,
) -> FeatqueryOutputs:
    """
    featquery
    
    Tool to extract statistics and/or time series from FEAT directories.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FeatqueryOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FEATQUERY_METADATA)
    params = execution.params(params)
    cargs = featquery_cargs(params, execution)
    ret = featquery_outputs(params, execution)
    execution.run(cargs)
    return ret


def featquery(
    n_featdirs: float,
    featdirs: list[str],
    n_stats: float,
    stats: list[str],
    output_rootname: str,
    mask_file: InputPathType,
    atlas_flag: str | None = None,
    percent_convert_flag: bool = False,
    thresh_flag: bool = False,
    interp_thresh: float | None = None,
    timeseries_flag: bool = False,
    weight_flag: bool = False,
    browser_flag: bool = False,
    coords: list[float] | None = None,
    runner: Runner | None = None,
) -> FeatqueryOutputs:
    """
    featquery
    
    Tool to extract statistics and/or time series from FEAT directories.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        n_featdirs: Number of feat directories.
        featdirs: List of feat directories.
        n_stats: Number of stats to query.
        stats: List of stats.
        output_rootname: Root name for output files.
        mask_file: Mask file used as a reference for coordinates; if relative,\
            searched within each FEAT directory.
        atlas_flag: Use selected atlas to generate label (etc.) information.
        percent_convert_flag: Convert PE / COPE values into percentages.
        thresh_flag: Threshold stats images.
        interp_thresh: Affect size of resampled masks by changing\
            post-interpolation thresholding (default 0.5).
        timeseries_flag: Create time-series plots.
        weight_flag: Do not binarise mask (allow weighting).
        browser_flag: Popup results in browser when finished.
        coords: Coordinates specified in voxels (X Y Z).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FeatqueryOutputs`).
    """
    params = featquery_params(
        n_featdirs=n_featdirs,
        featdirs=featdirs,
        n_stats=n_stats,
        stats=stats,
        output_rootname=output_rootname,
        atlas_flag=atlas_flag,
        percent_convert_flag=percent_convert_flag,
        thresh_flag=thresh_flag,
        interp_thresh=interp_thresh,
        timeseries_flag=timeseries_flag,
        weight_flag=weight_flag,
        browser_flag=browser_flag,
        mask_file=mask_file,
        coords=coords,
    )
    return featquery_execute(params, runner)


__all__ = [
    "FEATQUERY_METADATA",
    "FeatqueryOutputs",
    "featquery",
    "featquery_execute",
    "featquery_params",
]
