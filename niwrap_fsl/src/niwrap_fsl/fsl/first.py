# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIRST_METADATA = Metadata(
    id="bf7b227e6bf36e56472df4b66bb9a6f51a549106.boutiques",
    name="first",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FirstParameters = typing.TypedDict('FirstParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/first"]],
    "input_file": InputPathType,
    "output_name": str,
    "input_model": InputPathType,
    "flirt_matrix": InputPathType,
    "verbose": bool,
    "help": bool,
    "input_model2": typing.NotRequired[InputPathType | None],
    "nmodes": typing.NotRequired[float | None],
    "intref": bool,
    "multi_image_input": bool,
    "binary_surface_output": bool,
    "bmap_name": typing.NotRequired[InputPathType | None],
    "bvars": typing.NotRequired[InputPathType | None],
    "shcond": bool,
    "loadbvars": bool,
})
FirstParametersTagged = typing.TypedDict('FirstParametersTagged', {
    "@type": typing.Literal["fsl/first"],
    "input_file": InputPathType,
    "output_name": str,
    "input_model": InputPathType,
    "flirt_matrix": InputPathType,
    "verbose": bool,
    "help": bool,
    "input_model2": typing.NotRequired[InputPathType | None],
    "nmodes": typing.NotRequired[float | None],
    "intref": bool,
    "multi_image_input": bool,
    "binary_surface_output": bool,
    "bmap_name": typing.NotRequired[InputPathType | None],
    "bvars": typing.NotRequired[InputPathType | None],
    "shcond": bool,
    "loadbvars": bool,
})


class FirstOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FirstParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    segmented_output_image: OutputPathType
    """Segmented output image"""


def first_params(
    input_file: InputPathType,
    output_name: str,
    input_model: InputPathType,
    flirt_matrix: InputPathType,
    verbose: bool = False,
    help_: bool = False,
    input_model2: InputPathType | None = None,
    nmodes: float | None = None,
    intref: bool = False,
    multi_image_input: bool = False,
    binary_surface_output: bool = False,
    bmap_name: InputPathType | None = None,
    bvars: InputPathType | None = None,
    shcond: bool = False,
    loadbvars: bool = False,
) -> FirstParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Filename of input image to be segmented.
        output_name: Output name.
        input_model: Filename of input model (the structure to be segmented).
        flirt_matrix: Filename of flirt matrix that transform input image to\
            MNI space (output of first_flirt).
        verbose: Switch on diagnostic messages.
        help_: Display help message.
        input_model2: Filename of second input model (the structure to be\
            segmented).
        nmodes: Specifies number of modes used.
        intref: Use structure specified by modelname2 as intensity reference.
        multi_image_input: Use structure specified by modelname2 as intensity\
            reference.
        binary_surface_output: Use structure specified by modelname2 as\
            intensity reference.
        bmap_name: Filename of conditional mapping matrix.
        bvars: Initialize using bvars from a previous segmentation. When using\
            with --shcond specifies the shape of the structure we are conditioning\
            on.
        shcond: Use conditional shape probability.
        loadbvars: Load initial parameter estimates from a previous\
            segmentation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/first",
        "input_file": input_file,
        "output_name": output_name,
        "input_model": input_model,
        "flirt_matrix": flirt_matrix,
        "verbose": verbose,
        "help": help_,
        "intref": intref,
        "multi_image_input": multi_image_input,
        "binary_surface_output": binary_surface_output,
        "shcond": shcond,
        "loadbvars": loadbvars,
    }
    if input_model2 is not None:
        params["input_model2"] = input_model2
    if nmodes is not None:
        params["nmodes"] = nmodes
    if bmap_name is not None:
        params["bmap_name"] = bmap_name
    if bvars is not None:
        params["bvars"] = bvars
    return params


def first_cargs(
    params: FirstParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("first")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-k",
        params.get("output_name", None)
    ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("input_model", None))
    ])
    cargs.extend([
        "-l",
        execution.input_file(params.get("flirt_matrix", None))
    ])
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("help", False):
        cargs.append("-h")
    if params.get("input_model2", None) is not None:
        cargs.extend([
            "-p",
            execution.input_file(params.get("input_model2", None))
        ])
    if params.get("nmodes", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("nmodes", None))
        ])
    if params.get("intref", False):
        cargs.append("--intref")
    if params.get("multi_image_input", False):
        cargs.append("--multiImageInput")
    if params.get("binary_surface_output", False):
        cargs.append("--binarySurfaceOutput")
    if params.get("bmap_name", None) is not None:
        cargs.extend([
            "-b",
            execution.input_file(params.get("bmap_name", None))
        ])
    if params.get("bvars", None) is not None:
        cargs.extend([
            "-o",
            execution.input_file(params.get("bvars", None))
        ])
    if params.get("shcond", False):
        cargs.append("--shcond")
    if params.get("loadbvars", False):
        cargs.append("--loadbvars")
    return cargs


def first_outputs(
    params: FirstParameters,
    execution: Execution,
) -> FirstOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FirstOutputs(
        root=execution.output_file("."),
        segmented_output_image=execution.output_file(params.get("output_name", None) + "_seg.nii.gz"),
    )
    return ret


def first_execute(
    params: FirstParameters,
    runner: Runner | None = None,
) -> FirstOutputs:
    """
    first
    
    A command-line tool for segmenting subcortical structures in MRI images
    using models and transformations.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FirstOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIRST_METADATA)
    params = execution.params(params)
    cargs = first_cargs(params, execution)
    ret = first_outputs(params, execution)
    execution.run(cargs)
    return ret


def first(
    input_file: InputPathType,
    output_name: str,
    input_model: InputPathType,
    flirt_matrix: InputPathType,
    verbose: bool = False,
    help_: bool = False,
    input_model2: InputPathType | None = None,
    nmodes: float | None = None,
    intref: bool = False,
    multi_image_input: bool = False,
    binary_surface_output: bool = False,
    bmap_name: InputPathType | None = None,
    bvars: InputPathType | None = None,
    shcond: bool = False,
    loadbvars: bool = False,
    runner: Runner | None = None,
) -> FirstOutputs:
    """
    first
    
    A command-line tool for segmenting subcortical structures in MRI images
    using models and transformations.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Filename of input image to be segmented.
        output_name: Output name.
        input_model: Filename of input model (the structure to be segmented).
        flirt_matrix: Filename of flirt matrix that transform input image to\
            MNI space (output of first_flirt).
        verbose: Switch on diagnostic messages.
        help_: Display help message.
        input_model2: Filename of second input model (the structure to be\
            segmented).
        nmodes: Specifies number of modes used.
        intref: Use structure specified by modelname2 as intensity reference.
        multi_image_input: Use structure specified by modelname2 as intensity\
            reference.
        binary_surface_output: Use structure specified by modelname2 as\
            intensity reference.
        bmap_name: Filename of conditional mapping matrix.
        bvars: Initialize using bvars from a previous segmentation. When using\
            with --shcond specifies the shape of the structure we are conditioning\
            on.
        shcond: Use conditional shape probability.
        loadbvars: Load initial parameter estimates from a previous\
            segmentation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FirstOutputs`).
    """
    params = first_params(
        input_file=input_file,
        output_name=output_name,
        input_model=input_model,
        flirt_matrix=flirt_matrix,
        verbose=verbose,
        help_=help_,
        input_model2=input_model2,
        nmodes=nmodes,
        intref=intref,
        multi_image_input=multi_image_input,
        binary_surface_output=binary_surface_output,
        bmap_name=bmap_name,
        bvars=bvars,
        shcond=shcond,
        loadbvars=loadbvars,
    )
    return first_execute(params, runner)


__all__ = [
    "FIRST_METADATA",
    "FirstOutputs",
    "first",
    "first_execute",
    "first_params",
]
