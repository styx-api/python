# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIRST_MULT_BCORR_METADATA = Metadata(
    id="2405073c26386db0c12ba2a8300362e7d308d76e.boutiques",
    name="first_mult_bcorr",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FirstMultBcorrParameters = typing.TypedDict('FirstMultBcorrParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/first_mult_bcorr"]],
    "input_image": InputPathType,
    "corrected_4d_labels": InputPathType,
    "uncorrected_4d_labels": InputPathType,
    "output_image": str,
    "verbose_flag": bool,
    "help_flag": bool,
})
FirstMultBcorrParametersTagged = typing.TypedDict('FirstMultBcorrParametersTagged', {
    "@type": typing.Literal["fsl/first_mult_bcorr"],
    "input_image": InputPathType,
    "corrected_4d_labels": InputPathType,
    "uncorrected_4d_labels": InputPathType,
    "output_image": str,
    "verbose_flag": bool,
    "help_flag": bool,
})


class FirstMultBcorrOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FirstMultBcorrParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Output image name (3D label image)"""


def first_mult_bcorr_params(
    input_image: InputPathType,
    corrected_4d_labels: InputPathType,
    uncorrected_4d_labels: InputPathType,
    output_image: str,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> FirstMultBcorrParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Filename of original T1 input image.
        corrected_4d_labels: Filename of 4D image of individually corrected\
            labels.
        uncorrected_4d_labels: Filename of 4D image of uncorrected labels (with\
            boundaries).
        output_image: Output image name (3D label image).
        verbose_flag: Output F-stats to standard out.
        help_flag: Display this help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/first_mult_bcorr",
        "input_image": input_image,
        "corrected_4d_labels": corrected_4d_labels,
        "uncorrected_4d_labels": uncorrected_4d_labels,
        "output_image": output_image,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    return params


def first_mult_bcorr_cargs(
    params: FirstMultBcorrParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("first_mult_bcorr")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_image", None))
    ])
    cargs.extend([
        "-c",
        execution.input_file(params.get("corrected_4d_labels", None))
    ])
    cargs.extend([
        "-u",
        execution.input_file(params.get("uncorrected_4d_labels", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_image", None)
    ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def first_mult_bcorr_outputs(
    params: FirstMultBcorrParameters,
    execution: Execution,
) -> FirstMultBcorrOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FirstMultBcorrOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_image", None)),
    )
    return ret


def first_mult_bcorr_execute(
    params: FirstMultBcorrParameters,
    runner: Runner | None = None,
) -> FirstMultBcorrOutputs:
    """
    first_mult_bcorr
    
    Part of FSL (ID: 6.0.5:9e026117), first_mult_bcorr converts label images to
    an output image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FirstMultBcorrOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIRST_MULT_BCORR_METADATA)
    params = execution.params(params)
    cargs = first_mult_bcorr_cargs(params, execution)
    ret = first_mult_bcorr_outputs(params, execution)
    execution.run(cargs)
    return ret


def first_mult_bcorr(
    input_image: InputPathType,
    corrected_4d_labels: InputPathType,
    uncorrected_4d_labels: InputPathType,
    output_image: str,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FirstMultBcorrOutputs:
    """
    first_mult_bcorr
    
    Part of FSL (ID: 6.0.5:9e026117), first_mult_bcorr converts label images to
    an output image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Filename of original T1 input image.
        corrected_4d_labels: Filename of 4D image of individually corrected\
            labels.
        uncorrected_4d_labels: Filename of 4D image of uncorrected labels (with\
            boundaries).
        output_image: Output image name (3D label image).
        verbose_flag: Output F-stats to standard out.
        help_flag: Display this help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FirstMultBcorrOutputs`).
    """
    params = first_mult_bcorr_params(
        input_image=input_image,
        corrected_4d_labels=corrected_4d_labels,
        uncorrected_4d_labels=uncorrected_4d_labels,
        output_image=output_image,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return first_mult_bcorr_execute(params, runner)


__all__ = [
    "FIRST_MULT_BCORR_METADATA",
    "FirstMultBcorrOutputs",
    "first_mult_bcorr",
    "first_mult_bcorr_execute",
    "first_mult_bcorr_params",
]
