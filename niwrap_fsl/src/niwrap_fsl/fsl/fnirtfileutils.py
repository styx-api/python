# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FNIRTFILEUTILS_METADATA = Metadata(
    id="73625369dfdb0fb4ad4ccc9bf7c6bfab9934ca02.boutiques",
    name="fnirtfileutils",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FnirtfileutilsParameters = typing.TypedDict('FnirtfileutilsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fnirtfileutils"]],
    "input_coefs": InputPathType,
    "ref_volume": typing.NotRequired[InputPathType | None],
    "out_field": typing.NotRequired[str | None],
    "output_format": typing.NotRequired[str | None],
    "warp_res": typing.NotRequired[float | None],
    "knot_space": typing.NotRequired[float | None],
    "jacobian_output": typing.NotRequired[str | None],
    "jacobian_matrix_output": typing.NotRequired[str | None],
    "with_aff": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})
FnirtfileutilsParametersTagged = typing.TypedDict('FnirtfileutilsParametersTagged', {
    "@type": typing.Literal["fsl/fnirtfileutils"],
    "input_coefs": InputPathType,
    "ref_volume": typing.NotRequired[InputPathType | None],
    "out_field": typing.NotRequired[str | None],
    "output_format": typing.NotRequired[str | None],
    "warp_res": typing.NotRequired[float | None],
    "knot_space": typing.NotRequired[float | None],
    "jacobian_output": typing.NotRequired[str | None],
    "jacobian_matrix_output": typing.NotRequired[str | None],
    "with_aff": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})


class FnirtfileutilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FnirtfileutilsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_field_file: OutputPathType | None
    """Output field or coefficient volume"""
    jacobian_output_file: OutputPathType | None
    """Output jacobian determinant map volume"""
    jacobian_matrix_file: OutputPathType | None
    """Output full jacobian matrix 4D-map volume"""


def fnirtfileutils_params(
    input_coefs: InputPathType,
    ref_volume: InputPathType | None = None,
    out_field: str | None = None,
    output_format: str | None = None,
    warp_res: float | None = None,
    knot_space: float | None = None,
    jacobian_output: str | None = None,
    jacobian_matrix_output: str | None = None,
    with_aff: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> FnirtfileutilsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_coefs: Filename of input coefficient volume to be converted.
        ref_volume: Filename for reference volume.
        out_field: Filename for output field/coef volume - uses relative warp\
            convention.
        output_format: Output format [field, spline], default=field.
        warp_res: Warp resolution (mm), only relevant when --outformat=spline.
        knot_space: Knot-spacing (voxels), only relevant when\
            --outformat=spline.
        jacobian_output: Filename for output jacobian determinant map volume.
        jacobian_matrix_output: Filename for output full jacobian matrix 4D-map\
            volume.
        with_aff: If set, the affine transform is included in the\
            field/jacobian.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display this help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fnirtfileutils",
        "input_coefs": input_coefs,
        "with_aff": with_aff,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if ref_volume is not None:
        params["ref_volume"] = ref_volume
    if out_field is not None:
        params["out_field"] = out_field
    if output_format is not None:
        params["output_format"] = output_format
    if warp_res is not None:
        params["warp_res"] = warp_res
    if knot_space is not None:
        params["knot_space"] = knot_space
    if jacobian_output is not None:
        params["jacobian_output"] = jacobian_output
    if jacobian_matrix_output is not None:
        params["jacobian_matrix_output"] = jacobian_matrix_output
    return params


def fnirtfileutils_cargs(
    params: FnirtfileutilsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fnirtfileutils")
    cargs.extend([
        "--in",
        execution.input_file(params.get("input_coefs", None))
    ])
    if params.get("ref_volume", None) is not None:
        cargs.extend([
            "--ref",
            execution.input_file(params.get("ref_volume", None))
        ])
    if params.get("out_field", None) is not None:
        cargs.extend([
            "--out",
            params.get("out_field", None)
        ])
    if params.get("output_format", None) is not None:
        cargs.extend([
            "--outformat",
            params.get("output_format", None)
        ])
    if params.get("warp_res", None) is not None:
        cargs.extend([
            "--warpres",
            str(params.get("warp_res", None))
        ])
    if params.get("knot_space", None) is not None:
        cargs.extend([
            "--knotspace",
            str(params.get("knot_space", None))
        ])
    if params.get("jacobian_output", None) is not None:
        cargs.extend([
            "--jac",
            params.get("jacobian_output", None)
        ])
    if params.get("jacobian_matrix_output", None) is not None:
        cargs.extend([
            "--matjac",
            params.get("jacobian_matrix_output", None)
        ])
    if params.get("with_aff", False):
        cargs.append("--withaff")
    if params.get("verbose_flag", False):
        cargs.append("--verbose")
    if params.get("help_flag", False):
        cargs.append("--help")
    return cargs


def fnirtfileutils_outputs(
    params: FnirtfileutilsParameters,
    execution: Execution,
) -> FnirtfileutilsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FnirtfileutilsOutputs(
        root=execution.output_file("."),
        output_field_file=execution.output_file(params.get("out_field", None) + ".nii.gz") if (params.get("out_field") is not None) else None,
        jacobian_output_file=execution.output_file(params.get("jacobian_output", None) + ".nii.gz") if (params.get("jacobian_output") is not None) else None,
        jacobian_matrix_file=execution.output_file(params.get("jacobian_matrix_output", None) + ".nii.gz") if (params.get("jacobian_matrix_output") is not None) else None,
    )
    return ret


def fnirtfileutils_execute(
    params: FnirtfileutilsParameters,
    runner: Runner | None = None,
) -> FnirtfileutilsOutputs:
    """
    fnirtfileutils
    
    FNIRT file utilities for FSL - Converts FNIRT warp field coefficients to
    other formats.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FnirtfileutilsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FNIRTFILEUTILS_METADATA)
    params = execution.params(params)
    cargs = fnirtfileutils_cargs(params, execution)
    ret = fnirtfileutils_outputs(params, execution)
    execution.run(cargs)
    return ret


def fnirtfileutils(
    input_coefs: InputPathType,
    ref_volume: InputPathType | None = None,
    out_field: str | None = None,
    output_format: str | None = None,
    warp_res: float | None = None,
    knot_space: float | None = None,
    jacobian_output: str | None = None,
    jacobian_matrix_output: str | None = None,
    with_aff: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FnirtfileutilsOutputs:
    """
    fnirtfileutils
    
    FNIRT file utilities for FSL - Converts FNIRT warp field coefficients to
    other formats.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_coefs: Filename of input coefficient volume to be converted.
        ref_volume: Filename for reference volume.
        out_field: Filename for output field/coef volume - uses relative warp\
            convention.
        output_format: Output format [field, spline], default=field.
        warp_res: Warp resolution (mm), only relevant when --outformat=spline.
        knot_space: Knot-spacing (voxels), only relevant when\
            --outformat=spline.
        jacobian_output: Filename for output jacobian determinant map volume.
        jacobian_matrix_output: Filename for output full jacobian matrix 4D-map\
            volume.
        with_aff: If set, the affine transform is included in the\
            field/jacobian.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display this help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FnirtfileutilsOutputs`).
    """
    params = fnirtfileutils_params(
        input_coefs=input_coefs,
        ref_volume=ref_volume,
        out_field=out_field,
        output_format=output_format,
        warp_res=warp_res,
        knot_space=knot_space,
        jacobian_output=jacobian_output,
        jacobian_matrix_output=jacobian_matrix_output,
        with_aff=with_aff,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return fnirtfileutils_execute(params, runner)


__all__ = [
    "FNIRTFILEUTILS_METADATA",
    "FnirtfileutilsOutputs",
    "fnirtfileutils",
    "fnirtfileutils_execute",
    "fnirtfileutils_params",
]
