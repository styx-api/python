# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSL_GLM_METADATA = Metadata(
    id="6876117e7181a7a070411d19bb3b4820e3c4bf7f.boutiques",
    name="fsl_glm",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslGlmParameters = typing.TypedDict('FslGlmParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fsl_glm"]],
    "input_file": InputPathType,
    "design_matrix": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "contrasts": typing.NotRequired[InputPathType | None],
    "mask_file": typing.NotRequired[InputPathType | None],
    "dof": typing.NotRequired[float | None],
    "design_norm_flag": bool,
    "data_norm_flag": bool,
    "vn_flag": bool,
    "demean_flag": bool,
    "output_copes": typing.NotRequired[str | None],
    "output_zstats": typing.NotRequired[str | None],
    "output_tstats": typing.NotRequired[str | None],
    "output_pvals": typing.NotRequired[str | None],
    "output_fvals": typing.NotRequired[str | None],
    "output_pfvals": typing.NotRequired[str | None],
    "output_residuals": typing.NotRequired[str | None],
    "output_varcb": typing.NotRequired[str | None],
    "output_sigsq": typing.NotRequired[str | None],
    "output_data": typing.NotRequired[str | None],
    "output_vnscales": typing.NotRequired[str | None],
    "vx_text": typing.NotRequired[list[str] | None],
    "vx_images": typing.NotRequired[list[InputPathType] | None],
    "help_flag": bool,
})
FslGlmParametersTagged = typing.TypedDict('FslGlmParametersTagged', {
    "@type": typing.Literal["fsl/fsl_glm"],
    "input_file": InputPathType,
    "design_matrix": InputPathType,
    "output_file": typing.NotRequired[str | None],
    "contrasts": typing.NotRequired[InputPathType | None],
    "mask_file": typing.NotRequired[InputPathType | None],
    "dof": typing.NotRequired[float | None],
    "design_norm_flag": bool,
    "data_norm_flag": bool,
    "vn_flag": bool,
    "demean_flag": bool,
    "output_copes": typing.NotRequired[str | None],
    "output_zstats": typing.NotRequired[str | None],
    "output_tstats": typing.NotRequired[str | None],
    "output_pvals": typing.NotRequired[str | None],
    "output_fvals": typing.NotRequired[str | None],
    "output_pfvals": typing.NotRequired[str | None],
    "output_residuals": typing.NotRequired[str | None],
    "output_varcb": typing.NotRequired[str | None],
    "output_sigsq": typing.NotRequired[str | None],
    "output_data": typing.NotRequired[str | None],
    "output_vnscales": typing.NotRequired[str | None],
    "vx_text": typing.NotRequired[list[str] | None],
    "vx_images": typing.NotRequired[list[InputPathType] | None],
    "help_flag": bool,
})


class FslGlmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslGlmParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file_out: OutputPathType | None
    """Output file name for GLM parameter estimates (GLM betas)"""
    output_copes_out: OutputPathType | None
    """Output file name for COPEs (either as text file or image)"""
    output_zstats_out: OutputPathType | None
    """Output file name for Z-stats (either as text file or image)"""
    output_tstats_out: OutputPathType | None
    """Output file name for t-stats (either as text file or image)"""
    output_pvals_out: OutputPathType | None
    """Output file name for p-values of Z-stats (either as text file or
    image)"""
    output_fvals_out: OutputPathType | None
    """Output file name for F-value of full model fit"""
    output_pfvals_out: OutputPathType | None
    """Output file name for p-value for full model fit"""
    output_residuals_out: OutputPathType | None
    """Output file name for residuals"""
    output_varcb_out: OutputPathType | None
    """Output file name for variance of COPEs"""
    output_sigsq_out: OutputPathType | None
    """Output file name for residual noise variance sigma-square"""
    output_data_out: OutputPathType | None
    """Output file name for pre-processed data"""
    output_vnscales_out: OutputPathType | None
    """Output file name for scaling factors for variance normalisation"""


def fsl_glm_params(
    input_file: InputPathType,
    design_matrix: InputPathType,
    output_file: str | None = None,
    contrasts: InputPathType | None = None,
    mask_file: InputPathType | None = None,
    dof: float | None = None,
    design_norm_flag: bool = False,
    data_norm_flag: bool = False,
    vn_flag: bool = False,
    demean_flag: bool = False,
    output_copes: str | None = None,
    output_zstats: str | None = None,
    output_tstats: str | None = None,
    output_pvals: str | None = None,
    output_fvals: str | None = None,
    output_pfvals: str | None = None,
    output_residuals: str | None = None,
    output_varcb: str | None = None,
    output_sigsq: str | None = None,
    output_data: str | None = None,
    output_vnscales: str | None = None,
    vx_text: list[str] | None = None,
    vx_images: list[InputPathType] | None = None,
    help_flag: bool = False,
) -> FslGlmParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input file name (text matrix or 3D/4D image file).
        design_matrix: File name of the GLM design matrix (text time courses\
            for temporal regression or an image file for spatial regression).
        output_file: Output file name for GLM parameter estimates (GLM betas).
        contrasts: Matrix of t-statistics contrasts.
        mask_file: Mask image file name if input is image.
        dof: Set degrees-of-freedom explicitly.
        design_norm_flag: Switch on normalisation of the design matrix columns\
            to unit std. deviation.
        data_norm_flag: Switch on normalisation of the data time series to unit\
            std. deviation.
        vn_flag: Perform MELODIC variance-normalisation on data.
        demean_flag: Switch on de-meaning of design and data.
        output_copes: Output file name for COPEs (either as text file or image).
        output_zstats: Output file name for Z-stats (either as text file or\
            image).
        output_tstats: Output file name for t-stats (either as text file or\
            image).
        output_pvals: Output file name for p-values of Z-stats (either as text\
            file or image).
        output_fvals: Output file name for F-value of full model fit.
        output_pfvals: Output file name for p-value for full model fit.
        output_residuals: Output file name for residuals.
        output_varcb: Output file name for variance of COPEs.
        output_sigsq: Output file name for residual noise variance sigma-square.
        output_data: Output file name for pre-processed data.
        output_vnscales: Output file name for scaling factors for variance\
            normalisation.
        vx_text: List of text files containing text matrix confounds. Caution,\
            BETA option.
        vx_images: List of 4D images containing voxelwise confounds. Caution,\
            BETA option.
        help_flag: Display this help text.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fsl_glm",
        "input_file": input_file,
        "design_matrix": design_matrix,
        "design_norm_flag": design_norm_flag,
        "data_norm_flag": data_norm_flag,
        "vn_flag": vn_flag,
        "demean_flag": demean_flag,
        "help_flag": help_flag,
    }
    if output_file is not None:
        params["output_file"] = output_file
    if contrasts is not None:
        params["contrasts"] = contrasts
    if mask_file is not None:
        params["mask_file"] = mask_file
    if dof is not None:
        params["dof"] = dof
    if output_copes is not None:
        params["output_copes"] = output_copes
    if output_zstats is not None:
        params["output_zstats"] = output_zstats
    if output_tstats is not None:
        params["output_tstats"] = output_tstats
    if output_pvals is not None:
        params["output_pvals"] = output_pvals
    if output_fvals is not None:
        params["output_fvals"] = output_fvals
    if output_pfvals is not None:
        params["output_pfvals"] = output_pfvals
    if output_residuals is not None:
        params["output_residuals"] = output_residuals
    if output_varcb is not None:
        params["output_varcb"] = output_varcb
    if output_sigsq is not None:
        params["output_sigsq"] = output_sigsq
    if output_data is not None:
        params["output_data"] = output_data
    if output_vnscales is not None:
        params["output_vnscales"] = output_vnscales
    if vx_text is not None:
        params["vx_text"] = vx_text
    if vx_images is not None:
        params["vx_images"] = vx_images
    return params


def fsl_glm_cargs(
    params: FslGlmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsl_glm")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-d",
        execution.input_file(params.get("design_matrix", None))
    ])
    if params.get("output_file", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_file", None)
        ])
    if params.get("contrasts", None) is not None:
        cargs.extend([
            "-c",
            execution.input_file(params.get("contrasts", None))
        ])
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("dof", None) is not None:
        cargs.extend([
            "--dof",
            str(params.get("dof", None))
        ])
    if params.get("design_norm_flag", False):
        cargs.append("--des_norm")
    if params.get("data_norm_flag", False):
        cargs.append("--dat_norm")
    if params.get("vn_flag", False):
        cargs.append("--vn")
    if params.get("demean_flag", False):
        cargs.append("--demean")
    if params.get("output_copes", None) is not None:
        cargs.extend([
            "--out_cope",
            params.get("output_copes", None)
        ])
    if params.get("output_zstats", None) is not None:
        cargs.extend([
            "--out_z",
            params.get("output_zstats", None)
        ])
    if params.get("output_tstats", None) is not None:
        cargs.extend([
            "--out_t",
            params.get("output_tstats", None)
        ])
    if params.get("output_pvals", None) is not None:
        cargs.extend([
            "--out_p",
            params.get("output_pvals", None)
        ])
    if params.get("output_fvals", None) is not None:
        cargs.extend([
            "--out_f",
            params.get("output_fvals", None)
        ])
    if params.get("output_pfvals", None) is not None:
        cargs.extend([
            "--out_pf",
            params.get("output_pfvals", None)
        ])
    if params.get("output_residuals", None) is not None:
        cargs.extend([
            "--out_res",
            params.get("output_residuals", None)
        ])
    if params.get("output_varcb", None) is not None:
        cargs.extend([
            "--out_varcb",
            params.get("output_varcb", None)
        ])
    if params.get("output_sigsq", None) is not None:
        cargs.extend([
            "--out_sigsq",
            params.get("output_sigsq", None)
        ])
    if params.get("output_data", None) is not None:
        cargs.extend([
            "--out_data",
            params.get("output_data", None)
        ])
    if params.get("output_vnscales", None) is not None:
        cargs.extend([
            "--out_vnscales",
            params.get("output_vnscales", None)
        ])
    if params.get("vx_text", None) is not None:
        cargs.extend([
            "--vxt",
            *params.get("vx_text", None)
        ])
    if params.get("vx_images", None) is not None:
        cargs.extend([
            "--vxf",
            *[execution.input_file(f) for f in params.get("vx_images", None)]
        ])
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def fsl_glm_outputs(
    params: FslGlmParameters,
    execution: Execution,
) -> FslGlmOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslGlmOutputs(
        root=execution.output_file("."),
        output_file_out=execution.output_file(params.get("output_file", None) + ".nii.gz") if (params.get("output_file") is not None) else None,
        output_copes_out=execution.output_file(params.get("output_copes", None) + ".nii.gz") if (params.get("output_copes") is not None) else None,
        output_zstats_out=execution.output_file(params.get("output_zstats", None) + ".nii.gz") if (params.get("output_zstats") is not None) else None,
        output_tstats_out=execution.output_file(params.get("output_tstats", None) + ".nii.gz") if (params.get("output_tstats") is not None) else None,
        output_pvals_out=execution.output_file(params.get("output_pvals", None) + ".nii.gz") if (params.get("output_pvals") is not None) else None,
        output_fvals_out=execution.output_file(params.get("output_fvals", None) + ".nii.gz") if (params.get("output_fvals") is not None) else None,
        output_pfvals_out=execution.output_file(params.get("output_pfvals", None) + ".nii.gz") if (params.get("output_pfvals") is not None) else None,
        output_residuals_out=execution.output_file(params.get("output_residuals", None) + ".nii.gz") if (params.get("output_residuals") is not None) else None,
        output_varcb_out=execution.output_file(params.get("output_varcb", None) + ".nii.gz") if (params.get("output_varcb") is not None) else None,
        output_sigsq_out=execution.output_file(params.get("output_sigsq", None) + ".nii.gz") if (params.get("output_sigsq") is not None) else None,
        output_data_out=execution.output_file(params.get("output_data", None) + ".nii.gz") if (params.get("output_data") is not None) else None,
        output_vnscales_out=execution.output_file(params.get("output_vnscales", None) + ".nii.gz") if (params.get("output_vnscales") is not None) else None,
    )
    return ret


def fsl_glm_execute(
    params: FslGlmParameters,
    runner: Runner | None = None,
) -> FslGlmOutputs:
    """
    fsl_glm
    
    Simple GLM allowing temporal or spatial regression on either text data or
    images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslGlmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSL_GLM_METADATA)
    params = execution.params(params)
    cargs = fsl_glm_cargs(params, execution)
    ret = fsl_glm_outputs(params, execution)
    execution.run(cargs)
    return ret


def fsl_glm(
    input_file: InputPathType,
    design_matrix: InputPathType,
    output_file: str | None = None,
    contrasts: InputPathType | None = None,
    mask_file: InputPathType | None = None,
    dof: float | None = None,
    design_norm_flag: bool = False,
    data_norm_flag: bool = False,
    vn_flag: bool = False,
    demean_flag: bool = False,
    output_copes: str | None = None,
    output_zstats: str | None = None,
    output_tstats: str | None = None,
    output_pvals: str | None = None,
    output_fvals: str | None = None,
    output_pfvals: str | None = None,
    output_residuals: str | None = None,
    output_varcb: str | None = None,
    output_sigsq: str | None = None,
    output_data: str | None = None,
    output_vnscales: str | None = None,
    vx_text: list[str] | None = None,
    vx_images: list[InputPathType] | None = None,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FslGlmOutputs:
    """
    fsl_glm
    
    Simple GLM allowing temporal or spatial regression on either text data or
    images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input file name (text matrix or 3D/4D image file).
        design_matrix: File name of the GLM design matrix (text time courses\
            for temporal regression or an image file for spatial regression).
        output_file: Output file name for GLM parameter estimates (GLM betas).
        contrasts: Matrix of t-statistics contrasts.
        mask_file: Mask image file name if input is image.
        dof: Set degrees-of-freedom explicitly.
        design_norm_flag: Switch on normalisation of the design matrix columns\
            to unit std. deviation.
        data_norm_flag: Switch on normalisation of the data time series to unit\
            std. deviation.
        vn_flag: Perform MELODIC variance-normalisation on data.
        demean_flag: Switch on de-meaning of design and data.
        output_copes: Output file name for COPEs (either as text file or image).
        output_zstats: Output file name for Z-stats (either as text file or\
            image).
        output_tstats: Output file name for t-stats (either as text file or\
            image).
        output_pvals: Output file name for p-values of Z-stats (either as text\
            file or image).
        output_fvals: Output file name for F-value of full model fit.
        output_pfvals: Output file name for p-value for full model fit.
        output_residuals: Output file name for residuals.
        output_varcb: Output file name for variance of COPEs.
        output_sigsq: Output file name for residual noise variance sigma-square.
        output_data: Output file name for pre-processed data.
        output_vnscales: Output file name for scaling factors for variance\
            normalisation.
        vx_text: List of text files containing text matrix confounds. Caution,\
            BETA option.
        vx_images: List of 4D images containing voxelwise confounds. Caution,\
            BETA option.
        help_flag: Display this help text.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslGlmOutputs`).
    """
    params = fsl_glm_params(
        input_file=input_file,
        design_matrix=design_matrix,
        output_file=output_file,
        contrasts=contrasts,
        mask_file=mask_file,
        dof=dof,
        design_norm_flag=design_norm_flag,
        data_norm_flag=data_norm_flag,
        vn_flag=vn_flag,
        demean_flag=demean_flag,
        output_copes=output_copes,
        output_zstats=output_zstats,
        output_tstats=output_tstats,
        output_pvals=output_pvals,
        output_fvals=output_fvals,
        output_pfvals=output_pfvals,
        output_residuals=output_residuals,
        output_varcb=output_varcb,
        output_sigsq=output_sigsq,
        output_data=output_data,
        output_vnscales=output_vnscales,
        vx_text=vx_text,
        vx_images=vx_images,
        help_flag=help_flag,
    )
    return fsl_glm_execute(params, runner)


__all__ = [
    "FSL_GLM_METADATA",
    "FslGlmOutputs",
    "fsl_glm",
    "fsl_glm_execute",
    "fsl_glm_params",
]
