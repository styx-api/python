# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSL_REGFILT_METADATA = Metadata(
    id="f254519eb2b310726f1f1ef054ad73e4b899714c.boutiques",
    name="fsl_regfilt",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslRegfiltParameters = typing.TypedDict('FslRegfiltParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fsl_regfilt"]],
    "infile": InputPathType,
    "designfile": InputPathType,
    "outfile": str,
    "maskfile": typing.NotRequired[InputPathType | None],
    "filter": typing.NotRequired[str | None],
    "freq_filter_flag": bool,
    "freq_ic_flag": bool,
    "freq_ic_smooth": typing.NotRequired[float | None],
    "fthresh": typing.NotRequired[float | None],
    "fthresh2": typing.NotRequired[float | None],
    "vn_flag": bool,
    "verbose_flag": bool,
    "aggressive_flag": bool,
    "help_flag": bool,
    "out_data": typing.NotRequired[str | None],
    "out_mix": typing.NotRequired[str | None],
    "out_vnscales": typing.NotRequired[str | None],
})
FslRegfiltParametersTagged = typing.TypedDict('FslRegfiltParametersTagged', {
    "@type": typing.Literal["fsl/fsl_regfilt"],
    "infile": InputPathType,
    "designfile": InputPathType,
    "outfile": str,
    "maskfile": typing.NotRequired[InputPathType | None],
    "filter": typing.NotRequired[str | None],
    "freq_filter_flag": bool,
    "freq_ic_flag": bool,
    "freq_ic_smooth": typing.NotRequired[float | None],
    "fthresh": typing.NotRequired[float | None],
    "fthresh2": typing.NotRequired[float | None],
    "vn_flag": bool,
    "verbose_flag": bool,
    "aggressive_flag": bool,
    "help_flag": bool,
    "out_data": typing.NotRequired[str | None],
    "out_mix": typing.NotRequired[str | None],
    "out_vnscales": typing.NotRequired[str | None],
})


class FslRegfiltOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslRegfiltParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    filtered_data: OutputPathType
    """Filtered data output"""
    preprocessed_data: OutputPathType | None
    """Pre-processed data output"""
    mixing_matrix: OutputPathType | None
    """New mixing matrix output"""
    vnscales: OutputPathType | None
    """Variance normalisation scaling factors output"""


def fsl_regfilt_params(
    infile: InputPathType,
    designfile: InputPathType,
    outfile: str,
    maskfile: InputPathType | None = None,
    filter_: str | None = None,
    freq_filter_flag: bool = False,
    freq_ic_flag: bool = False,
    freq_ic_smooth: float | None = None,
    fthresh: float | None = None,
    fthresh2: float | None = None,
    vn_flag: bool = False,
    verbose_flag: bool = False,
    aggressive_flag: bool = False,
    help_flag: bool = False,
    out_data: str | None = None,
    out_mix: str | None = None,
    out_vnscales: str | None = None,
) -> FslRegfiltParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input file name (4D image).
        designfile: File name of the matrix with time courses (e.g. GLM design\
            or MELODIC mixing matrix).
        outfile: Output file name for the filtered data.
        maskfile: Mask image file name.
        filter_: Filter out part of the regression model, e.g., -f "1,2,3".
        freq_filter_flag: Filter out components based on high vs. low frequency\
            content.
        freq_ic_flag: Switch off IC Z-stats filtering as part of frequency\
            filtering.
        freq_ic_smooth: Smoothing width for IC Z-stats filtering as part of\
            frequency filtering.
        fthresh: Frequency threshold ratio; default: 0.15.
        fthresh2: Frequency filter score threshold; default: 0.02.
        vn_flag: Perform variance-normalisation on data.
        verbose_flag: Switch on diagnostic messages.
        aggressive_flag: Switch on aggressive filtering (full instead of\
            partial regression).
        help_flag: Display help text.
        out_data: Output file name for pre-processed data (prior to denoising).
        out_mix: Output file name for new mixing matrix.
        out_vnscales: Output file name for scaling factors from variance\
            normalisation.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fsl_regfilt",
        "infile": infile,
        "designfile": designfile,
        "outfile": outfile,
        "freq_filter_flag": freq_filter_flag,
        "freq_ic_flag": freq_ic_flag,
        "vn_flag": vn_flag,
        "verbose_flag": verbose_flag,
        "aggressive_flag": aggressive_flag,
        "help_flag": help_flag,
    }
    if maskfile is not None:
        params["maskfile"] = maskfile
    if filter_ is not None:
        params["filter"] = filter_
    if freq_ic_smooth is not None:
        params["freq_ic_smooth"] = freq_ic_smooth
    if fthresh is not None:
        params["fthresh"] = fthresh
    if fthresh2 is not None:
        params["fthresh2"] = fthresh2
    if out_data is not None:
        params["out_data"] = out_data
    if out_mix is not None:
        params["out_mix"] = out_mix
    if out_vnscales is not None:
        params["out_vnscales"] = out_vnscales
    return params


def fsl_regfilt_cargs(
    params: FslRegfiltParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsl_regfilt")
    cargs.extend([
        "-i",
        execution.input_file(params.get("infile", None))
    ])
    cargs.extend([
        "-d",
        execution.input_file(params.get("designfile", None))
    ])
    cargs.extend([
        "-o",
        params.get("outfile", None)
    ])
    if params.get("maskfile", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("maskfile", None))
        ])
    if params.get("filter", None) is not None:
        cargs.extend([
            "-f",
            params.get("filter", None)
        ])
    if params.get("freq_filter_flag", False):
        cargs.append("-F")
    if params.get("freq_ic_flag", False):
        cargs.append("--freq_ic")
    if params.get("freq_ic_smooth", None) is not None:
        cargs.extend([
            "--freq_ic_smooth",
            str(params.get("freq_ic_smooth", None))
        ])
    if params.get("fthresh", None) is not None:
        cargs.extend([
            "--fthresh",
            str(params.get("fthresh", None))
        ])
    if params.get("fthresh2", None) is not None:
        cargs.extend([
            "--fthresh2",
            str(params.get("fthresh2", None))
        ])
    if params.get("vn_flag", False):
        cargs.append("--vn")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("aggressive_flag", False):
        cargs.append("-a")
    if params.get("help_flag", False):
        cargs.append("-h")
    if params.get("out_data", None) is not None:
        cargs.extend([
            "--out_data",
            params.get("out_data", None)
        ])
    if params.get("out_mix", None) is not None:
        cargs.extend([
            "--out_mix",
            params.get("out_mix", None)
        ])
    if params.get("out_vnscales", None) is not None:
        cargs.extend([
            "--out_vnscales",
            params.get("out_vnscales", None)
        ])
    return cargs


def fsl_regfilt_outputs(
    params: FslRegfiltParameters,
    execution: Execution,
) -> FslRegfiltOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslRegfiltOutputs(
        root=execution.output_file("."),
        filtered_data=execution.output_file(params.get("outfile", None) + ".nii.gz"),
        preprocessed_data=execution.output_file(params.get("out_data", None) + ".nii.gz") if (params.get("out_data") is not None) else None,
        mixing_matrix=execution.output_file(params.get("out_mix", None) + ".nii.gz") if (params.get("out_mix") is not None) else None,
        vnscales=execution.output_file(params.get("out_vnscales", None) + ".nii.gz") if (params.get("out_vnscales") is not None) else None,
    )
    return ret


def fsl_regfilt_execute(
    params: FslRegfiltParameters,
    runner: Runner | None = None,
) -> FslRegfiltOutputs:
    """
    fsl_regfilt
    
    Data de-noising by regressing out part of a design matrix using simple OLS
    regression on 4D images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslRegfiltOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSL_REGFILT_METADATA)
    params = execution.params(params)
    cargs = fsl_regfilt_cargs(params, execution)
    ret = fsl_regfilt_outputs(params, execution)
    execution.run(cargs)
    return ret


def fsl_regfilt(
    infile: InputPathType,
    designfile: InputPathType,
    outfile: str,
    maskfile: InputPathType | None = None,
    filter_: str | None = None,
    freq_filter_flag: bool = False,
    freq_ic_flag: bool = False,
    freq_ic_smooth: float | None = None,
    fthresh: float | None = None,
    fthresh2: float | None = None,
    vn_flag: bool = False,
    verbose_flag: bool = False,
    aggressive_flag: bool = False,
    help_flag: bool = False,
    out_data: str | None = None,
    out_mix: str | None = None,
    out_vnscales: str | None = None,
    runner: Runner | None = None,
) -> FslRegfiltOutputs:
    """
    fsl_regfilt
    
    Data de-noising by regressing out part of a design matrix using simple OLS
    regression on 4D images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input file name (4D image).
        designfile: File name of the matrix with time courses (e.g. GLM design\
            or MELODIC mixing matrix).
        outfile: Output file name for the filtered data.
        maskfile: Mask image file name.
        filter_: Filter out part of the regression model, e.g., -f "1,2,3".
        freq_filter_flag: Filter out components based on high vs. low frequency\
            content.
        freq_ic_flag: Switch off IC Z-stats filtering as part of frequency\
            filtering.
        freq_ic_smooth: Smoothing width for IC Z-stats filtering as part of\
            frequency filtering.
        fthresh: Frequency threshold ratio; default: 0.15.
        fthresh2: Frequency filter score threshold; default: 0.02.
        vn_flag: Perform variance-normalisation on data.
        verbose_flag: Switch on diagnostic messages.
        aggressive_flag: Switch on aggressive filtering (full instead of\
            partial regression).
        help_flag: Display help text.
        out_data: Output file name for pre-processed data (prior to denoising).
        out_mix: Output file name for new mixing matrix.
        out_vnscales: Output file name for scaling factors from variance\
            normalisation.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslRegfiltOutputs`).
    """
    params = fsl_regfilt_params(
        infile=infile,
        designfile=designfile,
        outfile=outfile,
        maskfile=maskfile,
        filter_=filter_,
        freq_filter_flag=freq_filter_flag,
        freq_ic_flag=freq_ic_flag,
        freq_ic_smooth=freq_ic_smooth,
        fthresh=fthresh,
        fthresh2=fthresh2,
        vn_flag=vn_flag,
        verbose_flag=verbose_flag,
        aggressive_flag=aggressive_flag,
        help_flag=help_flag,
        out_data=out_data,
        out_mix=out_mix,
        out_vnscales=out_vnscales,
    )
    return fsl_regfilt_execute(params, runner)


__all__ = [
    "FSL_REGFILT_METADATA",
    "FslRegfiltOutputs",
    "fsl_regfilt",
    "fsl_regfilt_execute",
    "fsl_regfilt_params",
]
