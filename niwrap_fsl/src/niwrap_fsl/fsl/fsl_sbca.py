# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSL_SBCA_METADATA = Metadata(
    id="05641f8c61b17b79acbd7fe93ce2880376fdae90.boutiques",
    name="fsl_sbca",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslSbcaParameters = typing.TypedDict('FslSbcaParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fsl_sbca"]],
    "infile": InputPathType,
    "seed": InputPathType,
    "target": InputPathType,
    "out": str,
    "reg_flag": bool,
    "conf_files": typing.NotRequired[list[InputPathType] | None],
    "seed_data": typing.NotRequired[InputPathType | None],
    "binarise_flag": bool,
    "mean_flag": bool,
    "abs_cc_flag": bool,
    "order": typing.NotRequired[float | None],
    "out_seeds_flag": bool,
    "out_seedmask_flag": bool,
    "out_ttcs_flag": bool,
    "out_conf_flag": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})
FslSbcaParametersTagged = typing.TypedDict('FslSbcaParametersTagged', {
    "@type": typing.Literal["fsl/fsl_sbca"],
    "infile": InputPathType,
    "seed": InputPathType,
    "target": InputPathType,
    "out": str,
    "reg_flag": bool,
    "conf_files": typing.NotRequired[list[InputPathType] | None],
    "seed_data": typing.NotRequired[InputPathType | None],
    "binarise_flag": bool,
    "mean_flag": bool,
    "abs_cc_flag": bool,
    "order": typing.NotRequired[float | None],
    "out_seeds_flag": bool,
    "out_seedmask_flag": bool,
    "out_ttcs_flag": bool,
    "out_conf_flag": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})


class FslSbcaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslSbcaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_seed_mask_image: OutputPathType
    """Output seed mask image"""
    output_seed_mask_image_base: OutputPathType
    """Output seed mask image"""
    output_confound_time_courses: OutputPathType
    """Output confound time courses"""


def fsl_sbca_params(
    infile: InputPathType,
    seed: InputPathType,
    target: InputPathType,
    out: str,
    reg_flag: bool = False,
    conf_files: list[InputPathType] | None = None,
    seed_data: InputPathType | None = None,
    binarise_flag: bool = False,
    mean_flag: bool = False,
    abs_cc_flag: bool = False,
    order: float | None = None,
    out_seeds_flag: bool = False,
    out_seedmask_flag: bool = False,
    out_ttcs_flag: bool = False,
    out_conf_flag: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> FslSbcaParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input file name (4D image file).
        seed: Seed voxel coordinate or file name of seed mask (3D/4D file).
        target: File name of target mask(s) (3D or 4D file).
        out: Output file base name.
        reg_flag: Perform time series regression rather than classification to\
            targets.
        conf_files: File name (or comma-separated list of file names) for\
            confound ASCII text files.
        seed_data: File name of 4D data file for the seed.
        binarise_flag: Binarise spatial maps prior to calculation of time\
            courses.
        mean_flag: Use mean instead of Eigenvariates for calculation of time\
            courses.
        abs_cc_flag: Use maximum absolute value instead of maximum value of the\
            cross-correlations.
        order: Number of Eigenvariates (default 1).
        out_seeds_flag: Output seed mask image as <basename>_seeds.
        out_seedmask_flag: Output seed mask image as <basename>_seedmask.
        out_ttcs_flag: Output target time courses as <basename>_ttc<X>.txt.
        out_conf_flag: Output confound time courses as <basename>_confounds.txt.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help text.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fsl_sbca",
        "infile": infile,
        "seed": seed,
        "target": target,
        "out": out,
        "reg_flag": reg_flag,
        "binarise_flag": binarise_flag,
        "mean_flag": mean_flag,
        "abs_cc_flag": abs_cc_flag,
        "out_seeds_flag": out_seeds_flag,
        "out_seedmask_flag": out_seedmask_flag,
        "out_ttcs_flag": out_ttcs_flag,
        "out_conf_flag": out_conf_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if conf_files is not None:
        params["conf_files"] = conf_files
    if seed_data is not None:
        params["seed_data"] = seed_data
    if order is not None:
        params["order"] = order
    return params


def fsl_sbca_cargs(
    params: FslSbcaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsl_sbca")
    cargs.extend([
        "--in",
        execution.input_file(params.get("infile", None))
    ])
    cargs.extend([
        "--seed",
        execution.input_file(params.get("seed", None))
    ])
    cargs.extend([
        "--target",
        execution.input_file(params.get("target", None))
    ])
    cargs.extend([
        "--out",
        params.get("out", None)
    ])
    if params.get("reg_flag", False):
        cargs.append("--reg")
    if params.get("conf_files", None) is not None:
        cargs.extend([
            "--conf",
            *[execution.input_file(f) for f in params.get("conf_files", None)]
        ])
    if params.get("seed_data", None) is not None:
        cargs.extend([
            "--seeddata",
            execution.input_file(params.get("seed_data", None))
        ])
    if params.get("binarise_flag", False):
        cargs.append("--bin")
    if params.get("mean_flag", False):
        cargs.append("--mean")
    if params.get("abs_cc_flag", False):
        cargs.append("--abscc")
    if params.get("order", None) is not None:
        cargs.extend([
            "--order",
            str(params.get("order", None))
        ])
    if params.get("out_seeds_flag", False):
        cargs.append("--out_seeds")
    if params.get("out_seedmask_flag", False):
        cargs.append("--out_seedmask")
    if params.get("out_ttcs_flag", False):
        cargs.append("--out_ttcs")
    if params.get("out_conf_flag", False):
        cargs.append("--out_conf")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def fsl_sbca_outputs(
    params: FslSbcaParameters,
    execution: Execution,
) -> FslSbcaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslSbcaOutputs(
        root=execution.output_file("."),
        output_seed_mask_image=execution.output_file(params.get("out", None) + "_seeds"),
        output_seed_mask_image_base=execution.output_file(params.get("out", None) + "_seedmask"),
        output_confound_time_courses=execution.output_file(params.get("out", None) + "_confounds.txt"),
    )
    return ret


def fsl_sbca_execute(
    params: FslSbcaParameters,
    runner: Runner | None = None,
) -> FslSbcaOutputs:
    """
    fsl_sbca
    
    Performs seed-based correlation analysis on FMRI data using either a single
    seed coordinate or a seed mask.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslSbcaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSL_SBCA_METADATA)
    params = execution.params(params)
    cargs = fsl_sbca_cargs(params, execution)
    ret = fsl_sbca_outputs(params, execution)
    execution.run(cargs)
    return ret


def fsl_sbca(
    infile: InputPathType,
    seed: InputPathType,
    target: InputPathType,
    out: str,
    reg_flag: bool = False,
    conf_files: list[InputPathType] | None = None,
    seed_data: InputPathType | None = None,
    binarise_flag: bool = False,
    mean_flag: bool = False,
    abs_cc_flag: bool = False,
    order: float | None = None,
    out_seeds_flag: bool = False,
    out_seedmask_flag: bool = False,
    out_ttcs_flag: bool = False,
    out_conf_flag: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FslSbcaOutputs:
    """
    fsl_sbca
    
    Performs seed-based correlation analysis on FMRI data using either a single
    seed coordinate or a seed mask.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input file name (4D image file).
        seed: Seed voxel coordinate or file name of seed mask (3D/4D file).
        target: File name of target mask(s) (3D or 4D file).
        out: Output file base name.
        reg_flag: Perform time series regression rather than classification to\
            targets.
        conf_files: File name (or comma-separated list of file names) for\
            confound ASCII text files.
        seed_data: File name of 4D data file for the seed.
        binarise_flag: Binarise spatial maps prior to calculation of time\
            courses.
        mean_flag: Use mean instead of Eigenvariates for calculation of time\
            courses.
        abs_cc_flag: Use maximum absolute value instead of maximum value of the\
            cross-correlations.
        order: Number of Eigenvariates (default 1).
        out_seeds_flag: Output seed mask image as <basename>_seeds.
        out_seedmask_flag: Output seed mask image as <basename>_seedmask.
        out_ttcs_flag: Output target time courses as <basename>_ttc<X>.txt.
        out_conf_flag: Output confound time courses as <basename>_confounds.txt.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help text.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslSbcaOutputs`).
    """
    params = fsl_sbca_params(
        infile=infile,
        seed=seed,
        target=target,
        out=out,
        reg_flag=reg_flag,
        conf_files=conf_files,
        seed_data=seed_data,
        binarise_flag=binarise_flag,
        mean_flag=mean_flag,
        abs_cc_flag=abs_cc_flag,
        order=order,
        out_seeds_flag=out_seeds_flag,
        out_seedmask_flag=out_seedmask_flag,
        out_ttcs_flag=out_ttcs_flag,
        out_conf_flag=out_conf_flag,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return fsl_sbca_execute(params, runner)


__all__ = [
    "FSL_SBCA_METADATA",
    "FslSbcaOutputs",
    "fsl_sbca",
    "fsl_sbca_execute",
    "fsl_sbca_params",
]
