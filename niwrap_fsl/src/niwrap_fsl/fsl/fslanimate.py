# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLANIMATE_METADATA = Metadata(
    id="bdeb3d957c688b4f7bc053297d7e57f605f179d8.boutiques",
    name="fslanimate",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslanimateParameters = typing.TypedDict('FslanimateParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslanimate"]],
    "input_file": InputPathType,
    "output_file": str,
    "tmp_dir": typing.NotRequired[str | None],
})
FslanimateParametersTagged = typing.TypedDict('FslanimateParametersTagged', {
    "@type": typing.Literal["fsl/fslanimate"],
    "input_file": InputPathType,
    "output_file": str,
    "tmp_dir": typing.NotRequired[str | None],
})


class FslanimateOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslanimateParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_animation: OutputPathType
    """The resulting animation file"""


def fslanimate_params(
    input_file: InputPathType,
    output_file: str,
    tmp_dir: str | None = None,
) -> FslanimateParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input image file (e.g., input.nii.gz).
        output_file: Output file (e.g., output.gif).
        tmp_dir: Temporary directory for intermediate files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslanimate",
        "input_file": input_file,
        "output_file": output_file,
    }
    if tmp_dir is not None:
        params["tmp_dir"] = tmp_dir
    return params


def fslanimate_cargs(
    params: FslanimateParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslanimate")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    if params.get("tmp_dir", None) is not None:
        cargs.append(params.get("tmp_dir", None))
    return cargs


def fslanimate_outputs(
    params: FslanimateParameters,
    execution: Execution,
) -> FslanimateOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslanimateOutputs(
        root=execution.output_file("."),
        output_animation=execution.output_file(params.get("output_file", None)),
    )
    return ret


def fslanimate_execute(
    params: FslanimateParameters,
    runner: Runner | None = None,
) -> FslanimateOutputs:
    """
    fslanimate
    
    Tool for creating animations from imaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslanimateOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLANIMATE_METADATA)
    params = execution.params(params)
    cargs = fslanimate_cargs(params, execution)
    ret = fslanimate_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslanimate(
    input_file: InputPathType,
    output_file: str,
    tmp_dir: str | None = None,
    runner: Runner | None = None,
) -> FslanimateOutputs:
    """
    fslanimate
    
    Tool for creating animations from imaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input image file (e.g., input.nii.gz).
        output_file: Output file (e.g., output.gif).
        tmp_dir: Temporary directory for intermediate files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslanimateOutputs`).
    """
    params = fslanimate_params(
        input_file=input_file,
        output_file=output_file,
        tmp_dir=tmp_dir,
    )
    return fslanimate_execute(params, runner)


__all__ = [
    "FSLANIMATE_METADATA",
    "FslanimateOutputs",
    "fslanimate",
    "fslanimate_execute",
    "fslanimate_params",
]
