# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLCOMPLEX_METADATA = Metadata(
    id="a86288f4d8eb0af5f4e86ecf837cc032882c7cee.boutiques",
    name="fslcomplex",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslcomplexParameters = typing.TypedDict('FslcomplexParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslcomplex"]],
    "input_file": InputPathType,
    "output_file": str,
    "output_type": typing.Literal["-realabs", "-realphase", "-realpolar", "-realcartesian", "-complex", "-complexpolar", "-complexsplit", "-complexmerge", "-copyonly"],
    "start_vol": typing.NotRequired[int | None],
    "end_vol": typing.NotRequired[int | None],
})
FslcomplexParametersTagged = typing.TypedDict('FslcomplexParametersTagged', {
    "@type": typing.Literal["fsl/fslcomplex"],
    "input_file": InputPathType,
    "output_file": str,
    "output_type": typing.Literal["-realabs", "-realphase", "-realpolar", "-realcartesian", "-complex", "-complexpolar", "-complexsplit", "-complexmerge", "-copyonly"],
    "start_vol": typing.NotRequired[int | None],
    "end_vol": typing.NotRequired[int | None],
})


class FslcomplexOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslcomplexParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    result_output_file: OutputPathType
    """The resulting output file from the specified operation."""


def fslcomplex_params(
    input_file: InputPathType,
    output_file: str,
    output_type: typing.Literal["-realabs", "-realphase", "-realpolar", "-realcartesian", "-complex", "-complexpolar", "-complexsplit", "-complexmerge", "-copyonly"],
    start_vol: int | None = None,
    end_vol: int | None = None,
) -> FslcomplexParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input volume (e.g. complexvol.nii.gz).
        output_file: Output volume (e.g. absvol.nii.gz).
        output_type: Output type (determines the operation to perform).
        start_vol: Start volume (optional).
        end_vol: End volume (optional).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslcomplex",
        "input_file": input_file,
        "output_file": output_file,
        "output_type": output_type,
    }
    if start_vol is not None:
        params["start_vol"] = start_vol
    if end_vol is not None:
        params["end_vol"] = end_vol
    return params


def fslcomplex_cargs(
    params: FslcomplexParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslcomplex")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("output_file", None))
    cargs.append(params.get("output_type", None))
    if params.get("start_vol", None) is not None:
        cargs.append(str(params.get("start_vol", None)))
    if params.get("end_vol", None) is not None:
        cargs.append(str(params.get("end_vol", None)))
    return cargs


def fslcomplex_outputs(
    params: FslcomplexParameters,
    execution: Execution,
) -> FslcomplexOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslcomplexOutputs(
        root=execution.output_file("."),
        result_output_file=execution.output_file(params.get("output_file", None)),
    )
    return ret


def fslcomplex_execute(
    params: FslcomplexParameters,
    runner: Runner | None = None,
) -> FslcomplexOutputs:
    """
    fslcomplex
    
    Tool for manipulating complex-valued MR data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslcomplexOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLCOMPLEX_METADATA)
    params = execution.params(params)
    cargs = fslcomplex_cargs(params, execution)
    ret = fslcomplex_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslcomplex(
    input_file: InputPathType,
    output_file: str,
    output_type: typing.Literal["-realabs", "-realphase", "-realpolar", "-realcartesian", "-complex", "-complexpolar", "-complexsplit", "-complexmerge", "-copyonly"],
    start_vol: int | None = None,
    end_vol: int | None = None,
    runner: Runner | None = None,
) -> FslcomplexOutputs:
    """
    fslcomplex
    
    Tool for manipulating complex-valued MR data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input volume (e.g. complexvol.nii.gz).
        output_file: Output volume (e.g. absvol.nii.gz).
        output_type: Output type (determines the operation to perform).
        start_vol: Start volume (optional).
        end_vol: End volume (optional).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslcomplexOutputs`).
    """
    params = fslcomplex_params(
        input_file=input_file,
        output_file=output_file,
        output_type=output_type,
        start_vol=start_vol,
        end_vol=end_vol,
    )
    return fslcomplex_execute(params, runner)


__all__ = [
    "FSLCOMPLEX_METADATA",
    "FslcomplexOutputs",
    "fslcomplex",
    "fslcomplex_execute",
    "fslcomplex_params",
]
