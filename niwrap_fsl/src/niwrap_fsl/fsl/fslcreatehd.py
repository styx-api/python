# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLCREATEHD_METADATA = Metadata(
    id="672c9bc337d8c46a42d2247bad31762bbb1079d7.boutiques",
    name="fslcreatehd",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslcreatehdParameters = typing.TypedDict('FslcreatehdParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslcreatehd"]],
    "xsize": float,
    "ysize": float,
    "zsize": float,
    "tsize": float,
    "xvoxsize": float,
    "yvoxsize": float,
    "zvoxsize": float,
    "tr": float,
    "xorigin": float,
    "yorigin": float,
    "zorigin": float,
    "datatype": float,
    "headername": str,
    "nifti_xml_file": typing.NotRequired[InputPathType | None],
})
FslcreatehdParametersTagged = typing.TypedDict('FslcreatehdParametersTagged', {
    "@type": typing.Literal["fsl/fslcreatehd"],
    "xsize": float,
    "ysize": float,
    "zsize": float,
    "tsize": float,
    "xvoxsize": float,
    "yvoxsize": float,
    "zvoxsize": float,
    "tr": float,
    "xorigin": float,
    "yorigin": float,
    "zorigin": float,
    "datatype": float,
    "headername": str,
    "nifti_xml_file": typing.NotRequired[InputPathType | None],
})


class FslcreatehdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslcreatehdParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_headerfile: OutputPathType
    """Generated NIfTI header file"""


def fslcreatehd_params(
    xsize: float,
    ysize: float,
    zsize: float,
    tsize: float,
    xvoxsize: float,
    yvoxsize: float,
    zvoxsize: float,
    tr: float,
    xorigin: float,
    yorigin: float,
    zorigin: float,
    datatype: float,
    headername: str,
    nifti_xml_file: InputPathType | None = None,
) -> FslcreatehdParametersTagged:
    """
    Build parameters.
    
    Args:
        xsize: Size of the image in the x dimension.
        ysize: Size of the image in the y dimension.
        zsize: Size of the image in the z dimension.
        tsize: Size of the image in the t dimension (time).
        xvoxsize: Voxel size in the x dimension.
        yvoxsize: Voxel size in the y dimension.
        zvoxsize: Voxel size in the z dimension.
        tr: Repetition time (TR) of the image.
        xorigin: Origin of the image in the x dimension.
        yorigin: Origin of the image in the y dimension.
        zorigin: Origin of the image in the z dimension.
        datatype: Datatype of the image (2=char, 4=short, 8=int, 16=float,\
            64=double).
        headername: Name of the header file to be created.
        nifti_xml_file: NIfTI XML file describing the header configuration\
            (Mutually exclusive with other inputs).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslcreatehd",
        "xsize": xsize,
        "ysize": ysize,
        "zsize": zsize,
        "tsize": tsize,
        "xvoxsize": xvoxsize,
        "yvoxsize": yvoxsize,
        "zvoxsize": zvoxsize,
        "tr": tr,
        "xorigin": xorigin,
        "yorigin": yorigin,
        "zorigin": zorigin,
        "datatype": datatype,
        "headername": headername,
    }
    if nifti_xml_file is not None:
        params["nifti_xml_file"] = nifti_xml_file
    return params


def fslcreatehd_cargs(
    params: FslcreatehdParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslcreatehd")
    cargs.append(str(params.get("xsize", None)))
    cargs.append(str(params.get("ysize", None)))
    cargs.append(str(params.get("zsize", None)))
    cargs.append(str(params.get("tsize", None)))
    cargs.append(str(params.get("xvoxsize", None)))
    cargs.append(str(params.get("yvoxsize", None)))
    cargs.append(str(params.get("zvoxsize", None)))
    cargs.append(str(params.get("tr", None)))
    cargs.append(str(params.get("xorigin", None)))
    cargs.append(str(params.get("yorigin", None)))
    cargs.append(str(params.get("zorigin", None)))
    cargs.append(str(params.get("datatype", None)))
    cargs.append(params.get("headername", None))
    if params.get("nifti_xml_file", None) is not None:
        cargs.append(execution.input_file(params.get("nifti_xml_file", None)))
    return cargs


def fslcreatehd_outputs(
    params: FslcreatehdParameters,
    execution: Execution,
) -> FslcreatehdOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslcreatehdOutputs(
        root=execution.output_file("."),
        out_headerfile=execution.output_file(params.get("headername", None) + ".nii.gz"),
    )
    return ret


def fslcreatehd_execute(
    params: FslcreatehdParameters,
    runner: Runner | None = None,
) -> FslcreatehdOutputs:
    """
    fslcreatehd
    
    Tool to create a new NIfTI header.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslcreatehdOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLCREATEHD_METADATA)
    params = execution.params(params)
    cargs = fslcreatehd_cargs(params, execution)
    ret = fslcreatehd_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslcreatehd(
    xsize: float,
    ysize: float,
    zsize: float,
    tsize: float,
    xvoxsize: float,
    yvoxsize: float,
    zvoxsize: float,
    tr: float,
    xorigin: float,
    yorigin: float,
    zorigin: float,
    datatype: float,
    headername: str,
    nifti_xml_file: InputPathType | None = None,
    runner: Runner | None = None,
) -> FslcreatehdOutputs:
    """
    fslcreatehd
    
    Tool to create a new NIfTI header.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        xsize: Size of the image in the x dimension.
        ysize: Size of the image in the y dimension.
        zsize: Size of the image in the z dimension.
        tsize: Size of the image in the t dimension (time).
        xvoxsize: Voxel size in the x dimension.
        yvoxsize: Voxel size in the y dimension.
        zvoxsize: Voxel size in the z dimension.
        tr: Repetition time (TR) of the image.
        xorigin: Origin of the image in the x dimension.
        yorigin: Origin of the image in the y dimension.
        zorigin: Origin of the image in the z dimension.
        datatype: Datatype of the image (2=char, 4=short, 8=int, 16=float,\
            64=double).
        headername: Name of the header file to be created.
        nifti_xml_file: NIfTI XML file describing the header configuration\
            (Mutually exclusive with other inputs).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslcreatehdOutputs`).
    """
    params = fslcreatehd_params(
        xsize=xsize,
        ysize=ysize,
        zsize=zsize,
        tsize=tsize,
        xvoxsize=xvoxsize,
        yvoxsize=yvoxsize,
        zvoxsize=zvoxsize,
        tr=tr,
        xorigin=xorigin,
        yorigin=yorigin,
        zorigin=zorigin,
        datatype=datatype,
        headername=headername,
        nifti_xml_file=nifti_xml_file,
    )
    return fslcreatehd_execute(params, runner)


__all__ = [
    "FSLCREATEHD_METADATA",
    "FslcreatehdOutputs",
    "fslcreatehd",
    "fslcreatehd_execute",
    "fslcreatehd_params",
]
