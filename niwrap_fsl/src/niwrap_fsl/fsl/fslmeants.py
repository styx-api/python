# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLMEANTS_METADATA = Metadata(
    id="4dbad5c32466bc92651172cf6289711dcf1c344f.boutiques",
    name="fslmeants",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslmeantsParameters = typing.TypedDict('FslmeantsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslmeants"]],
    "input_image": InputPathType,
    "output": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "coordinates": typing.NotRequired[list[float] | None],
    "usemm_flag": bool,
    "showall_flag": bool,
    "eigenv_flag": bool,
    "eigenvariates_order": typing.NotRequired[float | None],
    "no_bin_flag": bool,
    "label_image": typing.NotRequired[InputPathType | None],
    "transpose_flag": bool,
    "weighted_mean_flag": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})
FslmeantsParametersTagged = typing.TypedDict('FslmeantsParametersTagged', {
    "@type": typing.Literal["fsl/fslmeants"],
    "input_image": InputPathType,
    "output": typing.NotRequired[str | None],
    "mask": typing.NotRequired[InputPathType | None],
    "coordinates": typing.NotRequired[list[float] | None],
    "usemm_flag": bool,
    "showall_flag": bool,
    "eigenv_flag": bool,
    "eigenvariates_order": typing.NotRequired[float | None],
    "no_bin_flag": bool,
    "label_image": typing.NotRequired[InputPathType | None],
    "transpose_flag": bool,
    "weighted_mean_flag": bool,
    "verbose_flag": bool,
    "help_flag": bool,
})


class FslmeantsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslmeantsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_text_matrix: OutputPathType | None
    """Output text matrix from fslmeants"""


def fslmeants_params(
    input_image: InputPathType,
    output: str | None = None,
    mask: InputPathType | None = None,
    coordinates: list[float] | None = None,
    usemm_flag: bool = False,
    showall_flag: bool = False,
    eigenv_flag: bool = False,
    eigenvariates_order: float | None = None,
    no_bin_flag: bool = False,
    label_image: InputPathType | None = None,
    transpose_flag: bool = False,
    weighted_mean_flag: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> FslmeantsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input 4D image.
        output: Output text matrix.
        mask: Input 3D mask.
        coordinates: Requested spatial coordinate (instead of mask). Must have\
            exactly three numerical entries in the list (3-vector).
        usemm_flag: Use mm instead of voxel coordinates (for -c option).
        showall_flag: Show all voxel time series (within mask) instead of\
            averaging.
        eigenv_flag: Calculate Eigenvariate(s) instead of mean (output will\
            have 0 mean).
        eigenvariates_order: Select number of Eigenvariates (default 1).
        no_bin_flag: Do not binarise the mask for calculation of Eigenvariates.
        label_image: Input 3D label image (generate separate mean for each\
            integer label value - cannot be used with showall).
        transpose_flag: Output results in transpose format (one row per\
            voxel/mean).
        weighted_mean_flag: Output weighted mean, using mask values as weights,\
            and exit.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display the help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslmeants",
        "input_image": input_image,
        "usemm_flag": usemm_flag,
        "showall_flag": showall_flag,
        "eigenv_flag": eigenv_flag,
        "no_bin_flag": no_bin_flag,
        "transpose_flag": transpose_flag,
        "weighted_mean_flag": weighted_mean_flag,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if output is not None:
        params["output"] = output
    if mask is not None:
        params["mask"] = mask
    if coordinates is not None:
        params["coordinates"] = coordinates
    if eigenvariates_order is not None:
        params["eigenvariates_order"] = eigenvariates_order
    if label_image is not None:
        params["label_image"] = label_image
    return params


def fslmeants_cargs(
    params: FslmeantsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslmeants")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_image", None))
    ])
    if params.get("output", None) is not None:
        cargs.extend([
            "-o",
            params.get("output", None)
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("coordinates", None) is not None:
        cargs.extend([
            "-c",
            *map(str, params.get("coordinates", None))
        ])
    if params.get("usemm_flag", False):
        cargs.append("--usemm")
    if params.get("showall_flag", False):
        cargs.append("--showall")
    if params.get("eigenv_flag", False):
        cargs.append("--eig")
    if params.get("eigenvariates_order", None) is not None:
        cargs.extend([
            "--order",
            str(params.get("eigenvariates_order", None))
        ])
    if params.get("no_bin_flag", False):
        cargs.append("--no_bin")
    if params.get("label_image", None) is not None:
        cargs.extend([
            "--label",
            execution.input_file(params.get("label_image", None))
        ])
    if params.get("transpose_flag", False):
        cargs.append("--transpose")
    if params.get("weighted_mean_flag", False):
        cargs.append("-w")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def fslmeants_outputs(
    params: FslmeantsParameters,
    execution: Execution,
) -> FslmeantsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslmeantsOutputs(
        root=execution.output_file("."),
        output_text_matrix=execution.output_file(params.get("output", None)) if (params.get("output") is not None) else None,
    )
    return ret


def fslmeants_execute(
    params: FslmeantsParameters,
    runner: Runner | None = None,
) -> FslmeantsOutputs:
    """
    fslmeants
    
    Prints average timeseries (intensities) to the screen (or saves to a file).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslmeantsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLMEANTS_METADATA)
    params = execution.params(params)
    cargs = fslmeants_cargs(params, execution)
    ret = fslmeants_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslmeants(
    input_image: InputPathType,
    output: str | None = None,
    mask: InputPathType | None = None,
    coordinates: list[float] | None = None,
    usemm_flag: bool = False,
    showall_flag: bool = False,
    eigenv_flag: bool = False,
    eigenvariates_order: float | None = None,
    no_bin_flag: bool = False,
    label_image: InputPathType | None = None,
    transpose_flag: bool = False,
    weighted_mean_flag: bool = False,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> FslmeantsOutputs:
    """
    fslmeants
    
    Prints average timeseries (intensities) to the screen (or saves to a file).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Input 4D image.
        output: Output text matrix.
        mask: Input 3D mask.
        coordinates: Requested spatial coordinate (instead of mask). Must have\
            exactly three numerical entries in the list (3-vector).
        usemm_flag: Use mm instead of voxel coordinates (for -c option).
        showall_flag: Show all voxel time series (within mask) instead of\
            averaging.
        eigenv_flag: Calculate Eigenvariate(s) instead of mean (output will\
            have 0 mean).
        eigenvariates_order: Select number of Eigenvariates (default 1).
        no_bin_flag: Do not binarise the mask for calculation of Eigenvariates.
        label_image: Input 3D label image (generate separate mean for each\
            integer label value - cannot be used with showall).
        transpose_flag: Output results in transpose format (one row per\
            voxel/mean).
        weighted_mean_flag: Output weighted mean, using mask values as weights,\
            and exit.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display the help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslmeantsOutputs`).
    """
    params = fslmeants_params(
        input_image=input_image,
        output=output,
        mask=mask,
        coordinates=coordinates,
        usemm_flag=usemm_flag,
        showall_flag=showall_flag,
        eigenv_flag=eigenv_flag,
        eigenvariates_order=eigenvariates_order,
        no_bin_flag=no_bin_flag,
        label_image=label_image,
        transpose_flag=transpose_flag,
        weighted_mean_flag=weighted_mean_flag,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return fslmeants_execute(params, runner)


__all__ = [
    "FSLMEANTS_METADATA",
    "FslmeantsOutputs",
    "fslmeants",
    "fslmeants_execute",
    "fslmeants_params",
]
