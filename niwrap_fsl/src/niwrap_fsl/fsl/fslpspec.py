# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLPSPEC_METADATA = Metadata(
    id="b2e748aa04cc04f9115ff307e1950503455d4af2.boutiques",
    name="fslpspec",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslpspecParameters = typing.TypedDict('FslpspecParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslpspec"]],
    "infile": InputPathType,
    "outfile": typing.NotRequired[str | None],
})
FslpspecParametersTagged = typing.TypedDict('FslpspecParametersTagged', {
    "@type": typing.Literal["fsl/fslpspec"],
    "infile": InputPathType,
    "outfile": typing.NotRequired[str | None],
})


class FslpspecOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslpspecParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_pspec: OutputPathType | None
    """Output power spectrum image"""


def fslpspec_params(
    infile: InputPathType,
    outfile: str | None = None,
) -> FslpspecParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input 4D fMRI time series image (e.g. fMRI_data.nii.gz).
        outfile: Output power spectrum image (e.g. pspec_data.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslpspec",
        "infile": infile,
    }
    if outfile is not None:
        params["outfile"] = outfile
    return params


def fslpspec_cargs(
    params: FslpspecParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslpspec")
    cargs.append(execution.input_file(params.get("infile", None)))
    if params.get("outfile", None) is not None:
        cargs.append(params.get("outfile", None))
    return cargs


def fslpspec_outputs(
    params: FslpspecParameters,
    execution: Execution,
) -> FslpspecOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslpspecOutputs(
        root=execution.output_file("."),
        output_pspec=execution.output_file(params.get("outfile", None)) if (params.get("outfile") is not None) else None,
    )
    return ret


def fslpspec_execute(
    params: FslpspecParameters,
    runner: Runner | None = None,
) -> FslpspecOutputs:
    """
    fslpspec
    
    Estimate the power spectrum of 4D fMRI time series data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslpspecOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLPSPEC_METADATA)
    params = execution.params(params)
    cargs = fslpspec_cargs(params, execution)
    ret = fslpspec_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslpspec(
    infile: InputPathType,
    outfile: str | None = None,
    runner: Runner | None = None,
) -> FslpspecOutputs:
    """
    fslpspec
    
    Estimate the power spectrum of 4D fMRI time series data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input 4D fMRI time series image (e.g. fMRI_data.nii.gz).
        outfile: Output power spectrum image (e.g. pspec_data.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslpspecOutputs`).
    """
    params = fslpspec_params(
        infile=infile,
        outfile=outfile,
    )
    return fslpspec_execute(params, runner)


__all__ = [
    "FSLPSPEC_METADATA",
    "FslpspecOutputs",
    "fslpspec",
    "fslpspec_execute",
    "fslpspec_params",
]
