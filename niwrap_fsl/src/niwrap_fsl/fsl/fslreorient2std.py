# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLREORIENT2STD_METADATA = Metadata(
    id="33ec9acb9e62521ae8a4352dd428e1e8f068395c.boutiques",
    name="fslreorient2std",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


Fslreorient2stdParameters = typing.TypedDict('Fslreorient2stdParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslreorient2std"]],
    "input_image": InputPathType,
    "output_image": typing.NotRequired[str | None],
    "matrix_file": typing.NotRequired[str | None],
})
Fslreorient2stdParametersTagged = typing.TypedDict('Fslreorient2stdParametersTagged', {
    "@type": typing.Literal["fsl/fslreorient2std"],
    "input_image": InputPathType,
    "output_image": typing.NotRequired[str | None],
    "matrix_file": typing.NotRequired[str | None],
})


class Fslreorient2stdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Fslreorient2stdParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image: OutputPathType | None
    """Reoriented output image (NIfTI format)"""
    matrix_output: OutputPathType | None
    """File to save the transformation matrix"""


def fslreorient2std_params(
    input_image: InputPathType,
    output_image: str | None = None,
    matrix_file: str | None = None,
) -> Fslreorient2stdParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input image to be reoriented (NIfTI format, e.g.\
            img.nii.gz).
        output_image: Output image with the reoriented result (NIfTI format,\
            e.g. reoriented_img.nii.gz). If not provided, transformation matrix is\
            output to standard output.
        matrix_file: File to save the transformation matrix.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslreorient2std",
        "input_image": input_image,
    }
    if output_image is not None:
        params["output_image"] = output_image
    if matrix_file is not None:
        params["matrix_file"] = matrix_file
    return params


def fslreorient2std_cargs(
    params: Fslreorient2stdParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslreorient2std")
    cargs.append(execution.input_file(params.get("input_image", None)))
    if params.get("output_image", None) is not None:
        cargs.append(params.get("output_image", None))
    if params.get("matrix_file", None) is not None:
        cargs.extend([
            "-m",
            params.get("matrix_file", None)
        ])
    return cargs


def fslreorient2std_outputs(
    params: Fslreorient2stdParameters,
    execution: Execution,
) -> Fslreorient2stdOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Fslreorient2stdOutputs(
        root=execution.output_file("."),
        output_image=execution.output_file(params.get("output_image", None).removesuffix(".nii.gz") + ".nii.gz") if (params.get("output_image") is not None) else None,
        matrix_output=execution.output_file(params.get("matrix_file", None)) if (params.get("matrix_file") is not None) else None,
    )
    return ret


def fslreorient2std_execute(
    params: Fslreorient2stdParameters,
    runner: Runner | None = None,
) -> Fslreorient2stdOutputs:
    """
    fslreorient2std
    
    A tool for reorienting an image to match the approximate orientation of
    standard template images (MNI152).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fslreorient2stdOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLREORIENT2STD_METADATA)
    params = execution.params(params)
    cargs = fslreorient2std_cargs(params, execution)
    ret = fslreorient2std_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslreorient2std(
    input_image: InputPathType,
    output_image: str | None = None,
    matrix_file: str | None = None,
    runner: Runner | None = None,
) -> Fslreorient2stdOutputs:
    """
    fslreorient2std
    
    A tool for reorienting an image to match the approximate orientation of
    standard template images (MNI152).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Input image to be reoriented (NIfTI format, e.g.\
            img.nii.gz).
        output_image: Output image with the reoriented result (NIfTI format,\
            e.g. reoriented_img.nii.gz). If not provided, transformation matrix is\
            output to standard output.
        matrix_file: File to save the transformation matrix.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fslreorient2stdOutputs`).
    """
    params = fslreorient2std_params(
        input_image=input_image,
        output_image=output_image,
        matrix_file=matrix_file,
    )
    return fslreorient2std_execute(params, runner)


__all__ = [
    "FSLREORIENT2STD_METADATA",
    "Fslreorient2stdOutputs",
    "fslreorient2std",
    "fslreorient2std_execute",
    "fslreorient2std_params",
]
