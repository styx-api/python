# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLROI_METADATA = Metadata(
    id="18cea30e388ed0866b97a53f4db17d3ac2de142d.boutiques",
    name="fslroi",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslroiParameters = typing.TypedDict('FslroiParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslroi"]],
    "infile": InputPathType,
    "outfile": str,
    "xmin": typing.NotRequired[float | None],
    "xsize": typing.NotRequired[float | None],
    "ymin": typing.NotRequired[float | None],
    "ysize": typing.NotRequired[float | None],
    "zmin": typing.NotRequired[float | None],
    "zsize": typing.NotRequired[float | None],
    "tmin": typing.NotRequired[float | None],
    "tsize": typing.NotRequired[float | None],
})
FslroiParametersTagged = typing.TypedDict('FslroiParametersTagged', {
    "@type": typing.Literal["fsl/fslroi"],
    "infile": InputPathType,
    "outfile": str,
    "xmin": typing.NotRequired[float | None],
    "xsize": typing.NotRequired[float | None],
    "ymin": typing.NotRequired[float | None],
    "ysize": typing.NotRequired[float | None],
    "zmin": typing.NotRequired[float | None],
    "zsize": typing.NotRequired[float | None],
    "tmin": typing.NotRequired[float | None],
    "tsize": typing.NotRequired[float | None],
})


class FslroiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslroiParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output file containing the extracted ROI"""


def fslroi_params(
    infile: InputPathType,
    outfile: str,
    xmin: float | None = None,
    xsize: float | None = None,
    ymin: float | None = None,
    ysize: float | None = None,
    zmin: float | None = None,
    zsize: float | None = None,
    tmin: float | None = None,
    tsize: float | None = None,
) -> FslroiParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input image file.
        outfile: Output image file.
        xmin: Minimum X coordinate for ROI (indexing starts at 0).
        xsize: Size of the ROI in X direction.
        ymin: Minimum Y coordinate for ROI (indexing starts at 0).
        ysize: Size of the ROI in Y direction.
        zmin: Minimum Z coordinate for ROI (indexing starts at 0).
        zsize: Size of the ROI in Z direction.
        tmin: Minimum T coordinate for ROI (indexing starts at 0).
        tsize: Size of the ROI in T direction.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslroi",
        "infile": infile,
        "outfile": outfile,
    }
    if xmin is not None:
        params["xmin"] = xmin
    if xsize is not None:
        params["xsize"] = xsize
    if ymin is not None:
        params["ymin"] = ymin
    if ysize is not None:
        params["ysize"] = ysize
    if zmin is not None:
        params["zmin"] = zmin
    if zsize is not None:
        params["zsize"] = zsize
    if tmin is not None:
        params["tmin"] = tmin
    if tsize is not None:
        params["tsize"] = tsize
    return params


def fslroi_cargs(
    params: FslroiParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslroi")
    cargs.append(execution.input_file(params.get("infile", None)))
    cargs.append(params.get("outfile", None))
    if params.get("xmin", None) is not None:
        cargs.append(str(params.get("xmin", None)))
    if params.get("xsize", None) is not None:
        cargs.append(str(params.get("xsize", None)))
    if params.get("ymin", None) is not None:
        cargs.append(str(params.get("ymin", None)))
    if params.get("ysize", None) is not None:
        cargs.append(str(params.get("ysize", None)))
    if params.get("zmin", None) is not None:
        cargs.append(str(params.get("zmin", None)))
    if params.get("zsize", None) is not None:
        cargs.append(str(params.get("zsize", None)))
    if params.get("tmin", None) is not None:
        cargs.append(str(params.get("tmin", None)))
    if params.get("tsize", None) is not None:
        cargs.append(str(params.get("tsize", None)))
    return cargs


def fslroi_outputs(
    params: FslroiParameters,
    execution: Execution,
) -> FslroiOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslroiOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("outfile", None)),
    )
    return ret


def fslroi_execute(
    params: FslroiParameters,
    runner: Runner | None = None,
) -> FslroiOutputs:
    """
    fslroi
    
    Extracts a region of interest (ROI) from an image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslroiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLROI_METADATA)
    params = execution.params(params)
    cargs = fslroi_cargs(params, execution)
    ret = fslroi_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslroi(
    infile: InputPathType,
    outfile: str,
    xmin: float | None = None,
    xsize: float | None = None,
    ymin: float | None = None,
    ysize: float | None = None,
    zmin: float | None = None,
    zsize: float | None = None,
    tmin: float | None = None,
    tsize: float | None = None,
    runner: Runner | None = None,
) -> FslroiOutputs:
    """
    fslroi
    
    Extracts a region of interest (ROI) from an image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input image file.
        outfile: Output image file.
        xmin: Minimum X coordinate for ROI (indexing starts at 0).
        xsize: Size of the ROI in X direction.
        ymin: Minimum Y coordinate for ROI (indexing starts at 0).
        ysize: Size of the ROI in Y direction.
        zmin: Minimum Z coordinate for ROI (indexing starts at 0).
        zsize: Size of the ROI in Z direction.
        tmin: Minimum T coordinate for ROI (indexing starts at 0).
        tsize: Size of the ROI in T direction.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslroiOutputs`).
    """
    params = fslroi_params(
        infile=infile,
        outfile=outfile,
        xmin=xmin,
        xsize=xsize,
        ymin=ymin,
        ysize=ysize,
        zmin=zmin,
        zsize=zsize,
        tmin=tmin,
        tsize=tsize,
    )
    return fslroi_execute(params, runner)


__all__ = [
    "FSLROI_METADATA",
    "FslroiOutputs",
    "fslroi",
    "fslroi_execute",
    "fslroi_params",
]
