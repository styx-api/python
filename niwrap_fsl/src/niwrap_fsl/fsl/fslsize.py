# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLSIZE_METADATA = Metadata(
    id="01b38abe76507c0ede0ef9ce6b3728a7610dd75d.boutiques",
    name="fslsize",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslsizeParameters = typing.TypedDict('FslsizeParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslsize"]],
    "input_file": InputPathType,
    "short_format_flag": bool,
})
FslsizeParametersTagged = typing.TypedDict('FslsizeParametersTagged', {
    "@type": typing.Literal["fsl/fslsize"],
    "input_file": InputPathType,
    "short_format_flag": bool,
})


class FslsizeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslsizeParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fslsize_params(
    input_file: InputPathType,
    short_format_flag: bool = False,
) -> FslsizeParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input image file.
        short_format_flag: Output using short format (one line).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslsize",
        "input_file": input_file,
        "short_format_flag": short_format_flag,
    }
    return params


def fslsize_cargs(
    params: FslsizeParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslsize")
    cargs.append(execution.input_file(params.get("input_file", None)))
    if params.get("short_format_flag", False):
        cargs.append("-s")
    return cargs


def fslsize_outputs(
    params: FslsizeParameters,
    execution: Execution,
) -> FslsizeOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslsizeOutputs(
        root=execution.output_file("."),
    )
    return ret


def fslsize_execute(
    params: FslsizeParameters,
    runner: Runner | None = None,
) -> FslsizeOutputs:
    """
    fslsize
    
    Tool to output the size of an image file in FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsizeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSIZE_METADATA)
    params = execution.params(params)
    cargs = fslsize_cargs(params, execution)
    ret = fslsize_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslsize(
    input_file: InputPathType,
    short_format_flag: bool = False,
    runner: Runner | None = None,
) -> FslsizeOutputs:
    """
    fslsize
    
    Tool to output the size of an image file in FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input image file.
        short_format_flag: Output using short format (one line).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsizeOutputs`).
    """
    params = fslsize_params(
        input_file=input_file,
        short_format_flag=short_format_flag,
    )
    return fslsize_execute(params, runner)


__all__ = [
    "FSLSIZE_METADATA",
    "FslsizeOutputs",
    "fslsize",
    "fslsize_execute",
    "fslsize_params",
]
