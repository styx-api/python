# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLSMOOTHFILL_METADATA = Metadata(
    id="c88f3607161eeb8641e7ac1c40a6fa6a9981169f.boutiques",
    name="fslsmoothfill",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslsmoothfillParameters = typing.TypedDict('FslsmoothfillParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslsmoothfill"]],
    "input_image": InputPathType,
    "mask_image": InputPathType,
    "output_image": str,
    "number_of_iterations": typing.NotRequired[int | None],
    "debug_flag": bool,
    "verbose_flag": bool,
})
FslsmoothfillParametersTagged = typing.TypedDict('FslsmoothfillParametersTagged', {
    "@type": typing.Literal["fsl/fslsmoothfill"],
    "input_image": InputPathType,
    "mask_image": InputPathType,
    "output_image": str,
    "number_of_iterations": typing.NotRequired[int | None],
    "debug_flag": bool,
    "verbose_flag": bool,
})


class FslsmoothfillOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslsmoothfillParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fslsmoothfill_params(
    input_image: InputPathType,
    mask_image: InputPathType,
    output_image: str,
    number_of_iterations: int | None = None,
    debug_flag: bool = False,
    verbose_flag: bool = False,
) -> FslsmoothfillParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Filename of the input image.
        mask_image: Filename of the mask image.
        output_image: Filename for the output smoothed result image.
        number_of_iterations: Number of iterations.
        debug_flag: Turn on debugging output.
        verbose_flag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslsmoothfill",
        "input_image": input_image,
        "mask_image": mask_image,
        "output_image": output_image,
        "debug_flag": debug_flag,
        "verbose_flag": verbose_flag,
    }
    if number_of_iterations is not None:
        params["number_of_iterations"] = number_of_iterations
    return params


def fslsmoothfill_cargs(
    params: FslsmoothfillParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslsmoothfill")
    cargs.append("--in=" + execution.input_file(params.get("input_image", None)))
    cargs.append("--mask=" + execution.input_file(params.get("mask_image", None)))
    cargs.append("--out=" + params.get("output_image", None))
    if params.get("number_of_iterations", None) is not None:
        cargs.extend([
            "--niter",
            str(params.get("number_of_iterations", None))
        ])
    if params.get("debug_flag", False):
        cargs.append("--debug")
    if params.get("verbose_flag", False):
        cargs.append("--verbose")
    return cargs


def fslsmoothfill_outputs(
    params: FslsmoothfillParameters,
    execution: Execution,
) -> FslsmoothfillOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslsmoothfillOutputs(
        root=execution.output_file("."),
    )
    return ret


def fslsmoothfill_execute(
    params: FslsmoothfillParameters,
    runner: Runner | None = None,
) -> FslsmoothfillOutputs:
    """
    fslsmoothfill
    
    Smoothfill is a tool designed to fill in holes in images by smoothly
    interpolating the pixel values.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsmoothfillOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSMOOTHFILL_METADATA)
    params = execution.params(params)
    cargs = fslsmoothfill_cargs(params, execution)
    ret = fslsmoothfill_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslsmoothfill(
    input_image: InputPathType,
    mask_image: InputPathType,
    output_image: str,
    number_of_iterations: int | None = None,
    debug_flag: bool = False,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> FslsmoothfillOutputs:
    """
    fslsmoothfill
    
    Smoothfill is a tool designed to fill in holes in images by smoothly
    interpolating the pixel values.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Filename of the input image.
        mask_image: Filename of the mask image.
        output_image: Filename for the output smoothed result image.
        number_of_iterations: Number of iterations.
        debug_flag: Turn on debugging output.
        verbose_flag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslsmoothfillOutputs`).
    """
    params = fslsmoothfill_params(
        input_image=input_image,
        mask_image=mask_image,
        output_image=output_image,
        number_of_iterations=number_of_iterations,
        debug_flag=debug_flag,
        verbose_flag=verbose_flag,
    )
    return fslsmoothfill_execute(params, runner)


__all__ = [
    "FSLSMOOTHFILL_METADATA",
    "FslsmoothfillOutputs",
    "fslsmoothfill",
    "fslsmoothfill_execute",
    "fslsmoothfill_params",
]
