# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLSTATS_METADATA = Metadata(
    id="d329e5c675ab7b6b6516c2f7b70f7775d1ca5296.boutiques",
    name="fslstats",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslstatsParameters = typing.TypedDict('FslstatsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslstats"]],
    "input_file": InputPathType,
    "index_mask": typing.NotRequired[InputPathType | None],
    "lower_threshold": typing.NotRequired[float | None],
    "upper_threshold": typing.NotRequired[float | None],
    "robust_intensity_flag": bool,
    "minmax_intensity_flag": bool,
    "voxels_volume_flag": bool,
    "nonzero_voxels_volume_flag": bool,
    "mean_flag": bool,
    "nonzero_mean_flag": bool,
    "std_dev_flag": bool,
    "nonzero_std_dev_flag": bool,
    "smallest_roi_flag": bool,
    "max_coords_flag": bool,
    "min_coords_flag": bool,
    "cog_mm_flag": bool,
    "cog_voxel_flag": bool,
    "percentile": typing.NotRequired[float | None],
    "nonzero_percentile": typing.NotRequired[float | None],
    "absolute_values_flag": bool,
    "nan_as_zero_flag": bool,
    "mask_image": typing.NotRequired[InputPathType | None],
    "difference_image": typing.NotRequired[InputPathType | None],
    "hist_bins": typing.NotRequired[float | None],
    "hist_bins_min_max": typing.NotRequired[str | None],
    "timeseries_flag": bool,
    "mean_entropy_flag": bool,
    "nonzero_mean_entropy_flag": bool,
})
FslstatsParametersTagged = typing.TypedDict('FslstatsParametersTagged', {
    "@type": typing.Literal["fsl/fslstats"],
    "input_file": InputPathType,
    "index_mask": typing.NotRequired[InputPathType | None],
    "lower_threshold": typing.NotRequired[float | None],
    "upper_threshold": typing.NotRequired[float | None],
    "robust_intensity_flag": bool,
    "minmax_intensity_flag": bool,
    "voxels_volume_flag": bool,
    "nonzero_voxels_volume_flag": bool,
    "mean_flag": bool,
    "nonzero_mean_flag": bool,
    "std_dev_flag": bool,
    "nonzero_std_dev_flag": bool,
    "smallest_roi_flag": bool,
    "max_coords_flag": bool,
    "min_coords_flag": bool,
    "cog_mm_flag": bool,
    "cog_voxel_flag": bool,
    "percentile": typing.NotRequired[float | None],
    "nonzero_percentile": typing.NotRequired[float | None],
    "absolute_values_flag": bool,
    "nan_as_zero_flag": bool,
    "mask_image": typing.NotRequired[InputPathType | None],
    "difference_image": typing.NotRequired[InputPathType | None],
    "hist_bins": typing.NotRequired[float | None],
    "hist_bins_min_max": typing.NotRequired[str | None],
    "timeseries_flag": bool,
    "mean_entropy_flag": bool,
    "nonzero_mean_entropy_flag": bool,
})


class FslstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslstatsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_stats: OutputPathType
    """Statistics output file"""


def fslstats_params(
    input_file: InputPathType,
    index_mask: InputPathType | None = None,
    lower_threshold: float | None = None,
    upper_threshold: float | None = None,
    robust_intensity_flag: bool = False,
    minmax_intensity_flag: bool = False,
    voxels_volume_flag: bool = False,
    nonzero_voxels_volume_flag: bool = False,
    mean_flag: bool = False,
    nonzero_mean_flag: bool = False,
    std_dev_flag: bool = False,
    nonzero_std_dev_flag: bool = False,
    smallest_roi_flag: bool = False,
    max_coords_flag: bool = False,
    min_coords_flag: bool = False,
    cog_mm_flag: bool = False,
    cog_voxel_flag: bool = False,
    percentile: float | None = None,
    nonzero_percentile: float | None = None,
    absolute_values_flag: bool = False,
    nan_as_zero_flag: bool = False,
    mask_image: InputPathType | None = None,
    difference_image: InputPathType | None = None,
    hist_bins: float | None = None,
    hist_bins_min_max: str | None = None,
    timeseries_flag: bool = False,
    mean_entropy_flag: bool = False,
    nonzero_mean_entropy_flag: bool = False,
) -> FslstatsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input image file (e.g., image.nii.gz).
        index_mask: Generate separate n submasks from indexMask, for\
            indexvalues 1..n where n is the maximum index value in indexMask, and\
            generate statistics for each submask.
        lower_threshold: Set lower threshold.
        upper_threshold: Set upper threshold.
        robust_intensity_flag: Output robust min and max intensity.
        minmax_intensity_flag: Output min and max intensity.
        voxels_volume_flag: Output voxels and volume.
        nonzero_voxels_volume_flag: Output voxels and volume (for nonzero\
            voxels).
        mean_flag: Output mean.
        nonzero_mean_flag: Output mean (for nonzero voxels).
        std_dev_flag: Output standard deviation.
        nonzero_std_dev_flag: Output standard deviation (for nonzero voxels).
        smallest_roi_flag: Output smallest ROI containing nonzero voxels.
        max_coords_flag: Output coordinates of maximum voxel.
        min_coords_flag: Output coordinates of minimum voxel.
        cog_mm_flag: Output center-of-gravity (cog) in mm coordinates.
        cog_voxel_flag: Output center-of-gravity (cog) in voxel coordinates.
        percentile: Output nth percentile.
        nonzero_percentile: Output nth percentile (for nonzero voxels).
        absolute_values_flag: Use absolute values of all image intensities.
        nan_as_zero_flag: Treat NaN or Inf as zero for subsequent stats.
        mask_image: Use the specified image for masking - overrides lower and\
            upper thresholds.
        difference_image: Take the difference between the base image and the\
            image specified here.
        hist_bins: Output a histogram for the thresholded/masked voxels only\
            with specified number of bins.
        hist_bins_min_max: Output a histogram for the thresholded/masked voxels\
            only with specified number of bins and histogram limits of min and max.
        timeseries_flag: Separate output line for each 3D volume of a 4D\
            timeseries.
        mean_entropy_flag: Output mean entropy; mean(-i*ln(i)).
        nonzero_mean_entropy_flag: Output mean entropy (of nonzero voxels).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslstats",
        "input_file": input_file,
        "robust_intensity_flag": robust_intensity_flag,
        "minmax_intensity_flag": minmax_intensity_flag,
        "voxels_volume_flag": voxels_volume_flag,
        "nonzero_voxels_volume_flag": nonzero_voxels_volume_flag,
        "mean_flag": mean_flag,
        "nonzero_mean_flag": nonzero_mean_flag,
        "std_dev_flag": std_dev_flag,
        "nonzero_std_dev_flag": nonzero_std_dev_flag,
        "smallest_roi_flag": smallest_roi_flag,
        "max_coords_flag": max_coords_flag,
        "min_coords_flag": min_coords_flag,
        "cog_mm_flag": cog_mm_flag,
        "cog_voxel_flag": cog_voxel_flag,
        "absolute_values_flag": absolute_values_flag,
        "nan_as_zero_flag": nan_as_zero_flag,
        "timeseries_flag": timeseries_flag,
        "mean_entropy_flag": mean_entropy_flag,
        "nonzero_mean_entropy_flag": nonzero_mean_entropy_flag,
    }
    if index_mask is not None:
        params["index_mask"] = index_mask
    if lower_threshold is not None:
        params["lower_threshold"] = lower_threshold
    if upper_threshold is not None:
        params["upper_threshold"] = upper_threshold
    if percentile is not None:
        params["percentile"] = percentile
    if nonzero_percentile is not None:
        params["nonzero_percentile"] = nonzero_percentile
    if mask_image is not None:
        params["mask_image"] = mask_image
    if difference_image is not None:
        params["difference_image"] = difference_image
    if hist_bins is not None:
        params["hist_bins"] = hist_bins
    if hist_bins_min_max is not None:
        params["hist_bins_min_max"] = hist_bins_min_max
    return params


def fslstats_cargs(
    params: FslstatsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslstats")
    cargs.append(execution.input_file(params.get("input_file", None)))
    if params.get("index_mask", None) is not None:
        cargs.extend([
            "-k",
            execution.input_file(params.get("index_mask", None))
        ])
    if params.get("lower_threshold", None) is not None:
        cargs.extend([
            "-l",
            str(params.get("lower_threshold", None))
        ])
    if params.get("upper_threshold", None) is not None:
        cargs.extend([
            "-u",
            str(params.get("upper_threshold", None))
        ])
    if params.get("robust_intensity_flag", False):
        cargs.append("-r")
    if params.get("minmax_intensity_flag", False):
        cargs.append("-R")
    if params.get("voxels_volume_flag", False):
        cargs.append("-v")
    if params.get("nonzero_voxels_volume_flag", False):
        cargs.append("-V")
    if params.get("mean_flag", False):
        cargs.append("-m")
    if params.get("nonzero_mean_flag", False):
        cargs.append("-M")
    if params.get("std_dev_flag", False):
        cargs.append("-s")
    if params.get("nonzero_std_dev_flag", False):
        cargs.append("-S")
    if params.get("smallest_roi_flag", False):
        cargs.append("-w")
    if params.get("max_coords_flag", False):
        cargs.append("-x")
    if params.get("min_coords_flag", False):
        cargs.append("-X")
    if params.get("cog_mm_flag", False):
        cargs.append("-c")
    if params.get("cog_voxel_flag", False):
        cargs.append("-C")
    if params.get("percentile", None) is not None:
        cargs.extend([
            "-p",
            str(params.get("percentile", None))
        ])
    if params.get("nonzero_percentile", None) is not None:
        cargs.extend([
            "-P",
            str(params.get("nonzero_percentile", None))
        ])
    if params.get("absolute_values_flag", False):
        cargs.append("-a")
    if params.get("nan_as_zero_flag", False):
        cargs.append("-n")
    if params.get("mask_image", None) is not None:
        cargs.extend([
            "-k",
            execution.input_file(params.get("mask_image", None))
        ])
    if params.get("difference_image", None) is not None:
        cargs.extend([
            "-d",
            execution.input_file(params.get("difference_image", None))
        ])
    if params.get("hist_bins", None) is not None:
        cargs.extend([
            "-h",
            str(params.get("hist_bins", None))
        ])
    if params.get("hist_bins_min_max", None) is not None:
        cargs.extend([
            "-H",
            params.get("hist_bins_min_max", None)
        ])
    if params.get("timeseries_flag", False):
        cargs.append("-t")
    if params.get("mean_entropy_flag", False):
        cargs.append("-e")
    if params.get("nonzero_mean_entropy_flag", False):
        cargs.append("-E")
    return cargs


def fslstats_outputs(
    params: FslstatsParameters,
    execution: Execution,
) -> FslstatsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslstatsOutputs(
        root=execution.output_file("."),
        output_stats=execution.output_file(pathlib.Path(params.get("input_file", None)).name + "_stats.txt"),
    )
    return ret


def fslstats_execute(
    params: FslstatsParameters,
    runner: Runner | None = None,
) -> FslstatsOutputs:
    """
    fslstats
    
    FSL tool for calculating statistics on image data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLSTATS_METADATA)
    params = execution.params(params)
    cargs = fslstats_cargs(params, execution)
    ret = fslstats_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslstats(
    input_file: InputPathType,
    index_mask: InputPathType | None = None,
    lower_threshold: float | None = None,
    upper_threshold: float | None = None,
    robust_intensity_flag: bool = False,
    minmax_intensity_flag: bool = False,
    voxels_volume_flag: bool = False,
    nonzero_voxels_volume_flag: bool = False,
    mean_flag: bool = False,
    nonzero_mean_flag: bool = False,
    std_dev_flag: bool = False,
    nonzero_std_dev_flag: bool = False,
    smallest_roi_flag: bool = False,
    max_coords_flag: bool = False,
    min_coords_flag: bool = False,
    cog_mm_flag: bool = False,
    cog_voxel_flag: bool = False,
    percentile: float | None = None,
    nonzero_percentile: float | None = None,
    absolute_values_flag: bool = False,
    nan_as_zero_flag: bool = False,
    mask_image: InputPathType | None = None,
    difference_image: InputPathType | None = None,
    hist_bins: float | None = None,
    hist_bins_min_max: str | None = None,
    timeseries_flag: bool = False,
    mean_entropy_flag: bool = False,
    nonzero_mean_entropy_flag: bool = False,
    runner: Runner | None = None,
) -> FslstatsOutputs:
    """
    fslstats
    
    FSL tool for calculating statistics on image data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input image file (e.g., image.nii.gz).
        index_mask: Generate separate n submasks from indexMask, for\
            indexvalues 1..n where n is the maximum index value in indexMask, and\
            generate statistics for each submask.
        lower_threshold: Set lower threshold.
        upper_threshold: Set upper threshold.
        robust_intensity_flag: Output robust min and max intensity.
        minmax_intensity_flag: Output min and max intensity.
        voxels_volume_flag: Output voxels and volume.
        nonzero_voxels_volume_flag: Output voxels and volume (for nonzero\
            voxels).
        mean_flag: Output mean.
        nonzero_mean_flag: Output mean (for nonzero voxels).
        std_dev_flag: Output standard deviation.
        nonzero_std_dev_flag: Output standard deviation (for nonzero voxels).
        smallest_roi_flag: Output smallest ROI containing nonzero voxels.
        max_coords_flag: Output coordinates of maximum voxel.
        min_coords_flag: Output coordinates of minimum voxel.
        cog_mm_flag: Output center-of-gravity (cog) in mm coordinates.
        cog_voxel_flag: Output center-of-gravity (cog) in voxel coordinates.
        percentile: Output nth percentile.
        nonzero_percentile: Output nth percentile (for nonzero voxels).
        absolute_values_flag: Use absolute values of all image intensities.
        nan_as_zero_flag: Treat NaN or Inf as zero for subsequent stats.
        mask_image: Use the specified image for masking - overrides lower and\
            upper thresholds.
        difference_image: Take the difference between the base image and the\
            image specified here.
        hist_bins: Output a histogram for the thresholded/masked voxels only\
            with specified number of bins.
        hist_bins_min_max: Output a histogram for the thresholded/masked voxels\
            only with specified number of bins and histogram limits of min and max.
        timeseries_flag: Separate output line for each 3D volume of a 4D\
            timeseries.
        mean_entropy_flag: Output mean entropy; mean(-i*ln(i)).
        nonzero_mean_entropy_flag: Output mean entropy (of nonzero voxels).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslstatsOutputs`).
    """
    params = fslstats_params(
        input_file=input_file,
        index_mask=index_mask,
        lower_threshold=lower_threshold,
        upper_threshold=upper_threshold,
        robust_intensity_flag=robust_intensity_flag,
        minmax_intensity_flag=minmax_intensity_flag,
        voxels_volume_flag=voxels_volume_flag,
        nonzero_voxels_volume_flag=nonzero_voxels_volume_flag,
        mean_flag=mean_flag,
        nonzero_mean_flag=nonzero_mean_flag,
        std_dev_flag=std_dev_flag,
        nonzero_std_dev_flag=nonzero_std_dev_flag,
        smallest_roi_flag=smallest_roi_flag,
        max_coords_flag=max_coords_flag,
        min_coords_flag=min_coords_flag,
        cog_mm_flag=cog_mm_flag,
        cog_voxel_flag=cog_voxel_flag,
        percentile=percentile,
        nonzero_percentile=nonzero_percentile,
        absolute_values_flag=absolute_values_flag,
        nan_as_zero_flag=nan_as_zero_flag,
        mask_image=mask_image,
        difference_image=difference_image,
        hist_bins=hist_bins,
        hist_bins_min_max=hist_bins_min_max,
        timeseries_flag=timeseries_flag,
        mean_entropy_flag=mean_entropy_flag,
        nonzero_mean_entropy_flag=nonzero_mean_entropy_flag,
    )
    return fslstats_execute(params, runner)


__all__ = [
    "FSLSTATS_METADATA",
    "FslstatsOutputs",
    "fslstats",
    "fslstats_execute",
    "fslstats_params",
]
