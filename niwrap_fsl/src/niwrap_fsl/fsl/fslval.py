# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FSLVAL_METADATA = Metadata(
    id="e6d1ee0a9f6e7b463e09c6cb327e0160466fa559.boutiques",
    name="fslval",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


FslvalParameters = typing.TypedDict('FslvalParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/fslval"]],
    "input_file": InputPathType,
    "keyword": str,
})
FslvalParametersTagged = typing.TypedDict('FslvalParametersTagged', {
    "@type": typing.Literal["fsl/fslval"],
    "input_file": InputPathType,
    "keyword": str,
})


class FslvalOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FslvalParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    stdout: OutputPathType
    """Output printed to standard out"""


def fslval_params(
    input_file: InputPathType,
    keyword_: str,
) -> FslvalParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input NIfTI image file.
        keyword_: Keyword to query from the NIfTI header.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/fslval",
        "input_file": input_file,
        "keyword": keyword_,
    }
    return params


def fslval_cargs(
    params: FslvalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fslval")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(params.get("keyword", None))
    return cargs


def fslval_outputs(
    params: FslvalParameters,
    execution: Execution,
) -> FslvalOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FslvalOutputs(
        root=execution.output_file("."),
        stdout=execution.output_file("stdout"),
    )
    return ret


def fslval_execute(
    params: FslvalParameters,
    runner: Runner | None = None,
) -> FslvalOutputs:
    """
    fslval
    
    Tool for printing out header information from NIfTI image files.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslvalOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLVAL_METADATA)
    params = execution.params(params)
    cargs = fslval_cargs(params, execution)
    ret = fslval_outputs(params, execution)
    execution.run(cargs)
    return ret


def fslval(
    input_file: InputPathType,
    keyword_: str,
    runner: Runner | None = None,
) -> FslvalOutputs:
    """
    fslval
    
    Tool for printing out header information from NIfTI image files.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input NIfTI image file.
        keyword_: Keyword to query from the NIfTI header.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslvalOutputs`).
    """
    params = fslval_params(
        input_file=input_file,
        keyword_=keyword_,
    )
    return fslval_execute(params, runner)


__all__ = [
    "FSLVAL_METADATA",
    "FslvalOutputs",
    "fslval",
    "fslval_execute",
    "fslval_params",
]
