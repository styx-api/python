# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

GPS_METADATA = Metadata(
    id="f2e1343fdb9ce66f98e3a6702da4aa264b863631.boutiques",
    name="gps",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


GpsParameters = typing.TypedDict('GpsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/gps"]],
    "ndir": float,
    "optws": bool,
    "output": typing.NotRequired[str | None],
    "ranseed": typing.NotRequired[float | None],
    "init": typing.NotRequired[InputPathType | None],
    "report": bool,
    "verbose": bool,
    "help": bool,
})
GpsParametersTagged = typing.TypedDict('GpsParametersTagged', {
    "@type": typing.Literal["fsl/gps"],
    "ndir": float,
    "optws": bool,
    "output": typing.NotRequired[str | None],
    "ranseed": typing.NotRequired[float | None],
    "init": typing.NotRequired[InputPathType | None],
    "report": bool,
    "verbose": bool,
    "help": bool,
})


class GpsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `GpsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """Output file with generated directions"""


def gps_params(
    ndir: float,
    optws: bool = False,
    output: str | None = None,
    ranseed: float | None = None,
    init: InputPathType | None = None,
    report: bool = False,
    verbose: bool = False,
    help_: bool = False,
) -> GpsParametersTagged:
    """
    Build parameters.
    
    Args:
        ndir: Number of directions.
        optws: Perform additional optimisation on the whole sphere (needed for\
            eddy).
        output: Name of output file (default: bvecs#.txt).
        ranseed: Seed random generator with supplied number.
        init: File with bvecs to use as initialisation.
        report: Report coulomb forces for initial configuration.
        verbose: Switch on diagnostic messages.
        help_: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/gps",
        "ndir": ndir,
        "optws": optws,
        "report": report,
        "verbose": verbose,
        "help": help_,
    }
    if output is not None:
        params["output"] = output
    if ranseed is not None:
        params["ranseed"] = ranseed
    if init is not None:
        params["init"] = init
    return params


def gps_cargs(
    params: GpsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("gps")
    cargs.extend([
        "--ndir",
        str(params.get("ndir", None))
    ])
    if params.get("optws", False):
        cargs.append("--optws")
    if params.get("output", None) is not None:
        cargs.extend([
            "--out",
            params.get("output", None)
        ])
    if params.get("ranseed", None) is not None:
        cargs.extend([
            "--ranseed",
            str(params.get("ranseed", None))
        ])
    if params.get("init", None) is not None:
        cargs.extend([
            "--init",
            execution.input_file(params.get("init", None))
        ])
    if params.get("report", False):
        cargs.append("--report")
    if params.get("verbose", False):
        cargs.append("-v,--verbose")
    if params.get("help", False):
        cargs.append("-h,--help")
    return cargs


def gps_outputs(
    params: GpsParameters,
    execution: Execution,
) -> GpsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = GpsOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output", None)) if (params.get("output") is not None) else None,
    )
    return ret


def gps_execute(
    params: GpsParameters,
    runner: Runner | None = None,
) -> GpsOutputs:
    """
    gps
    
    Generate set of diffusion gradient directions.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GpsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(GPS_METADATA)
    params = execution.params(params)
    cargs = gps_cargs(params, execution)
    ret = gps_outputs(params, execution)
    execution.run(cargs)
    return ret


def gps(
    ndir: float,
    optws: bool = False,
    output: str | None = None,
    ranseed: float | None = None,
    init: InputPathType | None = None,
    report: bool = False,
    verbose: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> GpsOutputs:
    """
    gps
    
    Generate set of diffusion gradient directions.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        ndir: Number of directions.
        optws: Perform additional optimisation on the whole sphere (needed for\
            eddy).
        output: Name of output file (default: bvecs#.txt).
        ranseed: Seed random generator with supplied number.
        init: File with bvecs to use as initialisation.
        report: Report coulomb forces for initial configuration.
        verbose: Switch on diagnostic messages.
        help_: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `GpsOutputs`).
    """
    params = gps_params(
        ndir=ndir,
        optws=optws,
        output=output,
        ranseed=ranseed,
        init=init,
        report=report,
        verbose=verbose,
        help_=help_,
    )
    return gps_execute(params, runner)


__all__ = [
    "GPS_METADATA",
    "GpsOutputs",
    "gps",
    "gps_execute",
    "gps_params",
]
