# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

HALFCOSBASIS_METADATA = Metadata(
    id="e826242035a2953d4fd6b968e75d33c1cbd3bf43.boutiques",
    name="halfcosbasis",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


HalfcosbasisParameters = typing.TypedDict('HalfcosbasisParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/halfcosbasis"]],
    "hrf_param_file": InputPathType,
    "hrf_param_file_hf": InputPathType,
    "verbose_flag": bool,
    "debug_level": typing.NotRequired[float | None],
    "debug_level_debug": typing.NotRequired[float | None],
    "debug_level_debuglevel": typing.NotRequired[float | None],
    "timing_on_flag": bool,
    "log_dir": typing.NotRequired[str | None],
    "log_dir_ld": typing.NotRequired[str | None],
    "log_dir_logdir": typing.NotRequired[str | None],
    "num_hrf_samples": typing.NotRequired[float | None],
    "num_hrf_basis_funcs": typing.NotRequired[float | None],
    "num_secs": typing.NotRequired[float | None],
    "num_secs_nsecs": typing.NotRequired[float | None],
    "temp_res": typing.NotRequired[float | None],
    "help_flag": bool,
    "help_flag_long": bool,
})
HalfcosbasisParametersTagged = typing.TypedDict('HalfcosbasisParametersTagged', {
    "@type": typing.Literal["fsl/halfcosbasis"],
    "hrf_param_file": InputPathType,
    "hrf_param_file_hf": InputPathType,
    "verbose_flag": bool,
    "debug_level": typing.NotRequired[float | None],
    "debug_level_debug": typing.NotRequired[float | None],
    "debug_level_debuglevel": typing.NotRequired[float | None],
    "timing_on_flag": bool,
    "log_dir": typing.NotRequired[str | None],
    "log_dir_ld": typing.NotRequired[str | None],
    "log_dir_logdir": typing.NotRequired[str | None],
    "num_hrf_samples": typing.NotRequired[float | None],
    "num_hrf_basis_funcs": typing.NotRequired[float | None],
    "num_secs": typing.NotRequired[float | None],
    "num_secs_nsecs": typing.NotRequired[float | None],
    "temp_res": typing.NotRequired[float | None],
    "help_flag": bool,
    "help_flag_long": bool,
})


class HalfcosbasisOutputs(typing.NamedTuple):
    """
    Output object returned when calling `HalfcosbasisParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def halfcosbasis_params(
    hrf_param_file: InputPathType,
    hrf_param_file_hf: InputPathType,
    verbose_flag: bool = False,
    debug_level: float | None = None,
    debug_level_debug: float | None = None,
    debug_level_debuglevel: float | None = None,
    timing_on_flag: bool = False,
    log_dir: str | None = None,
    log_dir_ld: str | None = None,
    log_dir_logdir: str | None = None,
    num_hrf_samples: float | None = None,
    num_hrf_basis_funcs: float | None = None,
    num_secs: float | None = None,
    num_secs_nsecs: float | None = None,
    temp_res: float | None = None,
    help_flag: bool = False,
    help_flag_long: bool = False,
) -> HalfcosbasisParametersTagged:
    """
    Build parameters.
    
    Args:
        hrf_param_file: Half cosine HRF parameter ranges file.
        hrf_param_file_hf: Half cosine HRF parameter ranges file.
        verbose_flag: Switch on diagnostic messages.
        debug_level: Set debug level.
        debug_level_debug: Set debug level.
        debug_level_debuglevel: Set debug level.
        timing_on_flag: Turn timing on.
        log_dir: Log directory.
        log_dir_ld: Log directory.
        log_dir_logdir: Log directory.
        num_hrf_samples: Number of HRF samples to use (default is 1000).
        num_hrf_basis_funcs: Number of HRF basis functions to use (default is\
            3).
        num_secs: Number of seconds (default is 40).
        num_secs_nsecs: Number of seconds (default is 40).
        temp_res: Temporal resolution (default is 0.05).
        help_flag: Display help message.
        help_flag_long: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/halfcosbasis",
        "hrf_param_file": hrf_param_file,
        "hrf_param_file_hf": hrf_param_file_hf,
        "verbose_flag": verbose_flag,
        "timing_on_flag": timing_on_flag,
        "help_flag": help_flag,
        "help_flag_long": help_flag_long,
    }
    if debug_level is not None:
        params["debug_level"] = debug_level
    if debug_level_debug is not None:
        params["debug_level_debug"] = debug_level_debug
    if debug_level_debuglevel is not None:
        params["debug_level_debuglevel"] = debug_level_debuglevel
    if log_dir is not None:
        params["log_dir"] = log_dir
    if log_dir_ld is not None:
        params["log_dir_ld"] = log_dir_ld
    if log_dir_logdir is not None:
        params["log_dir_logdir"] = log_dir_logdir
    if num_hrf_samples is not None:
        params["num_hrf_samples"] = num_hrf_samples
    if num_hrf_basis_funcs is not None:
        params["num_hrf_basis_funcs"] = num_hrf_basis_funcs
    if num_secs is not None:
        params["num_secs"] = num_secs
    if num_secs_nsecs is not None:
        params["num_secs_nsecs"] = num_secs_nsecs
    if temp_res is not None:
        params["temp_res"] = temp_res
    return params


def halfcosbasis_cargs(
    params: HalfcosbasisParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("halfcosbasis")
    cargs.extend([
        "--hcprf",
        execution.input_file(params.get("hrf_param_file", None))
    ])
    cargs.extend([
        "--hf",
        execution.input_file(params.get("hrf_param_file_hf", None))
    ])
    if params.get("verbose_flag", False):
        cargs.append("-V")
    if params.get("debug_level", None) is not None:
        cargs.extend([
            "--db",
            str(params.get("debug_level", None))
        ])
    if params.get("debug_level_debug", None) is not None:
        cargs.extend([
            "--debug",
            str(params.get("debug_level_debug", None))
        ])
    if params.get("debug_level_debuglevel", None) is not None:
        cargs.extend([
            "--debuglevel",
            str(params.get("debug_level_debuglevel", None))
        ])
    if params.get("timing_on_flag", False):
        cargs.append("--to")
    if params.get("log_dir", None) is not None:
        cargs.extend([
            "-l",
            params.get("log_dir", None)
        ])
    if params.get("log_dir_ld", None) is not None:
        cargs.extend([
            "--ld",
            params.get("log_dir_ld", None)
        ])
    if params.get("log_dir_logdir", None) is not None:
        cargs.extend([
            "--logdir",
            params.get("log_dir_logdir", None)
        ])
    if params.get("num_hrf_samples", None) is not None:
        cargs.extend([
            "--nhs",
            str(params.get("num_hrf_samples", None))
        ])
    if params.get("num_hrf_basis_funcs", None) is not None:
        cargs.extend([
            "--nbfs",
            str(params.get("num_hrf_basis_funcs", None))
        ])
    if params.get("num_secs", None) is not None:
        cargs.extend([
            "--ns",
            str(params.get("num_secs", None))
        ])
    if params.get("num_secs_nsecs", None) is not None:
        cargs.extend([
            "--nsecs",
            str(params.get("num_secs_nsecs", None))
        ])
    if params.get("temp_res", None) is not None:
        cargs.extend([
            "--res",
            str(params.get("temp_res", None))
        ])
    if params.get("help_flag", False):
        cargs.append("-h")
    if params.get("help_flag_long", False):
        cargs.append("--help")
    return cargs


def halfcosbasis_outputs(
    params: HalfcosbasisParameters,
    execution: Execution,
) -> HalfcosbasisOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = HalfcosbasisOutputs(
        root=execution.output_file("."),
    )
    return ret


def halfcosbasis_execute(
    params: HalfcosbasisParameters,
    runner: Runner | None = None,
) -> HalfcosbasisOutputs:
    """
    halfcosbasis
    
    Tool for handling half-cosine basis functions in FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HalfcosbasisOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HALFCOSBASIS_METADATA)
    params = execution.params(params)
    cargs = halfcosbasis_cargs(params, execution)
    ret = halfcosbasis_outputs(params, execution)
    execution.run(cargs)
    return ret


def halfcosbasis(
    hrf_param_file: InputPathType,
    hrf_param_file_hf: InputPathType,
    verbose_flag: bool = False,
    debug_level: float | None = None,
    debug_level_debug: float | None = None,
    debug_level_debuglevel: float | None = None,
    timing_on_flag: bool = False,
    log_dir: str | None = None,
    log_dir_ld: str | None = None,
    log_dir_logdir: str | None = None,
    num_hrf_samples: float | None = None,
    num_hrf_basis_funcs: float | None = None,
    num_secs: float | None = None,
    num_secs_nsecs: float | None = None,
    temp_res: float | None = None,
    help_flag: bool = False,
    help_flag_long: bool = False,
    runner: Runner | None = None,
) -> HalfcosbasisOutputs:
    """
    halfcosbasis
    
    Tool for handling half-cosine basis functions in FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        hrf_param_file: Half cosine HRF parameter ranges file.
        hrf_param_file_hf: Half cosine HRF parameter ranges file.
        verbose_flag: Switch on diagnostic messages.
        debug_level: Set debug level.
        debug_level_debug: Set debug level.
        debug_level_debuglevel: Set debug level.
        timing_on_flag: Turn timing on.
        log_dir: Log directory.
        log_dir_ld: Log directory.
        log_dir_logdir: Log directory.
        num_hrf_samples: Number of HRF samples to use (default is 1000).
        num_hrf_basis_funcs: Number of HRF basis functions to use (default is\
            3).
        num_secs: Number of seconds (default is 40).
        num_secs_nsecs: Number of seconds (default is 40).
        temp_res: Temporal resolution (default is 0.05).
        help_flag: Display help message.
        help_flag_long: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HalfcosbasisOutputs`).
    """
    params = halfcosbasis_params(
        hrf_param_file=hrf_param_file,
        hrf_param_file_hf=hrf_param_file_hf,
        verbose_flag=verbose_flag,
        debug_level=debug_level,
        debug_level_debug=debug_level_debug,
        debug_level_debuglevel=debug_level_debuglevel,
        timing_on_flag=timing_on_flag,
        log_dir=log_dir,
        log_dir_ld=log_dir_ld,
        log_dir_logdir=log_dir_logdir,
        num_hrf_samples=num_hrf_samples,
        num_hrf_basis_funcs=num_hrf_basis_funcs,
        num_secs=num_secs,
        num_secs_nsecs=num_secs_nsecs,
        temp_res=temp_res,
        help_flag=help_flag,
        help_flag_long=help_flag_long,
    )
    return halfcosbasis_execute(params, runner)


__all__ = [
    "HALFCOSBASIS_METADATA",
    "HalfcosbasisOutputs",
    "halfcosbasis",
    "halfcosbasis_execute",
    "halfcosbasis_params",
]
