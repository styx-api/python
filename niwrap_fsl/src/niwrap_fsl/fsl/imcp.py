# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

IMCP_METADATA = Metadata(
    id="73b8c84f9f66ee3591148757d8ab31cb41ff5ffb.boutiques",
    name="imcp",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


ImcpParameters = typing.TypedDict('ImcpParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/imcp"]],
    "infiles": list[InputPathType],
    "output_location": str,
})
ImcpParametersTagged = typing.TypedDict('ImcpParametersTagged', {
    "@type": typing.Literal["fsl/imcp"],
    "infiles": list[InputPathType],
    "output_location": str,
})


class ImcpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ImcpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfiles: OutputPathType
    """Output file or directory"""


def imcp_params(
    infiles: list[InputPathType],
    output_location: str,
) -> ImcpParametersTagged:
    """
    Build parameters.
    
    Args:
        infiles: Input image files (e.g. img1.nii.gz, img2.nii.gz).
        output_location: Output file or directory.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/imcp",
        "infiles": infiles,
        "output_location": output_location,
    }
    return params


def imcp_cargs(
    params: ImcpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("imcp")
    cargs.extend([execution.input_file(f) for f in params.get("infiles", None)])
    cargs.append(params.get("output_location", None))
    return cargs


def imcp_outputs(
    params: ImcpParameters,
    execution: Execution,
) -> ImcpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ImcpOutputs(
        root=execution.output_file("."),
        outfiles=execution.output_file(params.get("output_location", None)),
    )
    return ret


def imcp_execute(
    params: ImcpParameters,
    runner: Runner | None = None,
) -> ImcpOutputs:
    """
    imcp
    
    Copy images from one location to another.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImcpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(IMCP_METADATA)
    params = execution.params(params)
    cargs = imcp_cargs(params, execution)
    ret = imcp_outputs(params, execution)
    execution.run(cargs)
    return ret


def imcp(
    infiles: list[InputPathType],
    output_location: str,
    runner: Runner | None = None,
) -> ImcpOutputs:
    """
    imcp
    
    Copy images from one location to another.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infiles: Input image files (e.g. img1.nii.gz, img2.nii.gz).
        output_location: Output file or directory.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ImcpOutputs`).
    """
    params = imcp_params(
        infiles=infiles,
        output_location=output_location,
    )
    return imcp_execute(params, runner)


__all__ = [
    "IMCP_METADATA",
    "ImcpOutputs",
    "imcp",
    "imcp_execute",
    "imcp_params",
]
