# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

INVWARP_METADATA = Metadata(
    id="e8e690e12566222a57c015588ce972d62d5f29a1.boutiques",
    name="invwarp",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


InvwarpParameters = typing.TypedDict('InvwarpParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/invwarp"]],
    "warp": InputPathType,
    "out_img": str,
    "ref_img": InputPathType,
    "absolute": bool,
    "relative": bool,
    "noconstraint": bool,
    "jacobian_min": typing.NotRequired[float | None],
    "jacobian_max": typing.NotRequired[float | None],
    "debug": bool,
})
InvwarpParametersTagged = typing.TypedDict('InvwarpParametersTagged', {
    "@type": typing.Literal["fsl/invwarp"],
    "warp": InputPathType,
    "out_img": str,
    "ref_img": InputPathType,
    "absolute": bool,
    "relative": bool,
    "noconstraint": bool,
    "jacobian_min": typing.NotRequired[float | None],
    "jacobian_max": typing.NotRequired[float | None],
    "debug": bool,
})


class InvwarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `InvwarpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    inverse_warp: OutputPathType
    """Name of output file, containing warps that are the "reverse" of those in
    --warp. this will be a field-file (rather than a file of spline
    coefficients), and it will have any affine component included as part of the
    displacements."""


def invwarp_params(
    warp: InputPathType,
    out_img: str,
    ref_img: InputPathType,
    absolute: bool = False,
    relative: bool = False,
    noconstraint: bool = False,
    jacobian_min: float | None = None,
    jacobian_max: float | None = None,
    debug: bool = False,
) -> InvwarpParametersTagged:
    """
    Build parameters.
    
    Args:
        warp: Filename for warp/shiftmap transform (volume).
        out_img: Filename for output (inverse warped) image.
        ref_img: Filename for new reference image.
        absolute: Use absolute warp convention (default): x' = w(x).
        relative: Use relative warp convention (default): x' = x + w(x).
        noconstraint: Do not apply jacobian constraint.
        jacobian_min: Minimum acceptable jacobian value for constraint (default\
            0.01).
        jacobian_max: Maximum acceptable jacobian value for constraint (default\
            100.0).
        debug: Turn on debugging output.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/invwarp",
        "warp": warp,
        "out_img": out_img,
        "ref_img": ref_img,
        "absolute": absolute,
        "relative": relative,
        "noconstraint": noconstraint,
        "debug": debug,
    }
    if jacobian_min is not None:
        params["jacobian_min"] = jacobian_min
    if jacobian_max is not None:
        params["jacobian_max"] = jacobian_max
    return params


def invwarp_cargs(
    params: InvwarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("invwarp")
    cargs.append("--warp=" + execution.input_file(params.get("warp", None)))
    cargs.append("--out=" + params.get("out_img", None))
    cargs.append("--ref=" + execution.input_file(params.get("ref_img", None)))
    if params.get("absolute", False):
        cargs.append("--abs")
    if params.get("relative", False):
        cargs.append("--rel")
    if params.get("noconstraint", False):
        cargs.append("--noconstraint")
    if params.get("jacobian_min", None) is not None:
        cargs.append("--jmin=" + str(params.get("jacobian_min", None)))
    if params.get("jacobian_max", None) is not None:
        cargs.append("--jmax=" + str(params.get("jacobian_max", None)))
    if params.get("debug", False):
        cargs.append("--debug")
    return cargs


def invwarp_outputs(
    params: InvwarpParameters,
    execution: Execution,
) -> InvwarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = InvwarpOutputs(
        root=execution.output_file("."),
        inverse_warp=execution.output_file(params.get("out_img", None)),
    )
    return ret


def invwarp_execute(
    params: InvwarpParameters,
    runner: Runner | None = None,
) -> InvwarpOutputs:
    """
    invwarp
    
    
    Use FSL Invwarp to invert a FNIRT warp.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `InvwarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(INVWARP_METADATA)
    params = execution.params(params)
    cargs = invwarp_cargs(params, execution)
    ret = invwarp_outputs(params, execution)
    execution.run(cargs)
    return ret


def invwarp(
    warp: InputPathType,
    out_img: str,
    ref_img: InputPathType,
    absolute: bool = False,
    relative: bool = False,
    noconstraint: bool = False,
    jacobian_min: float | None = None,
    jacobian_max: float | None = None,
    debug: bool = False,
    runner: Runner | None = None,
) -> InvwarpOutputs:
    """
    invwarp
    
    
    Use FSL Invwarp to invert a FNIRT warp.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        warp: Filename for warp/shiftmap transform (volume).
        out_img: Filename for output (inverse warped) image.
        ref_img: Filename for new reference image.
        absolute: Use absolute warp convention (default): x' = w(x).
        relative: Use relative warp convention (default): x' = x + w(x).
        noconstraint: Do not apply jacobian constraint.
        jacobian_min: Minimum acceptable jacobian value for constraint (default\
            0.01).
        jacobian_max: Maximum acceptable jacobian value for constraint (default\
            100.0).
        debug: Turn on debugging output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `InvwarpOutputs`).
    """
    params = invwarp_params(
        warp=warp,
        out_img=out_img,
        ref_img=ref_img,
        absolute=absolute,
        relative=relative,
        noconstraint=noconstraint,
        jacobian_min=jacobian_min,
        jacobian_max=jacobian_max,
        debug=debug,
    )
    return invwarp_execute(params, runner)


__all__ = [
    "INVWARP_METADATA",
    "InvwarpOutputs",
    "invwarp",
    "invwarp_execute",
    "invwarp_params",
]
