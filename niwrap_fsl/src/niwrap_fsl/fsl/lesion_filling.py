# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

LESION_FILLING_METADATA = Metadata(
    id="1e65b5bcc2e50127be5143fa0cd4bc6affc80fd9.boutiques",
    name="lesion_filling",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


LesionFillingParameters = typing.TypedDict('LesionFillingParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/lesion_filling"]],
    "infile": InputPathType,
    "outfile": str,
    "lesionmask": InputPathType,
    "wmmask": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "components_flag": bool,
    "help_flag": bool,
})
LesionFillingParametersTagged = typing.TypedDict('LesionFillingParametersTagged', {
    "@type": typing.Literal["fsl/lesion_filling"],
    "infile": InputPathType,
    "outfile": str,
    "lesionmask": InputPathType,
    "wmmask": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "components_flag": bool,
    "help_flag": bool,
})


class LesionFillingOutputs(typing.NamedTuple):
    """
    Output object returned when calling `LesionFillingParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Lesion filled output image"""


def lesion_filling_params(
    infile: InputPathType,
    outfile: str,
    lesionmask: InputPathType,
    wmmask: InputPathType | None = None,
    verbose_flag: bool = False,
    components_flag: bool = False,
    help_flag: bool = False,
) -> LesionFillingParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input image filename (e.g., T1w image).
        outfile: Output filename (lesion filled image).
        lesionmask: Filename of lesion mask image.
        wmmask: Filename of white matter mask image.
        verbose_flag: Switch on diagnostic messages.
        components_flag: Save all lesion components as volumes.
        help_flag: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/lesion_filling",
        "infile": infile,
        "outfile": outfile,
        "lesionmask": lesionmask,
        "verbose_flag": verbose_flag,
        "components_flag": components_flag,
        "help_flag": help_flag,
    }
    if wmmask is not None:
        params["wmmask"] = wmmask
    return params


def lesion_filling_cargs(
    params: LesionFillingParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("lesion_filling")
    cargs.extend([
        "-i",
        execution.input_file(params.get("infile", None))
    ])
    cargs.extend([
        "-o",
        params.get("outfile", None)
    ])
    cargs.extend([
        "-l",
        execution.input_file(params.get("lesionmask", None))
    ])
    if params.get("wmmask", None) is not None:
        cargs.extend([
            "-w",
            execution.input_file(params.get("wmmask", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("components_flag", False):
        cargs.append("-c")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def lesion_filling_outputs(
    params: LesionFillingParameters,
    execution: Execution,
) -> LesionFillingOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = LesionFillingOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("outfile", None)),
    )
    return ret


def lesion_filling_execute(
    params: LesionFillingParameters,
    runner: Runner | None = None,
) -> LesionFillingOutputs:
    """
    lesion_filling
    
    Lesion filling tool as part of FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LesionFillingOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LESION_FILLING_METADATA)
    params = execution.params(params)
    cargs = lesion_filling_cargs(params, execution)
    ret = lesion_filling_outputs(params, execution)
    execution.run(cargs)
    return ret


def lesion_filling(
    infile: InputPathType,
    outfile: str,
    lesionmask: InputPathType,
    wmmask: InputPathType | None = None,
    verbose_flag: bool = False,
    components_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> LesionFillingOutputs:
    """
    lesion_filling
    
    Lesion filling tool as part of FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input image filename (e.g., T1w image).
        outfile: Output filename (lesion filled image).
        lesionmask: Filename of lesion mask image.
        wmmask: Filename of white matter mask image.
        verbose_flag: Switch on diagnostic messages.
        components_flag: Save all lesion components as volumes.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LesionFillingOutputs`).
    """
    params = lesion_filling_params(
        infile=infile,
        outfile=outfile,
        lesionmask=lesionmask,
        wmmask=wmmask,
        verbose_flag=verbose_flag,
        components_flag=components_flag,
        help_flag=help_flag,
    )
    return lesion_filling_execute(params, runner)


__all__ = [
    "LESION_FILLING_METADATA",
    "LesionFillingOutputs",
    "lesion_filling",
    "lesion_filling_execute",
    "lesion_filling_params",
]
