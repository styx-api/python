# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MAKEROT_METADATA = Metadata(
    id="f54ecdee1c289e241f72ffa0e88774c79a779b3e.boutiques",
    name="makerot",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


MakerotParameters = typing.TypedDict('MakerotParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/makerot"]],
    "axis": typing.NotRequired[str | None],
    "cov": typing.NotRequired[InputPathType | None],
    "center": typing.NotRequired[str | None],
    "output_file": typing.NotRequired[str | None],
    "verbose_flag": bool,
    "help_flag": bool,
    "theta": float,
})
MakerotParametersTagged = typing.TypedDict('MakerotParametersTagged', {
    "@type": typing.Literal["fsl/makerot"],
    "axis": typing.NotRequired[str | None],
    "cov": typing.NotRequired[InputPathType | None],
    "center": typing.NotRequired[str | None],
    "output_file": typing.NotRequired[str | None],
    "verbose_flag": bool,
    "help_flag": bool,
    "theta": float,
})


class MakerotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MakerotParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    matrix_output: OutputPathType | None
    """Output file for the rotation matrix"""


def makerot_params(
    theta: float,
    axis: str | None = None,
    cov: InputPathType | None = None,
    center: str | None = None,
    output_file: str | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> MakerotParametersTagged:
    """
    Build parameters.
    
    Args:
        theta: Angle of rotation (in degrees).
        axis: Unnormalized axis vector (comma separated).
        cov: Image filename used for center of volume.
        center: Center of rotation in mm (comma separated).
        output_file: Output filename for matrix.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/makerot",
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
        "theta": theta,
    }
    if axis is not None:
        params["axis"] = axis
    if cov is not None:
        params["cov"] = cov
    if center is not None:
        params["center"] = center
    if output_file is not None:
        params["output_file"] = output_file
    return params


def makerot_cargs(
    params: MakerotParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("makerot")
    if params.get("axis", None) is not None:
        cargs.extend([
            "--axis",
            params.get("axis", None)
        ])
    if params.get("cov", None) is not None:
        cargs.extend([
            "--cov",
            execution.input_file(params.get("cov", None))
        ])
    if params.get("center", None) is not None:
        cargs.extend([
            "--centre",
            params.get("center", None)
        ])
    if params.get("output_file", None) is not None:
        cargs.extend([
            "--out",
            params.get("output_file", None)
        ])
    if params.get("verbose_flag", False):
        cargs.append("--verbose")
    if params.get("help_flag", False):
        cargs.append("--help")
    cargs.extend([
        "--theta",
        str(params.get("theta", None))
    ])
    return cargs


def makerot_outputs(
    params: MakerotParameters,
    execution: Execution,
) -> MakerotOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MakerotOutputs(
        root=execution.output_file("."),
        matrix_output=execution.output_file(params.get("output_file", None)) if (params.get("output_file") is not None) else None,
    )
    return ret


def makerot_execute(
    params: MakerotParameters,
    runner: Runner | None = None,
) -> MakerotOutputs:
    """
    makerot
    
    Tool to create a rotation matrix for a given angle and axis of rotation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakerotOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKEROT_METADATA)
    params = execution.params(params)
    cargs = makerot_cargs(params, execution)
    ret = makerot_outputs(params, execution)
    execution.run(cargs)
    return ret


def makerot(
    theta: float,
    axis: str | None = None,
    cov: InputPathType | None = None,
    center: str | None = None,
    output_file: str | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> MakerotOutputs:
    """
    makerot
    
    Tool to create a rotation matrix for a given angle and axis of rotation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        theta: Angle of rotation (in degrees).
        axis: Unnormalized axis vector (comma separated).
        cov: Image filename used for center of volume.
        center: Center of rotation in mm (comma separated).
        output_file: Output filename for matrix.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakerotOutputs`).
    """
    params = makerot_params(
        axis=axis,
        cov=cov,
        center=center,
        output_file=output_file,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
        theta=theta,
    )
    return makerot_execute(params, runner)


__all__ = [
    "MAKEROT_METADATA",
    "MakerotOutputs",
    "makerot",
    "makerot_execute",
    "makerot_params",
]
