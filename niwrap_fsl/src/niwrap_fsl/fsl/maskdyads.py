# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MASKDYADS_METADATA = Metadata(
    id="67ad99695821156823afba24766ebeda6faf25ed.boutiques",
    name="maskdyads",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


MaskdyadsParameters = typing.TypedDict('MaskdyadsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/maskdyads"]],
    "dyads": InputPathType,
    "fsamples": InputPathType,
    "threshold": typing.NotRequired[float | None],
})
MaskdyadsParametersTagged = typing.TypedDict('MaskdyadsParametersTagged', {
    "@type": typing.Literal["fsl/maskdyads"],
    "dyads": InputPathType,
    "fsamples": InputPathType,
    "threshold": typing.NotRequired[float | None],
})


class MaskdyadsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MaskdyadsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def maskdyads_params(
    dyads: InputPathType,
    fsamples: InputPathType,
    threshold: float | None = None,
) -> MaskdyadsParametersTagged:
    """
    Build parameters.
    
    Args:
        dyads: Input dyads file.
        fsamples: Input fsamples file.
        threshold: Threshold (default is 0.05).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/maskdyads",
        "dyads": dyads,
        "fsamples": fsamples,
    }
    if threshold is not None:
        params["threshold"] = threshold
    return params


def maskdyads_cargs(
    params: MaskdyadsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("maskdyads")
    cargs.append(execution.input_file(params.get("dyads", None)))
    cargs.append(execution.input_file(params.get("fsamples", None)))
    if params.get("threshold", None) is not None:
        cargs.extend([
            "[THR]",
            str(params.get("threshold", None))
        ])
    return cargs


def maskdyads_outputs(
    params: MaskdyadsParameters,
    execution: Execution,
) -> MaskdyadsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MaskdyadsOutputs(
        root=execution.output_file("."),
    )
    return ret


def maskdyads_execute(
    params: MaskdyadsParameters,
    runner: Runner | None = None,
) -> MaskdyadsOutputs:
    """
    maskdyads
    
    Tool to mask dyads with threshold.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MaskdyadsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MASKDYADS_METADATA)
    params = execution.params(params)
    cargs = maskdyads_cargs(params, execution)
    ret = maskdyads_outputs(params, execution)
    execution.run(cargs)
    return ret


def maskdyads(
    dyads: InputPathType,
    fsamples: InputPathType,
    threshold: float | None = None,
    runner: Runner | None = None,
) -> MaskdyadsOutputs:
    """
    maskdyads
    
    Tool to mask dyads with threshold.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        dyads: Input dyads file.
        fsamples: Input fsamples file.
        threshold: Threshold (default is 0.05).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MaskdyadsOutputs`).
    """
    params = maskdyads_params(
        dyads=dyads,
        fsamples=fsamples,
        threshold=threshold,
    )
    return maskdyads_execute(params, runner)


__all__ = [
    "MASKDYADS_METADATA",
    "MaskdyadsOutputs",
    "maskdyads",
    "maskdyads_execute",
    "maskdyads_params",
]
