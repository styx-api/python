# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MEDIANFILTER_METADATA = Metadata(
    id="a2389674d9029951b0bd3c6321e79ce7b848526d.boutiques",
    name="medianfilter",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


MedianfilterParameters = typing.TypedDict('MedianfilterParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/medianfilter"]],
    "infile": InputPathType,
    "outfile": InputPathType,
})
MedianfilterParametersTagged = typing.TypedDict('MedianfilterParametersTagged', {
    "@type": typing.Literal["fsl/medianfilter"],
    "infile": InputPathType,
    "outfile": InputPathType,
})


class MedianfilterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MedianfilterParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    filtered_file: OutputPathType
    """Output file containing the median filtered image"""


def medianfilter_params(
    infile: InputPathType,
    outfile: InputPathType,
) -> MedianfilterParametersTagged:
    """
    Build parameters.
    
    Args:
        infile: Input image file to be filtered (e.g., img.nii.gz).
        outfile: Output file to store the filtered image (e.g.,\
            img_filtered.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/medianfilter",
        "infile": infile,
        "outfile": outfile,
    }
    return params


def medianfilter_cargs(
    params: MedianfilterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("medianfilter")
    cargs.append(execution.input_file(params.get("infile", None)))
    cargs.append(execution.input_file(params.get("outfile", None)))
    return cargs


def medianfilter_outputs(
    params: MedianfilterParameters,
    execution: Execution,
) -> MedianfilterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MedianfilterOutputs(
        root=execution.output_file("."),
        filtered_file=execution.output_file(pathlib.Path(params.get("outfile", None)).name),
    )
    return ret


def medianfilter_execute(
    params: MedianfilterParameters,
    runner: Runner | None = None,
) -> MedianfilterOutputs:
    """
    medianfilter
    
    A tool to perform 26 neighbourhood median filtering on an input image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MedianfilterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MEDIANFILTER_METADATA)
    params = execution.params(params)
    cargs = medianfilter_cargs(params, execution)
    ret = medianfilter_outputs(params, execution)
    execution.run(cargs)
    return ret


def medianfilter(
    infile: InputPathType,
    outfile: InputPathType,
    runner: Runner | None = None,
) -> MedianfilterOutputs:
    """
    medianfilter
    
    A tool to perform 26 neighbourhood median filtering on an input image.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        infile: Input image file to be filtered (e.g., img.nii.gz).
        outfile: Output file to store the filtered image (e.g.,\
            img_filtered.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MedianfilterOutputs`).
    """
    params = medianfilter_params(
        infile=infile,
        outfile=outfile,
    )
    return medianfilter_execute(params, runner)


__all__ = [
    "MEDIANFILTER_METADATA",
    "MedianfilterOutputs",
    "medianfilter",
    "medianfilter_execute",
    "medianfilter_params",
]
