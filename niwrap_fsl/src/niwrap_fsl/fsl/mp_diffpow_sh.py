# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MP_DIFFPOW_SH_METADATA = Metadata(
    id="bde8aff6821625350c5744058479f934140e2dcf.boutiques",
    name="mp_diffpow.sh",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


MpDiffpowShParameters = typing.TypedDict('MpDiffpowShParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/mp_diffpow.sh"]],
    "reg_file": InputPathType,
    "diff_reg_file": str,
})
MpDiffpowShParametersTagged = typing.TypedDict('MpDiffpowShParametersTagged', {
    "@type": typing.Literal["fsl/mp_diffpow.sh"],
    "reg_file": InputPathType,
    "diff_reg_file": str,
})


class MpDiffpowShOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MpDiffpowShParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """File containing squared motion parameters, temporal difference of motion
    parameters, and squared differenced values."""


def mp_diffpow_sh_params(
    reg_file: InputPathType,
    diff_reg_file: str,
) -> MpDiffpowShParametersTagged:
    """
    Build parameters.
    
    Args:
        reg_file: Input file containing registration parameters (e.g.,\
            regparam.dat).
        diff_reg_file: Output file with differenced registration parameters\
            (e.g., diffregparam.dat).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/mp_diffpow.sh",
        "reg_file": reg_file,
        "diff_reg_file": diff_reg_file,
    }
    return params


def mp_diffpow_sh_cargs(
    params: MpDiffpowShParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mp_diffpow.sh")
    cargs.append(execution.input_file(params.get("reg_file", None)))
    cargs.append(params.get("diff_reg_file", None))
    return cargs


def mp_diffpow_sh_outputs(
    params: MpDiffpowShParameters,
    execution: Execution,
) -> MpDiffpowShOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MpDiffpowShOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("diff_reg_file", None)),
    )
    return ret


def mp_diffpow_sh_execute(
    params: MpDiffpowShParameters,
    runner: Runner | None = None,
) -> MpDiffpowShOutputs:
    """
    mp_diffpow.sh
    
    Generates a file with specific motion parameter calculations useful for
    accounting for 'spin history' effects and other variations not accounted for
    by motion correction.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MpDiffpowShOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MP_DIFFPOW_SH_METADATA)
    params = execution.params(params)
    cargs = mp_diffpow_sh_cargs(params, execution)
    ret = mp_diffpow_sh_outputs(params, execution)
    execution.run(cargs)
    return ret


def mp_diffpow_sh(
    reg_file: InputPathType,
    diff_reg_file: str,
    runner: Runner | None = None,
) -> MpDiffpowShOutputs:
    """
    mp_diffpow.sh
    
    Generates a file with specific motion parameter calculations useful for
    accounting for 'spin history' effects and other variations not accounted for
    by motion correction.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        reg_file: Input file containing registration parameters (e.g.,\
            regparam.dat).
        diff_reg_file: Output file with differenced registration parameters\
            (e.g., diffregparam.dat).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MpDiffpowShOutputs`).
    """
    params = mp_diffpow_sh_params(
        reg_file=reg_file,
        diff_reg_file=diff_reg_file,
    )
    return mp_diffpow_sh_execute(params, runner)


__all__ = [
    "MP_DIFFPOW_SH_METADATA",
    "MpDiffpowShOutputs",
    "mp_diffpow_sh",
    "mp_diffpow_sh_execute",
    "mp_diffpow_sh_params",
]
