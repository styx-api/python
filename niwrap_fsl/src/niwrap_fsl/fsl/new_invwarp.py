# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

NEW_INVWARP_METADATA = Metadata(
    id="d6b5c3d1b7012738ddceb0a712e919c94ade916f.boutiques",
    name="new_invwarp",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


NewInvwarpParameters = typing.TypedDict('NewInvwarpParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/new_invwarp"]],
    "warpvol": InputPathType,
    "outvol": str,
    "refvol": InputPathType,
    "relflag": bool,
    "absflag": bool,
    "noconstraintflag": bool,
    "jmin": typing.NotRequired[float | None],
    "jmax": typing.NotRequired[float | None],
    "debugflag": bool,
    "verboseflag": bool,
})
NewInvwarpParametersTagged = typing.TypedDict('NewInvwarpParametersTagged', {
    "@type": typing.Literal["fsl/new_invwarp"],
    "warpvol": InputPathType,
    "outvol": str,
    "refvol": InputPathType,
    "relflag": bool,
    "absflag": bool,
    "noconstraintflag": bool,
    "jmin": typing.NotRequired[float | None],
    "jmax": typing.NotRequired[float | None],
    "debugflag": bool,
    "verboseflag": bool,
})


class NewInvwarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `NewInvwarpParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_volume: OutputPathType
    """Output inverse warped volume"""


def new_invwarp_params(
    warpvol: InputPathType,
    outvol: str,
    refvol: InputPathType,
    relflag: bool = False,
    absflag: bool = False,
    noconstraintflag: bool = False,
    jmin: float | None = None,
    jmax: float | None = None,
    debugflag: bool = False,
    verboseflag: bool = False,
) -> NewInvwarpParametersTagged:
    """
    Build parameters.
    
    Args:
        warpvol: Filename for warp/shiftmap transform (volume).
        outvol: Filename for output (inverse warped) image.
        refvol: Filename for new reference image, i.e., what was originally the\
            input image (determines inverse warpvol's FOV and pixdims).
        relflag: Use relative warp convention: x' = x + w(x).
        absflag: Use absolute warp convention (default): x' = w(x).
        noconstraintflag: Do not apply the Jacobian constraint.
        jmin: Minimum acceptable Jacobian value for constraint (default 0.01).
        jmax: Maximum acceptable Jacobian value for constraint (default 100.0).
        debugflag: Turn on debugging output.
        verboseflag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/new_invwarp",
        "warpvol": warpvol,
        "outvol": outvol,
        "refvol": refvol,
        "relflag": relflag,
        "absflag": absflag,
        "noconstraintflag": noconstraintflag,
        "debugflag": debugflag,
        "verboseflag": verboseflag,
    }
    if jmin is not None:
        params["jmin"] = jmin
    if jmax is not None:
        params["jmax"] = jmax
    return params


def new_invwarp_cargs(
    params: NewInvwarpParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("new_invwarp")
    cargs.extend([
        "-w",
        execution.input_file(params.get("warpvol", None))
    ])
    cargs.extend([
        "-o",
        params.get("outvol", None)
    ])
    cargs.extend([
        "-r",
        execution.input_file(params.get("refvol", None))
    ])
    if params.get("relflag", False):
        cargs.append("--rel")
    if params.get("absflag", False):
        cargs.append("--abs")
    if params.get("noconstraintflag", False):
        cargs.append("--noconstraint")
    if params.get("jmin", None) is not None:
        cargs.extend([
            "--jmin",
            str(params.get("jmin", None))
        ])
    if params.get("jmax", None) is not None:
        cargs.extend([
            "--jmax",
            str(params.get("jmax", None))
        ])
    if params.get("debugflag", False):
        cargs.append("--debug")
    if params.get("verboseflag", False):
        cargs.append("-v")
    return cargs


def new_invwarp_outputs(
    params: NewInvwarpParameters,
    execution: Execution,
) -> NewInvwarpOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = NewInvwarpOutputs(
        root=execution.output_file("."),
        out_volume=execution.output_file(params.get("outvol", None)),
    )
    return ret


def new_invwarp_execute(
    params: NewInvwarpParameters,
    runner: Runner | None = None,
) -> NewInvwarpOutputs:
    """
    new_invwarp
    
    Inverse warp tool from FSL suite.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `NewInvwarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(NEW_INVWARP_METADATA)
    params = execution.params(params)
    cargs = new_invwarp_cargs(params, execution)
    ret = new_invwarp_outputs(params, execution)
    execution.run(cargs)
    return ret


def new_invwarp(
    warpvol: InputPathType,
    outvol: str,
    refvol: InputPathType,
    relflag: bool = False,
    absflag: bool = False,
    noconstraintflag: bool = False,
    jmin: float | None = None,
    jmax: float | None = None,
    debugflag: bool = False,
    verboseflag: bool = False,
    runner: Runner | None = None,
) -> NewInvwarpOutputs:
    """
    new_invwarp
    
    Inverse warp tool from FSL suite.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        warpvol: Filename for warp/shiftmap transform (volume).
        outvol: Filename for output (inverse warped) image.
        refvol: Filename for new reference image, i.e., what was originally the\
            input image (determines inverse warpvol's FOV and pixdims).
        relflag: Use relative warp convention: x' = x + w(x).
        absflag: Use absolute warp convention (default): x' = w(x).
        noconstraintflag: Do not apply the Jacobian constraint.
        jmin: Minimum acceptable Jacobian value for constraint (default 0.01).
        jmax: Maximum acceptable Jacobian value for constraint (default 100.0).
        debugflag: Turn on debugging output.
        verboseflag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `NewInvwarpOutputs`).
    """
    params = new_invwarp_params(
        warpvol=warpvol,
        outvol=outvol,
        refvol=refvol,
        relflag=relflag,
        absflag=absflag,
        noconstraintflag=noconstraintflag,
        jmin=jmin,
        jmax=jmax,
        debugflag=debugflag,
        verboseflag=verboseflag,
    )
    return new_invwarp_execute(params, runner)


__all__ = [
    "NEW_INVWARP_METADATA",
    "NewInvwarpOutputs",
    "new_invwarp",
    "new_invwarp_execute",
    "new_invwarp_params",
]
