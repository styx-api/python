# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

PNGAPPEND_METADATA = Metadata(
    id="abf2da782c965891a47789a1b9ff766a250b204a.boutiques",
    name="pngappend",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


PngappendParameters = typing.TypedDict('PngappendParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/pngappend"]],
    "input_files_and_options": list[str],
    "output_file": InputPathType,
})
PngappendParametersTagged = typing.TypedDict('PngappendParametersTagged', {
    "@type": typing.Literal["fsl/pngappend"],
    "input_files_and_options": list[str],
    "output_file": InputPathType,
})


class PngappendOutputs(typing.NamedTuple):
    """
    Output object returned when calling `PngappendParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def pngappend_params(
    input_files_and_options: list[str],
    output_file: InputPathType,
) -> PngappendParametersTagged:
    """
    Build parameters.
    
    Args:
        input_files_and_options: List of input files and options for appending\
            (e.g., file1.png +3 file2.png -2 file3.png).
        output_file: Output file (e.g., output.png or output.gif).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/pngappend",
        "input_files_and_options": input_files_and_options,
        "output_file": output_file,
    }
    return params


def pngappend_cargs(
    params: PngappendParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("pngappend")
    cargs.extend(params.get("input_files_and_options", None))
    cargs.append(execution.input_file(params.get("output_file", None)))
    return cargs


def pngappend_outputs(
    params: PngappendParameters,
    execution: Execution,
) -> PngappendOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PngappendOutputs(
        root=execution.output_file("."),
    )
    return ret


def pngappend_execute(
    params: PngappendParameters,
    runner: Runner | None = None,
) -> PngappendOutputs:
    """
    pngappend
    
    Append PNG files horizontally and/or vertically into a new PNG (or GIF)
    file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PngappendOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PNGAPPEND_METADATA)
    params = execution.params(params)
    cargs = pngappend_cargs(params, execution)
    ret = pngappend_outputs(params, execution)
    execution.run(cargs)
    return ret


def pngappend(
    input_files_and_options: list[str],
    output_file: InputPathType,
    runner: Runner | None = None,
) -> PngappendOutputs:
    """
    pngappend
    
    Append PNG files horizontally and/or vertically into a new PNG (or GIF)
    file.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_files_and_options: List of input files and options for appending\
            (e.g., file1.png +3 file2.png -2 file3.png).
        output_file: Output file (e.g., output.png or output.gif).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PngappendOutputs`).
    """
    params = pngappend_params(
        input_files_and_options=input_files_and_options,
        output_file=output_file,
    )
    return pngappend_execute(params, runner)


__all__ = [
    "PNGAPPEND_METADATA",
    "PngappendOutputs",
    "pngappend",
    "pngappend_execute",
    "pngappend_params",
]
