# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

POSSUM_INTERPMOT_PY_METADATA = Metadata(
    id="3f3adbac7b7f47ce490bce211d17a46626672b68.boutiques",
    name="possum_interpmot.py",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


PossumInterpmotPyParameters = typing.TypedDict('PossumInterpmotPyParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/possum_interpmot.py"]],
    "motion_type": int,
    "tr": float,
    "tr_slice": float,
    "nslices": int,
    "nvols": int,
    "custom_motion_file": InputPathType,
    "output_file": str,
})
PossumInterpmotPyParametersTagged = typing.TypedDict('PossumInterpmotPyParametersTagged', {
    "@type": typing.Literal["fsl/possum_interpmot.py"],
    "motion_type": int,
    "tr": float,
    "tr_slice": float,
    "nslices": int,
    "nvols": int,
    "custom_motion_file": InputPathType,
    "output_file": str,
})


class PossumInterpmotPyOutputs(typing.NamedTuple):
    """
    Output object returned when calling `PossumInterpmotPyParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Interpolated motion output file"""


def possum_interpmot_py_params(
    motion_type: int,
    tr: float,
    tr_slice: float,
    nslices: int,
    nvols: int,
    custom_motion_file: InputPathType,
    output_file: str,
) -> PossumInterpmotPyParametersTagged:
    """
    Build parameters.
    
    Args:
        motion_type: Type of motion: 0 for continuous, 1 for between slices, 2\
            for between volumes.
        tr: Repetition time in seconds.
        tr_slice: Slice repetition time in seconds.
        nslices: Number of slices.
        nvols: Number of volumes.
        custom_motion_file: Custom motion file.
        output_file: Output file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/possum_interpmot.py",
        "motion_type": motion_type,
        "tr": tr,
        "tr_slice": tr_slice,
        "nslices": nslices,
        "nvols": nvols,
        "custom_motion_file": custom_motion_file,
        "output_file": output_file,
    }
    return params


def possum_interpmot_py_cargs(
    params: PossumInterpmotPyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("possum_interpmot.py")
    cargs.append(str(params.get("motion_type", None)))
    cargs.append(str(params.get("tr", None)))
    cargs.append(str(params.get("tr_slice", None)))
    cargs.append(str(params.get("nslices", None)))
    cargs.append(str(params.get("nvols", None)))
    cargs.append(execution.input_file(params.get("custom_motion_file", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def possum_interpmot_py_outputs(
    params: PossumInterpmotPyParameters,
    execution: Execution,
) -> PossumInterpmotPyOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PossumInterpmotPyOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_file", None)),
    )
    return ret


def possum_interpmot_py_execute(
    params: PossumInterpmotPyParameters,
    runner: Runner | None = None,
) -> PossumInterpmotPyOutputs:
    """
    possum_interpmot.py
    
    Position Interpolation for Movers and Shakers.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PossumInterpmotPyOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(POSSUM_INTERPMOT_PY_METADATA)
    params = execution.params(params)
    cargs = possum_interpmot_py_cargs(params, execution)
    ret = possum_interpmot_py_outputs(params, execution)
    execution.run(cargs)
    return ret


def possum_interpmot_py(
    motion_type: int,
    tr: float,
    tr_slice: float,
    nslices: int,
    nvols: int,
    custom_motion_file: InputPathType,
    output_file: str,
    runner: Runner | None = None,
) -> PossumInterpmotPyOutputs:
    """
    possum_interpmot.py
    
    Position Interpolation for Movers and Shakers.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        motion_type: Type of motion: 0 for continuous, 1 for between slices, 2\
            for between volumes.
        tr: Repetition time in seconds.
        tr_slice: Slice repetition time in seconds.
        nslices: Number of slices.
        nvols: Number of volumes.
        custom_motion_file: Custom motion file.
        output_file: Output file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PossumInterpmotPyOutputs`).
    """
    params = possum_interpmot_py_params(
        motion_type=motion_type,
        tr=tr,
        tr_slice=tr_slice,
        nslices=nslices,
        nvols=nvols,
        custom_motion_file=custom_motion_file,
        output_file=output_file,
    )
    return possum_interpmot_py_execute(params, runner)


__all__ = [
    "POSSUM_INTERPMOT_PY_METADATA",
    "PossumInterpmotPyOutputs",
    "possum_interpmot_py",
    "possum_interpmot_py_execute",
    "possum_interpmot_py_params",
]
