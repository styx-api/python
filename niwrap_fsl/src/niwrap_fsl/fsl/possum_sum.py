# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

POSSUM_SUM_METADATA = Metadata(
    id="38f8ddb18ee62434644777740eb0e6fd7e9b3961.boutiques",
    name="possum_sum",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


PossumSumParameters = typing.TypedDict('PossumSumParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/possum_sum"]],
    "input_signal": InputPathType,
    "output_signal": str,
    "num_processors": typing.NotRequired[int | None],
    "verbose_flag": bool,
})
PossumSumParametersTagged = typing.TypedDict('PossumSumParametersTagged', {
    "@type": typing.Literal["fsl/possum_sum"],
    "input_signal": InputPathType,
    "output_signal": str,
    "num_processors": typing.NotRequired[int | None],
    "verbose_flag": bool,
})


class PossumSumOutputs(typing.NamedTuple):
    """
    Output object returned when calling `PossumSumParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType
    """Sum of all input signals from processors"""


def possum_sum_params(
    input_signal: InputPathType,
    output_signal: str,
    num_processors: int | None = None,
    verbose_flag: bool = False,
) -> PossumSumParametersTagged:
    """
    Build parameters.
    
    Args:
        input_signal: Input signal for one processor (possum output matrix).
        output_signal: Output signal: sum of all the processors (possum matrix\
            form).
        num_processors: Number of processors.
        verbose_flag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/possum_sum",
        "input_signal": input_signal,
        "output_signal": output_signal,
        "verbose_flag": verbose_flag,
    }
    if num_processors is not None:
        params["num_processors"] = num_processors
    return params


def possum_sum_cargs(
    params: PossumSumParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("possum_sum")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_signal", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_signal", None)
    ])
    if params.get("num_processors", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("num_processors", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    return cargs


def possum_sum_outputs(
    params: PossumSumParameters,
    execution: Execution,
) -> PossumSumOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = PossumSumOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(params.get("output_signal", None)),
    )
    return ret


def possum_sum_execute(
    params: PossumSumParameters,
    runner: Runner | None = None,
) -> PossumSumOutputs:
    """
    possum_sum
    
    Sum of output signals from multiple possum processors.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PossumSumOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(POSSUM_SUM_METADATA)
    params = execution.params(params)
    cargs = possum_sum_cargs(params, execution)
    ret = possum_sum_outputs(params, execution)
    execution.run(cargs)
    return ret


def possum_sum(
    input_signal: InputPathType,
    output_signal: str,
    num_processors: int | None = None,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> PossumSumOutputs:
    """
    possum_sum
    
    Sum of output signals from multiple possum processors.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_signal: Input signal for one processor (possum output matrix).
        output_signal: Output signal: sum of all the processors (possum matrix\
            form).
        num_processors: Number of processors.
        verbose_flag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `PossumSumOutputs`).
    """
    params = possum_sum_params(
        input_signal=input_signal,
        output_signal=output_signal,
        num_processors=num_processors,
        verbose_flag=verbose_flag,
    )
    return possum_sum_execute(params, runner)


__all__ = [
    "POSSUM_SUM_METADATA",
    "PossumSumOutputs",
    "possum_sum",
    "possum_sum_execute",
    "possum_sum_params",
]
