# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

PROBTRACKX_METADATA = Metadata(
    id="a8e7544d6f5cf962658c8458df2ffe3e70e041b1.boutiques",
    name="probtrackx",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


ProbtrackxParameters = typing.TypedDict('ProbtrackxParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/probtrackx"]],
    "samples": InputPathType,
    "mask": InputPathType,
    "seed": InputPathType,
    "out": str,
    "verbose": typing.NotRequired[int | None],
    "targetmasks": typing.NotRequired[InputPathType | None],
    "mask2": typing.NotRequired[InputPathType | None],
    "waypoints": typing.NotRequired[InputPathType | None],
    "network": bool,
    "mesh": typing.NotRequired[InputPathType | None],
    "seedref": typing.NotRequired[InputPathType | None],
    "dir": typing.NotRequired[str | None],
    "forcedir": bool,
    "opd": bool,
    "pd": bool,
    "os2t": bool,
    "avoid": typing.NotRequired[InputPathType | None],
    "stop": typing.NotRequired[InputPathType | None],
    "xfm": typing.NotRequired[InputPathType | None],
    "invxfm": typing.NotRequired[InputPathType | None],
    "nsamples": typing.NotRequired[int | None],
    "nsteps": typing.NotRequired[int | None],
    "distthresh": typing.NotRequired[float | None],
    "cthr": typing.NotRequired[float | None],
    "fibthresh": typing.NotRequired[float | None],
    "sampvox": bool,
    "steplength": typing.NotRequired[float | None],
    "loopcheck": bool,
    "usef": bool,
    "randfib": typing.NotRequired[int | None],
    "fibst": typing.NotRequired[int | None],
    "modeuler": bool,
    "rseed": typing.NotRequired[int | None],
    "s2tastext": bool,
})
ProbtrackxParametersTagged = typing.TypedDict('ProbtrackxParametersTagged', {
    "@type": typing.Literal["fsl/probtrackx"],
    "samples": InputPathType,
    "mask": InputPathType,
    "seed": InputPathType,
    "out": str,
    "verbose": typing.NotRequired[int | None],
    "targetmasks": typing.NotRequired[InputPathType | None],
    "mask2": typing.NotRequired[InputPathType | None],
    "waypoints": typing.NotRequired[InputPathType | None],
    "network": bool,
    "mesh": typing.NotRequired[InputPathType | None],
    "seedref": typing.NotRequired[InputPathType | None],
    "dir": typing.NotRequired[str | None],
    "forcedir": bool,
    "opd": bool,
    "pd": bool,
    "os2t": bool,
    "avoid": typing.NotRequired[InputPathType | None],
    "stop": typing.NotRequired[InputPathType | None],
    "xfm": typing.NotRequired[InputPathType | None],
    "invxfm": typing.NotRequired[InputPathType | None],
    "nsamples": typing.NotRequired[int | None],
    "nsteps": typing.NotRequired[int | None],
    "distthresh": typing.NotRequired[float | None],
    "cthr": typing.NotRequired[float | None],
    "fibthresh": typing.NotRequired[float | None],
    "sampvox": bool,
    "steplength": typing.NotRequired[float | None],
    "loopcheck": bool,
    "usef": bool,
    "randfib": typing.NotRequired[int | None],
    "fibst": typing.NotRequired[int | None],
    "modeuler": bool,
    "rseed": typing.NotRequired[int | None],
    "s2tastext": bool,
})


class ProbtrackxOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ProbtrackxParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def probtrackx_params(
    samples: InputPathType,
    mask: InputPathType,
    seed: InputPathType,
    out: str = "fdt_paths",
    verbose: int | None = None,
    targetmasks: InputPathType | None = None,
    mask2: InputPathType | None = None,
    waypoints: InputPathType | None = None,
    network: bool = False,
    mesh: InputPathType | None = None,
    seedref: InputPathType | None = None,
    dir_: str | None = None,
    forcedir: bool = False,
    opd: bool = False,
    pd: bool = False,
    os2t: bool = False,
    avoid: InputPathType | None = None,
    stop: InputPathType | None = None,
    xfm: InputPathType | None = None,
    invxfm: InputPathType | None = None,
    nsamples: int | None = None,
    nsteps: int | None = None,
    distthresh: float | None = None,
    cthr: float | None = None,
    fibthresh: float | None = None,
    sampvox: bool = False,
    steplength: float | None = None,
    loopcheck: bool = False,
    usef: bool = False,
    randfib: int | None = None,
    fibst: int | None = None,
    modeuler: bool = False,
    rseed: int | None = None,
    s2tastext: bool = False,
) -> ProbtrackxParametersTagged:
    """
    Build parameters.
    
    Args:
        samples: Basename for samples files.
        mask: Bet binary mask file in diffusion space.
        seed: Seed volume, or voxel, or ascii file with multiple volumes, or\
            freesurfer label file.
        out: Output file (default='fdt_paths').
        verbose: Verbose level, [0-2].
        targetmasks: File containing a list of target masks - required for\
            seeds_to_targets classification.
        mask2: Second mask in twomask_symm mode.
        waypoints: Waypoint mask or ascii list of waypoint masks - only keep\
            paths going through ALL the masks.
        network: Activate network mode - only keep paths going through at least\
            one seed mask (required if multiple seed masks).
        mesh: Freesurfer-type surface descriptor (in ascii format).
        seedref: Reference vol to define seed space in simple mode - diffusion\
            space assumed if absent.
        dir_: Directory to put the final volumes in - code makes this directory\
            - default='logdir'.
        forcedir: Use the actual directory name given - i.e. don't add + to\
            make a new directory.
        opd: Output path distribution.
        pd: Correct path distribution for the length of the pathways.
        os2t: Output seeds to targets.
        avoid: Reject pathways passing through locations given by this mask.
        stop: Stop tracking at locations given by this mask file.
        xfm: Transform taking seed space to DTI space (either FLIRT matrix or\
            FNIRT warpfield) - default is identity.
        invxfm: Transform taking DTI space to seed space (compulsory when using\
            a warpfield for seeds_to_dti).
        nsamples: Number of samples - default=5000.
        nsteps: Number of steps per sample - default=2000.
        distthresh: Discards samples shorter than this threshold (in mm -\
            default=0).
        cthr: Curvature threshold - default=0.2.
        fibthresh: Volume fraction before subsidary fibre orientations are\
            considered - default=0.01.
        sampvox: Sample random points within seed voxels.
        steplength: Steplength in mm - default=0.5.
        loopcheck: Perform loopchecks on paths - slower, but allows lower\
            curvature threshold.
        usef: Use anisotropy to constrain tracking.
        randfib: Default 0. Set to 1 to randomly sample initial fibres (with f\
            > fibthresh). Set to 2 to sample in proportion fibres (with\
            f>fibthresh) to f. Set to 3 to sample ALL populations at random (even\
            if f<fibthresh).
        fibst: Force a starting fibre for tracking - default=1, i.e. first\
            fibre orientation. Only works if randfib==0.
        modeuler: Use modified euler streamlining.
        rseed: Random seed.
        s2tastext: Output seed-to-target counts as a text file (useful when\
            seeding from a mesh).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/probtrackx",
        "samples": samples,
        "mask": mask,
        "seed": seed,
        "out": out,
        "network": network,
        "forcedir": forcedir,
        "opd": opd,
        "pd": pd,
        "os2t": os2t,
        "sampvox": sampvox,
        "loopcheck": loopcheck,
        "usef": usef,
        "modeuler": modeuler,
        "s2tastext": s2tastext,
    }
    if verbose is not None:
        params["verbose"] = verbose
    if targetmasks is not None:
        params["targetmasks"] = targetmasks
    if mask2 is not None:
        params["mask2"] = mask2
    if waypoints is not None:
        params["waypoints"] = waypoints
    if mesh is not None:
        params["mesh"] = mesh
    if seedref is not None:
        params["seedref"] = seedref
    if dir_ is not None:
        params["dir"] = dir_
    if avoid is not None:
        params["avoid"] = avoid
    if stop is not None:
        params["stop"] = stop
    if xfm is not None:
        params["xfm"] = xfm
    if invxfm is not None:
        params["invxfm"] = invxfm
    if nsamples is not None:
        params["nsamples"] = nsamples
    if nsteps is not None:
        params["nsteps"] = nsteps
    if distthresh is not None:
        params["distthresh"] = distthresh
    if cthr is not None:
        params["cthr"] = cthr
    if fibthresh is not None:
        params["fibthresh"] = fibthresh
    if steplength is not None:
        params["steplength"] = steplength
    if randfib is not None:
        params["randfib"] = randfib
    if fibst is not None:
        params["fibst"] = fibst
    if rseed is not None:
        params["rseed"] = rseed
    return params


def probtrackx_cargs(
    params: ProbtrackxParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("probtrackx")
    cargs.extend([
        "-s",
        execution.input_file(params.get("samples", None))
    ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("mask", None))
    ])
    cargs.extend([
        "-x",
        execution.input_file(params.get("seed", None))
    ])
    cargs.extend([
        "-o",
        params.get("out", "fdt_paths")
    ])
    if params.get("verbose", None) is not None:
        cargs.extend([
            "--verbose",
            str(params.get("verbose", None))
        ])
    if params.get("targetmasks", None) is not None:
        cargs.extend([
            "--targetmasks",
            execution.input_file(params.get("targetmasks", None))
        ])
    if params.get("mask2", None) is not None:
        cargs.extend([
            "--mask2",
            execution.input_file(params.get("mask2", None))
        ])
    if params.get("waypoints", None) is not None:
        cargs.extend([
            "--waypoints",
            execution.input_file(params.get("waypoints", None))
        ])
    if params.get("network", False):
        cargs.append("--network")
    if params.get("mesh", None) is not None:
        cargs.extend([
            "--mesh",
            execution.input_file(params.get("mesh", None))
        ])
    if params.get("seedref", None) is not None:
        cargs.extend([
            "--seedref",
            execution.input_file(params.get("seedref", None))
        ])
    if params.get("dir", None) is not None:
        cargs.extend([
            "--dir",
            params.get("dir", None)
        ])
    if params.get("forcedir", False):
        cargs.append("--forcedir")
    if params.get("opd", False):
        cargs.append("--opd")
    if params.get("pd", False):
        cargs.append("--pd")
    if params.get("os2t", False):
        cargs.append("--os2t")
    if params.get("avoid", None) is not None:
        cargs.extend([
            "--avoid",
            execution.input_file(params.get("avoid", None))
        ])
    if params.get("stop", None) is not None:
        cargs.extend([
            "--stop",
            execution.input_file(params.get("stop", None))
        ])
    if params.get("xfm", None) is not None:
        cargs.extend([
            "--xfm",
            execution.input_file(params.get("xfm", None))
        ])
    if params.get("invxfm", None) is not None:
        cargs.extend([
            "--invxfm",
            execution.input_file(params.get("invxfm", None))
        ])
    if params.get("nsamples", None) is not None:
        cargs.extend([
            "-P",
            str(params.get("nsamples", None))
        ])
    if params.get("nsteps", None) is not None:
        cargs.extend([
            "-S",
            str(params.get("nsteps", None))
        ])
    if params.get("distthresh", None) is not None:
        cargs.extend([
            "--distthresh",
            str(params.get("distthresh", None))
        ])
    if params.get("cthr", None) is not None:
        cargs.extend([
            "-c",
            str(params.get("cthr", None))
        ])
    if params.get("fibthresh", None) is not None:
        cargs.extend([
            "--fibthresh",
            str(params.get("fibthresh", None))
        ])
    if params.get("sampvox", False):
        cargs.append("--sampvox")
    if params.get("steplength", None) is not None:
        cargs.extend([
            "--steplength",
            str(params.get("steplength", None))
        ])
    if params.get("loopcheck", False):
        cargs.append("-l")
    if params.get("usef", False):
        cargs.append("-f")
    if params.get("randfib", None) is not None:
        cargs.extend([
            "--randfib",
            str(params.get("randfib", None))
        ])
    if params.get("fibst", None) is not None:
        cargs.extend([
            "--fibst",
            str(params.get("fibst", None))
        ])
    if params.get("modeuler", False):
        cargs.append("--modeuler")
    if params.get("rseed", None) is not None:
        cargs.extend([
            "--rseed",
            str(params.get("rseed", None))
        ])
    if params.get("s2tastext", False):
        cargs.append("--s2tastext")
    return cargs


def probtrackx_outputs(
    params: ProbtrackxParameters,
    execution: Execution,
) -> ProbtrackxOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ProbtrackxOutputs(
        root=execution.output_file("."),
    )
    return ret


def probtrackx_execute(
    params: ProbtrackxParameters,
    runner: Runner | None = None,
) -> ProbtrackxOutputs:
    """
    probtrackx
    
    Streamlines tracking algorithm for probabilistic tractography.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ProbtrackxOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PROBTRACKX_METADATA)
    params = execution.params(params)
    cargs = probtrackx_cargs(params, execution)
    ret = probtrackx_outputs(params, execution)
    execution.run(cargs)
    return ret


def probtrackx(
    samples: InputPathType,
    mask: InputPathType,
    seed: InputPathType,
    out: str = "fdt_paths",
    verbose: int | None = None,
    targetmasks: InputPathType | None = None,
    mask2: InputPathType | None = None,
    waypoints: InputPathType | None = None,
    network: bool = False,
    mesh: InputPathType | None = None,
    seedref: InputPathType | None = None,
    dir_: str | None = None,
    forcedir: bool = False,
    opd: bool = False,
    pd: bool = False,
    os2t: bool = False,
    avoid: InputPathType | None = None,
    stop: InputPathType | None = None,
    xfm: InputPathType | None = None,
    invxfm: InputPathType | None = None,
    nsamples: int | None = None,
    nsteps: int | None = None,
    distthresh: float | None = None,
    cthr: float | None = None,
    fibthresh: float | None = None,
    sampvox: bool = False,
    steplength: float | None = None,
    loopcheck: bool = False,
    usef: bool = False,
    randfib: int | None = None,
    fibst: int | None = None,
    modeuler: bool = False,
    rseed: int | None = None,
    s2tastext: bool = False,
    runner: Runner | None = None,
) -> ProbtrackxOutputs:
    """
    probtrackx
    
    Streamlines tracking algorithm for probabilistic tractography.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        samples: Basename for samples files.
        mask: Bet binary mask file in diffusion space.
        seed: Seed volume, or voxel, or ascii file with multiple volumes, or\
            freesurfer label file.
        out: Output file (default='fdt_paths').
        verbose: Verbose level, [0-2].
        targetmasks: File containing a list of target masks - required for\
            seeds_to_targets classification.
        mask2: Second mask in twomask_symm mode.
        waypoints: Waypoint mask or ascii list of waypoint masks - only keep\
            paths going through ALL the masks.
        network: Activate network mode - only keep paths going through at least\
            one seed mask (required if multiple seed masks).
        mesh: Freesurfer-type surface descriptor (in ascii format).
        seedref: Reference vol to define seed space in simple mode - diffusion\
            space assumed if absent.
        dir_: Directory to put the final volumes in - code makes this directory\
            - default='logdir'.
        forcedir: Use the actual directory name given - i.e. don't add + to\
            make a new directory.
        opd: Output path distribution.
        pd: Correct path distribution for the length of the pathways.
        os2t: Output seeds to targets.
        avoid: Reject pathways passing through locations given by this mask.
        stop: Stop tracking at locations given by this mask file.
        xfm: Transform taking seed space to DTI space (either FLIRT matrix or\
            FNIRT warpfield) - default is identity.
        invxfm: Transform taking DTI space to seed space (compulsory when using\
            a warpfield for seeds_to_dti).
        nsamples: Number of samples - default=5000.
        nsteps: Number of steps per sample - default=2000.
        distthresh: Discards samples shorter than this threshold (in mm -\
            default=0).
        cthr: Curvature threshold - default=0.2.
        fibthresh: Volume fraction before subsidary fibre orientations are\
            considered - default=0.01.
        sampvox: Sample random points within seed voxels.
        steplength: Steplength in mm - default=0.5.
        loopcheck: Perform loopchecks on paths - slower, but allows lower\
            curvature threshold.
        usef: Use anisotropy to constrain tracking.
        randfib: Default 0. Set to 1 to randomly sample initial fibres (with f\
            > fibthresh). Set to 2 to sample in proportion fibres (with\
            f>fibthresh) to f. Set to 3 to sample ALL populations at random (even\
            if f<fibthresh).
        fibst: Force a starting fibre for tracking - default=1, i.e. first\
            fibre orientation. Only works if randfib==0.
        modeuler: Use modified euler streamlining.
        rseed: Random seed.
        s2tastext: Output seed-to-target counts as a text file (useful when\
            seeding from a mesh).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ProbtrackxOutputs`).
    """
    params = probtrackx_params(
        samples=samples,
        mask=mask,
        seed=seed,
        out=out,
        verbose=verbose,
        targetmasks=targetmasks,
        mask2=mask2,
        waypoints=waypoints,
        network=network,
        mesh=mesh,
        seedref=seedref,
        dir_=dir_,
        forcedir=forcedir,
        opd=opd,
        pd=pd,
        os2t=os2t,
        avoid=avoid,
        stop=stop,
        xfm=xfm,
        invxfm=invxfm,
        nsamples=nsamples,
        nsteps=nsteps,
        distthresh=distthresh,
        cthr=cthr,
        fibthresh=fibthresh,
        sampvox=sampvox,
        steplength=steplength,
        loopcheck=loopcheck,
        usef=usef,
        randfib=randfib,
        fibst=fibst,
        modeuler=modeuler,
        rseed=rseed,
        s2tastext=s2tastext,
    )
    return probtrackx_execute(params, runner)


__all__ = [
    "PROBTRACKX_METADATA",
    "ProbtrackxOutputs",
    "probtrackx",
    "probtrackx_execute",
    "probtrackx_params",
]
