# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RANDOMISE_METADATA = Metadata(
    id="56f7451642e8053f61818f53ed72a24ef69661e2.boutiques",
    name="randomise",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


RandomiseParameters = typing.TypedDict('RandomiseParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/randomise"]],
    "in_file": InputPathType,
    "base_name": typing.NotRequired[str | None],
    "design_mat": typing.NotRequired[InputPathType | None],
    "tcon": typing.NotRequired[InputPathType | None],
    "c_thresh": typing.NotRequired[float | None],
    "cm_thresh": typing.NotRequired[float | None],
    "demean": bool,
    "f_c_thresh": typing.NotRequired[float | None],
    "f_cm_thresh": typing.NotRequired[float | None],
    "f_only": bool,
    "fcon": typing.NotRequired[InputPathType | None],
    "mask": typing.NotRequired[InputPathType | None],
    "num_perm": typing.NotRequired[int | None],
    "one_sample_group_mean": bool,
    "output_type": typing.NotRequired[typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None],
    "p_vec_n_dist_files": bool,
    "raw_stats_imgs": bool,
    "seed": typing.NotRequired[int | None],
    "show_info_parallel_mode": bool,
    "show_total_perms": bool,
    "tfce": bool,
    "tfce2D": bool,
    "tfce_C": typing.NotRequired[float | None],
    "tfce_E": typing.NotRequired[float | None],
    "tfce_H": typing.NotRequired[float | None],
    "var_smooth": typing.NotRequired[int | None],
    "vox_p_values": bool,
    "x_block_labels": typing.NotRequired[InputPathType | None],
})
RandomiseParametersTagged = typing.TypedDict('RandomiseParametersTagged', {
    "@type": typing.Literal["fsl/randomise"],
    "in_file": InputPathType,
    "base_name": typing.NotRequired[str | None],
    "design_mat": typing.NotRequired[InputPathType | None],
    "tcon": typing.NotRequired[InputPathType | None],
    "c_thresh": typing.NotRequired[float | None],
    "cm_thresh": typing.NotRequired[float | None],
    "demean": bool,
    "f_c_thresh": typing.NotRequired[float | None],
    "f_cm_thresh": typing.NotRequired[float | None],
    "f_only": bool,
    "fcon": typing.NotRequired[InputPathType | None],
    "mask": typing.NotRequired[InputPathType | None],
    "num_perm": typing.NotRequired[int | None],
    "one_sample_group_mean": bool,
    "output_type": typing.NotRequired[typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None],
    "p_vec_n_dist_files": bool,
    "raw_stats_imgs": bool,
    "seed": typing.NotRequired[int | None],
    "show_info_parallel_mode": bool,
    "show_total_perms": bool,
    "tfce": bool,
    "tfce2D": bool,
    "tfce_C": typing.NotRequired[float | None],
    "tfce_E": typing.NotRequired[float | None],
    "tfce_H": typing.NotRequired[float | None],
    "var_smooth": typing.NotRequired[int | None],
    "vox_p_values": bool,
    "x_block_labels": typing.NotRequired[InputPathType | None],
})


class RandomiseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RandomiseParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    f_corrected_p_files: OutputPathType
    """F contrast fwe (family-wise error) corrected p values files."""
    f_p_files: OutputPathType
    """F contrast uncorrected p values files."""
    fstat_files: OutputPathType
    """F contrast raw statistic."""
    t_corrected_p_files: OutputPathType
    """T contrast fwe (family-wise error) corrected p values files."""
    t_p_files: OutputPathType
    """F contrast uncorrected p values files."""
    tstat_files: OutputPathType
    """T contrast raw statistic."""


def randomise_params(
    in_file: InputPathType,
    base_name: str | None = None,
    design_mat: InputPathType | None = None,
    tcon: InputPathType | None = None,
    c_thresh: float | None = None,
    cm_thresh: float | None = None,
    demean: bool = False,
    f_c_thresh: float | None = None,
    f_cm_thresh: float | None = None,
    f_only: bool = False,
    fcon: InputPathType | None = None,
    mask: InputPathType | None = None,
    num_perm: int | None = None,
    one_sample_group_mean: bool = False,
    output_type: typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None = None,
    p_vec_n_dist_files: bool = False,
    raw_stats_imgs: bool = False,
    seed: int | None = None,
    show_info_parallel_mode: bool = False,
    show_total_perms: bool = False,
    tfce: bool = False,
    tfce2_d: bool = False,
    tfce_c: float | None = None,
    tfce_e: float | None = None,
    tfce_h: float | None = None,
    var_smooth: int | None = None,
    vox_p_values: bool = False,
    x_block_labels: InputPathType | None = None,
) -> RandomiseParametersTagged:
    """
    Build parameters.
    
    Args:
        in_file: 4d input file.
        base_name: The rootname that all generated files will have.
        design_mat: Design matrix file.
        tcon: T contrasts file.
        c_thresh: Carry out cluster-based thresholding.
        cm_thresh: Carry out cluster-mass-based thresholding.
        demean: Demean data temporally before model fitting.
        f_c_thresh: Carry out f cluster thresholding.
        f_cm_thresh: Carry out f cluster-mass thresholding.
        f_only: Calculate f-statistics only.
        fcon: F contrasts file.
        mask: Mask image.
        num_perm: Number of permutations (default 5000, set to 0 for\
            exhaustive).
        one_sample_group_mean: Perform 1-sample group-mean test instead of\
            generic permutation test.
        output_type: 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'.\
            Fsl output type.
        p_vec_n_dist_files: Output permutation vector and null distribution\
            text files.
        raw_stats_imgs: Output raw ( unpermuted ) statistic images.
        seed: Specific integer seed for random number generator.
        show_info_parallel_mode: Print out information required for parallel\
            mode and exit.
        show_total_perms: Print out how many unique permutations would be\
            generated and exit.
        tfce: Carry out threshold-free cluster enhancement.
        tfce2_d: Carry out threshold-free cluster enhancement with 2d\
            optimisation.
        tfce_c: Tfce connectivity (6 or 26; default=6).
        tfce_e: Tfce extent parameter (default=0.5).
        tfce_h: Tfce height parameter (default=2).
        var_smooth: Use variance smoothing (std is in mm).
        vox_p_values: Output voxelwise (corrected and uncorrected) p-value\
            images.
        x_block_labels: Exchangeability block labels file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/randomise",
        "in_file": in_file,
        "demean": demean,
        "f_only": f_only,
        "one_sample_group_mean": one_sample_group_mean,
        "p_vec_n_dist_files": p_vec_n_dist_files,
        "raw_stats_imgs": raw_stats_imgs,
        "show_info_parallel_mode": show_info_parallel_mode,
        "show_total_perms": show_total_perms,
        "tfce": tfce,
        "tfce2D": tfce2_d,
        "vox_p_values": vox_p_values,
    }
    if base_name is not None:
        params["base_name"] = base_name
    if design_mat is not None:
        params["design_mat"] = design_mat
    if tcon is not None:
        params["tcon"] = tcon
    if c_thresh is not None:
        params["c_thresh"] = c_thresh
    if cm_thresh is not None:
        params["cm_thresh"] = cm_thresh
    if f_c_thresh is not None:
        params["f_c_thresh"] = f_c_thresh
    if f_cm_thresh is not None:
        params["f_cm_thresh"] = f_cm_thresh
    if fcon is not None:
        params["fcon"] = fcon
    if mask is not None:
        params["mask"] = mask
    if num_perm is not None:
        params["num_perm"] = num_perm
    if output_type is not None:
        params["output_type"] = output_type
    if seed is not None:
        params["seed"] = seed
    if tfce_c is not None:
        params["tfce_C"] = tfce_c
    if tfce_e is not None:
        params["tfce_E"] = tfce_e
    if tfce_h is not None:
        params["tfce_H"] = tfce_h
    if var_smooth is not None:
        params["var_smooth"] = var_smooth
    if x_block_labels is not None:
        params["x_block_labels"] = x_block_labels
    return params


def randomise_cargs(
    params: RandomiseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("randomise")
    cargs.extend([
        "-i",
        execution.input_file(params.get("in_file", None))
    ])
    if params.get("base_name", None) is not None:
        cargs.extend([
            "-o",
            params.get("base_name", None)
        ])
    if params.get("design_mat", None) is not None:
        cargs.extend([
            "-d",
            execution.input_file(params.get("design_mat", None))
        ])
    if params.get("tcon", None) is not None:
        cargs.extend([
            "-t",
            execution.input_file(params.get("tcon", None))
        ])
    if params.get("c_thresh", None) is not None:
        cargs.extend([
            "-c",
            str(params.get("c_thresh", None))
        ])
    if params.get("cm_thresh", None) is not None:
        cargs.extend([
            "-C",
            str(params.get("cm_thresh", None))
        ])
    if params.get("demean", False):
        cargs.append("-D")
    if params.get("f_c_thresh", None) is not None:
        cargs.extend([
            "-F",
            str(params.get("f_c_thresh", None))
        ])
    if params.get("f_cm_thresh", None) is not None:
        cargs.extend([
            "-S",
            str(params.get("f_cm_thresh", None))
        ])
    if params.get("f_only", False):
        cargs.append("--fonly")
    if params.get("fcon", None) is not None:
        cargs.extend([
            "-f",
            execution.input_file(params.get("fcon", None))
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("num_perm", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("num_perm", None))
        ])
    if params.get("one_sample_group_mean", False):
        cargs.append("-1")
    if params.get("output_type", None) is not None:
        cargs.append(params.get("output_type", None))
    if params.get("p_vec_n_dist_files", False):
        cargs.append("-P")
    if params.get("raw_stats_imgs", False):
        cargs.append("-R")
    if params.get("seed", None) is not None:
        cargs.append("--seed=" + str(params.get("seed", None)))
    if params.get("show_info_parallel_mode", False):
        cargs.append("-Q")
    if params.get("show_total_perms", False):
        cargs.append("-q")
    if params.get("tfce", False):
        cargs.append("-T")
    if params.get("tfce2D", False):
        cargs.append("--T2")
    if params.get("tfce_C", None) is not None:
        cargs.append("--tfce_C=" + str(params.get("tfce_C", None)))
    if params.get("tfce_E", None) is not None:
        cargs.append("--tfce_E=" + str(params.get("tfce_E", None)))
    if params.get("tfce_H", None) is not None:
        cargs.append("--tfce_H=" + str(params.get("tfce_H", None)))
    if params.get("var_smooth", None) is not None:
        cargs.extend([
            "-v",
            str(params.get("var_smooth", None))
        ])
    if params.get("vox_p_values", False):
        cargs.append("-x")
    if params.get("x_block_labels", None) is not None:
        cargs.extend([
            "-e",
            execution.input_file(params.get("x_block_labels", None))
        ])
    return cargs


def randomise_outputs(
    params: RandomiseParameters,
    execution: Execution,
) -> RandomiseOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RandomiseOutputs(
        root=execution.output_file("."),
        f_corrected_p_files=execution.output_file("f_corrected_p_files"),
        f_p_files=execution.output_file("f_p_files"),
        fstat_files=execution.output_file("fstat_files"),
        t_corrected_p_files=execution.output_file("t_corrected_p_files"),
        t_p_files=execution.output_file("t_p_files"),
        tstat_files=execution.output_file("tstat_files"),
    )
    return ret


def randomise_execute(
    params: RandomiseParameters,
    runner: Runner | None = None,
) -> RandomiseOutputs:
    """
    randomise
    
    FSL Randomise: feeds the 4D projected FA data into GLM modelling and
    thresholding in order to find voxels which correlate with your model.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RandomiseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RANDOMISE_METADATA)
    params = execution.params(params)
    cargs = randomise_cargs(params, execution)
    ret = randomise_outputs(params, execution)
    execution.run(cargs)
    return ret


def randomise(
    in_file: InputPathType,
    base_name: str | None = None,
    design_mat: InputPathType | None = None,
    tcon: InputPathType | None = None,
    c_thresh: float | None = None,
    cm_thresh: float | None = None,
    demean: bool = False,
    f_c_thresh: float | None = None,
    f_cm_thresh: float | None = None,
    f_only: bool = False,
    fcon: InputPathType | None = None,
    mask: InputPathType | None = None,
    num_perm: int | None = None,
    one_sample_group_mean: bool = False,
    output_type: typing.Literal["NIFTI", "NIFTI_PAIR", "NIFTI_GZ", "NIFTI_PAIR_GZ"] | None = None,
    p_vec_n_dist_files: bool = False,
    raw_stats_imgs: bool = False,
    seed: int | None = None,
    show_info_parallel_mode: bool = False,
    show_total_perms: bool = False,
    tfce: bool = False,
    tfce2_d: bool = False,
    tfce_c: float | None = None,
    tfce_e: float | None = None,
    tfce_h: float | None = None,
    var_smooth: int | None = None,
    vox_p_values: bool = False,
    x_block_labels: InputPathType | None = None,
    runner: Runner | None = None,
) -> RandomiseOutputs:
    """
    randomise
    
    FSL Randomise: feeds the 4D projected FA data into GLM modelling and
    thresholding in order to find voxels which correlate with your model.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        in_file: 4d input file.
        base_name: The rootname that all generated files will have.
        design_mat: Design matrix file.
        tcon: T contrasts file.
        c_thresh: Carry out cluster-based thresholding.
        cm_thresh: Carry out cluster-mass-based thresholding.
        demean: Demean data temporally before model fitting.
        f_c_thresh: Carry out f cluster thresholding.
        f_cm_thresh: Carry out f cluster-mass thresholding.
        f_only: Calculate f-statistics only.
        fcon: F contrasts file.
        mask: Mask image.
        num_perm: Number of permutations (default 5000, set to 0 for\
            exhaustive).
        one_sample_group_mean: Perform 1-sample group-mean test instead of\
            generic permutation test.
        output_type: 'nifti' or 'nifti_pair' or 'nifti_gz' or 'nifti_pair_gz'.\
            Fsl output type.
        p_vec_n_dist_files: Output permutation vector and null distribution\
            text files.
        raw_stats_imgs: Output raw ( unpermuted ) statistic images.
        seed: Specific integer seed for random number generator.
        show_info_parallel_mode: Print out information required for parallel\
            mode and exit.
        show_total_perms: Print out how many unique permutations would be\
            generated and exit.
        tfce: Carry out threshold-free cluster enhancement.
        tfce2_d: Carry out threshold-free cluster enhancement with 2d\
            optimisation.
        tfce_c: Tfce connectivity (6 or 26; default=6).
        tfce_e: Tfce extent parameter (default=0.5).
        tfce_h: Tfce height parameter (default=2).
        var_smooth: Use variance smoothing (std is in mm).
        vox_p_values: Output voxelwise (corrected and uncorrected) p-value\
            images.
        x_block_labels: Exchangeability block labels file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RandomiseOutputs`).
    """
    params = randomise_params(
        in_file=in_file,
        base_name=base_name,
        design_mat=design_mat,
        tcon=tcon,
        c_thresh=c_thresh,
        cm_thresh=cm_thresh,
        demean=demean,
        f_c_thresh=f_c_thresh,
        f_cm_thresh=f_cm_thresh,
        f_only=f_only,
        fcon=fcon,
        mask=mask,
        num_perm=num_perm,
        one_sample_group_mean=one_sample_group_mean,
        output_type=output_type,
        p_vec_n_dist_files=p_vec_n_dist_files,
        raw_stats_imgs=raw_stats_imgs,
        seed=seed,
        show_info_parallel_mode=show_info_parallel_mode,
        show_total_perms=show_total_perms,
        tfce=tfce,
        tfce2_d=tfce2_d,
        tfce_c=tfce_c,
        tfce_e=tfce_e,
        tfce_h=tfce_h,
        var_smooth=var_smooth,
        vox_p_values=vox_p_values,
        x_block_labels=x_block_labels,
    )
    return randomise_execute(params, runner)


__all__ = [
    "RANDOMISE_METADATA",
    "RandomiseOutputs",
    "randomise",
    "randomise_execute",
    "randomise_params",
]
