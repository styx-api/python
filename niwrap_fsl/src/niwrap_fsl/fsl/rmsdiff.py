# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RMSDIFF_METADATA = Metadata(
    id="b571c69801b50f7f4ea39561f48adab04ceb60db.boutiques",
    name="rmsdiff",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


RmsdiffParameters = typing.TypedDict('RmsdiffParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/rmsdiff"]],
    "matrixfile1": InputPathType,
    "matrixfile2": InputPathType,
    "refvol": InputPathType,
    "mask": typing.NotRequired[InputPathType | None],
})
RmsdiffParametersTagged = typing.TypedDict('RmsdiffParametersTagged', {
    "@type": typing.Literal["fsl/rmsdiff"],
    "matrixfile1": InputPathType,
    "matrixfile2": InputPathType,
    "refvol": InputPathType,
    "mask": typing.NotRequired[InputPathType | None],
})


class RmsdiffOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RmsdiffParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def rmsdiff_params(
    matrixfile1: InputPathType,
    matrixfile2: InputPathType,
    refvol: InputPathType,
    mask: InputPathType | None = None,
) -> RmsdiffParametersTagged:
    """
    Build parameters.
    
    Args:
        matrixfile1: First matrix file.
        matrixfile2: Second matrix file.
        refvol: Reference volume.
        mask: Optional mask.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/rmsdiff",
        "matrixfile1": matrixfile1,
        "matrixfile2": matrixfile2,
        "refvol": refvol,
    }
    if mask is not None:
        params["mask"] = mask
    return params


def rmsdiff_cargs(
    params: RmsdiffParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("rmsdiff")
    cargs.append(execution.input_file(params.get("matrixfile1", None)))
    cargs.append(execution.input_file(params.get("matrixfile2", None)))
    cargs.append(execution.input_file(params.get("refvol", None)))
    if params.get("mask", None) is not None:
        cargs.append(execution.input_file(params.get("mask", None)))
    return cargs


def rmsdiff_outputs(
    params: RmsdiffParameters,
    execution: Execution,
) -> RmsdiffOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RmsdiffOutputs(
        root=execution.output_file("."),
    )
    return ret


def rmsdiff_execute(
    params: RmsdiffParameters,
    runner: Runner | None = None,
) -> RmsdiffOutputs:
    """
    rmsdiff
    
    Outputs RMS deviation between matrices (in mm).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RmsdiffOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RMSDIFF_METADATA)
    params = execution.params(params)
    cargs = rmsdiff_cargs(params, execution)
    ret = rmsdiff_outputs(params, execution)
    execution.run(cargs)
    return ret


def rmsdiff(
    matrixfile1: InputPathType,
    matrixfile2: InputPathType,
    refvol: InputPathType,
    mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> RmsdiffOutputs:
    """
    rmsdiff
    
    Outputs RMS deviation between matrices (in mm).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        matrixfile1: First matrix file.
        matrixfile2: Second matrix file.
        refvol: Reference volume.
        mask: Optional mask.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RmsdiffOutputs`).
    """
    params = rmsdiff_params(
        matrixfile1=matrixfile1,
        matrixfile2=matrixfile2,
        refvol=refvol,
        mask=mask,
    )
    return rmsdiff_execute(params, runner)


__all__ = [
    "RMSDIFF_METADATA",
    "RmsdiffOutputs",
    "rmsdiff",
    "rmsdiff_execute",
    "rmsdiff_params",
]
