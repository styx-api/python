# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RUN_FIRST_ALL_METADATA = Metadata(
    id="26d32c3f0cb61ee305a0d2beda9bcc6667363921.boutiques",
    name="run_first_all",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


RunFirstAllParameters = typing.TypedDict('RunFirstAllParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/run_first_all"]],
    "method": typing.NotRequired[typing.Literal["auto", "fast", "none"] | None],
    "brainextract_flag": bool,
    "structure": typing.NotRequired[str | None],
    "affine_matrix": typing.NotRequired[InputPathType | None],
    "threestage_flag": bool,
    "debug_flag": bool,
    "verbose_flag": bool,
    "input_image": InputPathType,
    "output_image": str,
})
RunFirstAllParametersTagged = typing.TypedDict('RunFirstAllParametersTagged', {
    "@type": typing.Literal["fsl/run_first_all"],
    "method": typing.NotRequired[typing.Literal["auto", "fast", "none"] | None],
    "brainextract_flag": bool,
    "structure": typing.NotRequired[str | None],
    "affine_matrix": typing.NotRequired[InputPathType | None],
    "threestage_flag": bool,
    "debug_flag": bool,
    "verbose_flag": bool,
    "input_image": InputPathType,
    "output_image": str,
})


class RunFirstAllOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RunFirstAllParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image_file: OutputPathType
    """Output image file"""


def run_first_all_params(
    input_image: InputPathType,
    output_image: str,
    method: typing.Literal["auto", "fast", "none"] | None = None,
    brainextract_flag: bool = False,
    structure: str | None = None,
    affine_matrix: InputPathType | None = None,
    threestage_flag: bool = False,
    debug_flag: bool = False,
    verbose_flag: bool = False,
) -> RunFirstAllParametersTagged:
    """
    Build parameters.
    
    Args:
        input_image: Input image file.
        output_image: Output image file.
        method: Method for brain extraction (auto, fast, none or a numerical\
            threshold value).
        brainextract_flag: Input is already brain extracted.
        structure: Run only on one specified structure (e.g. L_Hipp) or a comma\
            separated list (no spaces).
        affine_matrix: Use affine matrix (do not re-run registration).
        threestage_flag: Use 3-stage affine registration (only currently for\
            hippocampus).
        debug_flag: Do not cleanup image output files (useful for debugging).
        verbose_flag: Verbose output.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/run_first_all",
        "brainextract_flag": brainextract_flag,
        "threestage_flag": threestage_flag,
        "debug_flag": debug_flag,
        "verbose_flag": verbose_flag,
        "input_image": input_image,
        "output_image": output_image,
    }
    if method is not None:
        params["method"] = method
    if structure is not None:
        params["structure"] = structure
    if affine_matrix is not None:
        params["affine_matrix"] = affine_matrix
    return params


def run_first_all_cargs(
    params: RunFirstAllParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("run_first_all")
    if params.get("method", None) is not None:
        cargs.extend([
            "-m",
            params.get("method", None)
        ])
    if params.get("brainextract_flag", False):
        cargs.append("-b")
    if params.get("structure", None) is not None:
        cargs.extend([
            "-s",
            params.get("structure", None)
        ])
    if params.get("affine_matrix", None) is not None:
        cargs.extend([
            "-a",
            execution.input_file(params.get("affine_matrix", None))
        ])
    if params.get("threestage_flag", False):
        cargs.append("-3")
    if params.get("debug_flag", False):
        cargs.append("-d")
    if params.get("verbose_flag", False):
        cargs.append("-v")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_image", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_image", None)
    ])
    return cargs


def run_first_all_outputs(
    params: RunFirstAllParameters,
    execution: Execution,
) -> RunFirstAllOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RunFirstAllOutputs(
        root=execution.output_file("."),
        output_image_file=execution.output_file(params.get("output_image", None)),
    )
    return ret


def run_first_all_execute(
    params: RunFirstAllParameters,
    runner: Runner | None = None,
) -> RunFirstAllOutputs:
    """
    run_first_all
    
    FIRST - FMRIB's Integrated Registration and Segmentation Tool for
    subcortical brain structures.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunFirstAllOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RUN_FIRST_ALL_METADATA)
    params = execution.params(params)
    cargs = run_first_all_cargs(params, execution)
    ret = run_first_all_outputs(params, execution)
    execution.run(cargs)
    return ret


def run_first_all(
    input_image: InputPathType,
    output_image: str,
    method: typing.Literal["auto", "fast", "none"] | None = None,
    brainextract_flag: bool = False,
    structure: str | None = None,
    affine_matrix: InputPathType | None = None,
    threestage_flag: bool = False,
    debug_flag: bool = False,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> RunFirstAllOutputs:
    """
    run_first_all
    
    FIRST - FMRIB's Integrated Registration and Segmentation Tool for
    subcortical brain structures.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_image: Input image file.
        output_image: Output image file.
        method: Method for brain extraction (auto, fast, none or a numerical\
            threshold value).
        brainextract_flag: Input is already brain extracted.
        structure: Run only on one specified structure (e.g. L_Hipp) or a comma\
            separated list (no spaces).
        affine_matrix: Use affine matrix (do not re-run registration).
        threestage_flag: Use 3-stage affine registration (only currently for\
            hippocampus).
        debug_flag: Do not cleanup image output files (useful for debugging).
        verbose_flag: Verbose output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunFirstAllOutputs`).
    """
    params = run_first_all_params(
        method=method,
        brainextract_flag=brainextract_flag,
        structure=structure,
        affine_matrix=affine_matrix,
        threestage_flag=threestage_flag,
        debug_flag=debug_flag,
        verbose_flag=verbose_flag,
        input_image=input_image,
        output_image=output_image,
    )
    return run_first_all_execute(params, runner)


__all__ = [
    "RUN_FIRST_ALL_METADATA",
    "RunFirstAllOutputs",
    "run_first_all",
    "run_first_all_execute",
    "run_first_all_params",
]
