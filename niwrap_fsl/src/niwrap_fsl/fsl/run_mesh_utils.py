# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

RUN_MESH_UTILS_METADATA = Metadata(
    id="9149916aef7faecae6f93ac5cc99886862c9bd9d.boutiques",
    name="run_mesh_utils",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


RunMeshUtilsParameters = typing.TypedDict('RunMeshUtilsParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/run_mesh_utils"]],
    "base_mesh": InputPathType,
    "output_image": str,
    "input_image": typing.NotRequired[InputPathType | None],
    "second_input_image": typing.NotRequired[InputPathType | None],
    "weighting_image_force": typing.NotRequired[InputPathType | None],
    "do_uncentre_model": bool,
    "do_subtract_constant_from_scalars": bool,
    "do_vertex_scalars_to_image_volume": bool,
    "base_mesh2": typing.NotRequired[InputPathType | None],
    "use_sc2": bool,
    "flirt_matrix": typing.NotRequired[InputPathType | None],
    "do_mesh_reg": bool,
    "threshold": typing.NotRequired[float | None],
    "degrees_of_freedom": typing.NotRequired[float | None],
    "inverse": bool,
    "verbose": bool,
    "help": bool,
})
RunMeshUtilsParametersTagged = typing.TypedDict('RunMeshUtilsParametersTagged', {
    "@type": typing.Literal["fsl/run_mesh_utils"],
    "base_mesh": InputPathType,
    "output_image": str,
    "input_image": typing.NotRequired[InputPathType | None],
    "second_input_image": typing.NotRequired[InputPathType | None],
    "weighting_image_force": typing.NotRequired[InputPathType | None],
    "do_uncentre_model": bool,
    "do_subtract_constant_from_scalars": bool,
    "do_vertex_scalars_to_image_volume": bool,
    "base_mesh2": typing.NotRequired[InputPathType | None],
    "use_sc2": bool,
    "flirt_matrix": typing.NotRequired[InputPathType | None],
    "do_mesh_reg": bool,
    "threshold": typing.NotRequired[float | None],
    "degrees_of_freedom": typing.NotRequired[float | None],
    "inverse": bool,
    "verbose": bool,
    "help": bool,
})


class RunMeshUtilsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RunMeshUtilsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image_file: OutputPathType
    """Output image file"""


def run_mesh_utils_params(
    base_mesh: InputPathType,
    output_image: str,
    input_image: InputPathType | None = None,
    second_input_image: InputPathType | None = None,
    weighting_image_force: InputPathType | None = None,
    do_uncentre_model: bool = False,
    do_subtract_constant_from_scalars: bool = False,
    do_vertex_scalars_to_image_volume: bool = False,
    base_mesh2: InputPathType | None = None,
    use_sc2: bool = False,
    flirt_matrix: InputPathType | None = None,
    do_mesh_reg: bool = False,
    threshold: float | None = None,
    degrees_of_freedom: float | None = None,
    inverse: bool = False,
    verbose: bool = False,
    help_: bool = False,
) -> RunMeshUtilsParametersTagged:
    """
    Build parameters.
    
    Args:
        base_mesh: Filename of base mesh.
        output_image: Filename of output image.
        input_image: Filename of input image.
        second_input_image: Filename of second input image.
        weighting_image_force: Weighting image force.
        do_uncentre_model: Do UnCentre Model.
        do_subtract_constant_from_scalars: Do Subtract Constant From Scalars.
        do_vertex_scalars_to_image_volume: Do Vertex Scalars To Image Volume.
        base_mesh2: Filename of base mesh2.
        use_sc2: Use SC2.
        flirt_matrix: Filename of flirt matrix.
        do_mesh_reg: Do Mesh Registration.
        threshold: Threshold.
        degrees_of_freedom: Degrees of freedom.
        inverse: Inverse Operation.
        verbose: Switch on diagnostic messages.
        help_: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/run_mesh_utils",
        "base_mesh": base_mesh,
        "output_image": output_image,
        "do_uncentre_model": do_uncentre_model,
        "do_subtract_constant_from_scalars": do_subtract_constant_from_scalars,
        "do_vertex_scalars_to_image_volume": do_vertex_scalars_to_image_volume,
        "use_sc2": use_sc2,
        "do_mesh_reg": do_mesh_reg,
        "inverse": inverse,
        "verbose": verbose,
        "help": help_,
    }
    if input_image is not None:
        params["input_image"] = input_image
    if second_input_image is not None:
        params["second_input_image"] = second_input_image
    if weighting_image_force is not None:
        params["weighting_image_force"] = weighting_image_force
    if base_mesh2 is not None:
        params["base_mesh2"] = base_mesh2
    if flirt_matrix is not None:
        params["flirt_matrix"] = flirt_matrix
    if threshold is not None:
        params["threshold"] = threshold
    if degrees_of_freedom is not None:
        params["degrees_of_freedom"] = degrees_of_freedom
    return params


def run_mesh_utils_cargs(
    params: RunMeshUtilsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("run_mesh_utils")
    cargs.append(execution.input_file(params.get("base_mesh", None)))
    cargs.extend([
        "-o",
        params.get("output_image", None)
    ])
    if params.get("input_image", None) is not None:
        cargs.extend([
            "-i",
            execution.input_file(params.get("input_image", None))
        ])
    if params.get("second_input_image", None) is not None:
        cargs.extend([
            "-j",
            execution.input_file(params.get("second_input_image", None))
        ])
    if params.get("weighting_image_force", None) is not None:
        cargs.extend([
            "-p",
            execution.input_file(params.get("weighting_image_force", None))
        ])
    if params.get("do_uncentre_model", False):
        cargs.append("--doUnCentreModel")
    if params.get("do_subtract_constant_from_scalars", False):
        cargs.append("--doSubtractConstantFromScalars")
    if params.get("do_vertex_scalars_to_image_volume", False):
        cargs.append("--doVertexScalarsToImageVolume")
    if params.get("base_mesh2", None) is not None:
        cargs.extend([
            "-n",
            execution.input_file(params.get("base_mesh2", None))
        ])
    if params.get("use_sc2", False):
        cargs.append("--useSc2")
    if params.get("flirt_matrix", None) is not None:
        cargs.extend([
            "-f",
            execution.input_file(params.get("flirt_matrix", None))
        ])
    if params.get("do_mesh_reg", False):
        cargs.append("--doMeshReg")
    if params.get("threshold", None) is not None:
        cargs.extend([
            "-t",
            str(params.get("threshold", None))
        ])
    if params.get("degrees_of_freedom", None) is not None:
        cargs.extend([
            "-a",
            str(params.get("degrees_of_freedom", None))
        ])
    if params.get("inverse", False):
        cargs.append("--inverse")
    if params.get("verbose", False):
        cargs.append("-v")
    if params.get("help", False):
        cargs.append("-h")
    return cargs


def run_mesh_utils_outputs(
    params: RunMeshUtilsParameters,
    execution: Execution,
) -> RunMeshUtilsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RunMeshUtilsOutputs(
        root=execution.output_file("."),
        output_image_file=execution.output_file(params.get("output_image", None)),
    )
    return ret


def run_mesh_utils_execute(
    params: RunMeshUtilsParameters,
    runner: Runner | None = None,
) -> RunMeshUtilsOutputs:
    """
    run_mesh_utils
    
    A tool for various mesh operations as part of FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(RUN_MESH_UTILS_METADATA)
    params = execution.params(params)
    cargs = run_mesh_utils_cargs(params, execution)
    ret = run_mesh_utils_outputs(params, execution)
    execution.run(cargs)
    return ret


def run_mesh_utils(
    base_mesh: InputPathType,
    output_image: str,
    input_image: InputPathType | None = None,
    second_input_image: InputPathType | None = None,
    weighting_image_force: InputPathType | None = None,
    do_uncentre_model: bool = False,
    do_subtract_constant_from_scalars: bool = False,
    do_vertex_scalars_to_image_volume: bool = False,
    base_mesh2: InputPathType | None = None,
    use_sc2: bool = False,
    flirt_matrix: InputPathType | None = None,
    do_mesh_reg: bool = False,
    threshold: float | None = None,
    degrees_of_freedom: float | None = None,
    inverse: bool = False,
    verbose: bool = False,
    help_: bool = False,
    runner: Runner | None = None,
) -> RunMeshUtilsOutputs:
    """
    run_mesh_utils
    
    A tool for various mesh operations as part of FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        base_mesh: Filename of base mesh.
        output_image: Filename of output image.
        input_image: Filename of input image.
        second_input_image: Filename of second input image.
        weighting_image_force: Weighting image force.
        do_uncentre_model: Do UnCentre Model.
        do_subtract_constant_from_scalars: Do Subtract Constant From Scalars.
        do_vertex_scalars_to_image_volume: Do Vertex Scalars To Image Volume.
        base_mesh2: Filename of base mesh2.
        use_sc2: Use SC2.
        flirt_matrix: Filename of flirt matrix.
        do_mesh_reg: Do Mesh Registration.
        threshold: Threshold.
        degrees_of_freedom: Degrees of freedom.
        inverse: Inverse Operation.
        verbose: Switch on diagnostic messages.
        help_: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RunMeshUtilsOutputs`).
    """
    params = run_mesh_utils_params(
        base_mesh=base_mesh,
        output_image=output_image,
        input_image=input_image,
        second_input_image=second_input_image,
        weighting_image_force=weighting_image_force,
        do_uncentre_model=do_uncentre_model,
        do_subtract_constant_from_scalars=do_subtract_constant_from_scalars,
        do_vertex_scalars_to_image_volume=do_vertex_scalars_to_image_volume,
        base_mesh2=base_mesh2,
        use_sc2=use_sc2,
        flirt_matrix=flirt_matrix,
        do_mesh_reg=do_mesh_reg,
        threshold=threshold,
        degrees_of_freedom=degrees_of_freedom,
        inverse=inverse,
        verbose=verbose,
        help_=help_,
    )
    return run_mesh_utils_execute(params, runner)


__all__ = [
    "RUN_MESH_UTILS_METADATA",
    "RunMeshUtilsOutputs",
    "run_mesh_utils",
    "run_mesh_utils_execute",
    "run_mesh_utils_params",
]
