# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SIENA_METADATA = Metadata(
    id="77e8f26dada103be35ec1ae0902457b8294c27b2.boutiques",
    name="siena",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SienaParameters = typing.TypedDict('SienaParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/siena"]],
    "input1": InputPathType,
    "input2": InputPathType,
    "output_dir": typing.NotRequired[str | None],
    "debug_flag": bool,
    "bet_options": typing.NotRequired[str | None],
    "two_class_seg_flag": bool,
    "t2_weighted_flag": bool,
    "standard_space_mask_flag": bool,
    "upper_ignore": typing.NotRequired[float | None],
    "lower_ignore": typing.NotRequired[float | None],
    "sienadiff_options": typing.NotRequired[str | None],
    "ventricle_analysis_flag": bool,
    "ventricle_mask": typing.NotRequired[InputPathType | None],
})
SienaParametersTagged = typing.TypedDict('SienaParametersTagged', {
    "@type": typing.Literal["fsl/siena"],
    "input1": InputPathType,
    "input2": InputPathType,
    "output_dir": typing.NotRequired[str | None],
    "debug_flag": bool,
    "bet_options": typing.NotRequired[str | None],
    "two_class_seg_flag": bool,
    "t2_weighted_flag": bool,
    "standard_space_mask_flag": bool,
    "upper_ignore": typing.NotRequired[float | None],
    "lower_ignore": typing.NotRequired[float | None],
    "sienadiff_options": typing.NotRequired[str | None],
    "ventricle_analysis_flag": bool,
    "ventricle_mask": typing.NotRequired[InputPathType | None],
})


class SienaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SienaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_report: OutputPathType | None
    """Siena analysis report"""
    ventricle_analysis_report: OutputPathType | None
    """Siena ventricle analysis report"""


def siena_params(
    input1: InputPathType,
    input2: InputPathType,
    output_dir: str | None = None,
    debug_flag: bool = False,
    bet_options: str | None = None,
    two_class_seg_flag: bool = False,
    t2_weighted_flag: bool = False,
    standard_space_mask_flag: bool = False,
    upper_ignore: float | None = None,
    lower_ignore: float | None = None,
    sienadiff_options: str | None = None,
    ventricle_analysis_flag: bool = False,
    ventricle_mask: InputPathType | None = None,
) -> SienaParametersTagged:
    """
    Build parameters.
    
    Args:
        input1: First input image (e.g. timepoint 1 image, img1.nii.gz).
        input2: Second input image (e.g. timepoint 2 image, img2.nii.gz).
        output_dir: Set output directory (default output is\
            <input1>_to_<input2>_siena).
        debug_flag: Debug (don't delete intermediate files).
        bet_options: Options to pass to BET brain extraction (inside\
            double-quotes), e.g. -B "-f 0.3".
        two_class_seg_flag: Two-class segmentation (don't segment grey and\
            white matter separately).
        t2_weighted_flag: T2-weighted input image (default T1-weighted).
        standard_space_mask_flag: Use standard-space masking as well as BET.
        upper_ignore: Ignore from t (mm) upwards in MNI152/Talairach space.
        lower_ignore: Ignore from b (mm) downwards in MNI152/Talairach space (b\
            should probably be negative).
        sienadiff_options: Options to pass to siena_diff timepoint differencing\
            (inside double-quotes), e.g. -S "-s -i 20".
        ventricle_analysis_flag: Run ventricle analysis (VIENA).
        ventricle_mask: Optional user-supplied ventricle mask (default is\
            /usr/local/fsl/data/standard/MNI152_T1_2mm_VentricleMask).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/siena",
        "input1": input1,
        "input2": input2,
        "debug_flag": debug_flag,
        "two_class_seg_flag": two_class_seg_flag,
        "t2_weighted_flag": t2_weighted_flag,
        "standard_space_mask_flag": standard_space_mask_flag,
        "ventricle_analysis_flag": ventricle_analysis_flag,
    }
    if output_dir is not None:
        params["output_dir"] = output_dir
    if bet_options is not None:
        params["bet_options"] = bet_options
    if upper_ignore is not None:
        params["upper_ignore"] = upper_ignore
    if lower_ignore is not None:
        params["lower_ignore"] = lower_ignore
    if sienadiff_options is not None:
        params["sienadiff_options"] = sienadiff_options
    if ventricle_mask is not None:
        params["ventricle_mask"] = ventricle_mask
    return params


def siena_cargs(
    params: SienaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("siena")
    cargs.append(execution.input_file(params.get("input1", None)))
    cargs.append(execution.input_file(params.get("input2", None)))
    if params.get("output_dir", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_dir", None)
        ])
    if params.get("debug_flag", False):
        cargs.append("-d")
    if params.get("bet_options", None) is not None:
        cargs.extend([
            "-B",
            params.get("bet_options", None)
        ])
    if params.get("two_class_seg_flag", False):
        cargs.append("-2")
    if params.get("t2_weighted_flag", False):
        cargs.append("-t2")
    if params.get("standard_space_mask_flag", False):
        cargs.append("-m")
    if params.get("upper_ignore", None) is not None:
        cargs.extend([
            "-t",
            str(params.get("upper_ignore", None))
        ])
    if params.get("lower_ignore", None) is not None:
        cargs.extend([
            "-b",
            str(params.get("lower_ignore", None))
        ])
    if params.get("sienadiff_options", None) is not None:
        cargs.extend([
            "-S",
            params.get("sienadiff_options", None)
        ])
    if params.get("ventricle_analysis_flag", False):
        cargs.append("-V")
    if params.get("ventricle_mask", None) is not None:
        cargs.extend([
            "-v",
            execution.input_file(params.get("ventricle_mask", None))
        ])
    return cargs


def siena_outputs(
    params: SienaParameters,
    execution: Execution,
) -> SienaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SienaOutputs(
        root=execution.output_file("."),
        output_report=execution.output_file(params.get("output_dir", None) + "/report.html") if (params.get("output_dir") is not None) else None,
        ventricle_analysis_report=execution.output_file(params.get("output_dir", None) + "/report_vent.html") if (params.get("output_dir") is not None) else None,
    )
    return ret


def siena_execute(
    params: SienaParameters,
    runner: Runner | None = None,
) -> SienaOutputs:
    """
    siena
    
    Structural Image Evaluation, using Normalization, of Atrophy tool for
    evaluating brain atrophy between two timepoints.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SIENA_METADATA)
    params = execution.params(params)
    cargs = siena_cargs(params, execution)
    ret = siena_outputs(params, execution)
    execution.run(cargs)
    return ret


def siena(
    input1: InputPathType,
    input2: InputPathType,
    output_dir: str | None = None,
    debug_flag: bool = False,
    bet_options: str | None = None,
    two_class_seg_flag: bool = False,
    t2_weighted_flag: bool = False,
    standard_space_mask_flag: bool = False,
    upper_ignore: float | None = None,
    lower_ignore: float | None = None,
    sienadiff_options: str | None = None,
    ventricle_analysis_flag: bool = False,
    ventricle_mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> SienaOutputs:
    """
    siena
    
    Structural Image Evaluation, using Normalization, of Atrophy tool for
    evaluating brain atrophy between two timepoints.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input1: First input image (e.g. timepoint 1 image, img1.nii.gz).
        input2: Second input image (e.g. timepoint 2 image, img2.nii.gz).
        output_dir: Set output directory (default output is\
            <input1>_to_<input2>_siena).
        debug_flag: Debug (don't delete intermediate files).
        bet_options: Options to pass to BET brain extraction (inside\
            double-quotes), e.g. -B "-f 0.3".
        two_class_seg_flag: Two-class segmentation (don't segment grey and\
            white matter separately).
        t2_weighted_flag: T2-weighted input image (default T1-weighted).
        standard_space_mask_flag: Use standard-space masking as well as BET.
        upper_ignore: Ignore from t (mm) upwards in MNI152/Talairach space.
        lower_ignore: Ignore from b (mm) downwards in MNI152/Talairach space (b\
            should probably be negative).
        sienadiff_options: Options to pass to siena_diff timepoint differencing\
            (inside double-quotes), e.g. -S "-s -i 20".
        ventricle_analysis_flag: Run ventricle analysis (VIENA).
        ventricle_mask: Optional user-supplied ventricle mask (default is\
            /usr/local/fsl/data/standard/MNI152_T1_2mm_VentricleMask).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaOutputs`).
    """
    params = siena_params(
        input1=input1,
        input2=input2,
        output_dir=output_dir,
        debug_flag=debug_flag,
        bet_options=bet_options,
        two_class_seg_flag=two_class_seg_flag,
        t2_weighted_flag=t2_weighted_flag,
        standard_space_mask_flag=standard_space_mask_flag,
        upper_ignore=upper_ignore,
        lower_ignore=lower_ignore,
        sienadiff_options=sienadiff_options,
        ventricle_analysis_flag=ventricle_analysis_flag,
        ventricle_mask=ventricle_mask,
    )
    return siena_execute(params, runner)


__all__ = [
    "SIENA_METADATA",
    "SienaOutputs",
    "siena",
    "siena_execute",
    "siena_params",
]
