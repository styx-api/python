# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SIENA_CAL_METADATA = Metadata(
    id="616069f380c3c85216a24ddc583f896c15fbcd02.boutiques",
    name="siena_cal",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SienaCalParameters = typing.TypedDict('SienaCalParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/siena_cal"]],
    "input1_file": InputPathType,
    "input2_file": InputPathType,
    "scale": float,
    "siena_diff_options": typing.NotRequired[str | None],
})
SienaCalParametersTagged = typing.TypedDict('SienaCalParametersTagged', {
    "@type": typing.Literal["fsl/siena_cal"],
    "input1_file": InputPathType,
    "input2_file": InputPathType,
    "scale": float,
    "siena_diff_options": typing.NotRequired[str | None],
})


class SienaCalOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SienaCalParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_dir: OutputPathType
    """Output directory containing SIENA results"""


def siena_cal_params(
    input1_file: InputPathType,
    input2_file: InputPathType,
    scale: float,
    siena_diff_options: str | None = None,
) -> SienaCalParametersTagged:
    """
    Build parameters.
    
    Args:
        input1_file: First input image file root (e.g., baseline image root).
        input2_file: Second input image file root (e.g., follow-up image root).
        scale: Voxel size scaling factor.
        siena_diff_options: Optional SIENA difference options.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/siena_cal",
        "input1_file": input1_file,
        "input2_file": input2_file,
        "scale": scale,
    }
    if siena_diff_options is not None:
        params["siena_diff_options"] = siena_diff_options
    return params


def siena_cal_cargs(
    params: SienaCalParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("siena_cal")
    cargs.append(execution.input_file(params.get("input1_file", None)))
    cargs.append(execution.input_file(params.get("input2_file", None)))
    cargs.append(str(params.get("scale", None)))
    if params.get("siena_diff_options", None) is not None:
        cargs.append(params.get("siena_diff_options", None))
    return cargs


def siena_cal_outputs(
    params: SienaCalParameters,
    execution: Execution,
) -> SienaCalOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SienaCalOutputs(
        root=execution.output_file("."),
        output_dir=execution.output_file(pathlib.Path(params.get("input1_file", None)).name + "_to_" + pathlib.Path(params.get("input2_file", None)).name + "_siena"),
    )
    return ret


def siena_cal_execute(
    params: SienaCalParameters,
    runner: Runner | None = None,
) -> SienaCalOutputs:
    """
    siena_cal
    
    SIENA is part of FSL (FMRIB Software Library), which performs a
    two-timepoint brain volume change analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaCalOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SIENA_CAL_METADATA)
    params = execution.params(params)
    cargs = siena_cal_cargs(params, execution)
    ret = siena_cal_outputs(params, execution)
    execution.run(cargs)
    return ret


def siena_cal(
    input1_file: InputPathType,
    input2_file: InputPathType,
    scale: float,
    siena_diff_options: str | None = None,
    runner: Runner | None = None,
) -> SienaCalOutputs:
    """
    siena_cal
    
    SIENA is part of FSL (FMRIB Software Library), which performs a
    two-timepoint brain volume change analysis.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input1_file: First input image file root (e.g., baseline image root).
        input2_file: Second input image file root (e.g., follow-up image root).
        scale: Voxel size scaling factor.
        siena_diff_options: Optional SIENA difference options.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaCalOutputs`).
    """
    params = siena_cal_params(
        input1_file=input1_file,
        input2_file=input2_file,
        scale=scale,
        siena_diff_options=siena_diff_options,
    )
    return siena_cal_execute(params, runner)


__all__ = [
    "SIENA_CAL_METADATA",
    "SienaCalOutputs",
    "siena_cal",
    "siena_cal_execute",
    "siena_cal_params",
]
