# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SIENA_FLIRT_METADATA = Metadata(
    id="db298474bb1f5d8f499cc29890fcbf70e559ed82.boutiques",
    name="siena_flirt",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SienaFlirtParameters = typing.TypedDict('SienaFlirtParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/siena_flirt"]],
    "input1_fileroot": str,
    "input2_fileroot": str,
})
SienaFlirtParametersTagged = typing.TypedDict('SienaFlirtParametersTagged', {
    "@type": typing.Literal["fsl/siena_flirt"],
    "input1_fileroot": str,
    "input2_fileroot": str,
})


class SienaFlirtOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SienaFlirtParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_transform_matrix: OutputPathType
    """Output transformation matrix file"""
    output_registered_image: OutputPathType
    """Output registered image"""


def siena_flirt_params(
    input1_fileroot: str,
    input2_fileroot: str,
) -> SienaFlirtParametersTagged:
    """
    Build parameters.
    
    Args:
        input1_fileroot: First input file root (e.g. first time-point image\
            root, without file extension).
        input2_fileroot: Second input file root (e.g. second time-point image\
            root, without file extension).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/siena_flirt",
        "input1_fileroot": input1_fileroot,
        "input2_fileroot": input2_fileroot,
    }
    return params


def siena_flirt_cargs(
    params: SienaFlirtParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("siena_flirt")
    cargs.append(params.get("input1_fileroot", None))
    cargs.append(params.get("input2_fileroot", None))
    return cargs


def siena_flirt_outputs(
    params: SienaFlirtParameters,
    execution: Execution,
) -> SienaFlirtOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SienaFlirtOutputs(
        root=execution.output_file("."),
        output_transform_matrix=execution.output_file(params.get("input1_fileroot", None) + "_to_" + params.get("input2_fileroot", None) + "_flirt.mat"),
        output_registered_image=execution.output_file(params.get("input1_fileroot", None) + "_to_" + params.get("input2_fileroot", None) + "_flirt.nii.gz"),
    )
    return ret


def siena_flirt_execute(
    params: SienaFlirtParameters,
    runner: Runner | None = None,
) -> SienaFlirtOutputs:
    """
    siena_flirt
    
    Wrapper for FLIRT image registration within the SIENA framework.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaFlirtOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SIENA_FLIRT_METADATA)
    params = execution.params(params)
    cargs = siena_flirt_cargs(params, execution)
    ret = siena_flirt_outputs(params, execution)
    execution.run(cargs)
    return ret


def siena_flirt(
    input1_fileroot: str,
    input2_fileroot: str,
    runner: Runner | None = None,
) -> SienaFlirtOutputs:
    """
    siena_flirt
    
    Wrapper for FLIRT image registration within the SIENA framework.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input1_fileroot: First input file root (e.g. first time-point image\
            root, without file extension).
        input2_fileroot: Second input file root (e.g. second time-point image\
            root, without file extension).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SienaFlirtOutputs`).
    """
    params = siena_flirt_params(
        input1_fileroot=input1_fileroot,
        input2_fileroot=input2_fileroot,
    )
    return siena_flirt_execute(params, runner)


__all__ = [
    "SIENA_FLIRT_METADATA",
    "SienaFlirtOutputs",
    "siena_flirt",
    "siena_flirt_execute",
    "siena_flirt_params",
]
