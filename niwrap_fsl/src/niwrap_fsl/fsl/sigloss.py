# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SIGLOSS_METADATA = Metadata(
    id="cf69e78d97ce971b4e9bb29236fe96091fce8eab.boutiques",
    name="sigloss",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SiglossParameters = typing.TypedDict('SiglossParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/sigloss"]],
    "input_b0map": InputPathType,
    "output_sigloss": str,
    "input_mask": typing.NotRequired[InputPathType | None],
    "echo_time": typing.NotRequired[float | None],
    "slice_direction": typing.NotRequired[typing.Literal["x", "y", "z"] | None],
    "verbose_flag": bool,
    "help_flag": bool,
})
SiglossParametersTagged = typing.TypedDict('SiglossParametersTagged', {
    "@type": typing.Literal["fsl/sigloss"],
    "input_b0map": InputPathType,
    "output_sigloss": str,
    "input_mask": typing.NotRequired[InputPathType | None],
    "echo_time": typing.NotRequired[float | None],
    "slice_direction": typing.NotRequired[typing.Literal["x", "y", "z"] | None],
    "verbose_flag": bool,
    "help_flag": bool,
})


class SiglossOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SiglossParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def sigloss_params(
    input_b0map: InputPathType,
    output_sigloss: str,
    input_mask: InputPathType | None = None,
    echo_time: float | None = None,
    slice_direction: typing.Literal["x", "y", "z"] | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> SiglossParametersTagged:
    """
    Build parameters.
    
    Args:
        input_b0map: Input b0 map image filename (in rad/s).
        output_sigloss: Output signal loss image filename.
        input_mask: Input mask filename.
        echo_time: Echo time (in seconds).
        slice_direction: Slice direction (either x, y or z).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display this help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/sigloss",
        "input_b0map": input_b0map,
        "output_sigloss": output_sigloss,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if input_mask is not None:
        params["input_mask"] = input_mask
    if echo_time is not None:
        params["echo_time"] = echo_time
    if slice_direction is not None:
        params["slice_direction"] = slice_direction
    return params


def sigloss_cargs(
    params: SiglossParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("sigloss")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_b0map", None))
    ])
    cargs.extend([
        "-s",
        params.get("output_sigloss", None)
    ])
    if params.get("input_mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("input_mask", None))
        ])
    if params.get("echo_time", None) is not None:
        cargs.extend([
            "--te",
            str(params.get("echo_time", None))
        ])
    if params.get("slice_direction", None) is not None:
        cargs.extend([
            "-d",
            params.get("slice_direction", None)
        ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def sigloss_outputs(
    params: SiglossParameters,
    execution: Execution,
) -> SiglossOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SiglossOutputs(
        root=execution.output_file("."),
    )
    return ret


def sigloss_execute(
    params: SiglossParameters,
    runner: Runner | None = None,
) -> SiglossOutputs:
    """
    sigloss
    
    Estimates signal loss from a field map (in rad/s).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SiglossOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SIGLOSS_METADATA)
    params = execution.params(params)
    cargs = sigloss_cargs(params, execution)
    ret = sigloss_outputs(params, execution)
    execution.run(cargs)
    return ret


def sigloss(
    input_b0map: InputPathType,
    output_sigloss: str,
    input_mask: InputPathType | None = None,
    echo_time: float | None = None,
    slice_direction: typing.Literal["x", "y", "z"] | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> SiglossOutputs:
    """
    sigloss
    
    Estimates signal loss from a field map (in rad/s).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_b0map: Input b0 map image filename (in rad/s).
        output_sigloss: Output signal loss image filename.
        input_mask: Input mask filename.
        echo_time: Echo time (in seconds).
        slice_direction: Slice direction (either x, y or z).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display this help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SiglossOutputs`).
    """
    params = sigloss_params(
        input_b0map=input_b0map,
        output_sigloss=output_sigloss,
        input_mask=input_mask,
        echo_time=echo_time,
        slice_direction=slice_direction,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return sigloss_execute(params, runner)


__all__ = [
    "SIGLOSS_METADATA",
    "SiglossOutputs",
    "sigloss",
    "sigloss_execute",
    "sigloss_params",
]
