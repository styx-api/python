# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SLICES_METADATA = Metadata(
    id="4289c0048444006a1853da0e0539d026b7d4b9fb.boutiques",
    name="slices",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SlicesParameters = typing.TypedDict('SlicesParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/slices"]],
    "primary_input": InputPathType,
    "secondary_input": typing.NotRequired[InputPathType | None],
    "scale_factor": typing.NotRequired[float | None],
    "intensity_range": typing.NotRequired[list[float] | None],
    "output_gif": typing.NotRequired[str | None],
})
SlicesParametersTagged = typing.TypedDict('SlicesParametersTagged', {
    "@type": typing.Literal["fsl/slices"],
    "primary_input": InputPathType,
    "secondary_input": typing.NotRequired[InputPathType | None],
    "scale_factor": typing.NotRequired[float | None],
    "intensity_range": typing.NotRequired[list[float] | None],
    "output_gif": typing.NotRequired[str | None],
})


class SlicesOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SlicesParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def slices_params(
    primary_input: InputPathType,
    secondary_input: InputPathType | None = None,
    scale_factor: float | None = None,
    intensity_range: list[float] | None = None,
    output_gif: str | None = None,
) -> SlicesParametersTagged:
    """
    Build parameters.
    
    Args:
        primary_input: Primary input image file (e.g. img1.nii.gz).
        secondary_input: Secondary input image file (e.g. img2.nii.gz).
        scale_factor: Scale factor to apply to images.
        intensity_range: Intensity range to consider (minimum and maximum\
            values).
        output_gif: Output GIF file.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/slices",
        "primary_input": primary_input,
    }
    if secondary_input is not None:
        params["secondary_input"] = secondary_input
    if scale_factor is not None:
        params["scale_factor"] = scale_factor
    if intensity_range is not None:
        params["intensity_range"] = intensity_range
    if output_gif is not None:
        params["output_gif"] = output_gif
    return params


def slices_cargs(
    params: SlicesParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("slices")
    cargs.append(execution.input_file(params.get("primary_input", None)))
    if params.get("secondary_input", None) is not None:
        cargs.append(execution.input_file(params.get("secondary_input", None)))
    if params.get("scale_factor", None) is not None:
        cargs.extend([
            "-s",
            str(params.get("scale_factor", None))
        ])
    if params.get("intensity_range", None) is not None:
        cargs.extend([
            "-i",
            *map(str, params.get("intensity_range", None))
        ])
    if params.get("output_gif", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_gif", None)
        ])
    return cargs


def slices_outputs(
    params: SlicesParameters,
    execution: Execution,
) -> SlicesOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SlicesOutputs(
        root=execution.output_file("."),
    )
    return ret


def slices_execute(
    params: SlicesParameters,
    runner: Runner | None = None,
) -> SlicesOutputs:
    """
    slices
    
    Generate a set of slices from an image, possibly with some scaling and
    intensity range options, and save as a GIF.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SlicesOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SLICES_METADATA)
    params = execution.params(params)
    cargs = slices_cargs(params, execution)
    ret = slices_outputs(params, execution)
    execution.run(cargs)
    return ret


def slices(
    primary_input: InputPathType,
    secondary_input: InputPathType | None = None,
    scale_factor: float | None = None,
    intensity_range: list[float] | None = None,
    output_gif: str | None = None,
    runner: Runner | None = None,
) -> SlicesOutputs:
    """
    slices
    
    Generate a set of slices from an image, possibly with some scaling and
    intensity range options, and save as a GIF.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        primary_input: Primary input image file (e.g. img1.nii.gz).
        secondary_input: Secondary input image file (e.g. img2.nii.gz).
        scale_factor: Scale factor to apply to images.
        intensity_range: Intensity range to consider (minimum and maximum\
            values).
        output_gif: Output GIF file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SlicesOutputs`).
    """
    params = slices_params(
        primary_input=primary_input,
        secondary_input=secondary_input,
        scale_factor=scale_factor,
        intensity_range=intensity_range,
        output_gif=output_gif,
    )
    return slices_execute(params, runner)


__all__ = [
    "SLICES_METADATA",
    "SlicesOutputs",
    "slices",
    "slices_execute",
    "slices_params",
]
