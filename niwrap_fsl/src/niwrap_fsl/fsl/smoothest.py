# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SMOOTHEST_METADATA = Metadata(
    id="5fde2ca0845c29aa97cf48b01033eaa670f3725b.boutiques",
    name="smoothest",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SmoothestParameters = typing.TypedDict('SmoothestParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/smoothest"]],
    "dof": typing.NotRequired[float | None],
    "residual_fit_image": typing.NotRequired[InputPathType | None],
    "zstat_image": typing.NotRequired[InputPathType | None],
    "mask": InputPathType,
    "verbose_flag": bool,
})
SmoothestParametersTagged = typing.TypedDict('SmoothestParametersTagged', {
    "@type": typing.Literal["fsl/smoothest"],
    "dof": typing.NotRequired[float | None],
    "residual_fit_image": typing.NotRequired[InputPathType | None],
    "zstat_image": typing.NotRequired[InputPathType | None],
    "mask": InputPathType,
    "verbose_flag": bool,
})


class SmoothestOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SmoothestParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def smoothest_params(
    mask: InputPathType,
    dof: float | None = None,
    residual_fit_image: InputPathType | None = None,
    zstat_image: InputPathType | None = None,
    verbose_flag: bool = False,
) -> SmoothestParametersTagged:
    """
    Build parameters.
    
    Args:
        mask: Brain mask volume.
        dof: Number of degrees of freedom.
        residual_fit_image: Filename of `residual-fit` image (use -d).
        zstat_image: Filename of zstat image (not with -d).
        verbose_flag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/smoothest",
        "mask": mask,
        "verbose_flag": verbose_flag,
    }
    if dof is not None:
        params["dof"] = dof
    if residual_fit_image is not None:
        params["residual_fit_image"] = residual_fit_image
    if zstat_image is not None:
        params["zstat_image"] = zstat_image
    return params


def smoothest_cargs(
    params: SmoothestParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("smoothest")
    if params.get("dof", None) is not None:
        cargs.extend([
            "-d",
            str(params.get("dof", None))
        ])
    if params.get("residual_fit_image", None) is not None:
        cargs.extend([
            "-r",
            execution.input_file(params.get("residual_fit_image", None))
        ])
    if params.get("zstat_image", None) is not None:
        cargs.extend([
            "-z",
            execution.input_file(params.get("zstat_image", None))
        ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("mask", None))
    ])
    if params.get("verbose_flag", False):
        cargs.append("-V")
    return cargs


def smoothest_outputs(
    params: SmoothestParameters,
    execution: Execution,
) -> SmoothestOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SmoothestOutputs(
        root=execution.output_file("."),
    )
    return ret


def smoothest_execute(
    params: SmoothestParameters,
    runner: Runner | None = None,
) -> SmoothestOutputs:
    """
    smoothest
    
    Tool to estimate smoothness of data from FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SmoothestOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SMOOTHEST_METADATA)
    params = execution.params(params)
    cargs = smoothest_cargs(params, execution)
    ret = smoothest_outputs(params, execution)
    execution.run(cargs)
    return ret


def smoothest(
    mask: InputPathType,
    dof: float | None = None,
    residual_fit_image: InputPathType | None = None,
    zstat_image: InputPathType | None = None,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> SmoothestOutputs:
    """
    smoothest
    
    Tool to estimate smoothness of data from FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        mask: Brain mask volume.
        dof: Number of degrees of freedom.
        residual_fit_image: Filename of `residual-fit` image (use -d).
        zstat_image: Filename of zstat image (not with -d).
        verbose_flag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SmoothestOutputs`).
    """
    params = smoothest_params(
        dof=dof,
        residual_fit_image=residual_fit_image,
        zstat_image=zstat_image,
        mask=mask,
        verbose_flag=verbose_flag,
    )
    return smoothest_execute(params, runner)


__all__ = [
    "SMOOTHEST_METADATA",
    "SmoothestOutputs",
    "smoothest",
    "smoothest_execute",
    "smoothest_params",
]
