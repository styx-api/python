# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SPHARM_RM_METADATA = Metadata(
    id="a9d20381450a124ed8a7bbcd7c079bed9e1e245b.boutiques",
    name="spharm_rm",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SpharmRmParameters = typing.TypedDict('SpharmRmParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/spharm_rm"]],
    "input_file": InputPathType,
    "output_file": str,
    "mask_file": typing.NotRequired[InputPathType | None],
    "number_of_terms": typing.NotRequired[float | None],
    "verbose_flag": bool,
})
SpharmRmParametersTagged = typing.TypedDict('SpharmRmParametersTagged', {
    "@type": typing.Literal["fsl/spharm_rm"],
    "input_file": InputPathType,
    "output_file": str,
    "mask_file": typing.NotRequired[InputPathType | None],
    "number_of_terms": typing.NotRequired[float | None],
    "verbose_flag": bool,
})


class SpharmRmOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SpharmRmParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outfile: OutputPathType
    """Output image file generated by spharm_rm"""


def spharm_rm_params(
    input_file: InputPathType,
    output_file: str,
    mask_file: InputPathType | None = None,
    number_of_terms: float | None = None,
    verbose_flag: bool = False,
) -> SpharmRmParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input image filename.
        output_file: Output image filename.
        mask_file: Mask filename.
        number_of_terms: Number of terms to remove (order is\
            1,x,y,z,z^2+(x^2+y^2)/2,zx,zy,xy,x^2-y^2).
        verbose_flag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/spharm_rm",
        "input_file": input_file,
        "output_file": output_file,
        "verbose_flag": verbose_flag,
    }
    if mask_file is not None:
        params["mask_file"] = mask_file
    if number_of_terms is not None:
        params["number_of_terms"] = number_of_terms
    return params


def spharm_rm_cargs(
    params: SpharmRmParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("spharm_rm")
    cargs.extend([
        "--in",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "--out",
        params.get("output_file", None)
    ])
    if params.get("mask_file", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask_file", None))
        ])
    if params.get("number_of_terms", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("number_of_terms", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("--verbose")
    return cargs


def spharm_rm_outputs(
    params: SpharmRmParameters,
    execution: Execution,
) -> SpharmRmOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SpharmRmOutputs(
        root=execution.output_file("."),
        outfile=execution.output_file(params.get("output_file", None)),
    )
    return ret


def spharm_rm_execute(
    params: SpharmRmParameters,
    runner: Runner | None = None,
) -> SpharmRmOutputs:
    """
    spharm_rm
    
    Part of FSL - Spherical harmonics removal tool to process neuroimaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SpharmRmOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SPHARM_RM_METADATA)
    params = execution.params(params)
    cargs = spharm_rm_cargs(params, execution)
    ret = spharm_rm_outputs(params, execution)
    execution.run(cargs)
    return ret


def spharm_rm(
    input_file: InputPathType,
    output_file: str,
    mask_file: InputPathType | None = None,
    number_of_terms: float | None = None,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> SpharmRmOutputs:
    """
    spharm_rm
    
    Part of FSL - Spherical harmonics removal tool to process neuroimaging data.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input image filename.
        output_file: Output image filename.
        mask_file: Mask filename.
        number_of_terms: Number of terms to remove (order is\
            1,x,y,z,z^2+(x^2+y^2)/2,zx,zy,xy,x^2-y^2).
        verbose_flag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SpharmRmOutputs`).
    """
    params = spharm_rm_params(
        input_file=input_file,
        output_file=output_file,
        mask_file=mask_file,
        number_of_terms=number_of_terms,
        verbose_flag=verbose_flag,
    )
    return spharm_rm_execute(params, runner)


__all__ = [
    "SPHARM_RM_METADATA",
    "SpharmRmOutputs",
    "spharm_rm",
    "spharm_rm_execute",
    "spharm_rm_params",
]
