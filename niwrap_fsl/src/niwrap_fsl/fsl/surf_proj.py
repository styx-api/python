# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SURF_PROJ_METADATA = Metadata(
    id="917552291ffb4e155bdb8a6ed1730e16d5889393.boutiques",
    name="surf_proj",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SurfProjParameters = typing.TypedDict('SurfProjParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/surf_proj"]],
    "data": InputPathType,
    "surface": InputPathType,
    "output_file": str,
    "surface_reference": typing.NotRequired[InputPathType | None],
    "transform": typing.NotRequired[InputPathType | None],
    "meshspace": typing.NotRequired[str | None],
    "step_size": typing.NotRequired[float | None],
    "direction": typing.NotRequired[float | None],
    "operation": typing.NotRequired[str | None],
    "surface_output": typing.NotRequired[str | None],
})
SurfProjParametersTagged = typing.TypedDict('SurfProjParametersTagged', {
    "@type": typing.Literal["fsl/surf_proj"],
    "data": InputPathType,
    "surface": InputPathType,
    "output_file": str,
    "surface_reference": typing.NotRequired[InputPathType | None],
    "transform": typing.NotRequired[InputPathType | None],
    "meshspace": typing.NotRequired[str | None],
    "step_size": typing.NotRequired[float | None],
    "direction": typing.NotRequired[float | None],
    "operation": typing.NotRequired[str | None],
    "surface_output": typing.NotRequired[str | None],
})


class SurfProjOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SurfProjParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    projected_output: OutputPathType
    """Output of the projection"""
    output_surface: OutputPathType | None
    """Output surface file"""


def surf_proj_params(
    data: InputPathType,
    surface: InputPathType,
    output_file: str,
    surface_reference: InputPathType | None = None,
    transform: InputPathType | None = None,
    meshspace: str | None = None,
    step_size: float | None = None,
    direction: float | None = None,
    operation: str | None = None,
    surface_output: str | None = None,
) -> SurfProjParametersTagged:
    """
    Build parameters.
    
    Args:
        data: Data to project onto surface.
        surface: Surface file.
        output_file: Output file.
        surface_reference: Surface volume reference (default=same as data).
        transform: Data to surface transform (default=Identity).
        meshspace: Mesh space (default='caret').
        step_size: Average over step (mm - default=1).
        direction: If >0 goes towards brain (default=0 i.e. both directions).
        operation: What to do with values: 'mean' (default), 'max', 'median',\
            'last'.
        surface_output: Output surface file, not ASCII matrix (valid only for\
            scalars).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/surf_proj",
        "data": data,
        "surface": surface,
        "output_file": output_file,
    }
    if surface_reference is not None:
        params["surface_reference"] = surface_reference
    if transform is not None:
        params["transform"] = transform
    if meshspace is not None:
        params["meshspace"] = meshspace
    if step_size is not None:
        params["step_size"] = step_size
    if direction is not None:
        params["direction"] = direction
    if operation is not None:
        params["operation"] = operation
    if surface_output is not None:
        params["surface_output"] = surface_output
    return params


def surf_proj_cargs(
    params: SurfProjParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("surf_proj")
    cargs.extend([
        "-data",
        execution.input_file(params.get("data", None))
    ])
    cargs.extend([
        "-surf",
        execution.input_file(params.get("surface", None))
    ])
    cargs.extend([
        "-out",
        params.get("output_file", None)
    ])
    if params.get("surface_reference", None) is not None:
        cargs.extend([
            "--meshref",
            execution.input_file(params.get("surface_reference", None))
        ])
    if params.get("transform", None) is not None:
        cargs.extend([
            "--xfm",
            execution.input_file(params.get("transform", None))
        ])
    if params.get("meshspace", None) is not None:
        cargs.extend([
            "--meshspace",
            params.get("meshspace", None)
        ])
    if params.get("step_size", None) is not None:
        cargs.extend([
            "--step",
            str(params.get("step_size", None))
        ])
    if params.get("direction", None) is not None:
        cargs.extend([
            "--direction",
            str(params.get("direction", None))
        ])
    if params.get("operation", None) is not None:
        cargs.extend([
            "--operation",
            params.get("operation", None)
        ])
    if params.get("surface_output", None) is not None:
        cargs.extend([
            "--surfout",
            params.get("surface_output", None)
        ])
    return cargs


def surf_proj_outputs(
    params: SurfProjParameters,
    execution: Execution,
) -> SurfProjOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SurfProjOutputs(
        root=execution.output_file("."),
        projected_output=execution.output_file(params.get("output_file", None)),
        output_surface=execution.output_file(params.get("surface_output", None)) if (params.get("surface_output") is not None) else None,
    )
    return ret


def surf_proj_execute(
    params: SurfProjParameters,
    runner: Runner | None = None,
) -> SurfProjOutputs:
    """
    surf_proj
    
    Projects data onto a surface mesh using specified parameters.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfProjOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SURF_PROJ_METADATA)
    params = execution.params(params)
    cargs = surf_proj_cargs(params, execution)
    ret = surf_proj_outputs(params, execution)
    execution.run(cargs)
    return ret


def surf_proj(
    data: InputPathType,
    surface: InputPathType,
    output_file: str,
    surface_reference: InputPathType | None = None,
    transform: InputPathType | None = None,
    meshspace: str | None = None,
    step_size: float | None = None,
    direction: float | None = None,
    operation: str | None = None,
    surface_output: str | None = None,
    runner: Runner | None = None,
) -> SurfProjOutputs:
    """
    surf_proj
    
    Projects data onto a surface mesh using specified parameters.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        data: Data to project onto surface.
        surface: Surface file.
        output_file: Output file.
        surface_reference: Surface volume reference (default=same as data).
        transform: Data to surface transform (default=Identity).
        meshspace: Mesh space (default='caret').
        step_size: Average over step (mm - default=1).
        direction: If >0 goes towards brain (default=0 i.e. both directions).
        operation: What to do with values: 'mean' (default), 'max', 'median',\
            'last'.
        surface_output: Output surface file, not ASCII matrix (valid only for\
            scalars).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SurfProjOutputs`).
    """
    params = surf_proj_params(
        data=data,
        surface=surface,
        output_file=output_file,
        surface_reference=surface_reference,
        transform=transform,
        meshspace=meshspace,
        step_size=step_size,
        direction=direction,
        operation=operation,
        surface_output=surface_output,
    )
    return surf_proj_execute(params, runner)


__all__ = [
    "SURF_PROJ_METADATA",
    "SurfProjOutputs",
    "surf_proj",
    "surf_proj_execute",
    "surf_proj_params",
]
