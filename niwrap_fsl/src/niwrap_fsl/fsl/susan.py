# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SUSAN_METADATA = Metadata(
    id="df7143190550f4edd77aee38412229dd5192192c.boutiques",
    name="susan",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SusanParameters = typing.TypedDict('SusanParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/susan"]],
    "input_file": InputPathType,
    "brightness_threshold": float,
    "spatial_size": float,
    "dimensionality": float,
    "use_median_filter": float,
    "n_usans": float,
    "usan1": typing.NotRequired[InputPathType | None],
    "brightness_threshold1": typing.NotRequired[float | None],
    "usan2": typing.NotRequired[InputPathType | None],
    "brightness_threshold2": typing.NotRequired[float | None],
    "output_file": str,
})
SusanParametersTagged = typing.TypedDict('SusanParametersTagged', {
    "@type": typing.Literal["fsl/susan"],
    "input_file": InputPathType,
    "brightness_threshold": float,
    "spatial_size": float,
    "dimensionality": float,
    "use_median_filter": float,
    "n_usans": float,
    "usan1": typing.NotRequired[InputPathType | None],
    "brightness_threshold1": typing.NotRequired[float | None],
    "usan2": typing.NotRequired[InputPathType | None],
    "brightness_threshold2": typing.NotRequired[float | None],
    "output_file": str,
})


class SusanOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SusanParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    filtered_output: OutputPathType
    """Filtered output image file"""


def susan_params(
    input_file: InputPathType,
    brightness_threshold: float,
    spatial_size: float,
    dimensionality: float,
    use_median_filter: float,
    n_usans: float,
    output_file: str,
    usan1: InputPathType | None = None,
    brightness_threshold1: float | None = None,
    usan2: InputPathType | None = None,
    brightness_threshold2: float | None = None,
) -> SusanParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Input image file.
        brightness_threshold: Brightness threshold; should be greater than\
            noise level and less than contrast of edges to be preserved.
        spatial_size: Spatial size (sigma, i.e., half-width) of smoothing, in\
            mm.
        dimensionality: Dimensionality (2 or 3), for within-plane (2) or fully\
            3D (3) smoothing.
        use_median_filter: Use median filter for cases where single-point noise\
            is detected (0 or 1).
        n_usans: Determine if the smoothing area is found from secondary images\
            (0, 1 or 2).
        output_file: Output image file.
        usan1: First USAN image file.
        brightness_threshold1: Brightness threshold for first USAN image.
        usan2: Second USAN image file.
        brightness_threshold2: Brightness threshold for second USAN image.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/susan",
        "input_file": input_file,
        "brightness_threshold": brightness_threshold,
        "spatial_size": spatial_size,
        "dimensionality": dimensionality,
        "use_median_filter": use_median_filter,
        "n_usans": n_usans,
        "output_file": output_file,
    }
    if usan1 is not None:
        params["usan1"] = usan1
    if brightness_threshold1 is not None:
        params["brightness_threshold1"] = brightness_threshold1
    if usan2 is not None:
        params["usan2"] = usan2
    if brightness_threshold2 is not None:
        params["brightness_threshold2"] = brightness_threshold2
    return params


def susan_cargs(
    params: SusanParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("susan")
    cargs.append(execution.input_file(params.get("input_file", None)))
    cargs.append(str(params.get("brightness_threshold", None)))
    cargs.append(str(params.get("spatial_size", None)))
    cargs.append(str(params.get("dimensionality", None)))
    cargs.append(str(params.get("use_median_filter", None)))
    cargs.append(str(params.get("n_usans", None)))
    if params.get("usan1", None) is not None:
        cargs.append(execution.input_file(params.get("usan1", None)))
    if params.get("brightness_threshold1", None) is not None:
        cargs.append(str(params.get("brightness_threshold1", None)))
    if params.get("usan2", None) is not None:
        cargs.append(execution.input_file(params.get("usan2", None)))
    if params.get("brightness_threshold2", None) is not None:
        cargs.append(str(params.get("brightness_threshold2", None)))
    cargs.append(params.get("output_file", None))
    return cargs


def susan_outputs(
    params: SusanParameters,
    execution: Execution,
) -> SusanOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SusanOutputs(
        root=execution.output_file("."),
        filtered_output=execution.output_file(params.get("output_file", None)),
    )
    return ret


def susan_execute(
    params: SusanParameters,
    runner: Runner | None = None,
) -> SusanOutputs:
    """
    susan
    
    Non-linear noise reduction filtering tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SusanOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SUSAN_METADATA)
    params = execution.params(params)
    cargs = susan_cargs(params, execution)
    ret = susan_outputs(params, execution)
    execution.run(cargs)
    return ret


def susan(
    input_file: InputPathType,
    brightness_threshold: float,
    spatial_size: float,
    dimensionality: float,
    use_median_filter: float,
    n_usans: float,
    output_file: str,
    usan1: InputPathType | None = None,
    brightness_threshold1: float | None = None,
    usan2: InputPathType | None = None,
    brightness_threshold2: float | None = None,
    runner: Runner | None = None,
) -> SusanOutputs:
    """
    susan
    
    Non-linear noise reduction filtering tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Input image file.
        brightness_threshold: Brightness threshold; should be greater than\
            noise level and less than contrast of edges to be preserved.
        spatial_size: Spatial size (sigma, i.e., half-width) of smoothing, in\
            mm.
        dimensionality: Dimensionality (2 or 3), for within-plane (2) or fully\
            3D (3) smoothing.
        use_median_filter: Use median filter for cases where single-point noise\
            is detected (0 or 1).
        n_usans: Determine if the smoothing area is found from secondary images\
            (0, 1 or 2).
        output_file: Output image file.
        usan1: First USAN image file.
        brightness_threshold1: Brightness threshold for first USAN image.
        usan2: Second USAN image file.
        brightness_threshold2: Brightness threshold for second USAN image.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SusanOutputs`).
    """
    params = susan_params(
        input_file=input_file,
        brightness_threshold=brightness_threshold,
        spatial_size=spatial_size,
        dimensionality=dimensionality,
        use_median_filter=use_median_filter,
        n_usans=n_usans,
        usan1=usan1,
        brightness_threshold1=brightness_threshold1,
        usan2=usan2,
        brightness_threshold2=brightness_threshold2,
        output_file=output_file,
    )
    return susan_execute(params, runner)


__all__ = [
    "SUSAN_METADATA",
    "SusanOutputs",
    "susan",
    "susan_execute",
    "susan_params",
]
