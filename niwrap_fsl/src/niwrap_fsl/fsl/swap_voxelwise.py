# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SWAP_VOXELWISE_METADATA = Metadata(
    id="a67ba5db2731438636bdd3a139272c7544dfa806.boutiques",
    name="swap_voxelwise",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SwapVoxelwiseParameters = typing.TypedDict('SwapVoxelwiseParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/swap_voxelwise"]],
    "vectors_file_list": InputPathType,
    "scalars_file_list": typing.NotRequired[InputPathType | None],
    "mask": InputPathType,
    "output_base_name": typing.NotRequired[str | None],
    "reorder_mode": typing.NotRequired[str | None],
    "init_mask": typing.NotRequired[InputPathType | None],
    "crossing_thresh": typing.NotRequired[float | None],
    "verbose_flag": bool,
})
SwapVoxelwiseParametersTagged = typing.TypedDict('SwapVoxelwiseParametersTagged', {
    "@type": typing.Literal["fsl/swap_voxelwise"],
    "vectors_file_list": InputPathType,
    "scalars_file_list": typing.NotRequired[InputPathType | None],
    "mask": InputPathType,
    "output_base_name": typing.NotRequired[str | None],
    "reorder_mode": typing.NotRequired[str | None],
    "init_mask": typing.NotRequired[InputPathType | None],
    "crossing_thresh": typing.NotRequired[float | None],
    "verbose_flag": bool,
})


class SwapVoxelwiseOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SwapVoxelwiseParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    reordered_output: OutputPathType | None
    """Output file with reordered vectors (default name 'reordered.nii.gz')"""


def swap_voxelwise_params(
    vectors_file_list: InputPathType,
    mask: InputPathType,
    scalars_file_list: InputPathType | None = None,
    output_base_name: str | None = None,
    reorder_mode: str | None = None,
    init_mask: InputPathType | None = None,
    crossing_thresh: float | None = None,
    verbose_flag: bool = False,
) -> SwapVoxelwiseParametersTagged:
    """
    Build parameters.
    
    Args:
        vectors_file_list: Text file containing list of vectors.
        mask: Filename of brain mask or skeleton.
        scalars_file_list: Text file containing list of scalars.
        output_base_name: Output base name.
        reorder_mode: Reordering mode - choose between 'voxels' (default) or\
            'volumes'.
        init_mask: Filename of initialization mask.
        crossing_thresh: Threshold for considering a crossing fibre region -\
            default=0.1.
        verbose_flag: Switch on diagnostic messages.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/swap_voxelwise",
        "vectors_file_list": vectors_file_list,
        "mask": mask,
        "verbose_flag": verbose_flag,
    }
    if scalars_file_list is not None:
        params["scalars_file_list"] = scalars_file_list
    if output_base_name is not None:
        params["output_base_name"] = output_base_name
    if reorder_mode is not None:
        params["reorder_mode"] = reorder_mode
    if init_mask is not None:
        params["init_mask"] = init_mask
    if crossing_thresh is not None:
        params["crossing_thresh"] = crossing_thresh
    return params


def swap_voxelwise_cargs(
    params: SwapVoxelwiseParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("swap_voxelwise")
    cargs.extend([
        "-v",
        execution.input_file(params.get("vectors_file_list", None))
    ])
    if params.get("scalars_file_list", None) is not None:
        cargs.extend([
            "-s",
            execution.input_file(params.get("scalars_file_list", None))
        ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("mask", None))
    ])
    if params.get("output_base_name", None) is not None:
        cargs.extend([
            "-b",
            params.get("output_base_name", None)
        ])
    if params.get("reorder_mode", None) is not None:
        cargs.extend([
            "--mode",
            params.get("reorder_mode", None)
        ])
    if params.get("init_mask", None) is not None:
        cargs.extend([
            "--initmask",
            execution.input_file(params.get("init_mask", None))
        ])
    if params.get("crossing_thresh", None) is not None:
        cargs.extend([
            "--xthresh",
            str(params.get("crossing_thresh", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-V")
    return cargs


def swap_voxelwise_outputs(
    params: SwapVoxelwiseParameters,
    execution: Execution,
) -> SwapVoxelwiseOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SwapVoxelwiseOutputs(
        root=execution.output_file("."),
        reordered_output=execution.output_file(params.get("output_base_name", None) + ".nii.gz") if (params.get("output_base_name") is not None) else None,
    )
    return ret


def swap_voxelwise_execute(
    params: SwapVoxelwiseParameters,
    runner: Runner | None = None,
) -> SwapVoxelwiseOutputs:
    """
    swap_voxelwise
    
    Reordering of vectors with direction preservation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SwapVoxelwiseOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SWAP_VOXELWISE_METADATA)
    params = execution.params(params)
    cargs = swap_voxelwise_cargs(params, execution)
    ret = swap_voxelwise_outputs(params, execution)
    execution.run(cargs)
    return ret


def swap_voxelwise(
    vectors_file_list: InputPathType,
    mask: InputPathType,
    scalars_file_list: InputPathType | None = None,
    output_base_name: str | None = None,
    reorder_mode: str | None = None,
    init_mask: InputPathType | None = None,
    crossing_thresh: float | None = None,
    verbose_flag: bool = False,
    runner: Runner | None = None,
) -> SwapVoxelwiseOutputs:
    """
    swap_voxelwise
    
    Reordering of vectors with direction preservation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        vectors_file_list: Text file containing list of vectors.
        mask: Filename of brain mask or skeleton.
        scalars_file_list: Text file containing list of scalars.
        output_base_name: Output base name.
        reorder_mode: Reordering mode - choose between 'voxels' (default) or\
            'volumes'.
        init_mask: Filename of initialization mask.
        crossing_thresh: Threshold for considering a crossing fibre region -\
            default=0.1.
        verbose_flag: Switch on diagnostic messages.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SwapVoxelwiseOutputs`).
    """
    params = swap_voxelwise_params(
        vectors_file_list=vectors_file_list,
        scalars_file_list=scalars_file_list,
        mask=mask,
        output_base_name=output_base_name,
        reorder_mode=reorder_mode,
        init_mask=init_mask,
        crossing_thresh=crossing_thresh,
        verbose_flag=verbose_flag,
    )
    return swap_voxelwise_execute(params, runner)


__all__ = [
    "SWAP_VOXELWISE_METADATA",
    "SwapVoxelwiseOutputs",
    "swap_voxelwise",
    "swap_voxelwise_execute",
    "swap_voxelwise_params",
]
