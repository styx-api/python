# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SWE_METADATA = Metadata(
    id="189a63b715133e0aa30785dccb20b8c57e3527ff.boutiques",
    name="swe",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


SweParameters = typing.TypedDict('SweParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/swe"]],
    "input_file": InputPathType,
    "output_root": str,
    "design_mat": InputPathType,
    "design_con": InputPathType,
    "design_sub": InputPathType,
    "mask": typing.NotRequired[InputPathType | None],
    "fcon": typing.NotRequired[InputPathType | None],
    "modified": bool,
    "wild_bootstrap": bool,
    "logp": bool,
    "nboot": typing.NotRequired[float | None],
    "corrp": bool,
    "fonly": bool,
    "tfce": bool,
    "tfce_2d": bool,
    "cluster_t": typing.NotRequired[float | None],
    "cluster_t_mass": typing.NotRequired[float | None],
    "cluster_f": typing.NotRequired[float | None],
    "cluster_f_mass": typing.NotRequired[float | None],
    "quiet": bool,
    "raw": bool,
    "equiv": bool,
    "dof": bool,
    "uncorr_p": bool,
    "null_dist": bool,
    "no_rc_mask": bool,
    "seed": typing.NotRequired[float | None],
    "tfce_h": typing.NotRequired[float | None],
    "tfce_d": typing.NotRequired[float | None],
    "tfce_e": typing.NotRequired[float | None],
    "tfce_c": typing.NotRequired[float | None],
    "voxelwise_ev": typing.NotRequired[list[float] | None],
    "voxelwise_evs": typing.NotRequired[list[InputPathType] | None],
    "glm_output": bool,
})
SweParametersTagged = typing.TypedDict('SweParametersTagged', {
    "@type": typing.Literal["fsl/swe"],
    "input_file": InputPathType,
    "output_root": str,
    "design_mat": InputPathType,
    "design_con": InputPathType,
    "design_sub": InputPathType,
    "mask": typing.NotRequired[InputPathType | None],
    "fcon": typing.NotRequired[InputPathType | None],
    "modified": bool,
    "wild_bootstrap": bool,
    "logp": bool,
    "nboot": typing.NotRequired[float | None],
    "corrp": bool,
    "fonly": bool,
    "tfce": bool,
    "tfce_2d": bool,
    "cluster_t": typing.NotRequired[float | None],
    "cluster_t_mass": typing.NotRequired[float | None],
    "cluster_f": typing.NotRequired[float | None],
    "cluster_f_mass": typing.NotRequired[float | None],
    "quiet": bool,
    "raw": bool,
    "equiv": bool,
    "dof": bool,
    "uncorr_p": bool,
    "null_dist": bool,
    "no_rc_mask": bool,
    "seed": typing.NotRequired[float | None],
    "tfce_h": typing.NotRequired[float | None],
    "tfce_d": typing.NotRequired[float | None],
    "tfce_e": typing.NotRequired[float | None],
    "tfce_c": typing.NotRequired[float | None],
    "voxelwise_ev": typing.NotRequired[list[float] | None],
    "voxelwise_evs": typing.NotRequired[list[InputPathType] | None],
    "glm_output": bool,
})


class SweOutputs(typing.NamedTuple):
    """
    Output object returned when calling `SweParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    logp_img: OutputPathType
    """Output -log_10(p) images"""
    corrp_img: OutputPathType
    """Output voxel-corrected p-value images"""
    raw_img: OutputPathType
    """Output raw voxelwise statistic images"""
    equiv_img: OutputPathType
    """Output equivalent z or chi-squared statistic images"""
    dof_img: OutputPathType
    """Output effective number of degrees of freedom images"""
    uncorrp_img: OutputPathType
    """Output uncorrected p-value images"""
    null_dist_file: OutputPathType
    """Output null distribution text files"""
    glm_output_file: OutputPathType
    """Output GLM information (pe, cope, & varcope)"""


def swe_params(
    input_file: InputPathType,
    output_root: str,
    design_mat: InputPathType,
    design_con: InputPathType,
    design_sub: InputPathType,
    mask: InputPathType | None = None,
    fcon: InputPathType | None = None,
    modified: bool = False,
    wild_bootstrap: bool = False,
    logp: bool = False,
    nboot: float | None = None,
    corrp: bool = False,
    fonly: bool = False,
    tfce: bool = False,
    tfce_2d: bool = False,
    cluster_t: float | None = None,
    cluster_t_mass: float | None = None,
    cluster_f: float | None = None,
    cluster_f_mass: float | None = None,
    quiet: bool = False,
    raw: bool = False,
    equiv: bool = False,
    dof: bool = False,
    uncorr_p: bool = False,
    null_dist: bool = False,
    no_rc_mask: bool = False,
    seed: float | None = None,
    tfce_h: float | None = None,
    tfce_d: float | None = None,
    tfce_e: float | None = None,
    tfce_c: float | None = None,
    voxelwise_ev: list[float] | None = None,
    voxelwise_evs: list[InputPathType] | None = None,
    glm_output: bool = False,
) -> SweParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: 4D input image.
        output_root: Output file root name.
        design_mat: Design matrix file.
        design_con: T contrasts file.
        design_sub: Subjects file.
        mask: Mask image.
        fcon: F contrasts file.
        modified: Use the modified 'Homogeneous' SwE instead of the classic\
            'Heterogeneous' SwE.
        wild_bootstrap: Inference using a non-parametric Wild Bootstrap\
            procedure.
        logp: Return -log_10(p) images instead of 1-p images.
        nboot: Number of bootstraps (default 999).
        corrp: Output voxelwise corrected p-value images.
        fonly: Calculate f-statistics only.
        tfce: Threshold-Free Cluster Enhancement.
        tfce_2d: Threshold-Free Cluster Enhancement with 2D optimisation, e.g.\
            for TBSS data (H=2, E=1, C=26).
        cluster_t: Cluster-extent-based inference for t-contrasts with\
            specified cluster-forming threshold (z-score if >= 1, uncorrected\
            p-value if < 1).
        cluster_t_mass: Cluster-mass-based inference for t-contrasts with\
            specified cluster-forming threshold (z-score if >= 1, uncorrected\
            p-value if < 1).
        cluster_f: Cluster-extent-based inference for f-contrasts with\
            specified cluster-forming threshold (chi-squared-score if >= 1,\
            uncorrected p-value if < 1).
        cluster_f_mass: Cluster-mass-based inference for f-contrasts with\
            specified cluster-forming threshold (chi-squared-score if >= 1,\
            uncorrected p-value if < 1).
        quiet: Switch off diagnostic messages.
        raw: Output raw voxelwise statistic images.
        equiv: Output equivalent z or chi-squared statistic images.
        dof: Output effective number of degrees of freedom images.
        uncorr_p: Output uncorrected p-value images.
        null_dist: Output null distribution text files.
        no_rc_mask: Don't remove constant voxels from mask.
        seed: Specific integer seed for random number generator.
        tfce_h: TFCE height parameter (default=2).
        tfce_d: TFCE delta parameter override.
        tfce_e: TFCE extent parameter (default=0.5).
        tfce_c: TFCE connectivity (6 or 26; default=6).
        voxelwise_ev: List of numbers indicating voxelwise EVs position in the\
            design matrix.
        voxelwise_evs: List of 4D images containing voxelwise EVs.
        glm_output: Output GLM information (pe, cope, & varcope).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/swe",
        "input_file": input_file,
        "output_root": output_root,
        "design_mat": design_mat,
        "design_con": design_con,
        "design_sub": design_sub,
        "modified": modified,
        "wild_bootstrap": wild_bootstrap,
        "logp": logp,
        "corrp": corrp,
        "fonly": fonly,
        "tfce": tfce,
        "tfce_2d": tfce_2d,
        "quiet": quiet,
        "raw": raw,
        "equiv": equiv,
        "dof": dof,
        "uncorr_p": uncorr_p,
        "null_dist": null_dist,
        "no_rc_mask": no_rc_mask,
        "glm_output": glm_output,
    }
    if mask is not None:
        params["mask"] = mask
    if fcon is not None:
        params["fcon"] = fcon
    if nboot is not None:
        params["nboot"] = nboot
    if cluster_t is not None:
        params["cluster_t"] = cluster_t
    if cluster_t_mass is not None:
        params["cluster_t_mass"] = cluster_t_mass
    if cluster_f is not None:
        params["cluster_f"] = cluster_f
    if cluster_f_mass is not None:
        params["cluster_f_mass"] = cluster_f_mass
    if seed is not None:
        params["seed"] = seed
    if tfce_h is not None:
        params["tfce_h"] = tfce_h
    if tfce_d is not None:
        params["tfce_d"] = tfce_d
    if tfce_e is not None:
        params["tfce_e"] = tfce_e
    if tfce_c is not None:
        params["tfce_c"] = tfce_c
    if voxelwise_ev is not None:
        params["voxelwise_ev"] = voxelwise_ev
    if voxelwise_evs is not None:
        params["voxelwise_evs"] = voxelwise_evs
    return params


def swe_cargs(
    params: SweParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("swe")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_root", None)
    ])
    cargs.extend([
        "-d",
        execution.input_file(params.get("design_mat", None))
    ])
    cargs.extend([
        "-t",
        execution.input_file(params.get("design_con", None))
    ])
    cargs.extend([
        "-s",
        execution.input_file(params.get("design_sub", None))
    ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("fcon", None) is not None:
        cargs.extend([
            "-f",
            execution.input_file(params.get("fcon", None))
        ])
    if params.get("modified", False):
        cargs.append("--modified")
    if params.get("wild_bootstrap", False):
        cargs.append("--wb")
    if params.get("logp", False):
        cargs.append("--logp")
    if params.get("nboot", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("nboot", None))
        ])
    if params.get("corrp", False):
        cargs.append("-x")
    if params.get("fonly", False):
        cargs.append("--fonly")
    if params.get("tfce", False):
        cargs.append("-T")
    if params.get("tfce_2d", False):
        cargs.append("--T2")
    if params.get("cluster_t", None) is not None:
        cargs.extend([
            "-c",
            str(params.get("cluster_t", None))
        ])
    if params.get("cluster_t_mass", None) is not None:
        cargs.extend([
            "-C",
            str(params.get("cluster_t_mass", None))
        ])
    if params.get("cluster_f", None) is not None:
        cargs.extend([
            "-F",
            str(params.get("cluster_f", None))
        ])
    if params.get("cluster_f_mass", None) is not None:
        cargs.extend([
            "-S",
            str(params.get("cluster_f_mass", None))
        ])
    if params.get("quiet", False):
        cargs.append("--quiet")
    if params.get("raw", False):
        cargs.append("-R")
    if params.get("equiv", False):
        cargs.append("-E")
    if params.get("dof", False):
        cargs.append("-D")
    if params.get("uncorr_p", False):
        cargs.append("--uncorrp")
    if params.get("null_dist", False):
        cargs.append("-N")
    if params.get("no_rc_mask", False):
        cargs.append("--norcmask")
    if params.get("seed", None) is not None:
        cargs.extend([
            "--seed",
            str(params.get("seed", None))
        ])
    if params.get("tfce_h", None) is not None:
        cargs.extend([
            "--tfce_H",
            str(params.get("tfce_h", None))
        ])
    if params.get("tfce_d", None) is not None:
        cargs.extend([
            "--tfce_D",
            str(params.get("tfce_d", None))
        ])
    if params.get("tfce_e", None) is not None:
        cargs.extend([
            "--tfce_E",
            str(params.get("tfce_e", None))
        ])
    if params.get("tfce_c", None) is not None:
        cargs.extend([
            "--tfce_C",
            str(params.get("tfce_c", None))
        ])
    if params.get("voxelwise_ev", None) is not None:
        cargs.extend([
            "--vxl",
            *map(str, params.get("voxelwise_ev", None))
        ])
    if params.get("voxelwise_evs", None) is not None:
        cargs.extend([
            "--vxf",
            *[execution.input_file(f) for f in params.get("voxelwise_evs", None)]
        ])
    if params.get("glm_output", False):
        cargs.append("--glm_output")
    return cargs


def swe_outputs(
    params: SweParameters,
    execution: Execution,
) -> SweOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = SweOutputs(
        root=execution.output_file("."),
        logp_img=execution.output_file(params.get("output_root", None) + "_logp.nii.gz"),
        corrp_img=execution.output_file(params.get("output_root", None) + "_corrp.nii.gz"),
        raw_img=execution.output_file(params.get("output_root", None) + "_raw.nii.gz"),
        equiv_img=execution.output_file(params.get("output_root", None) + "_equiv.nii.gz"),
        dof_img=execution.output_file(params.get("output_root", None) + "_dof.nii.gz"),
        uncorrp_img=execution.output_file(params.get("output_root", None) + "_uncorrp.nii.gz"),
        null_dist_file=execution.output_file(params.get("output_root", None) + "_null_dist.txt"),
        glm_output_file=execution.output_file(params.get("output_root", None) + "_glm.nii.gz"),
    )
    return ret


def swe_execute(
    params: SweParameters,
    runner: Runner | None = None,
) -> SweOutputs:
    """
    swe
    
    SwE (summary statistics and voxelwise statistical analyses tool for FSL).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SweOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SWE_METADATA)
    params = execution.params(params)
    cargs = swe_cargs(params, execution)
    ret = swe_outputs(params, execution)
    execution.run(cargs)
    return ret


def swe(
    input_file: InputPathType,
    output_root: str,
    design_mat: InputPathType,
    design_con: InputPathType,
    design_sub: InputPathType,
    mask: InputPathType | None = None,
    fcon: InputPathType | None = None,
    modified: bool = False,
    wild_bootstrap: bool = False,
    logp: bool = False,
    nboot: float | None = None,
    corrp: bool = False,
    fonly: bool = False,
    tfce: bool = False,
    tfce_2d: bool = False,
    cluster_t: float | None = None,
    cluster_t_mass: float | None = None,
    cluster_f: float | None = None,
    cluster_f_mass: float | None = None,
    quiet: bool = False,
    raw: bool = False,
    equiv: bool = False,
    dof: bool = False,
    uncorr_p: bool = False,
    null_dist: bool = False,
    no_rc_mask: bool = False,
    seed: float | None = None,
    tfce_h: float | None = None,
    tfce_d: float | None = None,
    tfce_e: float | None = None,
    tfce_c: float | None = None,
    voxelwise_ev: list[float] | None = None,
    voxelwise_evs: list[InputPathType] | None = None,
    glm_output: bool = False,
    runner: Runner | None = None,
) -> SweOutputs:
    """
    swe
    
    SwE (summary statistics and voxelwise statistical analyses tool for FSL).
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: 4D input image.
        output_root: Output file root name.
        design_mat: Design matrix file.
        design_con: T contrasts file.
        design_sub: Subjects file.
        mask: Mask image.
        fcon: F contrasts file.
        modified: Use the modified 'Homogeneous' SwE instead of the classic\
            'Heterogeneous' SwE.
        wild_bootstrap: Inference using a non-parametric Wild Bootstrap\
            procedure.
        logp: Return -log_10(p) images instead of 1-p images.
        nboot: Number of bootstraps (default 999).
        corrp: Output voxelwise corrected p-value images.
        fonly: Calculate f-statistics only.
        tfce: Threshold-Free Cluster Enhancement.
        tfce_2d: Threshold-Free Cluster Enhancement with 2D optimisation, e.g.\
            for TBSS data (H=2, E=1, C=26).
        cluster_t: Cluster-extent-based inference for t-contrasts with\
            specified cluster-forming threshold (z-score if >= 1, uncorrected\
            p-value if < 1).
        cluster_t_mass: Cluster-mass-based inference for t-contrasts with\
            specified cluster-forming threshold (z-score if >= 1, uncorrected\
            p-value if < 1).
        cluster_f: Cluster-extent-based inference for f-contrasts with\
            specified cluster-forming threshold (chi-squared-score if >= 1,\
            uncorrected p-value if < 1).
        cluster_f_mass: Cluster-mass-based inference for f-contrasts with\
            specified cluster-forming threshold (chi-squared-score if >= 1,\
            uncorrected p-value if < 1).
        quiet: Switch off diagnostic messages.
        raw: Output raw voxelwise statistic images.
        equiv: Output equivalent z or chi-squared statistic images.
        dof: Output effective number of degrees of freedom images.
        uncorr_p: Output uncorrected p-value images.
        null_dist: Output null distribution text files.
        no_rc_mask: Don't remove constant voxels from mask.
        seed: Specific integer seed for random number generator.
        tfce_h: TFCE height parameter (default=2).
        tfce_d: TFCE delta parameter override.
        tfce_e: TFCE extent parameter (default=0.5).
        tfce_c: TFCE connectivity (6 or 26; default=6).
        voxelwise_ev: List of numbers indicating voxelwise EVs position in the\
            design matrix.
        voxelwise_evs: List of 4D images containing voxelwise EVs.
        glm_output: Output GLM information (pe, cope, & varcope).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SweOutputs`).
    """
    params = swe_params(
        input_file=input_file,
        output_root=output_root,
        design_mat=design_mat,
        design_con=design_con,
        design_sub=design_sub,
        mask=mask,
        fcon=fcon,
        modified=modified,
        wild_bootstrap=wild_bootstrap,
        logp=logp,
        nboot=nboot,
        corrp=corrp,
        fonly=fonly,
        tfce=tfce,
        tfce_2d=tfce_2d,
        cluster_t=cluster_t,
        cluster_t_mass=cluster_t_mass,
        cluster_f=cluster_f,
        cluster_f_mass=cluster_f_mass,
        quiet=quiet,
        raw=raw,
        equiv=equiv,
        dof=dof,
        uncorr_p=uncorr_p,
        null_dist=null_dist,
        no_rc_mask=no_rc_mask,
        seed=seed,
        tfce_h=tfce_h,
        tfce_d=tfce_d,
        tfce_e=tfce_e,
        tfce_c=tfce_c,
        voxelwise_ev=voxelwise_ev,
        voxelwise_evs=voxelwise_evs,
        glm_output=glm_output,
    )
    return swe_execute(params, runner)


__all__ = [
    "SWE_METADATA",
    "SweOutputs",
    "swe",
    "swe_execute",
    "swe_params",
]
