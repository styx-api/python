# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TBSS_1_PREPROC_METADATA = Metadata(
    id="b184879fc1108203f2d8ae4f4577367b975dcb33.boutiques",
    name="tbss_1_preproc",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


Tbss1PreprocParameters = typing.TypedDict('Tbss1PreprocParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/tbss_1_preproc"]],
    "images": list[InputPathType],
})
Tbss1PreprocParametersTagged = typing.TypedDict('Tbss1PreprocParametersTagged', {
    "@type": typing.Literal["fsl/tbss_1_preproc"],
    "images": list[InputPathType],
})


class Tbss1PreprocOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Tbss1PreprocParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def tbss_1_preproc_params(
    images: list[InputPathType],
) -> Tbss1PreprocParametersTagged:
    """
    Build parameters.
    
    Args:
        images: List of input images (e.g. subj1_FA.nii.gz subj2_FA.nii.gz ...).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/tbss_1_preproc",
        "images": images,
    }
    return params


def tbss_1_preproc_cargs(
    params: Tbss1PreprocParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tbss_1_preproc")
    cargs.extend([execution.input_file(f) for f in params.get("images", None)])
    return cargs


def tbss_1_preproc_outputs(
    params: Tbss1PreprocParameters,
    execution: Execution,
) -> Tbss1PreprocOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Tbss1PreprocOutputs(
        root=execution.output_file("."),
    )
    return ret


def tbss_1_preproc_execute(
    params: Tbss1PreprocParameters,
    runner: Runner | None = None,
) -> Tbss1PreprocOutputs:
    """
    tbss_1_preproc
    
    TBSS (Tract-Based Spatial Statistics) - Step 1: Preprocessing.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Tbss1PreprocOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TBSS_1_PREPROC_METADATA)
    params = execution.params(params)
    cargs = tbss_1_preproc_cargs(params, execution)
    ret = tbss_1_preproc_outputs(params, execution)
    execution.run(cargs)
    return ret


def tbss_1_preproc(
    images: list[InputPathType],
    runner: Runner | None = None,
) -> Tbss1PreprocOutputs:
    """
    tbss_1_preproc
    
    TBSS (Tract-Based Spatial Statistics) - Step 1: Preprocessing.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        images: List of input images (e.g. subj1_FA.nii.gz subj2_FA.nii.gz ...).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Tbss1PreprocOutputs`).
    """
    params = tbss_1_preproc_params(
        images=images,
    )
    return tbss_1_preproc_execute(params, runner)


__all__ = [
    "TBSS_1_PREPROC_METADATA",
    "Tbss1PreprocOutputs",
    "tbss_1_preproc",
    "tbss_1_preproc_execute",
    "tbss_1_preproc_params",
]
