# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TBSS_NON_FA_METADATA = Metadata(
    id="dbc57ea5a0d8fe174e4eccf2e1d1fdfb3af35aed.boutiques",
    name="tbss_non_FA",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


TbssNonFaParameters = typing.TypedDict('TbssNonFaParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/tbss_non_FA"]],
    "concat_auto": bool,
    "output_file": str,
    "input_files": list[InputPathType],
    "concat_x": bool,
    "concat_y": bool,
    "concat_z": bool,
    "concat_t": bool,
    "concat_tr": typing.NotRequired[float | None],
    "volume_number": typing.NotRequired[float | None],
})
TbssNonFaParametersTagged = typing.TypedDict('TbssNonFaParametersTagged', {
    "@type": typing.Literal["fsl/tbss_non_FA"],
    "concat_auto": bool,
    "output_file": str,
    "input_files": list[InputPathType],
    "concat_x": bool,
    "concat_y": bool,
    "concat_z": bool,
    "concat_t": bool,
    "concat_tr": typing.NotRequired[float | None],
    "volume_number": typing.NotRequired[float | None],
})


class TbssNonFaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TbssNonFaParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    merged_output: OutputPathType
    """Merged output file"""


def tbss_non_fa_params(
    output_file: str,
    input_files: list[InputPathType],
    concat_auto: bool = False,
    concat_x: bool = False,
    concat_y: bool = False,
    concat_z: bool = False,
    concat_t: bool = False,
    concat_tr: float | None = None,
    volume_number: float | None = None,
) -> TbssNonFaParametersTagged:
    """
    Build parameters.
    
    Args:
        output_file: Output file for merged images.
        input_files: Images to concatenate.
        concat_auto: Auto-choose: single slices -> volume, volumes -> 4D (time\
            series).
        concat_x: Concatenate images in the x direction.
        concat_y: Concatenate images in the y direction.
        concat_z: Concatenate images in the z direction.
        concat_t: Concatenate images in time.
        concat_tr: Concatenate images in time and set the output image TR\
            (repetition time) to the final option value.
        volume_number: Only use volume <N> from each input file (first volume\
            is 0 not 1).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/tbss_non_FA",
        "concat_auto": concat_auto,
        "output_file": output_file,
        "input_files": input_files,
        "concat_x": concat_x,
        "concat_y": concat_y,
        "concat_z": concat_z,
        "concat_t": concat_t,
    }
    if concat_tr is not None:
        params["concat_tr"] = concat_tr
    if volume_number is not None:
        params["volume_number"] = volume_number
    return params


def tbss_non_fa_cargs(
    params: TbssNonFaParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tbss_non_FA")
    if params.get("concat_auto", False):
        cargs.append("-a")
    cargs.append(params.get("output_file", None))
    cargs.extend([execution.input_file(f) for f in params.get("input_files", None)])
    if params.get("concat_x", False):
        cargs.append("-x")
    if params.get("concat_y", False):
        cargs.append("-y")
    if params.get("concat_z", False):
        cargs.append("-z")
    if params.get("concat_t", False):
        cargs.append("-t")
    if params.get("concat_tr", None) is not None:
        cargs.extend([
            "-tr",
            str(params.get("concat_tr", None))
        ])
    if params.get("volume_number", None) is not None:
        cargs.extend([
            "-n",
            str(params.get("volume_number", None))
        ])
    return cargs


def tbss_non_fa_outputs(
    params: TbssNonFaParameters,
    execution: Execution,
) -> TbssNonFaOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TbssNonFaOutputs(
        root=execution.output_file("."),
        merged_output=execution.output_file(params.get("output_file", None)),
    )
    return ret


def tbss_non_fa_execute(
    params: TbssNonFaParameters,
    runner: Runner | None = None,
) -> TbssNonFaOutputs:
    """
    tbss_non_FA
    
    TBSS processing for non-FA images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TbssNonFaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TBSS_NON_FA_METADATA)
    params = execution.params(params)
    cargs = tbss_non_fa_cargs(params, execution)
    ret = tbss_non_fa_outputs(params, execution)
    execution.run(cargs)
    return ret


def tbss_non_fa(
    output_file: str,
    input_files: list[InputPathType],
    concat_auto: bool = False,
    concat_x: bool = False,
    concat_y: bool = False,
    concat_z: bool = False,
    concat_t: bool = False,
    concat_tr: float | None = None,
    volume_number: float | None = None,
    runner: Runner | None = None,
) -> TbssNonFaOutputs:
    """
    tbss_non_FA
    
    TBSS processing for non-FA images.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_file: Output file for merged images.
        input_files: Images to concatenate.
        concat_auto: Auto-choose: single slices -> volume, volumes -> 4D (time\
            series).
        concat_x: Concatenate images in the x direction.
        concat_y: Concatenate images in the y direction.
        concat_z: Concatenate images in the z direction.
        concat_t: Concatenate images in time.
        concat_tr: Concatenate images in time and set the output image TR\
            (repetition time) to the final option value.
        volume_number: Only use volume <N> from each input file (first volume\
            is 0 not 1).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TbssNonFaOutputs`).
    """
    params = tbss_non_fa_params(
        concat_auto=concat_auto,
        output_file=output_file,
        input_files=input_files,
        concat_x=concat_x,
        concat_y=concat_y,
        concat_z=concat_z,
        concat_t=concat_t,
        concat_tr=concat_tr,
        volume_number=volume_number,
    )
    return tbss_non_fa_execute(params, runner)


__all__ = [
    "TBSS_NON_FA_METADATA",
    "TbssNonFaOutputs",
    "tbss_non_fa",
    "tbss_non_fa_execute",
    "tbss_non_fa_params",
]
