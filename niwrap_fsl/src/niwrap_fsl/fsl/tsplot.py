# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TSPLOT_METADATA = Metadata(
    id="410bf87214e77b8762f8ea8905b226f5f36de93c.boutiques",
    name="tsplot",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


TsplotParameters = typing.TypedDict('TsplotParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/tsplot"]],
    "input_directory": str,
    "main_filtered_data": typing.NotRequired[InputPathType | None],
    "coordinates": typing.NotRequired[list[float] | None],
    "coordinates_output": typing.NotRequired[list[float] | None],
    "mask": typing.NotRequired[InputPathType | None],
    "output_directory": typing.NotRequired[str | None],
    "no_weight_flag": bool,
    "prewhiten_flag": bool,
    "no_raw_flag": bool,
})
TsplotParametersTagged = typing.TypedDict('TsplotParametersTagged', {
    "@type": typing.Literal["fsl/tsplot"],
    "input_directory": str,
    "main_filtered_data": typing.NotRequired[InputPathType | None],
    "coordinates": typing.NotRequired[list[float] | None],
    "coordinates_output": typing.NotRequired[list[float] | None],
    "mask": typing.NotRequired[InputPathType | None],
    "output_directory": typing.NotRequired[str | None],
    "no_weight_flag": bool,
    "prewhiten_flag": bool,
    "no_raw_flag": bool,
})


class TsplotOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TsplotParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    timeseries_output: OutputPathType | None
    """Output timeseries data"""


def tsplot_params(
    input_directory: str,
    main_filtered_data: InputPathType | None = None,
    coordinates: list[float] | None = None,
    coordinates_output: list[float] | None = None,
    mask: InputPathType | None = None,
    output_directory: str | None = None,
    no_weight_flag: bool = False,
    prewhiten_flag: bool = False,
    no_raw_flag: bool = False,
) -> TsplotParametersTagged:
    """
    Build parameters.
    
    Args:
        input_directory: Input FEAT directory (e.g. feat_directory.feat).
        main_filtered_data: Input main filtered data, in case it's not\
            <feat_directory.feat>/filtered_func_data.
        coordinates: Use X, Y, Z instead of max Z stat position.
        coordinates_output: Use X,Y,Z to output time series only - no stats or\
            modelling.
        mask: Use mask image instead of thresholded activation images.
        output_directory: Change output directory from default of input FEAT\
            directory.
        no_weight_flag: Don't weight cluster averaging with Z stats.
        prewhiten_flag: Prewhiten data and model timeseries before plotting.
        no_raw_flag: Don't keep raw data text files.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/tsplot",
        "input_directory": input_directory,
        "no_weight_flag": no_weight_flag,
        "prewhiten_flag": prewhiten_flag,
        "no_raw_flag": no_raw_flag,
    }
    if main_filtered_data is not None:
        params["main_filtered_data"] = main_filtered_data
    if coordinates is not None:
        params["coordinates"] = coordinates
    if coordinates_output is not None:
        params["coordinates_output"] = coordinates_output
    if mask is not None:
        params["mask"] = mask
    if output_directory is not None:
        params["output_directory"] = output_directory
    return params


def tsplot_cargs(
    params: TsplotParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tsplot")
    cargs.append(params.get("input_directory", None))
    if params.get("main_filtered_data", None) is not None:
        cargs.extend([
            "-f",
            execution.input_file(params.get("main_filtered_data", None))
        ])
    if params.get("coordinates", None) is not None:
        cargs.extend([
            "-c",
            *map(str, params.get("coordinates", None))
        ])
    if params.get("coordinates_output", None) is not None:
        cargs.extend([
            "-C",
            *map(str, params.get("coordinates_output", None))
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("output_directory", None) is not None:
        cargs.extend([
            "-o",
            params.get("output_directory", None)
        ])
    if params.get("no_weight_flag", False):
        cargs.append("-n")
    if params.get("prewhiten_flag", False):
        cargs.append("-p")
    if params.get("no_raw_flag", False):
        cargs.append("-d")
    return cargs


def tsplot_outputs(
    params: TsplotParameters,
    execution: Execution,
) -> TsplotOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TsplotOutputs(
        root=execution.output_file("."),
        timeseries_output=execution.output_file(params.get("output_directory", None) + "/timeseries.txt") if (params.get("output_directory") is not None) else None,
    )
    return ret


def tsplot_execute(
    params: TsplotParameters,
    runner: Runner | None = None,
) -> TsplotOutputs:
    """
    tsplot
    
    Time series plotting tool for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TsplotOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TSPLOT_METADATA)
    params = execution.params(params)
    cargs = tsplot_cargs(params, execution)
    ret = tsplot_outputs(params, execution)
    execution.run(cargs)
    return ret


def tsplot(
    input_directory: str,
    main_filtered_data: InputPathType | None = None,
    coordinates: list[float] | None = None,
    coordinates_output: list[float] | None = None,
    mask: InputPathType | None = None,
    output_directory: str | None = None,
    no_weight_flag: bool = False,
    prewhiten_flag: bool = False,
    no_raw_flag: bool = False,
    runner: Runner | None = None,
) -> TsplotOutputs:
    """
    tsplot
    
    Time series plotting tool for FSL.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_directory: Input FEAT directory (e.g. feat_directory.feat).
        main_filtered_data: Input main filtered data, in case it's not\
            <feat_directory.feat>/filtered_func_data.
        coordinates: Use X, Y, Z instead of max Z stat position.
        coordinates_output: Use X,Y,Z to output time series only - no stats or\
            modelling.
        mask: Use mask image instead of thresholded activation images.
        output_directory: Change output directory from default of input FEAT\
            directory.
        no_weight_flag: Don't weight cluster averaging with Z stats.
        prewhiten_flag: Prewhiten data and model timeseries before plotting.
        no_raw_flag: Don't keep raw data text files.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TsplotOutputs`).
    """
    params = tsplot_params(
        input_directory=input_directory,
        main_filtered_data=main_filtered_data,
        coordinates=coordinates,
        coordinates_output=coordinates_output,
        mask=mask,
        output_directory=output_directory,
        no_weight_flag=no_weight_flag,
        prewhiten_flag=prewhiten_flag,
        no_raw_flag=no_raw_flag,
    )
    return tsplot_execute(params, runner)


__all__ = [
    "TSPLOT_METADATA",
    "TsplotOutputs",
    "tsplot",
    "tsplot_execute",
    "tsplot_params",
]
