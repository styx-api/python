# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VECREG_METADATA = Metadata(
    id="29b90c6a5690987e228e2ee296d0016beeaa6688.boutiques",
    name="vecreg",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


VecregParameters = typing.TypedDict('VecregParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/vecreg"]],
    "input_file": InputPathType,
    "output_file": str,
    "reference_volume": InputPathType,
    "transform_file": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
    "secondary_affine": typing.NotRequired[InputPathType | None],
    "secondary_warp": typing.NotRequired[InputPathType | None],
    "interp_method": typing.NotRequired[str | None],
    "brain_mask": typing.NotRequired[InputPathType | None],
    "ref_brain_mask": typing.NotRequired[InputPathType | None],
})
VecregParametersTagged = typing.TypedDict('VecregParametersTagged', {
    "@type": typing.Literal["fsl/vecreg"],
    "input_file": InputPathType,
    "output_file": str,
    "reference_volume": InputPathType,
    "transform_file": typing.NotRequired[InputPathType | None],
    "verbose_flag": bool,
    "help_flag": bool,
    "secondary_affine": typing.NotRequired[InputPathType | None],
    "secondary_warp": typing.NotRequired[InputPathType | None],
    "interp_method": typing.NotRequired[str | None],
    "brain_mask": typing.NotRequired[InputPathType | None],
    "ref_brain_mask": typing.NotRequired[InputPathType | None],
})


class VecregOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VecregParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    registered_output: OutputPathType
    """Output file of registered vector or tensor field"""


def vecreg_params(
    input_file: InputPathType,
    output_file: str,
    reference_volume: InputPathType,
    transform_file: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    secondary_affine: InputPathType | None = None,
    secondary_warp: InputPathType | None = None,
    interp_method: str | None = None,
    brain_mask: InputPathType | None = None,
    ref_brain_mask: InputPathType | None = None,
) -> VecregParametersTagged:
    """
    Build parameters.
    
    Args:
        input_file: Filename for input vector or tensor field.
        output_file: Filename for output registered vector or tensor field.
        reference_volume: Filename for reference (target) volume.
        transform_file: Filename for affine transformation matrix.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        secondary_affine: Filename for secondary affine matrix; if set, this\
            will be used for the rotation of the vector/tensor field.
        secondary_warp: Filename for secondary warp field; if set, this will be\
            used for the rotation of the vector/tensor field.
        interp_method: Interpolation method (nearestneighbour, trilinear\
            (default), sinc, or spline).
        brain_mask: Brain mask in input space.
        ref_brain_mask: Brain mask in output space (useful for speed up of\
            nonlinear registration).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/vecreg",
        "input_file": input_file,
        "output_file": output_file,
        "reference_volume": reference_volume,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if transform_file is not None:
        params["transform_file"] = transform_file
    if secondary_affine is not None:
        params["secondary_affine"] = secondary_affine
    if secondary_warp is not None:
        params["secondary_warp"] = secondary_warp
    if interp_method is not None:
        params["interp_method"] = interp_method
    if brain_mask is not None:
        params["brain_mask"] = brain_mask
    if ref_brain_mask is not None:
        params["ref_brain_mask"] = ref_brain_mask
    return params


def vecreg_cargs(
    params: VecregParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("vecreg")
    cargs.extend([
        "-i",
        execution.input_file(params.get("input_file", None))
    ])
    cargs.extend([
        "-o",
        params.get("output_file", None)
    ])
    cargs.extend([
        "-r",
        execution.input_file(params.get("reference_volume", None))
    ])
    if params.get("transform_file", None) is not None:
        cargs.extend([
            "-t",
            execution.input_file(params.get("transform_file", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-v")
    if params.get("help_flag", False):
        cargs.append("-h")
    if params.get("secondary_affine", None) is not None:
        cargs.extend([
            "--rotmat",
            execution.input_file(params.get("secondary_affine", None))
        ])
    if params.get("secondary_warp", None) is not None:
        cargs.extend([
            "--rotwarp",
            execution.input_file(params.get("secondary_warp", None))
        ])
    if params.get("interp_method", None) is not None:
        cargs.extend([
            "--interp",
            params.get("interp_method", None)
        ])
    if params.get("brain_mask", None) is not None:
        cargs.extend([
            "-m",
            execution.input_file(params.get("brain_mask", None))
        ])
    if params.get("ref_brain_mask", None) is not None:
        cargs.extend([
            "--refmask",
            execution.input_file(params.get("ref_brain_mask", None))
        ])
    return cargs


def vecreg_outputs(
    params: VecregParameters,
    execution: Execution,
) -> VecregOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VecregOutputs(
        root=execution.output_file("."),
        registered_output=execution.output_file(params.get("output_file", None)),
    )
    return ret


def vecreg_execute(
    params: VecregParameters,
    runner: Runner | None = None,
) -> VecregOutputs:
    """
    vecreg
    
    Vector Affine/NonLinear Transformation with Orientation Preservation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VecregOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VECREG_METADATA)
    params = execution.params(params)
    cargs = vecreg_cargs(params, execution)
    ret = vecreg_outputs(params, execution)
    execution.run(cargs)
    return ret


def vecreg(
    input_file: InputPathType,
    output_file: str,
    reference_volume: InputPathType,
    transform_file: InputPathType | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    secondary_affine: InputPathType | None = None,
    secondary_warp: InputPathType | None = None,
    interp_method: str | None = None,
    brain_mask: InputPathType | None = None,
    ref_brain_mask: InputPathType | None = None,
    runner: Runner | None = None,
) -> VecregOutputs:
    """
    vecreg
    
    Vector Affine/NonLinear Transformation with Orientation Preservation.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_file: Filename for input vector or tensor field.
        output_file: Filename for output registered vector or tensor field.
        reference_volume: Filename for reference (target) volume.
        transform_file: Filename for affine transformation matrix.
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        secondary_affine: Filename for secondary affine matrix; if set, this\
            will be used for the rotation of the vector/tensor field.
        secondary_warp: Filename for secondary warp field; if set, this will be\
            used for the rotation of the vector/tensor field.
        interp_method: Interpolation method (nearestneighbour, trilinear\
            (default), sinc, or spline).
        brain_mask: Brain mask in input space.
        ref_brain_mask: Brain mask in output space (useful for speed up of\
            nonlinear registration).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VecregOutputs`).
    """
    params = vecreg_params(
        input_file=input_file,
        output_file=output_file,
        reference_volume=reference_volume,
        transform_file=transform_file,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
        secondary_affine=secondary_affine,
        secondary_warp=secondary_warp,
        interp_method=interp_method,
        brain_mask=brain_mask,
        ref_brain_mask=ref_brain_mask,
    )
    return vecreg_execute(params, runner)


__all__ = [
    "VECREG_METADATA",
    "VecregOutputs",
    "vecreg",
    "vecreg_execute",
    "vecreg_params",
]
