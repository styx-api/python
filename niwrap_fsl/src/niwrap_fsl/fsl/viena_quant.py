# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VIENA_QUANT_METADATA = Metadata(
    id="24ab165136ecc495bc4685a33991b32867715e60.boutiques",
    name="viena_quant",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


VienaQuantParameters = typing.TypedDict('VienaQuantParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/viena_quant"]],
    "input1": InputPathType,
    "input2": InputPathType,
    "ventricle_mask": InputPathType,
})
VienaQuantParametersTagged = typing.TypedDict('VienaQuantParametersTagged', {
    "@type": typing.Literal["fsl/viena_quant"],
    "input1": InputPathType,
    "input2": InputPathType,
    "ventricle_mask": InputPathType,
})


class VienaQuantOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VienaQuantParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_quantification: OutputPathType
    """Output quantification result"""


def viena_quant_params(
    input1: InputPathType,
    input2: InputPathType,
    ventricle_mask: InputPathType,
) -> VienaQuantParametersTagged:
    """
    Build parameters.
    
    Args:
        input1: Input image 1 (e.g. img1.nii.gz).
        input2: Input image 2 (e.g. img2.nii.gz).
        ventricle_mask: Ventricle mask (e.g. mask.nii.gz).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/viena_quant",
        "input1": input1,
        "input2": input2,
        "ventricle_mask": ventricle_mask,
    }
    return params


def viena_quant_cargs(
    params: VienaQuantParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("viena_quant")
    cargs.append(execution.input_file(params.get("input1", None)))
    cargs.append(execution.input_file(params.get("input2", None)))
    cargs.append(execution.input_file(params.get("ventricle_mask", None)))
    return cargs


def viena_quant_outputs(
    params: VienaQuantParameters,
    execution: Execution,
) -> VienaQuantOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VienaQuantOutputs(
        root=execution.output_file("."),
        output_quantification=execution.output_file("output_quantification.nii.gz"),
    )
    return ret


def viena_quant_execute(
    params: VienaQuantParameters,
    runner: Runner | None = None,
) -> VienaQuantOutputs:
    """
    viena_quant
    
    Automated brain ventricle quantification tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VienaQuantOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VIENA_QUANT_METADATA)
    params = execution.params(params)
    cargs = viena_quant_cargs(params, execution)
    ret = viena_quant_outputs(params, execution)
    execution.run(cargs)
    return ret


def viena_quant(
    input1: InputPathType,
    input2: InputPathType,
    ventricle_mask: InputPathType,
    runner: Runner | None = None,
) -> VienaQuantOutputs:
    """
    viena_quant
    
    Automated brain ventricle quantification tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input1: Input image 1 (e.g. img1.nii.gz).
        input2: Input image 2 (e.g. img2.nii.gz).
        ventricle_mask: Ventricle mask (e.g. mask.nii.gz).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VienaQuantOutputs`).
    """
    params = viena_quant_params(
        input1=input1,
        input2=input2,
        ventricle_mask=ventricle_mask,
    )
    return viena_quant_execute(params, runner)


__all__ = [
    "VIENA_QUANT_METADATA",
    "VienaQuantOutputs",
    "viena_quant",
    "viena_quant_execute",
    "viena_quant_params",
]
