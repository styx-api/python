# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

XFIBRES_METADATA = Metadata(
    id="fafbeb72d013b0b0ce07781341982cb881937d4d.boutiques",
    name="xfibres",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


XfibresParameters = typing.TypedDict('XfibresParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl/xfibres"]],
    "datafile": InputPathType,
    "maskfile": InputPathType,
    "bvecs": InputPathType,
    "bvals": InputPathType,
    "logdir": typing.NotRequired[str | None],
    "forcedir": bool,
    "max_fibres": typing.NotRequired[float | None],
    "model": typing.NotRequired[float | None],
    "fudge": typing.NotRequired[str | None],
    "num_jumps": typing.NotRequired[float | None],
    "num_burnin": typing.NotRequired[float | None],
    "burnin_noard": typing.NotRequired[float | None],
    "sampleevery": typing.NotRequired[float | None],
    "updateproposal": typing.NotRequired[float | None],
    "seed": typing.NotRequired[str | None],
    "noard": bool,
    "allard": bool,
    "nospat": bool,
    "nonlinear": bool,
    "cnonlinear": bool,
    "rician": bool,
    "add_f0": bool,
    "ard_f0": bool,
    "rmean": typing.NotRequired[float | None],
    "rstd": typing.NotRequired[float | None],
    "verbose_flag": bool,
    "help_flag": bool,
})
XfibresParametersTagged = typing.TypedDict('XfibresParametersTagged', {
    "@type": typing.Literal["fsl/xfibres"],
    "datafile": InputPathType,
    "maskfile": InputPathType,
    "bvecs": InputPathType,
    "bvals": InputPathType,
    "logdir": typing.NotRequired[str | None],
    "forcedir": bool,
    "max_fibres": typing.NotRequired[float | None],
    "model": typing.NotRequired[float | None],
    "fudge": typing.NotRequired[str | None],
    "num_jumps": typing.NotRequired[float | None],
    "num_burnin": typing.NotRequired[float | None],
    "burnin_noard": typing.NotRequired[float | None],
    "sampleevery": typing.NotRequired[float | None],
    "updateproposal": typing.NotRequired[float | None],
    "seed": typing.NotRequired[str | None],
    "noard": bool,
    "allard": bool,
    "nospat": bool,
    "nonlinear": bool,
    "cnonlinear": bool,
    "rician": bool,
    "add_f0": bool,
    "ard_f0": bool,
    "rmean": typing.NotRequired[float | None],
    "rstd": typing.NotRequired[float | None],
    "verbose_flag": bool,
    "help_flag": bool,
})


class XfibresOutputs(typing.NamedTuple):
    """
    Output object returned when calling `XfibresParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_logdir: OutputPathType
    """Log directory where output files are saved"""


def xfibres_params(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvecs: InputPathType,
    bvals: InputPathType,
    logdir: str | None = None,
    forcedir: bool = False,
    max_fibres: float | None = None,
    model: float | None = None,
    fudge: str | None = None,
    num_jumps: float | None = None,
    num_burnin: float | None = None,
    burnin_noard: float | None = None,
    sampleevery: float | None = None,
    updateproposal: float | None = None,
    seed: str | None = None,
    noard: bool = False,
    allard: bool = False,
    nospat: bool = False,
    nonlinear: bool = False,
    cnonlinear: bool = False,
    rician: bool = False,
    add_f0: bool = False,
    ard_f0: bool = False,
    rmean: float | None = None,
    rstd: float | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
) -> XfibresParametersTagged:
    """
    Build parameters.
    
    Args:
        datafile: Data file (e.g., diffusion data).
        maskfile: Mask file defining brain voxels.
        bvecs: B vectors file.
        bvals: B values file.
        logdir: Log directory (default is logdir).
        forcedir: Use the actual directory name given - i.e., don't add + to\
            make a new directory.
        max_fibres: Maximum number of fibres to fit in each voxel (default 1).
        model: Model to use: 1=deconv. with sticks (default), 2=deconv. with\
            sticks and a range of diffusivities, 3=deconv. with zeppelins.
        fudge: ARD fudge factor.
        num_jumps: Number of jumps to be made by MCMC (default 1250).
        num_burnin: Total number of jumps at start of MCMC to be discarded\
            (default 1000).
        burnin_noard: Number of burnin jumps before ARD is imposed (default 0).
        sampleevery: Number of jumps for each sample (MCMC) (default 25).
        updateproposal: Number of jumps for each update to the proposal density\
            std (MCMC) (default 40).
        seed: Seed for pseudo-random number generator.
        noard: Turn ARD off on all fibres.
        allard: Turn ARD on all fibres.
        nospat: Initialize with tensor, not spatially.
        nonlinear: Initialize with nonlinear fitting.
        cnonlinear: Initialize with constrained nonlinear fitting.
        rician: Use Rician noise modelling.
        add_f0: Add to the model an unattenuated signal compartment.
        ard_f0: Use ARD on F0.
        rmean: Set the prior mean for R of model 3 (default: 0.13 - must be\
            <0.5).
        rstd: Set the prior standard deviation for R of model 3 (default: 0.03).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl/xfibres",
        "datafile": datafile,
        "maskfile": maskfile,
        "bvecs": bvecs,
        "bvals": bvals,
        "forcedir": forcedir,
        "noard": noard,
        "allard": allard,
        "nospat": nospat,
        "nonlinear": nonlinear,
        "cnonlinear": cnonlinear,
        "rician": rician,
        "add_f0": add_f0,
        "ard_f0": ard_f0,
        "verbose_flag": verbose_flag,
        "help_flag": help_flag,
    }
    if logdir is not None:
        params["logdir"] = logdir
    if max_fibres is not None:
        params["max_fibres"] = max_fibres
    if model is not None:
        params["model"] = model
    if fudge is not None:
        params["fudge"] = fudge
    if num_jumps is not None:
        params["num_jumps"] = num_jumps
    if num_burnin is not None:
        params["num_burnin"] = num_burnin
    if burnin_noard is not None:
        params["burnin_noard"] = burnin_noard
    if sampleevery is not None:
        params["sampleevery"] = sampleevery
    if updateproposal is not None:
        params["updateproposal"] = updateproposal
    if seed is not None:
        params["seed"] = seed
    if rmean is not None:
        params["rmean"] = rmean
    if rstd is not None:
        params["rstd"] = rstd
    return params


def xfibres_cargs(
    params: XfibresParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("xfibres")
    cargs.extend([
        "-k",
        execution.input_file(params.get("datafile", None))
    ])
    cargs.extend([
        "-m",
        execution.input_file(params.get("maskfile", None))
    ])
    cargs.extend([
        "-r",
        execution.input_file(params.get("bvecs", None))
    ])
    cargs.extend([
        "-b",
        execution.input_file(params.get("bvals", None))
    ])
    if params.get("logdir", None) is not None:
        cargs.extend([
            "--ld",
            params.get("logdir", None)
        ])
    if params.get("forcedir", False):
        cargs.append("--forcedir")
    if params.get("max_fibres", None) is not None:
        cargs.extend([
            "--nf",
            str(params.get("max_fibres", None))
        ])
    if params.get("model", None) is not None:
        cargs.extend([
            "--model",
            str(params.get("model", None))
        ])
    if params.get("fudge", None) is not None:
        cargs.extend([
            "--fudge",
            params.get("fudge", None)
        ])
    if params.get("num_jumps", None) is not None:
        cargs.extend([
            "--nj",
            str(params.get("num_jumps", None))
        ])
    if params.get("num_burnin", None) is not None:
        cargs.extend([
            "--bi",
            str(params.get("num_burnin", None))
        ])
    if params.get("burnin_noard", None) is not None:
        cargs.extend([
            "--bn",
            str(params.get("burnin_noard", None))
        ])
    if params.get("sampleevery", None) is not None:
        cargs.extend([
            "--se",
            str(params.get("sampleevery", None))
        ])
    if params.get("updateproposal", None) is not None:
        cargs.extend([
            "--upe",
            str(params.get("updateproposal", None))
        ])
    if params.get("seed", None) is not None:
        cargs.extend([
            "--seed",
            params.get("seed", None)
        ])
    if params.get("noard", False):
        cargs.append("--noard")
    if params.get("allard", False):
        cargs.append("--allard")
    if params.get("nospat", False):
        cargs.append("--nospat")
    if params.get("nonlinear", False):
        cargs.append("--nonlinear")
    if params.get("cnonlinear", False):
        cargs.append("--cnonlinear")
    if params.get("rician", False):
        cargs.append("--rician")
    if params.get("add_f0", False):
        cargs.append("--f0")
    if params.get("ard_f0", False):
        cargs.append("--ardf0")
    if params.get("rmean", None) is not None:
        cargs.extend([
            "--Rmean",
            str(params.get("rmean", None))
        ])
    if params.get("rstd", None) is not None:
        cargs.extend([
            "--Rstd",
            str(params.get("rstd", None))
        ])
    if params.get("verbose_flag", False):
        cargs.append("-V")
    if params.get("help_flag", False):
        cargs.append("-h")
    return cargs


def xfibres_outputs(
    params: XfibresParameters,
    execution: Execution,
) -> XfibresOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = XfibresOutputs(
        root=execution.output_file("."),
        output_logdir=execution.output_file("logdir"),
    )
    return ret


def xfibres_execute(
    params: XfibresParameters,
    runner: Runner | None = None,
) -> XfibresOutputs:
    """
    xfibres
    
    Part of FSL - estimates diffusion parameters for multiple fibres per voxel.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XfibresOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(XFIBRES_METADATA)
    params = execution.params(params)
    cargs = xfibres_cargs(params, execution)
    ret = xfibres_outputs(params, execution)
    execution.run(cargs)
    return ret


def xfibres(
    datafile: InputPathType,
    maskfile: InputPathType,
    bvecs: InputPathType,
    bvals: InputPathType,
    logdir: str | None = None,
    forcedir: bool = False,
    max_fibres: float | None = None,
    model: float | None = None,
    fudge: str | None = None,
    num_jumps: float | None = None,
    num_burnin: float | None = None,
    burnin_noard: float | None = None,
    sampleevery: float | None = None,
    updateproposal: float | None = None,
    seed: str | None = None,
    noard: bool = False,
    allard: bool = False,
    nospat: bool = False,
    nonlinear: bool = False,
    cnonlinear: bool = False,
    rician: bool = False,
    add_f0: bool = False,
    ard_f0: bool = False,
    rmean: float | None = None,
    rstd: float | None = None,
    verbose_flag: bool = False,
    help_flag: bool = False,
    runner: Runner | None = None,
) -> XfibresOutputs:
    """
    xfibres
    
    Part of FSL - estimates diffusion parameters for multiple fibres per voxel.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        datafile: Data file (e.g., diffusion data).
        maskfile: Mask file defining brain voxels.
        bvecs: B vectors file.
        bvals: B values file.
        logdir: Log directory (default is logdir).
        forcedir: Use the actual directory name given - i.e., don't add + to\
            make a new directory.
        max_fibres: Maximum number of fibres to fit in each voxel (default 1).
        model: Model to use: 1=deconv. with sticks (default), 2=deconv. with\
            sticks and a range of diffusivities, 3=deconv. with zeppelins.
        fudge: ARD fudge factor.
        num_jumps: Number of jumps to be made by MCMC (default 1250).
        num_burnin: Total number of jumps at start of MCMC to be discarded\
            (default 1000).
        burnin_noard: Number of burnin jumps before ARD is imposed (default 0).
        sampleevery: Number of jumps for each sample (MCMC) (default 25).
        updateproposal: Number of jumps for each update to the proposal density\
            std (MCMC) (default 40).
        seed: Seed for pseudo-random number generator.
        noard: Turn ARD off on all fibres.
        allard: Turn ARD on all fibres.
        nospat: Initialize with tensor, not spatially.
        nonlinear: Initialize with nonlinear fitting.
        cnonlinear: Initialize with constrained nonlinear fitting.
        rician: Use Rician noise modelling.
        add_f0: Add to the model an unattenuated signal compartment.
        ard_f0: Use ARD on F0.
        rmean: Set the prior mean for R of model 3 (default: 0.13 - must be\
            <0.5).
        rstd: Set the prior standard deviation for R of model 3 (default: 0.03).
        verbose_flag: Switch on diagnostic messages.
        help_flag: Display help message.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `XfibresOutputs`).
    """
    params = xfibres_params(
        datafile=datafile,
        maskfile=maskfile,
        bvecs=bvecs,
        bvals=bvals,
        logdir=logdir,
        forcedir=forcedir,
        max_fibres=max_fibres,
        model=model,
        fudge=fudge,
        num_jumps=num_jumps,
        num_burnin=num_burnin,
        burnin_noard=burnin_noard,
        sampleevery=sampleevery,
        updateproposal=updateproposal,
        seed=seed,
        noard=noard,
        allard=allard,
        nospat=nospat,
        nonlinear=nonlinear,
        cnonlinear=cnonlinear,
        rician=rician,
        add_f0=add_f0,
        ard_f0=ard_f0,
        rmean=rmean,
        rstd=rstd,
        verbose_flag=verbose_flag,
        help_flag=help_flag,
    )
    return xfibres_execute(params, runner)


__all__ = [
    "XFIBRES_METADATA",
    "XfibresOutputs",
    "xfibres",
    "xfibres_execute",
    "xfibres_params",
]
