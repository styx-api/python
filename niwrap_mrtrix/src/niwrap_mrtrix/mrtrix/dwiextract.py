# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

DWIEXTRACT_METADATA = Metadata(
    id="0021ca6ba5d653dd2d95adc256257bec0ea68206.boutiques",
    name="dwiextract",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


DwiextractFslgradParameters = typing.TypedDict('DwiextractFslgradParameters', {
    "@type": typing.NotRequired[typing.Literal["fslgrad"]],
    "bvecs": InputPathType,
    "bvals": InputPathType,
})
DwiextractFslgradParametersTagged = typing.TypedDict('DwiextractFslgradParametersTagged', {
    "@type": typing.Literal["fslgrad"],
    "bvecs": InputPathType,
    "bvals": InputPathType,
})


DwiextractExportGradFslParameters = typing.TypedDict('DwiextractExportGradFslParameters', {
    "@type": typing.NotRequired[typing.Literal["export_grad_fsl"]],
    "bvecs_path": str,
    "bvals_path": str,
})
DwiextractExportGradFslParametersTagged = typing.TypedDict('DwiextractExportGradFslParametersTagged', {
    "@type": typing.Literal["export_grad_fsl"],
    "bvecs_path": str,
    "bvals_path": str,
})


DwiextractImportPeEddyParameters = typing.TypedDict('DwiextractImportPeEddyParameters', {
    "@type": typing.NotRequired[typing.Literal["import_pe_eddy"]],
    "config": InputPathType,
    "indices": InputPathType,
})
DwiextractImportPeEddyParametersTagged = typing.TypedDict('DwiextractImportPeEddyParametersTagged', {
    "@type": typing.Literal["import_pe_eddy"],
    "config": InputPathType,
    "indices": InputPathType,
})


DwiextractVariousStringParameters = typing.TypedDict('DwiextractVariousStringParameters', {
    "@type": typing.NotRequired[typing.Literal["VariousString"]],
    "obj": str,
})
DwiextractVariousStringParametersTagged = typing.TypedDict('DwiextractVariousStringParametersTagged', {
    "@type": typing.Literal["VariousString"],
    "obj": str,
})


DwiextractVariousFileParameters = typing.TypedDict('DwiextractVariousFileParameters', {
    "@type": typing.NotRequired[typing.Literal["VariousFile"]],
    "obj": InputPathType,
})
DwiextractVariousFileParametersTagged = typing.TypedDict('DwiextractVariousFileParametersTagged', {
    "@type": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


DwiextractConfigParameters = typing.TypedDict('DwiextractConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
DwiextractConfigParametersTagged = typing.TypedDict('DwiextractConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


DwiextractParameters = typing.TypedDict('DwiextractParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/dwiextract"]],
    "bzero": bool,
    "no_bzero": bool,
    "singleshell": bool,
    "grad": typing.NotRequired[InputPathType | None],
    "fslgrad": typing.NotRequired[DwiextractFslgradParameters | None],
    "shells": typing.NotRequired[list[float] | None],
    "export_grad_mrtrix": typing.NotRequired[str | None],
    "export_grad_fsl": typing.NotRequired[DwiextractExportGradFslParameters | None],
    "import_pe_table": typing.NotRequired[InputPathType | None],
    "import_pe_eddy": typing.NotRequired[DwiextractImportPeEddyParameters | None],
    "pe": typing.NotRequired[list[float] | None],
    "strides": typing.NotRequired[typing.Union[DwiextractVariousStringParametersTagged, DwiextractVariousFileParametersTagged] | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[DwiextractConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": InputPathType,
    "output": str,
})
DwiextractParametersTagged = typing.TypedDict('DwiextractParametersTagged', {
    "@type": typing.Literal["mrtrix/dwiextract"],
    "bzero": bool,
    "no_bzero": bool,
    "singleshell": bool,
    "grad": typing.NotRequired[InputPathType | None],
    "fslgrad": typing.NotRequired[DwiextractFslgradParameters | None],
    "shells": typing.NotRequired[list[float] | None],
    "export_grad_mrtrix": typing.NotRequired[str | None],
    "export_grad_fsl": typing.NotRequired[DwiextractExportGradFslParameters | None],
    "import_pe_table": typing.NotRequired[InputPathType | None],
    "import_pe_eddy": typing.NotRequired[DwiextractImportPeEddyParameters | None],
    "pe": typing.NotRequired[list[float] | None],
    "strides": typing.NotRequired[typing.Union[DwiextractVariousStringParametersTagged, DwiextractVariousFileParametersTagged] | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[DwiextractConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": InputPathType,
    "output": str,
})


def dwiextract_strides_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "VariousString": dwiextract_various_string_cargs,
        "VariousFile": dwiextract_various_file_cargs,
    }.get(t)


def dwiextract_strides_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def dwiextract_fslgrad_params(
    bvecs: InputPathType,
    bvals: InputPathType,
) -> DwiextractFslgradParametersTagged:
    """
    Build parameters.
    
    Args:
        bvecs: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        bvals: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fslgrad",
        "bvecs": bvecs,
        "bvals": bvals,
    }
    return params


def dwiextract_fslgrad_cargs(
    params: DwiextractFslgradParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-fslgrad")
    cargs.append(execution.input_file(params.get("bvecs", None)))
    cargs.append(execution.input_file(params.get("bvals", None)))
    return cargs


class DwiextractExportGradFslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DwiextractExportGradFslParameters | None(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    bvecs_path: OutputPathType
    """export the diffusion-weighted gradient table to files in FSL (bvecs /
    bvals) format"""
    bvals_path: OutputPathType
    """export the diffusion-weighted gradient table to files in FSL (bvecs /
    bvals) format"""


def dwiextract_export_grad_fsl_params(
    bvecs_path: str,
    bvals_path: str,
) -> DwiextractExportGradFslParametersTagged:
    """
    Build parameters.
    
    Args:
        bvecs_path: export the diffusion-weighted gradient table to files in\
            FSL (bvecs / bvals) format.
        bvals_path: export the diffusion-weighted gradient table to files in\
            FSL (bvecs / bvals) format.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "export_grad_fsl",
        "bvecs_path": bvecs_path,
        "bvals_path": bvals_path,
    }
    return params


def dwiextract_export_grad_fsl_cargs(
    params: DwiextractExportGradFslParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-export_grad_fsl")
    cargs.append(params.get("bvecs_path", None))
    cargs.append(params.get("bvals_path", None))
    return cargs


def dwiextract_export_grad_fsl_outputs(
    params: DwiextractExportGradFslParameters,
    execution: Execution,
) -> DwiextractExportGradFslOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DwiextractExportGradFslOutputs(
        root=execution.output_file("."),
        bvecs_path=execution.output_file(params.get("bvecs_path", None)),
        bvals_path=execution.output_file(params.get("bvals_path", None)),
    )
    return ret


def dwiextract_import_pe_eddy_params(
    config: InputPathType,
    indices: InputPathType,
) -> DwiextractImportPeEddyParametersTagged:
    """
    Build parameters.
    
    Args:
        config: import phase-encoding information from an EDDY-style config /\
            index file pair.
        indices: import phase-encoding information from an EDDY-style config /\
            index file pair.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "import_pe_eddy",
        "config": config,
        "indices": indices,
    }
    return params


def dwiextract_import_pe_eddy_cargs(
    params: DwiextractImportPeEddyParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-import_pe_eddy")
    cargs.append(execution.input_file(params.get("config", None)))
    cargs.append(execution.input_file(params.get("indices", None)))
    return cargs


def dwiextract_various_string_params(
    obj: str,
) -> DwiextractVariousStringParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousString",
        "obj": obj,
    }
    return params


def dwiextract_various_string_cargs(
    params: DwiextractVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj", None))
    return cargs


def dwiextract_various_file_params(
    obj: InputPathType,
) -> DwiextractVariousFileParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousFile",
        "obj": obj,
    }
    return params


def dwiextract_various_file_cargs(
    params: DwiextractVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj", None)))
    return cargs


def dwiextract_config_params(
    key: str,
    value: str,
) -> DwiextractConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def dwiextract_config_cargs(
    params: DwiextractConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class DwiextractOutputs(typing.NamedTuple):
    """
    Output object returned when calling `DwiextractParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output image (diffusion-weighted volumes by default)."""
    export_grad_mrtrix: OutputPathType | None
    """export the diffusion-weighted gradient table to file in MRtrix format """
    export_grad_fsl: DwiextractExportGradFslOutputs | None
    """Outputs from `dwiextract_export_grad_fsl_outputs`."""


def dwiextract_params(
    input_: InputPathType,
    output: str,
    bzero: bool = False,
    no_bzero: bool = False,
    singleshell: bool = False,
    grad: InputPathType | None = None,
    fslgrad: DwiextractFslgradParameters | None = None,
    shells: list[float] | None = None,
    export_grad_mrtrix: str | None = None,
    export_grad_fsl: DwiextractExportGradFslParameters | None = None,
    import_pe_table: InputPathType | None = None,
    import_pe_eddy: DwiextractImportPeEddyParameters | None = None,
    pe: list[float] | None = None,
    strides: typing.Union[DwiextractVariousStringParametersTagged, DwiextractVariousFileParametersTagged] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[DwiextractConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> DwiextractParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: the input DW image.
        output: the output image (diffusion-weighted volumes by default).
        bzero: Output b=0 volumes (instead of the diffusion weighted volumes,\
            if -singleshell is not specified).
        no_bzero: Output only non b=0 volumes (default, if -singleshell is not\
            specified).
        singleshell: Force a single-shell (single non b=0 shell) output. This\
            will include b=0 volumes, if present. Use with -bzero to enforce\
            presence of b=0 volumes (error if not present) or with -no_bzero to\
            exclude them.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        shells: specify one or more b-values to use during processing, as a\
            comma-separated list of the desired approximate b-values (b-values are\
            clustered to allow for small deviations). Note that some commands are\
            incompatible with multiple b-values, and will report an error if more\
            than one b-value is provided.\
            WARNING: note that, even though the b=0 volumes are never referred\
            to as shells in the literature, they still have to be explicitly\
            included in the list of b-values as provided to the -shell option!\
            Several algorithms which include the b=0 volumes in their\
            computations may otherwise return an undesired result.
        export_grad_mrtrix: export the diffusion-weighted gradient table to\
            file in MRtrix format.
        export_grad_fsl: export the diffusion-weighted gradient table to files\
            in FSL (bvecs / bvals) format.
        import_pe_table: import a phase-encoding table from file.
        import_pe_eddy: import phase-encoding information from an EDDY-style\
            config / index file pair.
        pe: select volumes with a particular phase encoding; this can be three\
            comma-separated values (for i,j,k components of vector direction) or\
            four (direction & total readout time).
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/dwiextract",
        "bzero": bzero,
        "no_bzero": no_bzero,
        "singleshell": singleshell,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "input": input_,
        "output": output,
    }
    if grad is not None:
        params["grad"] = grad
    if fslgrad is not None:
        params["fslgrad"] = fslgrad
    if shells is not None:
        params["shells"] = shells
    if export_grad_mrtrix is not None:
        params["export_grad_mrtrix"] = export_grad_mrtrix
    if export_grad_fsl is not None:
        params["export_grad_fsl"] = export_grad_fsl
    if import_pe_table is not None:
        params["import_pe_table"] = import_pe_table
    if import_pe_eddy is not None:
        params["import_pe_eddy"] = import_pe_eddy
    if pe is not None:
        params["pe"] = pe
    if strides is not None:
        params["strides"] = strides
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def dwiextract_cargs(
    params: DwiextractParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("dwiextract")
    if params.get("bzero", False):
        cargs.append("-bzero")
    if params.get("no_bzero", False):
        cargs.append("-no_bzero")
    if params.get("singleshell", False):
        cargs.append("-singleshell")
    if params.get("grad", None) is not None:
        cargs.extend([
            "-grad",
            execution.input_file(params.get("grad", None))
        ])
    if params.get("fslgrad", None) is not None:
        cargs.extend(dwiextract_fslgrad_cargs(params.get("fslgrad", None), execution))
    if params.get("shells", None) is not None:
        cargs.extend([
            "-shells",
            ",".join(map(str, params.get("shells", None)))
        ])
    if params.get("export_grad_mrtrix", None) is not None:
        cargs.extend([
            "-export_grad_mrtrix",
            params.get("export_grad_mrtrix", None)
        ])
    if params.get("export_grad_fsl", None) is not None:
        cargs.extend(dwiextract_export_grad_fsl_cargs(params.get("export_grad_fsl", None), execution))
    if params.get("import_pe_table", None) is not None:
        cargs.extend([
            "-import_pe_table",
            execution.input_file(params.get("import_pe_table", None))
        ])
    if params.get("import_pe_eddy", None) is not None:
        cargs.extend(dwiextract_import_pe_eddy_cargs(params.get("import_pe_eddy", None), execution))
    if params.get("pe", None) is not None:
        cargs.extend([
            "-pe",
            ",".join(map(str, params.get("pe", None)))
        ])
    if params.get("strides", None) is not None:
        cargs.extend([
            "-strides",
            *dwiextract_strides_cargs_dyn_fn(params.get("strides", None)["@type"])(params.get("strides", None), execution)
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [dwiextract_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    return cargs


def dwiextract_outputs(
    params: DwiextractParameters,
    execution: Execution,
) -> DwiextractOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = DwiextractOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
        export_grad_mrtrix=execution.output_file(params.get("export_grad_mrtrix", None)) if (params.get("export_grad_mrtrix") is not None) else None,
        export_grad_fsl=dwiextract_export_grad_fsl_outputs(params.get("export_grad_fsl"), execution) if params.get("export_grad_fsl") else None,
    )
    return ret


def dwiextract_execute(
    params: DwiextractParameters,
    runner: Runner | None = None,
) -> DwiextractOutputs:
    """
    dwiextract
    
    Extract diffusion-weighted volumes, b=0 volumes, or certain shells from a
    DWI dataset.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DwiextractOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(DWIEXTRACT_METADATA)
    params = execution.params(params)
    cargs = dwiextract_cargs(params, execution)
    ret = dwiextract_outputs(params, execution)
    execution.run(cargs)
    return ret


def dwiextract(
    input_: InputPathType,
    output: str,
    bzero: bool = False,
    no_bzero: bool = False,
    singleshell: bool = False,
    grad: InputPathType | None = None,
    fslgrad: DwiextractFslgradParameters | None = None,
    shells: list[float] | None = None,
    export_grad_mrtrix: str | None = None,
    export_grad_fsl: DwiextractExportGradFslParameters | None = None,
    import_pe_table: InputPathType | None = None,
    import_pe_eddy: DwiextractImportPeEddyParameters | None = None,
    pe: list[float] | None = None,
    strides: typing.Union[DwiextractVariousStringParametersTagged, DwiextractVariousFileParametersTagged] | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[DwiextractConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> DwiextractOutputs:
    """
    dwiextract
    
    Extract diffusion-weighted volumes, b=0 volumes, or certain shells from a
    DWI dataset.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        input_: the input DW image.
        output: the output image (diffusion-weighted volumes by default).
        bzero: Output b=0 volumes (instead of the diffusion weighted volumes,\
            if -singleshell is not specified).
        no_bzero: Output only non b=0 volumes (default, if -singleshell is not\
            specified).
        singleshell: Force a single-shell (single non b=0 shell) output. This\
            will include b=0 volumes, if present. Use with -bzero to enforce\
            presence of b=0 volumes (error if not present) or with -no_bzero to\
            exclude them.
        grad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in a text file. This should be supplied as a 4xN text file\
            with each line is in the format [ X Y Z b ], where [ X Y Z ] describe\
            the direction of the applied gradient, and b gives the b-value in units\
            of s/mm^2. If a diffusion gradient scheme is present in the input image\
            header, the data provided with this option will be instead used.
        fslgrad: Provide the diffusion-weighted gradient scheme used in the\
            acquisition in FSL bvecs/bvals format files. If a diffusion gradient\
            scheme is present in the input image header, the data provided with\
            this option will be instead used.
        shells: specify one or more b-values to use during processing, as a\
            comma-separated list of the desired approximate b-values (b-values are\
            clustered to allow for small deviations). Note that some commands are\
            incompatible with multiple b-values, and will report an error if more\
            than one b-value is provided.\
            WARNING: note that, even though the b=0 volumes are never referred\
            to as shells in the literature, they still have to be explicitly\
            included in the list of b-values as provided to the -shell option!\
            Several algorithms which include the b=0 volumes in their\
            computations may otherwise return an undesired result.
        export_grad_mrtrix: export the diffusion-weighted gradient table to\
            file in MRtrix format.
        export_grad_fsl: export the diffusion-weighted gradient table to files\
            in FSL (bvecs / bvals) format.
        import_pe_table: import a phase-encoding table from file.
        import_pe_eddy: import phase-encoding information from an EDDY-style\
            config / index file pair.
        pe: select volumes with a particular phase encoding; this can be three\
            comma-separated values (for i,j,k components of vector direction) or\
            four (direction & total readout time).
        strides: specify the strides of the output data in memory; either as a\
            comma-separated list of (signed) integers, or as a template image from\
            which the strides shall be extracted and used. The actual strides\
            produced will depend on whether the output image format can support it.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `DwiextractOutputs`).
    """
    params = dwiextract_params(
        bzero=bzero,
        no_bzero=no_bzero,
        singleshell=singleshell,
        grad=grad,
        fslgrad=fslgrad,
        shells=shells,
        export_grad_mrtrix=export_grad_mrtrix,
        export_grad_fsl=export_grad_fsl,
        import_pe_table=import_pe_table,
        import_pe_eddy=import_pe_eddy,
        pe=pe,
        strides=strides,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        input_=input_,
        output=output,
    )
    return dwiextract_execute(params, runner)


__all__ = [
    "DWIEXTRACT_METADATA",
    "DwiextractExportGradFslOutputs",
    "DwiextractOutputs",
    "dwiextract",
    "dwiextract_config_params",
    "dwiextract_execute",
    "dwiextract_export_grad_fsl_params",
    "dwiextract_fslgrad_params",
    "dwiextract_import_pe_eddy_params",
    "dwiextract_params",
    "dwiextract_various_file_params",
    "dwiextract_various_string_params",
]
