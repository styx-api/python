# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FIXELFILTER_METADATA = Metadata(
    id="b5e8a361d7de5f948949260328ab5131eb18a9b7.boutiques",
    name="fixelfilter",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


FixelfilterConfigParameters = typing.TypedDict('FixelfilterConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
FixelfilterConfigParametersTagged = typing.TypedDict('FixelfilterConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


FixelfilterVariousStringParameters = typing.TypedDict('FixelfilterVariousStringParameters', {
    "@type": typing.NotRequired[typing.Literal["VariousString"]],
    "obj": str,
})
FixelfilterVariousStringParametersTagged = typing.TypedDict('FixelfilterVariousStringParametersTagged', {
    "@type": typing.Literal["VariousString"],
    "obj": str,
})


FixelfilterVariousFileParameters = typing.TypedDict('FixelfilterVariousFileParameters', {
    "@type": typing.NotRequired[typing.Literal["VariousFile"]],
    "obj": InputPathType,
})
FixelfilterVariousFileParametersTagged = typing.TypedDict('FixelfilterVariousFileParametersTagged', {
    "@type": typing.Literal["VariousFile"],
    "obj": InputPathType,
})


FixelfilterVariousString1Parameters = typing.TypedDict('FixelfilterVariousString1Parameters', {
    "@type": typing.NotRequired[typing.Literal["VariousString_1"]],
    "obj": str,
})
FixelfilterVariousString1ParametersTagged = typing.TypedDict('FixelfilterVariousString1ParametersTagged', {
    "@type": typing.Literal["VariousString_1"],
    "obj": str,
})


FixelfilterVariousFile1Parameters = typing.TypedDict('FixelfilterVariousFile1Parameters', {
    "@type": typing.NotRequired[typing.Literal["VariousFile_1"]],
    "obj": InputPathType,
})
FixelfilterVariousFile1ParametersTagged = typing.TypedDict('FixelfilterVariousFile1ParametersTagged', {
    "@type": typing.Literal["VariousFile_1"],
    "obj": InputPathType,
})


FixelfilterParameters = typing.TypedDict('FixelfilterParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/fixelfilter"]],
    "matrix": InputPathType,
    "threshold_value": typing.NotRequired[float | None],
    "threshold_connectivity": typing.NotRequired[float | None],
    "fwhm": typing.NotRequired[float | None],
    "minweight": typing.NotRequired[float | None],
    "mask": typing.NotRequired[InputPathType | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[FixelfilterConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": typing.Union[FixelfilterVariousStringParametersTagged, FixelfilterVariousFileParametersTagged],
    "filter": str,
    "output": typing.Union[FixelfilterVariousString1ParametersTagged, FixelfilterVariousFile1ParametersTagged],
})
FixelfilterParametersTagged = typing.TypedDict('FixelfilterParametersTagged', {
    "@type": typing.Literal["mrtrix/fixelfilter"],
    "matrix": InputPathType,
    "threshold_value": typing.NotRequired[float | None],
    "threshold_connectivity": typing.NotRequired[float | None],
    "fwhm": typing.NotRequired[float | None],
    "minweight": typing.NotRequired[float | None],
    "mask": typing.NotRequired[InputPathType | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[FixelfilterConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": typing.Union[FixelfilterVariousStringParametersTagged, FixelfilterVariousFileParametersTagged],
    "filter": str,
    "output": typing.Union[FixelfilterVariousString1ParametersTagged, FixelfilterVariousFile1ParametersTagged],
})


def fixelfilter_input_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "VariousString": fixelfilter_various_string_cargs,
        "VariousFile": fixelfilter_various_file_cargs,
    }.get(t)


def fixelfilter_input_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def fixelfilter_output_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "VariousString_1": fixelfilter_various_string_1_cargs,
        "VariousFile_1": fixelfilter_various_file_1_cargs,
    }.get(t)


def fixelfilter_output_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
    }.get(t)


def fixelfilter_config_params(
    key: str,
    value: str,
) -> FixelfilterConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def fixelfilter_config_cargs(
    params: FixelfilterConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


def fixelfilter_various_string_params(
    obj: str,
) -> FixelfilterVariousStringParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousString",
        "obj": obj,
    }
    return params


def fixelfilter_various_string_cargs(
    params: FixelfilterVariousStringParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj", None))
    return cargs


def fixelfilter_various_file_params(
    obj: InputPathType,
) -> FixelfilterVariousFileParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousFile",
        "obj": obj,
    }
    return params


def fixelfilter_various_file_cargs(
    params: FixelfilterVariousFileParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj", None)))
    return cargs


def fixelfilter_various_string_1_params(
    obj: str,
) -> FixelfilterVariousString1ParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: String object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousString_1",
        "obj": obj,
    }
    return params


def fixelfilter_various_string_1_cargs(
    params: FixelfilterVariousString1Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(params.get("obj", None))
    return cargs


def fixelfilter_various_file_1_params(
    obj: InputPathType,
) -> FixelfilterVariousFile1ParametersTagged:
    """
    Build parameters.
    
    Args:
        obj: File object.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "VariousFile_1",
        "obj": obj,
    }
    return params


def fixelfilter_various_file_1_cargs(
    params: FixelfilterVariousFile1Parameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append(execution.input_file(params.get("obj", None)))
    return cargs


class FixelfilterOutputs(typing.NamedTuple):
    """
    Output object returned when calling `FixelfilterParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def fixelfilter_params(
    matrix: InputPathType,
    input_: typing.Union[FixelfilterVariousStringParametersTagged, FixelfilterVariousFileParametersTagged],
    filter_: str,
    output: typing.Union[FixelfilterVariousString1ParametersTagged, FixelfilterVariousFile1ParametersTagged],
    threshold_value: float | None = None,
    threshold_connectivity: float | None = None,
    fwhm: float | None = None,
    minweight: float | None = None,
    mask: InputPathType | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[FixelfilterConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> FixelfilterParametersTagged:
    """
    Build parameters.
    
    Args:
        matrix: provide a fixel-fixel connectivity matrix for filtering\
            operations that require it.
        input_: the input: either a fixel data file, or a fixel directory (see\
            Description).
        filter_: the filtering operation to perform; options are: connect,\
            smooth.
        output: the output: either a fixel data file, or a fixel directory (see\
            Description).
        threshold_value: specify a threshold for the input fixel data file\
            values (default = 0.5).
        threshold_connectivity: specify a fixel-fixel connectivity threshold\
            for connected-component analysis (default = 0.10000000000000001).
        fwhm: the full-width half-maximum (FWHM) of the spatial component of\
            the smoothing filter (default = 10mm).
        minweight: apply a minimum threshold to smoothing weights (default =\
            0.01).
        mask: only perform smoothing within a specified binary fixel mask.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/fixelfilter",
        "matrix": matrix,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "input": input_,
        "filter": filter_,
        "output": output,
    }
    if threshold_value is not None:
        params["threshold_value"] = threshold_value
    if threshold_connectivity is not None:
        params["threshold_connectivity"] = threshold_connectivity
    if fwhm is not None:
        params["fwhm"] = fwhm
    if minweight is not None:
        params["minweight"] = minweight
    if mask is not None:
        params["mask"] = mask
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def fixelfilter_cargs(
    params: FixelfilterParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fixelfilter")
    cargs.extend([
        "-matrix",
        execution.input_file(params.get("matrix", None))
    ])
    if params.get("threshold_value", None) is not None:
        cargs.extend([
            "-threshold_value",
            str(params.get("threshold_value", None))
        ])
    if params.get("threshold_connectivity", None) is not None:
        cargs.extend([
            "-threshold_connectivity",
            str(params.get("threshold_connectivity", None))
        ])
    if params.get("fwhm", None) is not None:
        cargs.extend([
            "-fwhm",
            str(params.get("fwhm", None))
        ])
    if params.get("minweight", None) is not None:
        cargs.extend([
            "-minweight",
            str(params.get("minweight", None))
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-mask",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [fixelfilter_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.extend(fixelfilter_input_cargs_dyn_fn(params.get("input", None)["@type"])(params.get("input", None), execution))
    cargs.append(params.get("filter", None))
    cargs.extend(fixelfilter_output_cargs_dyn_fn(params.get("output", None)["@type"])(params.get("output", None), execution))
    return cargs


def fixelfilter_outputs(
    params: FixelfilterParameters,
    execution: Execution,
) -> FixelfilterOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = FixelfilterOutputs(
        root=execution.output_file("."),
    )
    return ret


def fixelfilter_execute(
    params: FixelfilterParameters,
    runner: Runner | None = None,
) -> FixelfilterOutputs:
    """
    fixelfilter
    
    Perform filtering operations on fixel-based data.
    
    If the first input to the command is a specific fixel data file, then a
    filtered version of only that file will be generated by the command.
    Alternatively, if the input is the location of a fixel directory, then the
    command will create a duplicate of the fixel directory, and apply the
    specified filter operation to all fixel data files within the directory.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FixelfilterOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FIXELFILTER_METADATA)
    params = execution.params(params)
    cargs = fixelfilter_cargs(params, execution)
    ret = fixelfilter_outputs(params, execution)
    execution.run(cargs)
    return ret


def fixelfilter(
    matrix: InputPathType,
    input_: typing.Union[FixelfilterVariousStringParametersTagged, FixelfilterVariousFileParametersTagged],
    filter_: str,
    output: typing.Union[FixelfilterVariousString1ParametersTagged, FixelfilterVariousFile1ParametersTagged],
    threshold_value: float | None = None,
    threshold_connectivity: float | None = None,
    fwhm: float | None = None,
    minweight: float | None = None,
    mask: InputPathType | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[FixelfilterConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> FixelfilterOutputs:
    """
    fixelfilter
    
    Perform filtering operations on fixel-based data.
    
    If the first input to the command is a specific fixel data file, then a
    filtered version of only that file will be generated by the command.
    Alternatively, if the input is the location of a fixel directory, then the
    command will create a duplicate of the fixel directory, and apply the
    specified filter operation to all fixel data files within the directory.
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        matrix: provide a fixel-fixel connectivity matrix for filtering\
            operations that require it.
        input_: the input: either a fixel data file, or a fixel directory (see\
            Description).
        filter_: the filtering operation to perform; options are: connect,\
            smooth.
        output: the output: either a fixel data file, or a fixel directory (see\
            Description).
        threshold_value: specify a threshold for the input fixel data file\
            values (default = 0.5).
        threshold_connectivity: specify a fixel-fixel connectivity threshold\
            for connected-component analysis (default = 0.10000000000000001).
        fwhm: the full-width half-maximum (FWHM) of the spatial component of\
            the smoothing filter (default = 10mm).
        minweight: apply a minimum threshold to smoothing weights (default =\
            0.01).
        mask: only perform smoothing within a specified binary fixel mask.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FixelfilterOutputs`).
    """
    params = fixelfilter_params(
        matrix=matrix,
        threshold_value=threshold_value,
        threshold_connectivity=threshold_connectivity,
        fwhm=fwhm,
        minweight=minweight,
        mask=mask,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        input_=input_,
        filter_=filter_,
        output=output,
    )
    return fixelfilter_execute(params, runner)


__all__ = [
    "FIXELFILTER_METADATA",
    "FixelfilterOutputs",
    "fixelfilter",
    "fixelfilter_config_params",
    "fixelfilter_execute",
    "fixelfilter_params",
    "fixelfilter_various_file_1_params",
    "fixelfilter_various_file_params",
    "fixelfilter_various_string_1_params",
    "fixelfilter_various_string_params",
]
