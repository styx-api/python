# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

FOD2FIXEL_METADATA = Metadata(
    id="789d8f209b3fdf4c5f81cd43bcf2cd1ab6e4addc.boutiques",
    name="fod2fixel",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


Fod2fixelConfigParameters = typing.TypedDict('Fod2fixelConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
Fod2fixelConfigParametersTagged = typing.TypedDict('Fod2fixelConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


Fod2fixelParameters = typing.TypedDict('Fod2fixelParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/fod2fixel"]],
    "afd": typing.NotRequired[str | None],
    "peak_amp": typing.NotRequired[str | None],
    "disp": typing.NotRequired[str | None],
    "fmls_integral": typing.NotRequired[float | None],
    "fmls_peak_value": typing.NotRequired[float | None],
    "fmls_no_thresholds": bool,
    "fmls_lobe_merge_ratio": typing.NotRequired[float | None],
    "mask": typing.NotRequired[InputPathType | None],
    "maxnum": typing.NotRequired[int | None],
    "nii": bool,
    "dirpeak": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Fod2fixelConfigParameters] | None],
    "help": bool,
    "version": bool,
    "fod": InputPathType,
    "fixel_directory": str,
})
Fod2fixelParametersTagged = typing.TypedDict('Fod2fixelParametersTagged', {
    "@type": typing.Literal["mrtrix/fod2fixel"],
    "afd": typing.NotRequired[str | None],
    "peak_amp": typing.NotRequired[str | None],
    "disp": typing.NotRequired[str | None],
    "fmls_integral": typing.NotRequired[float | None],
    "fmls_peak_value": typing.NotRequired[float | None],
    "fmls_no_thresholds": bool,
    "fmls_lobe_merge_ratio": typing.NotRequired[float | None],
    "mask": typing.NotRequired[InputPathType | None],
    "maxnum": typing.NotRequired[int | None],
    "nii": bool,
    "dirpeak": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Fod2fixelConfigParameters] | None],
    "help": bool,
    "version": bool,
    "fod": InputPathType,
    "fixel_directory": str,
})


def fod2fixel_config_params(
    key: str,
    value: str,
) -> Fod2fixelConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def fod2fixel_config_cargs(
    params: Fod2fixelConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class Fod2fixelOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Fod2fixelParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    fixel_directory: OutputPathType
    """the output fixel directory"""
    afd: OutputPathType | None
    """output the total Apparent Fibre Density per fixel (integral of FOD lobe)
    """
    peak_amp: OutputPathType | None
    """output the amplitude of the FOD at the maximal peak per fixel """
    disp: OutputPathType | None
    """output a measure of dispersion per fixel as the ratio between FOD lobe
    integral and maximal peak amplitude """


def fod2fixel_params(
    fod: InputPathType,
    fixel_directory: str,
    afd: str | None = None,
    peak_amp: str | None = None,
    disp: str | None = None,
    fmls_integral: float | None = None,
    fmls_peak_value: float | None = None,
    fmls_no_thresholds: bool = False,
    fmls_lobe_merge_ratio: float | None = None,
    mask: InputPathType | None = None,
    maxnum: int | None = None,
    nii: bool = False,
    dirpeak: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Fod2fixelConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> Fod2fixelParametersTagged:
    """
    Build parameters.
    
    Args:
        fod: the input fod image.
        fixel_directory: the output fixel directory.
        afd: output the total Apparent Fibre Density per fixel (integral of FOD\
            lobe).
        peak_amp: output the amplitude of the FOD at the maximal peak per fixel.
        disp: output a measure of dispersion per fixel as the ratio between FOD\
            lobe integral and maximal peak amplitude.
        fmls_integral: threshold absolute numerical integral of positive FOD\
            lobes. Any lobe for which the integral is smaller than this threshold\
            will be discarded. Default: 0.
        fmls_peak_value: threshold peak amplitude of positive FOD lobes. Any\
            lobe for which the maximal peak amplitude is smaller than this\
            threshold will be discarded. Default: 0.1.
        fmls_no_thresholds: disable all FOD lobe thresholding; every lobe where\
            the FOD is positive will be retained.
        fmls_lobe_merge_ratio: Specify the ratio between a given FOD amplitude\
            sample between two lobes, and the smallest peak amplitude of the\
            adjacent lobes, above which those lobes will be merged. This is the\
            amplitude of the FOD at the 'bridge' point between the two lobes,\
            divided by the peak amplitude of the smaller of the two adjoining\
            lobes. A value of 1.0 will never merge two lobes into one; a value of\
            0.0 will always merge lobes unless they are bisected by a zero-valued\
            crossing. Default: 1.
        mask: only perform computation within the specified binary brain mask\
            image.
        maxnum: maximum number of fixels to output for any particular voxel\
            (default: no limit).
        nii: output the directions and index file in nii format (instead of the\
            default mif).
        dirpeak: define the fixel direction as that of the lobe's maximal peak\
            as opposed to its weighted mean direction (the default).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/fod2fixel",
        "fmls_no_thresholds": fmls_no_thresholds,
        "nii": nii,
        "dirpeak": dirpeak,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "fod": fod,
        "fixel_directory": fixel_directory,
    }
    if afd is not None:
        params["afd"] = afd
    if peak_amp is not None:
        params["peak_amp"] = peak_amp
    if disp is not None:
        params["disp"] = disp
    if fmls_integral is not None:
        params["fmls_integral"] = fmls_integral
    if fmls_peak_value is not None:
        params["fmls_peak_value"] = fmls_peak_value
    if fmls_lobe_merge_ratio is not None:
        params["fmls_lobe_merge_ratio"] = fmls_lobe_merge_ratio
    if mask is not None:
        params["mask"] = mask
    if maxnum is not None:
        params["maxnum"] = maxnum
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def fod2fixel_cargs(
    params: Fod2fixelParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fod2fixel")
    if params.get("afd", None) is not None:
        cargs.extend([
            "-afd",
            params.get("afd", None)
        ])
    if params.get("peak_amp", None) is not None:
        cargs.extend([
            "-peak_amp",
            params.get("peak_amp", None)
        ])
    if params.get("disp", None) is not None:
        cargs.extend([
            "-disp",
            params.get("disp", None)
        ])
    if params.get("fmls_integral", None) is not None:
        cargs.extend([
            "-fmls_integral",
            str(params.get("fmls_integral", None))
        ])
    if params.get("fmls_peak_value", None) is not None:
        cargs.extend([
            "-fmls_peak_value",
            str(params.get("fmls_peak_value", None))
        ])
    if params.get("fmls_no_thresholds", False):
        cargs.append("-fmls_no_thresholds")
    if params.get("fmls_lobe_merge_ratio", None) is not None:
        cargs.extend([
            "-fmls_lobe_merge_ratio",
            str(params.get("fmls_lobe_merge_ratio", None))
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-mask",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("maxnum", None) is not None:
        cargs.extend([
            "-maxnum",
            str(params.get("maxnum", None))
        ])
    if params.get("nii", False):
        cargs.append("-nii")
    if params.get("dirpeak", False):
        cargs.append("-dirpeak")
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [fod2fixel_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("fod", None)))
    cargs.append(params.get("fixel_directory", None))
    return cargs


def fod2fixel_outputs(
    params: Fod2fixelParameters,
    execution: Execution,
) -> Fod2fixelOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Fod2fixelOutputs(
        root=execution.output_file("."),
        fixel_directory=execution.output_file(params.get("fixel_directory", None)),
        afd=execution.output_file(params.get("afd", None)) if (params.get("afd") is not None) else None,
        peak_amp=execution.output_file(params.get("peak_amp", None)) if (params.get("peak_amp") is not None) else None,
        disp=execution.output_file(params.get("disp", None)) if (params.get("disp") is not None) else None,
    )
    return ret


def fod2fixel_execute(
    params: Fod2fixelParameters,
    runner: Runner | None = None,
) -> Fod2fixelOutputs:
    """
    fod2fixel
    
    Perform segmentation of continuous Fibre Orientation Distributions (FODs) to
    produce discrete fixels.
    
    
    
    References:
    
    * Reference for the FOD segmentation method:
    Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT:
    Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013,
    67, 298-312 (Appendix 2)
    
    * Reference for Apparent Fibre Density (AFD):
    Raffelt, D.; Tournier, J.-D.; Rose, S.; Ridgway, G.R.; Henderson, R.;
    Crozier, S.; Salvado, O.; Connelly, A. Apparent Fibre Density: a novel
    measure for the analysis of diffusion-weighted magnetic resonance
    images.Neuroimage, 2012, 15;59(4), 3976-94.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fod2fixelOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FOD2FIXEL_METADATA)
    params = execution.params(params)
    cargs = fod2fixel_cargs(params, execution)
    ret = fod2fixel_outputs(params, execution)
    execution.run(cargs)
    return ret


def fod2fixel(
    fod: InputPathType,
    fixel_directory: str,
    afd: str | None = None,
    peak_amp: str | None = None,
    disp: str | None = None,
    fmls_integral: float | None = None,
    fmls_peak_value: float | None = None,
    fmls_no_thresholds: bool = False,
    fmls_lobe_merge_ratio: float | None = None,
    mask: InputPathType | None = None,
    maxnum: int | None = None,
    nii: bool = False,
    dirpeak: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Fod2fixelConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> Fod2fixelOutputs:
    """
    fod2fixel
    
    Perform segmentation of continuous Fibre Orientation Distributions (FODs) to
    produce discrete fixels.
    
    
    
    References:
    
    * Reference for the FOD segmentation method:
    Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT:
    Spherical-deconvolution informed filtering of tractograms. NeuroImage, 2013,
    67, 298-312 (Appendix 2)
    
    * Reference for Apparent Fibre Density (AFD):
    Raffelt, D.; Tournier, J.-D.; Rose, S.; Ridgway, G.R.; Henderson, R.;
    Crozier, S.; Salvado, O.; Connelly, A. Apparent Fibre Density: a novel
    measure for the analysis of diffusion-weighted magnetic resonance
    images.Neuroimage, 2012, 15;59(4), 3976-94.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        fod: the input fod image.
        fixel_directory: the output fixel directory.
        afd: output the total Apparent Fibre Density per fixel (integral of FOD\
            lobe).
        peak_amp: output the amplitude of the FOD at the maximal peak per fixel.
        disp: output a measure of dispersion per fixel as the ratio between FOD\
            lobe integral and maximal peak amplitude.
        fmls_integral: threshold absolute numerical integral of positive FOD\
            lobes. Any lobe for which the integral is smaller than this threshold\
            will be discarded. Default: 0.
        fmls_peak_value: threshold peak amplitude of positive FOD lobes. Any\
            lobe for which the maximal peak amplitude is smaller than this\
            threshold will be discarded. Default: 0.1.
        fmls_no_thresholds: disable all FOD lobe thresholding; every lobe where\
            the FOD is positive will be retained.
        fmls_lobe_merge_ratio: Specify the ratio between a given FOD amplitude\
            sample between two lobes, and the smallest peak amplitude of the\
            adjacent lobes, above which those lobes will be merged. This is the\
            amplitude of the FOD at the 'bridge' point between the two lobes,\
            divided by the peak amplitude of the smaller of the two adjoining\
            lobes. A value of 1.0 will never merge two lobes into one; a value of\
            0.0 will always merge lobes unless they are bisected by a zero-valued\
            crossing. Default: 1.
        mask: only perform computation within the specified binary brain mask\
            image.
        maxnum: maximum number of fixels to output for any particular voxel\
            (default: no limit).
        nii: output the directions and index file in nii format (instead of the\
            default mif).
        dirpeak: define the fixel direction as that of the lobe's maximal peak\
            as opposed to its weighted mean direction (the default).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fod2fixelOutputs`).
    """
    params = fod2fixel_params(
        afd=afd,
        peak_amp=peak_amp,
        disp=disp,
        fmls_integral=fmls_integral,
        fmls_peak_value=fmls_peak_value,
        fmls_no_thresholds=fmls_no_thresholds,
        fmls_lobe_merge_ratio=fmls_lobe_merge_ratio,
        mask=mask,
        maxnum=maxnum,
        nii=nii,
        dirpeak=dirpeak,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        fod=fod,
        fixel_directory=fixel_directory,
    )
    return fod2fixel_execute(params, runner)


__all__ = [
    "FOD2FIXEL_METADATA",
    "Fod2fixelOutputs",
    "fod2fixel",
    "fod2fixel_config_params",
    "fod2fixel_execute",
    "fod2fixel_params",
]
