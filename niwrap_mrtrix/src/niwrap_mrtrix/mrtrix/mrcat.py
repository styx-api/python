# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRCAT_METADATA = Metadata(
    id="18ee3a555dc21091bd71575f0cabc1362de4ece7.boutiques",
    name="mrcat",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


MrcatConfigParameters = typing.TypedDict('MrcatConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
MrcatConfigParametersTagged = typing.TypedDict('MrcatConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


MrcatParameters = typing.TypedDict('MrcatParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/mrcat"]],
    "axis": typing.NotRequired[int | None],
    "datatype": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MrcatConfigParameters] | None],
    "help": bool,
    "version": bool,
    "image1": InputPathType,
    "image2": list[InputPathType],
    "output": str,
})
MrcatParametersTagged = typing.TypedDict('MrcatParametersTagged', {
    "@type": typing.Literal["mrtrix/mrcat"],
    "axis": typing.NotRequired[int | None],
    "datatype": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MrcatConfigParameters] | None],
    "help": bool,
    "version": bool,
    "image1": InputPathType,
    "image2": list[InputPathType],
    "output": str,
})


def mrcat_config_params(
    key: str,
    value: str,
) -> MrcatConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def mrcat_config_cargs(
    params: MrcatConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class MrcatOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrcatParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output image."""


def mrcat_params(
    image1: InputPathType,
    image2: list[InputPathType],
    output: str,
    axis: int | None = None,
    datatype: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrcatConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> MrcatParametersTagged:
    """
    Build parameters.
    
    Args:
        image1: the first input image.
        image2: additional input image(s).
        output: the output image.
        axis: specify axis along which concatenation should be performed. By\
            default, the program will use the last non-singleton, non-spatial axis\
            of any of the input images - in other words axis 3 or whichever axis\
            (greater than 3) of the input images has size greater than one.
        datatype: specify output image data type. Valid choices are: float32,\
            float32le, float32be, float64, float64le, float64be, int64, uint64,\
            int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le,\
            int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be,\
            cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be,\
            int8, uint8, bit.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/mrcat",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "image1": image1,
        "image2": image2,
        "output": output,
    }
    if axis is not None:
        params["axis"] = axis
    if datatype is not None:
        params["datatype"] = datatype
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def mrcat_cargs(
    params: MrcatParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mrcat")
    if params.get("axis", None) is not None:
        cargs.extend([
            "-axis",
            str(params.get("axis", None))
        ])
    if params.get("datatype", None) is not None:
        cargs.extend([
            "-datatype",
            params.get("datatype", None)
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [mrcat_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("image1", None)))
    cargs.extend([execution.input_file(f) for f in params.get("image2", None)])
    cargs.append(params.get("output", None))
    return cargs


def mrcat_outputs(
    params: MrcatParameters,
    execution: Execution,
) -> MrcatOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrcatOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


def mrcat_execute(
    params: MrcatParameters,
    runner: Runner | None = None,
) -> MrcatOutputs:
    """
    mrcat
    
    Concatenate several images into one.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrcatOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRCAT_METADATA)
    params = execution.params(params)
    cargs = mrcat_cargs(params, execution)
    ret = mrcat_outputs(params, execution)
    execution.run(cargs)
    return ret


def mrcat(
    image1: InputPathType,
    image2: list[InputPathType],
    output: str,
    axis: int | None = None,
    datatype: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrcatConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MrcatOutputs:
    """
    mrcat
    
    Concatenate several images into one.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        image1: the first input image.
        image2: additional input image(s).
        output: the output image.
        axis: specify axis along which concatenation should be performed. By\
            default, the program will use the last non-singleton, non-spatial axis\
            of any of the input images - in other words axis 3 or whichever axis\
            (greater than 3) of the input images has size greater than one.
        datatype: specify output image data type. Valid choices are: float32,\
            float32le, float32be, float64, float64le, float64be, int64, uint64,\
            int64le, uint64le, int64be, uint64be, int32, uint32, int32le, uint32le,\
            int32be, uint32be, int16, uint16, int16le, uint16le, int16be, uint16be,\
            cfloat32, cfloat32le, cfloat32be, cfloat64, cfloat64le, cfloat64be,\
            int8, uint8, bit.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrcatOutputs`).
    """
    params = mrcat_params(
        axis=axis,
        datatype=datatype,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        image1=image1,
        image2=image2,
        output=output,
    )
    return mrcat_execute(params, runner)


__all__ = [
    "MRCAT_METADATA",
    "MrcatOutputs",
    "mrcat",
    "mrcat_config_params",
    "mrcat_execute",
    "mrcat_params",
]
