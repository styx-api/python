# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

MRHISTMATCH_METADATA = Metadata(
    id="1798cd7ea1a79d9523cf1fd1a7ec35b94aa4a5ab.boutiques",
    name="mrhistmatch",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


MrhistmatchConfigParameters = typing.TypedDict('MrhistmatchConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
MrhistmatchConfigParametersTagged = typing.TypedDict('MrhistmatchConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


MrhistmatchParameters = typing.TypedDict('MrhistmatchParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/mrhistmatch"]],
    "mask_input": typing.NotRequired[InputPathType | None],
    "mask_target": typing.NotRequired[InputPathType | None],
    "bins": typing.NotRequired[int | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MrhistmatchConfigParameters] | None],
    "help": bool,
    "version": bool,
    "type": str,
    "input": InputPathType,
    "target": InputPathType,
    "output": str,
})
MrhistmatchParametersTagged = typing.TypedDict('MrhistmatchParametersTagged', {
    "@type": typing.Literal["mrtrix/mrhistmatch"],
    "mask_input": typing.NotRequired[InputPathType | None],
    "mask_target": typing.NotRequired[InputPathType | None],
    "bins": typing.NotRequired[int | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[MrhistmatchConfigParameters] | None],
    "help": bool,
    "version": bool,
    "type": str,
    "input": InputPathType,
    "target": InputPathType,
    "output": str,
})


def mrhistmatch_config_params(
    key: str,
    value: str,
) -> MrhistmatchConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def mrhistmatch_config_cargs(
    params: MrhistmatchConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class MrhistmatchOutputs(typing.NamedTuple):
    """
    Output object returned when calling `MrhistmatchParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output image"""


def mrhistmatch_params(
    type_: str,
    input_: InputPathType,
    target: InputPathType,
    output: str,
    mask_input: InputPathType | None = None,
    mask_target: InputPathType | None = None,
    bins: int | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrhistmatchConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> MrhistmatchParametersTagged:
    """
    Build parameters.
    
    Args:
        type_: type of histogram matching to perform; options are:\
            scale,linear,nonlinear.
        input_: the input image to be modified.
        target: the input image from which to derive the target histogram.
        output: the output image.
        mask_input: only generate input histogram based on a specified binary\
            mask image.
        mask_target: only generate target histogram based on a specified binary\
            mask image.
        bins: the number of bins to use to generate the histograms.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/mrhistmatch",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "type": type_,
        "input": input_,
        "target": target,
        "output": output,
    }
    if mask_input is not None:
        params["mask_input"] = mask_input
    if mask_target is not None:
        params["mask_target"] = mask_target
    if bins is not None:
        params["bins"] = bins
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def mrhistmatch_cargs(
    params: MrhistmatchParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("mrhistmatch")
    if params.get("mask_input", None) is not None:
        cargs.extend([
            "-mask_input",
            execution.input_file(params.get("mask_input", None))
        ])
    if params.get("mask_target", None) is not None:
        cargs.extend([
            "-mask_target",
            execution.input_file(params.get("mask_target", None))
        ])
    if params.get("bins", None) is not None:
        cargs.extend([
            "-bins",
            str(params.get("bins", None))
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [mrhistmatch_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(params.get("type", None))
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(execution.input_file(params.get("target", None)))
    cargs.append(params.get("output", None))
    return cargs


def mrhistmatch_outputs(
    params: MrhistmatchParameters,
    execution: Execution,
) -> MrhistmatchOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = MrhistmatchOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


def mrhistmatch_execute(
    params: MrhistmatchParameters,
    runner: Runner | None = None,
) -> MrhistmatchOutputs:
    """
    mrhistmatch
    
    Modify the intensities of one image to match the histogram of another.
    
    
    
    References:
    
    * If using inverse contrast normalization for inter-modal (DWI - T1)
    registration:
    Bhushan, C.; Haldar, J. P.; Choi, S.; Joshi, A. A.; Shattuck, D. W. & Leahy,
    R. M. Co-registration and distortion correction of diffusion and anatomical
    images based on inverse contrast normalization. NeuroImage, 2015, 115,
    269-280.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrhistmatchOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRHISTMATCH_METADATA)
    params = execution.params(params)
    cargs = mrhistmatch_cargs(params, execution)
    ret = mrhistmatch_outputs(params, execution)
    execution.run(cargs)
    return ret


def mrhistmatch(
    type_: str,
    input_: InputPathType,
    target: InputPathType,
    output: str,
    mask_input: InputPathType | None = None,
    mask_target: InputPathType | None = None,
    bins: int | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[MrhistmatchConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> MrhistmatchOutputs:
    """
    mrhistmatch
    
    Modify the intensities of one image to match the histogram of another.
    
    
    
    References:
    
    * If using inverse contrast normalization for inter-modal (DWI - T1)
    registration:
    Bhushan, C.; Haldar, J. P.; Choi, S.; Joshi, A. A.; Shattuck, D. W. & Leahy,
    R. M. Co-registration and distortion correction of diffusion and anatomical
    images based on inverse contrast normalization. NeuroImage, 2015, 115,
    269-280.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        type_: type of histogram matching to perform; options are:\
            scale,linear,nonlinear.
        input_: the input image to be modified.
        target: the input image from which to derive the target histogram.
        output: the output image.
        mask_input: only generate input histogram based on a specified binary\
            mask image.
        mask_target: only generate target histogram based on a specified binary\
            mask image.
        bins: the number of bins to use to generate the histograms.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrhistmatchOutputs`).
    """
    params = mrhistmatch_params(
        mask_input=mask_input,
        mask_target=mask_target,
        bins=bins,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        type_=type_,
        input_=input_,
        target=target,
        output=output,
    )
    return mrhistmatch_execute(params, runner)


__all__ = [
    "MRHISTMATCH_METADATA",
    "MrhistmatchOutputs",
    "mrhistmatch",
    "mrhistmatch_config_params",
    "mrhistmatch_execute",
    "mrhistmatch_params",
]
