# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SH2POWER_METADATA = Metadata(
    id="a770bfd27441085e1e72ab3538cb5be866f4dd4f.boutiques",
    name="sh2power",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


Sh2powerConfigParameters = typing.TypedDict('Sh2powerConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
Sh2powerConfigParametersTagged = typing.TypedDict('Sh2powerConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


Sh2powerParameters = typing.TypedDict('Sh2powerParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/sh2power"]],
    "spectrum": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Sh2powerConfigParameters] | None],
    "help": bool,
    "version": bool,
    "SH": InputPathType,
    "power": str,
})
Sh2powerParametersTagged = typing.TypedDict('Sh2powerParametersTagged', {
    "@type": typing.Literal["mrtrix/sh2power"],
    "spectrum": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[Sh2powerConfigParameters] | None],
    "help": bool,
    "version": bool,
    "SH": InputPathType,
    "power": str,
})


def sh2power_config_params(
    key: str,
    value: str,
) -> Sh2powerConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def sh2power_config_cargs(
    params: Sh2powerConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class Sh2powerOutputs(typing.NamedTuple):
    """
    Output object returned when calling `Sh2powerParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    power: OutputPathType
    """the output power image."""


def sh2power_params(
    sh: InputPathType,
    power: str,
    spectrum: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Sh2powerConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> Sh2powerParametersTagged:
    """
    Build parameters.
    
    Args:
        sh: the input spherical harmonics coefficients image.
        power: the output power image.
        spectrum: output the power spectrum, i.e., the power contained within\
            each harmonic degree (l=0, 2, 4, ...) as a 4-D image.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/sh2power",
        "spectrum": spectrum,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "SH": sh,
        "power": power,
    }
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def sh2power_cargs(
    params: Sh2powerParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("sh2power")
    if params.get("spectrum", False):
        cargs.append("-spectrum")
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [sh2power_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("SH", None)))
    cargs.append(params.get("power", None))
    return cargs


def sh2power_outputs(
    params: Sh2powerParameters,
    execution: Execution,
) -> Sh2powerOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = Sh2powerOutputs(
        root=execution.output_file("."),
        power=execution.output_file(params.get("power", None)),
    )
    return ret


def sh2power_execute(
    params: Sh2powerParameters,
    runner: Runner | None = None,
) -> Sh2powerOutputs:
    """
    sh2power
    
    Compute the total power of a spherical harmonics image.
    
    This command computes the sum of squared SH coefficients, which equals the
    mean-squared amplitude of the spherical function it represents.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Sh2powerOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SH2POWER_METADATA)
    params = execution.params(params)
    cargs = sh2power_cargs(params, execution)
    ret = sh2power_outputs(params, execution)
    execution.run(cargs)
    return ret


def sh2power(
    sh: InputPathType,
    power: str,
    spectrum: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[Sh2powerConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> Sh2powerOutputs:
    """
    sh2power
    
    Compute the total power of a spherical harmonics image.
    
    This command computes the sum of squared SH coefficients, which equals the
    mean-squared amplitude of the spherical function it represents.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        sh: the input spherical harmonics coefficients image.
        power: the output power image.
        spectrum: output the power spectrum, i.e., the power contained within\
            each harmonic degree (l=0, 2, 4, ...) as a 4-D image.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Sh2powerOutputs`).
    """
    params = sh2power_params(
        spectrum=spectrum,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        sh=sh,
        power=power,
    )
    return sh2power_execute(params, runner)


__all__ = [
    "SH2POWER_METADATA",
    "Sh2powerOutputs",
    "sh2power",
    "sh2power_config_params",
    "sh2power_execute",
    "sh2power_params",
]
