# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

SHBASIS_METADATA = Metadata(
    id="8d1c3a9e142d8ac3b0cfbca9e0fcd6b3d41e317e.boutiques",
    name="shbasis",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


ShbasisConfigParameters = typing.TypedDict('ShbasisConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
ShbasisConfigParametersTagged = typing.TypedDict('ShbasisConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


ShbasisParameters = typing.TypedDict('ShbasisParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/shbasis"]],
    "convert": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[ShbasisConfigParameters] | None],
    "help": bool,
    "version": bool,
    "SH": list[InputPathType],
})
ShbasisParametersTagged = typing.TypedDict('ShbasisParametersTagged', {
    "@type": typing.Literal["mrtrix/shbasis"],
    "convert": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[ShbasisConfigParameters] | None],
    "help": bool,
    "version": bool,
    "SH": list[InputPathType],
})


def shbasis_config_params(
    key: str,
    value: str,
) -> ShbasisConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def shbasis_config_cargs(
    params: ShbasisConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class ShbasisOutputs(typing.NamedTuple):
    """
    Output object returned when calling `ShbasisParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def shbasis_params(
    sh: list[InputPathType],
    convert: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[ShbasisConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> ShbasisParametersTagged:
    """
    Build parameters.
    
    Args:
        sh: the input image(s) of SH coefficients.
        convert: convert the image data in-place to the desired basis; options\
            are: old,new,force_oldtonew,force_newtoold.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/shbasis",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "SH": sh,
    }
    if convert is not None:
        params["convert"] = convert
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def shbasis_cargs(
    params: ShbasisParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("shbasis")
    if params.get("convert", None) is not None:
        cargs.extend([
            "-convert",
            params.get("convert", None)
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [shbasis_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.extend([execution.input_file(f) for f in params.get("SH", None)])
    return cargs


def shbasis_outputs(
    params: ShbasisParameters,
    execution: Execution,
) -> ShbasisOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = ShbasisOutputs(
        root=execution.output_file("."),
    )
    return ret


def shbasis_execute(
    params: ShbasisParameters,
    runner: Runner | None = None,
) -> ShbasisOutputs:
    """
    shbasis
    
    Examine the values in spherical harmonic images to estimate (and optionally
    change) the SH basis used.
    
    In previous versions of MRtrix, the convention used for storing spherical
    harmonic coefficients was a non-orthonormal basis (the m!=0 coefficients
    were a factor of sqrt(2) too large). This error has been rectified in newer
    versions of MRtrix, but will cause issues if processing SH data that was
    generated using an older version of MRtrix (or vice-versa).
    
    This command provides a mechanism for testing the basis used in storage of
    image data representing a spherical harmonic series per voxel, and allows
    the user to forcibly modify the raw image data to conform to the desired
    basis.
    
    Note that the "force_*" conversion choices should only be used in cases
    where this command has previously been unable to automatically determine the
    SH basis from the image data, but the user themselves are confident of the
    SH basis of the data.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ShbasisOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SHBASIS_METADATA)
    params = execution.params(params)
    cargs = shbasis_cargs(params, execution)
    ret = shbasis_outputs(params, execution)
    execution.run(cargs)
    return ret


def shbasis(
    sh: list[InputPathType],
    convert: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[ShbasisConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> ShbasisOutputs:
    """
    shbasis
    
    Examine the values in spherical harmonic images to estimate (and optionally
    change) the SH basis used.
    
    In previous versions of MRtrix, the convention used for storing spherical
    harmonic coefficients was a non-orthonormal basis (the m!=0 coefficients
    were a factor of sqrt(2) too large). This error has been rectified in newer
    versions of MRtrix, but will cause issues if processing SH data that was
    generated using an older version of MRtrix (or vice-versa).
    
    This command provides a mechanism for testing the basis used in storage of
    image data representing a spherical harmonic series per voxel, and allows
    the user to forcibly modify the raw image data to conform to the desired
    basis.
    
    Note that the "force_*" conversion choices should only be used in cases
    where this command has previously been unable to automatically determine the
    SH basis from the image data, but the user themselves are confident of the
    SH basis of the data.
    
    The spherical harmonic coefficients are stored according the conventions
    described the main documentation, which can be found at the following link:
    https://mrtrix.readthedocs.io/en/3.0.4/concepts/spherical_harmonics.html
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        sh: the input image(s) of SH coefficients.
        convert: convert the image data in-place to the desired basis; options\
            are: old,new,force_oldtonew,force_newtoold.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ShbasisOutputs`).
    """
    params = shbasis_params(
        convert=convert,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        sh=sh,
    )
    return shbasis_execute(params, runner)


__all__ = [
    "SHBASIS_METADATA",
    "ShbasisOutputs",
    "shbasis",
    "shbasis_config_params",
    "shbasis_execute",
    "shbasis_params",
]
