# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

TCKSAMPLE_METADATA = Metadata(
    id="274c00456de615fd846529a52bdcb4684c1c52eb.boutiques",
    name="tcksample",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


TcksampleConfigParameters = typing.TypedDict('TcksampleConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
TcksampleConfigParametersTagged = typing.TypedDict('TcksampleConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


TcksampleParameters = typing.TypedDict('TcksampleParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/tcksample"]],
    "stat_tck": typing.NotRequired[str | None],
    "nointerp": bool,
    "precise": bool,
    "use_tdi_fraction": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[TcksampleConfigParameters] | None],
    "help": bool,
    "version": bool,
    "tracks": InputPathType,
    "image": InputPathType,
    "values": str,
})
TcksampleParametersTagged = typing.TypedDict('TcksampleParametersTagged', {
    "@type": typing.Literal["mrtrix/tcksample"],
    "stat_tck": typing.NotRequired[str | None],
    "nointerp": bool,
    "precise": bool,
    "use_tdi_fraction": bool,
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[TcksampleConfigParameters] | None],
    "help": bool,
    "version": bool,
    "tracks": InputPathType,
    "image": InputPathType,
    "values": str,
})


def tcksample_config_params(
    key: str,
    value: str,
) -> TcksampleConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def tcksample_config_cargs(
    params: TcksampleConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class TcksampleOutputs(typing.NamedTuple):
    """
    Output object returned when calling `TcksampleParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    values_: OutputPathType
    """the output sampled values"""


def tcksample_params(
    tracks: InputPathType,
    image: InputPathType,
    values_: str,
    stat_tck: str | None = None,
    nointerp: bool = False,
    precise: bool = False,
    use_tdi_fraction: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TcksampleConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> TcksampleParametersTagged:
    """
    Build parameters.
    
    Args:
        tracks: the input track file.
        image: the image to be sampled.
        values_: the output sampled values.
        stat_tck: compute some statistic from the values along each streamline\
            (options are: mean,median,min,max).
        nointerp: do not use trilinear interpolation when sampling image values.
        precise: use the precise mechanism for mapping streamlines to voxels\
            (obviates the need for trilinear interpolation) (only applicable if\
            some per-streamline statistic is requested).
        use_tdi_fraction: each streamline is assigned a fraction of the image\
            intensity in each voxel based on the fraction of the track density\
            contributed by that streamline (this is only appropriate for processing\
            a whole-brain tractogram, and images for which the quantiative\
            parameter is additive).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/tcksample",
        "nointerp": nointerp,
        "precise": precise,
        "use_tdi_fraction": use_tdi_fraction,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "tracks": tracks,
        "image": image,
        "values": values_,
    }
    if stat_tck is not None:
        params["stat_tck"] = stat_tck
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def tcksample_cargs(
    params: TcksampleParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("tcksample")
    if params.get("stat_tck", None) is not None:
        cargs.extend([
            "-stat_tck",
            params.get("stat_tck", None)
        ])
    if params.get("nointerp", False):
        cargs.append("-nointerp")
    if params.get("precise", False):
        cargs.append("-precise")
    if params.get("use_tdi_fraction", False):
        cargs.append("-use_tdi_fraction")
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [tcksample_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("tracks", None)))
    cargs.append(execution.input_file(params.get("image", None)))
    cargs.append(params.get("values", None))
    return cargs


def tcksample_outputs(
    params: TcksampleParameters,
    execution: Execution,
) -> TcksampleOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = TcksampleOutputs(
        root=execution.output_file("."),
        values_=execution.output_file(params.get("values", None)),
    )
    return ret


def tcksample_execute(
    params: TcksampleParameters,
    runner: Runner | None = None,
) -> TcksampleOutputs:
    """
    tcksample
    
    Sample values of an associated image along tracks.
    
    By default, the value of the underlying image at each point along the track
    is written to either an ASCII file (with all values for each track on the
    same line), or a track scalar file (.tsf). Alternatively, some statistic can
    be taken from the values along each streamline and written to a vector file.
    
    References:
    
    * If using -precise option: Smith, R. E.; Tournier, J.-D.; Calamante, F. &
    Connelly, A. SIFT: Spherical-deconvolution informed filtering of
    tractograms. NeuroImage, 2013, 67, 298-312.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TcksampleOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(TCKSAMPLE_METADATA)
    params = execution.params(params)
    cargs = tcksample_cargs(params, execution)
    ret = tcksample_outputs(params, execution)
    execution.run(cargs)
    return ret


def tcksample(
    tracks: InputPathType,
    image: InputPathType,
    values_: str,
    stat_tck: str | None = None,
    nointerp: bool = False,
    precise: bool = False,
    use_tdi_fraction: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[TcksampleConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> TcksampleOutputs:
    """
    tcksample
    
    Sample values of an associated image along tracks.
    
    By default, the value of the underlying image at each point along the track
    is written to either an ASCII file (with all values for each track on the
    same line), or a track scalar file (.tsf). Alternatively, some statistic can
    be taken from the values along each streamline and written to a vector file.
    
    References:
    
    * If using -precise option: Smith, R. E.; Tournier, J.-D.; Calamante, F. &
    Connelly, A. SIFT: Spherical-deconvolution informed filtering of
    tractograms. NeuroImage, 2013, 67, 298-312.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        tracks: the input track file.
        image: the image to be sampled.
        values_: the output sampled values.
        stat_tck: compute some statistic from the values along each streamline\
            (options are: mean,median,min,max).
        nointerp: do not use trilinear interpolation when sampling image values.
        precise: use the precise mechanism for mapping streamlines to voxels\
            (obviates the need for trilinear interpolation) (only applicable if\
            some per-streamline statistic is requested).
        use_tdi_fraction: each streamline is assigned a fraction of the image\
            intensity in each voxel based on the fraction of the track density\
            contributed by that streamline (this is only appropriate for processing\
            a whole-brain tractogram, and images for which the quantiative\
            parameter is additive).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `TcksampleOutputs`).
    """
    params = tcksample_params(
        stat_tck=stat_tck,
        nointerp=nointerp,
        precise=precise,
        use_tdi_fraction=use_tdi_fraction,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        tracks=tracks,
        image=image,
        values_=values_,
    )
    return tcksample_execute(params, runner)


__all__ = [
    "TCKSAMPLE_METADATA",
    "TcksampleOutputs",
    "tcksample",
    "tcksample_config_params",
    "tcksample_execute",
    "tcksample_params",
]
