# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_5TT2VIS_METADATA = Metadata(
    id="79cdcbb89fc6e8b73401cd1c0d4a4e933656160a.boutiques",
    name="5tt2vis",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


V5tt2visConfigParameters = typing.TypedDict('V5tt2visConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
V5tt2visConfigParametersTagged = typing.TypedDict('V5tt2visConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


V5tt2visParameters = typing.TypedDict('V5tt2visParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/5tt2vis"]],
    "bg": typing.NotRequired[float | None],
    "cgm": typing.NotRequired[float | None],
    "sgm": typing.NotRequired[float | None],
    "wm": typing.NotRequired[float | None],
    "csf": typing.NotRequired[float | None],
    "path": typing.NotRequired[float | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[V5tt2visConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": InputPathType,
    "output": str,
})
V5tt2visParametersTagged = typing.TypedDict('V5tt2visParametersTagged', {
    "@type": typing.Literal["mrtrix/5tt2vis"],
    "bg": typing.NotRequired[float | None],
    "cgm": typing.NotRequired[float | None],
    "sgm": typing.NotRequired[float | None],
    "wm": typing.NotRequired[float | None],
    "csf": typing.NotRequired[float | None],
    "path": typing.NotRequired[float | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[V5tt2visConfigParameters] | None],
    "help": bool,
    "version": bool,
    "input": InputPathType,
    "output": str,
})


def v_5tt2vis_config_params(
    key: str,
    value: str,
) -> V5tt2visConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def v_5tt2vis_config_cargs(
    params: V5tt2visConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class V5tt2visOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5tt2visParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """the output 3D image for visualisation"""


def v_5tt2vis_params(
    input_: InputPathType,
    output: str,
    bg: float | None = None,
    cgm: float | None = None,
    sgm: float | None = None,
    wm: float | None = None,
    csf: float | None = None,
    path: float | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[V5tt2visConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> V5tt2visParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: the input 4D tissue-segmented image.
        output: the output 3D image for visualisation.
        bg: image intensity of background (default: 0).
        cgm: image intensity of cortical grey matter (default: 0.5).
        sgm: image intensity of sub-cortical grey matter (default: 0.75).
        wm: image intensity of white matter (default: 1).
        csf: image intensity of CSF (default: 0.15).
        path: image intensity of pathological tissue (default: 2).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/5tt2vis",
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
        "input": input_,
        "output": output,
    }
    if bg is not None:
        params["bg"] = bg
    if cgm is not None:
        params["cgm"] = cgm
    if sgm is not None:
        params["sgm"] = sgm
    if wm is not None:
        params["wm"] = wm
    if csf is not None:
        params["csf"] = csf
    if path is not None:
        params["path"] = path
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def v_5tt2vis_cargs(
    params: V5tt2visParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("5tt2vis")
    if params.get("bg", None) is not None:
        cargs.extend([
            "-bg",
            str(params.get("bg", None))
        ])
    if params.get("cgm", None) is not None:
        cargs.extend([
            "-cgm",
            str(params.get("cgm", None))
        ])
    if params.get("sgm", None) is not None:
        cargs.extend([
            "-sgm",
            str(params.get("sgm", None))
        ])
    if params.get("wm", None) is not None:
        cargs.extend([
            "-wm",
            str(params.get("wm", None))
        ])
    if params.get("csf", None) is not None:
        cargs.extend([
            "-csf",
            str(params.get("csf", None))
        ])
    if params.get("path", None) is not None:
        cargs.extend([
            "-path",
            str(params.get("path", None))
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [v_5tt2vis_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    return cargs


def v_5tt2vis_outputs(
    params: V5tt2visParameters,
    execution: Execution,
) -> V5tt2visOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5tt2visOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


def v_5tt2vis_execute(
    params: V5tt2visParameters,
    runner: Runner | None = None,
) -> V5tt2visOutputs:
    """
    5tt2vis
    
    Generate an image for visualisation purposes from an ACT 5TT segmented
    anatomical image.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V5tt2visOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_5TT2VIS_METADATA)
    params = execution.params(params)
    cargs = v_5tt2vis_cargs(params, execution)
    ret = v_5tt2vis_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_5tt2vis(
    input_: InputPathType,
    output: str,
    bg: float | None = None,
    cgm: float | None = None,
    sgm: float | None = None,
    wm: float | None = None,
    csf: float | None = None,
    path: float | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[V5tt2visConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> V5tt2visOutputs:
    """
    5tt2vis
    
    Generate an image for visualisation purposes from an ACT 5TT segmented
    anatomical image.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        input_: the input 4D tissue-segmented image.
        output: the output 3D image for visualisation.
        bg: image intensity of background (default: 0).
        cgm: image intensity of cortical grey matter (default: 0.5).
        sgm: image intensity of sub-cortical grey matter (default: 0.75).
        wm: image intensity of white matter (default: 1).
        csf: image intensity of CSF (default: 0.15).
        path: image intensity of pathological tissue (default: 2).
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V5tt2visOutputs`).
    """
    params = v_5tt2vis_params(
        bg=bg,
        cgm=cgm,
        sgm=sgm,
        wm=wm,
        csf=csf,
        path=path,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
        input_=input_,
        output=output,
    )
    return v_5tt2vis_execute(params, runner)


__all__ = [
    "V5tt2visOutputs",
    "V_5TT2VIS_METADATA",
    "v_5tt2vis",
    "v_5tt2vis_config_params",
    "v_5tt2vis_execute",
    "v_5tt2vis_params",
]
