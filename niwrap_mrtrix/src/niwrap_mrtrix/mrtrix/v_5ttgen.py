# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

V_5TTGEN_METADATA = Metadata(
    id="213c8cb30d8d1a68c488abbf08a42cf6809dc622.boutiques",
    name="5ttgen",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


V5ttgenFreesurferParameters = typing.TypedDict('V5ttgenFreesurferParameters', {
    "@type": typing.NotRequired[typing.Literal["freesurfer"]],
    "input": InputPathType,
    "output": str,
    "lut": typing.NotRequired[InputPathType | None],
})
V5ttgenFreesurferParametersTagged = typing.TypedDict('V5ttgenFreesurferParametersTagged', {
    "@type": typing.Literal["freesurfer"],
    "input": InputPathType,
    "output": str,
    "lut": typing.NotRequired[InputPathType | None],
})


V5ttgenFslParameters = typing.TypedDict('V5ttgenFslParameters', {
    "@type": typing.NotRequired[typing.Literal["fsl"]],
    "input": InputPathType,
    "output": str,
    "t2": typing.NotRequired[InputPathType | None],
    "mask": typing.NotRequired[InputPathType | None],
    "premasked": bool,
})
V5ttgenFslParametersTagged = typing.TypedDict('V5ttgenFslParametersTagged', {
    "@type": typing.Literal["fsl"],
    "input": InputPathType,
    "output": str,
    "t2": typing.NotRequired[InputPathType | None],
    "mask": typing.NotRequired[InputPathType | None],
    "premasked": bool,
})


V5ttgenGifParameters = typing.TypedDict('V5ttgenGifParameters', {
    "@type": typing.NotRequired[typing.Literal["gif"]],
    "input": InputPathType,
    "output": str,
})
V5ttgenGifParametersTagged = typing.TypedDict('V5ttgenGifParametersTagged', {
    "@type": typing.Literal["gif"],
    "input": InputPathType,
    "output": str,
})


V5ttgenHsvsParameters = typing.TypedDict('V5ttgenHsvsParameters', {
    "@type": typing.NotRequired[typing.Literal["hsvs"]],
    "input": InputPathType,
    "output": str,
    "template": typing.NotRequired[InputPathType | None],
    "hippocampi": typing.NotRequired[typing.Literal["subfields", "first", "aseg"] | None],
    "thalami": typing.NotRequired[typing.Literal["nuclei", "first", "aseg"] | None],
    "white_stem": bool,
})
V5ttgenHsvsParametersTagged = typing.TypedDict('V5ttgenHsvsParametersTagged', {
    "@type": typing.Literal["hsvs"],
    "input": InputPathType,
    "output": str,
    "template": typing.NotRequired[InputPathType | None],
    "hippocampi": typing.NotRequired[typing.Literal["subfields", "first", "aseg"] | None],
    "thalami": typing.NotRequired[typing.Literal["nuclei", "first", "aseg"] | None],
    "white_stem": bool,
})


V5ttgenConfigParameters = typing.TypedDict('V5ttgenConfigParameters', {
    "@type": typing.NotRequired[typing.Literal["config"]],
    "key": str,
    "value": str,
})
V5ttgenConfigParametersTagged = typing.TypedDict('V5ttgenConfigParametersTagged', {
    "@type": typing.Literal["config"],
    "key": str,
    "value": str,
})


V5ttgenParameters = typing.TypedDict('V5ttgenParameters', {
    "@type": typing.NotRequired[typing.Literal["mrtrix/5ttgen"]],
    "algorithm": typing.Union[V5ttgenFreesurferParametersTagged, V5ttgenFslParametersTagged, V5ttgenGifParametersTagged, V5ttgenHsvsParametersTagged],
    "nocrop": bool,
    "sgm_amyg_hipp": bool,
    "nocleanup": bool,
    "scratch": typing.NotRequired[str | None],
    "continue": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[V5ttgenConfigParameters] | None],
    "help": bool,
    "version": bool,
})
V5ttgenParametersTagged = typing.TypedDict('V5ttgenParametersTagged', {
    "@type": typing.Literal["mrtrix/5ttgen"],
    "algorithm": typing.Union[V5ttgenFreesurferParametersTagged, V5ttgenFslParametersTagged, V5ttgenGifParametersTagged, V5ttgenHsvsParametersTagged],
    "nocrop": bool,
    "sgm_amyg_hipp": bool,
    "nocleanup": bool,
    "scratch": typing.NotRequired[str | None],
    "continue": typing.NotRequired[str | None],
    "info": bool,
    "quiet": bool,
    "debug": bool,
    "force": bool,
    "nthreads": typing.NotRequired[int | None],
    "config": typing.NotRequired[list[V5ttgenConfigParameters] | None],
    "help": bool,
    "version": bool,
})


def v_5ttgen_algorithm_cargs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build cargs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build cargs function.
    """
    return {
        "freesurfer": v_5ttgen_freesurfer_cargs,
        "fsl": v_5ttgen_fsl_cargs,
        "gif": v_5ttgen_gif_cargs,
        "hsvs": v_5ttgen_hsvs_cargs,
    }.get(t)


def v_5ttgen_algorithm_outputs_dyn_fn(
    t: str,
) -> typing.Any:
    """
    Get build outputs function by command type.
    
    Args:
        t: Command type.
    Returns:
        Build outputs function.
    """
    return {
        "freesurfer": v_5ttgen_freesurfer_outputs,
        "fsl": v_5ttgen_fsl_outputs,
        "gif": v_5ttgen_gif_outputs,
        "hsvs": v_5ttgen_hsvs_outputs,
    }.get(t)


class V5ttgenFreesurferOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5ttgenFreesurferParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The output 5TT image"""


def v_5ttgen_freesurfer_params(
    input_: InputPathType,
    output: str,
    lut: InputPathType | None = None,
) -> V5ttgenFreesurferParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: The input FreeSurfer parcellation image (any image containing\
            'aseg' in its name).
        output: The output 5TT image.
        lut: Manually provide path to the lookup table on which the input\
            parcellation image is based (e.g. FreeSurferColorLUT.txt).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "freesurfer",
        "input": input_,
        "output": output,
    }
    if lut is not None:
        params["lut"] = lut
    return params


def v_5ttgen_freesurfer_cargs(
    params: V5ttgenFreesurferParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("freesurfer")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    if params.get("lut", None) is not None:
        cargs.extend([
            "-lut",
            execution.input_file(params.get("lut", None))
        ])
    return cargs


def v_5ttgen_freesurfer_outputs(
    params: V5ttgenFreesurferParameters,
    execution: Execution,
) -> V5ttgenFreesurferOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5ttgenFreesurferOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


class V5ttgenFslOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5ttgenFslParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The output 5TT image"""


def v_5ttgen_fsl_params(
    input_: InputPathType,
    output: str,
    t2: InputPathType | None = None,
    mask: InputPathType | None = None,
    premasked: bool = False,
) -> V5ttgenFslParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: The input T1-weighted image.
        output: The output 5TT image.
        t2: Provide a T2-weighted image in addition to the default T1-weighted\
            image; this will be used as a second input to FSL FAST.
        mask: Manually provide a brain mask, rather than deriving one in the\
            script.
        premasked: Indicate that brain masking has already been applied to the\
            input image.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "fsl",
        "input": input_,
        "output": output,
        "premasked": premasked,
    }
    if t2 is not None:
        params["t2"] = t2
    if mask is not None:
        params["mask"] = mask
    return params


def v_5ttgen_fsl_cargs(
    params: V5ttgenFslParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("fsl")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    if params.get("t2", None) is not None:
        cargs.extend([
            "-t2",
            execution.input_file(params.get("t2", None))
        ])
    if params.get("mask", None) is not None:
        cargs.extend([
            "-mask",
            execution.input_file(params.get("mask", None))
        ])
    if params.get("premasked", False):
        cargs.append("-premasked")
    return cargs


def v_5ttgen_fsl_outputs(
    params: V5ttgenFslParameters,
    execution: Execution,
) -> V5ttgenFslOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5ttgenFslOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


class V5ttgenGifOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5ttgenGifParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The output 5TT image"""


def v_5ttgen_gif_params(
    input_: InputPathType,
    output: str,
) -> V5ttgenGifParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: The input Geodesic Information Flow (GIF) segmentation image.
        output: The output 5TT image.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "gif",
        "input": input_,
        "output": output,
    }
    return params


def v_5ttgen_gif_cargs(
    params: V5ttgenGifParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("gif")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    return cargs


def v_5ttgen_gif_outputs(
    params: V5ttgenGifParameters,
    execution: Execution,
) -> V5ttgenGifOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5ttgenGifOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


class V5ttgenHsvsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5ttgenHsvsParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType
    """The output 5TT image"""


def v_5ttgen_hsvs_params(
    input_: InputPathType,
    output: str,
    template: InputPathType | None = None,
    hippocampi: typing.Literal["subfields", "first", "aseg"] | None = None,
    thalami: typing.Literal["nuclei", "first", "aseg"] | None = None,
    white_stem: bool = False,
) -> V5ttgenHsvsParametersTagged:
    """
    Build parameters.
    
    Args:
        input_: The input FreeSurfer subject directory.
        output: The output 5TT image.
        template: Provide an image that will form the template for the\
            generated 5TT image.
        hippocampi: Select method to be used for hippocampi (& amygdalae)\
            segmentation; options are: subfields,first,aseg.
        thalami: Select method to be used for thalamic segmentation; options\
            are: nuclei,first,aseg.
        white_stem: Classify the brainstem as white matter.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "hsvs",
        "input": input_,
        "output": output,
        "white_stem": white_stem,
    }
    if template is not None:
        params["template"] = template
    if hippocampi is not None:
        params["hippocampi"] = hippocampi
    if thalami is not None:
        params["thalami"] = thalami
    return params


def v_5ttgen_hsvs_cargs(
    params: V5ttgenHsvsParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("hsvs")
    cargs.append(execution.input_file(params.get("input", None)))
    cargs.append(params.get("output", None))
    if params.get("template", None) is not None:
        cargs.extend([
            "-template",
            execution.input_file(params.get("template", None))
        ])
    if params.get("hippocampi", None) is not None:
        cargs.extend([
            "-hippocampi",
            params.get("hippocampi", None)
        ])
    if params.get("thalami", None) is not None:
        cargs.extend([
            "-thalami",
            params.get("thalami", None)
        ])
    if params.get("white_stem", False):
        cargs.append("-white_stem")
    return cargs


def v_5ttgen_hsvs_outputs(
    params: V5ttgenHsvsParameters,
    execution: Execution,
) -> V5ttgenHsvsOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5ttgenHsvsOutputs(
        root=execution.output_file("."),
        output=execution.output_file(params.get("output", None)),
    )
    return ret


def v_5ttgen_config_params(
    key: str,
    value: str,
) -> V5ttgenConfigParametersTagged:
    """
    Build parameters.
    
    Args:
        key: temporarily set the value of an MRtrix config file entry.
        value: temporarily set the value of an MRtrix config file entry.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "config",
        "key": key,
        "value": value,
    }
    return params


def v_5ttgen_config_cargs(
    params: V5ttgenConfigParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("-config")
    cargs.append(params.get("key", None))
    cargs.append(params.get("value", None))
    return cargs


class V5ttgenOutputs(typing.NamedTuple):
    """
    Output object returned when calling `V5ttgenParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    algorithm: typing.Union[V5ttgenFreesurferOutputs, V5ttgenFslOutputs, V5ttgenGifOutputs, V5ttgenHsvsOutputs]
    """Outputs from `V5ttgenFreesurferParameters` or `V5ttgenFslParameters` or
    `V5ttgenGifParameters` or `V5ttgenHsvsParameters`."""


def v_5ttgen_params(
    algorithm: typing.Union[V5ttgenFreesurferParametersTagged, V5ttgenFslParametersTagged, V5ttgenGifParametersTagged, V5ttgenHsvsParametersTagged],
    nocrop: bool = False,
    sgm_amyg_hipp: bool = False,
    nocleanup: bool = False,
    scratch: str | None = None,
    continue_: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[V5ttgenConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
) -> V5ttgenParametersTagged:
    """
    Build parameters.
    
    Args:
        algorithm: Select the algorithm to be used to complete the script\
            operation; additional details and options become available once an\
            algorithm is nominated. Options are: freesurfer, fsl, gif, hsvs.
        nocrop: Do NOT crop the resulting 5TT image to reduce its size (keep\
            the same dimensions as the input image).
        sgm_amyg_hipp: Represent the amygdalae and hippocampi as sub-cortical\
            grey matter in the 5TT image.
        nocleanup: do not delete intermediate files during script execution,\
            and do not delete scratch directory at script completion.
        scratch: manually specify the path in which to generate the scratch\
            directory.
        continue_: continue the script from a previous execution; must provide\
            the scratch directory path, and the name of the last\
            successfully-generated file.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "mrtrix/5ttgen",
        "algorithm": algorithm,
        "nocrop": nocrop,
        "sgm_amyg_hipp": sgm_amyg_hipp,
        "nocleanup": nocleanup,
        "info": info,
        "quiet": quiet,
        "debug": debug,
        "force": force,
        "help": help_,
        "version": version,
    }
    if scratch is not None:
        params["scratch"] = scratch
    if continue_ is not None:
        params["continue"] = continue_
    if nthreads is not None:
        params["nthreads"] = nthreads
    if config is not None:
        params["config"] = config
    return params


def v_5ttgen_cargs(
    params: V5ttgenParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("5ttgen")
    cargs.extend(v_5ttgen_algorithm_cargs_dyn_fn(params.get("algorithm", None)["@type"])(params.get("algorithm", None), execution))
    if params.get("nocrop", False):
        cargs.append("-nocrop")
    if params.get("sgm_amyg_hipp", False):
        cargs.append("-sgm_amyg_hipp")
    if params.get("nocleanup", False):
        cargs.append("-nocleanup")
    if params.get("scratch", None) is not None:
        cargs.extend([
            "-scratch",
            params.get("scratch", None)
        ])
    if params.get("continue", None) is not None:
        cargs.extend([
            "-continue",
            params.get("continue", None)
        ])
    if params.get("info", False):
        cargs.append("-info")
    if params.get("quiet", False):
        cargs.append("-quiet")
    if params.get("debug", False):
        cargs.append("-debug")
    if params.get("force", False):
        cargs.append("-force")
    if params.get("nthreads", None) is not None:
        cargs.extend([
            "-nthreads",
            str(params.get("nthreads", None))
        ])
    if params.get("config", None) is not None:
        cargs.extend([a for c in [v_5ttgen_config_cargs(s, execution) for s in params.get("config", None)] for a in c])
    if params.get("help", False):
        cargs.append("-help")
    if params.get("version", False):
        cargs.append("-version")
    return cargs


def v_5ttgen_outputs(
    params: V5ttgenParameters,
    execution: Execution,
) -> V5ttgenOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = V5ttgenOutputs(
        root=execution.output_file("."),
        algorithm=v_5ttgen_algorithm_outputs_dyn_fn(params.get("algorithm")["@type"])(params.get("algorithm"), execution),
    )
    return ret


def v_5ttgen_execute(
    params: V5ttgenParameters,
    runner: Runner | None = None,
) -> V5ttgenOutputs:
    """
    5ttgen
    
    Generate a 5TT image suitable for ACT.
    
    5ttgen acts as a 'master' script for generating a five-tissue-type (5TT)
    segmented tissue image suitable for use in Anatomically-Constrained
    Tractography (ACT). A range of different algorithms are available for
    completing this task. When using this script, the name of the algorithm to
    be used must appear as the first argument on the command-line after
    '5ttgen'. The subsequent compulsory arguments and options available depend
    on the particular algorithm being invoked.
    Each algorithm available also has its own help page, including necessary
    references; e.g. to see the help page of the 'fsl' algorithm, type '5ttgen
    fsl'.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V5ttgenOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(V_5TTGEN_METADATA)
    params = execution.params(params)
    cargs = v_5ttgen_cargs(params, execution)
    ret = v_5ttgen_outputs(params, execution)
    execution.run(cargs)
    return ret


def v_5ttgen(
    algorithm: typing.Union[V5ttgenFreesurferParametersTagged, V5ttgenFslParametersTagged, V5ttgenGifParametersTagged, V5ttgenHsvsParametersTagged],
    nocrop: bool = False,
    sgm_amyg_hipp: bool = False,
    nocleanup: bool = False,
    scratch: str | None = None,
    continue_: str | None = None,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[V5ttgenConfigParameters] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> V5ttgenOutputs:
    """
    5ttgen
    
    Generate a 5TT image suitable for ACT.
    
    5ttgen acts as a 'master' script for generating a five-tissue-type (5TT)
    segmented tissue image suitable for use in Anatomically-Constrained
    Tractography (ACT). A range of different algorithms are available for
    completing this task. When using this script, the name of the algorithm to
    be used must appear as the first argument on the command-line after
    '5ttgen'. The subsequent compulsory arguments and options available depend
    on the particular algorithm being invoked.
    Each algorithm available also has its own help page, including necessary
    references; e.g. to see the help page of the 'fsl' algorithm, type '5ttgen
    fsl'.
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        algorithm: Select the algorithm to be used to complete the script\
            operation; additional details and options become available once an\
            algorithm is nominated. Options are: freesurfer, fsl, gif, hsvs.
        nocrop: Do NOT crop the resulting 5TT image to reduce its size (keep\
            the same dimensions as the input image).
        sgm_amyg_hipp: Represent the amygdalae and hippocampi as sub-cortical\
            grey matter in the 5TT image.
        nocleanup: do not delete intermediate files during script execution,\
            and do not delete scratch directory at script completion.
        scratch: manually specify the path in which to generate the scratch\
            directory.
        continue_: continue the script from a previous execution; must provide\
            the scratch directory path, and the name of the last\
            successfully-generated file.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `V5ttgenOutputs`).
    """
    params = v_5ttgen_params(
        algorithm=algorithm,
        nocrop=nocrop,
        sgm_amyg_hipp=sgm_amyg_hipp,
        nocleanup=nocleanup,
        scratch=scratch,
        continue_=continue_,
        info=info,
        quiet=quiet,
        debug=debug,
        force=force,
        nthreads=nthreads,
        config=config,
        help_=help_,
        version=version,
    )
    return v_5ttgen_execute(params, runner)


__all__ = [
    "V5ttgenFreesurferOutputs",
    "V5ttgenFslOutputs",
    "V5ttgenGifOutputs",
    "V5ttgenHsvsOutputs",
    "V5ttgenOutputs",
    "V_5TTGEN_METADATA",
    "v_5ttgen",
    "v_5ttgen_config_params",
    "v_5ttgen_execute",
    "v_5ttgen_freesurfer_params",
    "v_5ttgen_fsl_params",
    "v_5ttgen_gif_params",
    "v_5ttgen_hsvs_params",
    "v_5ttgen_params",
]
