# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

REG_ALADIN_METADATA = Metadata(
    id="1445fb7b186f71977196e8923782e87642993b67.boutiques",
    name="reg_aladin",
    package="niftyreg",
    container_image_tag="vnmd/niftyreg_1.4.0:20220819",
)


RegAladinParameters = typing.TypedDict('RegAladinParameters', {
    "@type": typing.NotRequired[typing.Literal["niftyreg/reg_aladin"]],
    "reference_image": InputPathType,
    "floating_image": InputPathType,
    "symmetric": bool,
    "output_affine": typing.NotRequired[str | None],
    "rigid_only": bool,
    "direct_affine": bool,
    "smooth_ref": typing.NotRequired[float | None],
    "smooth_float": typing.NotRequired[float | None],
    "num_levels": typing.NotRequired[float | None],
    "first_levels": typing.NotRequired[float | None],
    "use_nifti_origin": bool,
    "percent_block": typing.NotRequired[float | None],
    "percent_inlier": typing.NotRequired[float | None],
})
RegAladinParametersTagged = typing.TypedDict('RegAladinParametersTagged', {
    "@type": typing.Literal["niftyreg/reg_aladin"],
    "reference_image": InputPathType,
    "floating_image": InputPathType,
    "symmetric": bool,
    "output_affine": typing.NotRequired[str | None],
    "rigid_only": bool,
    "direct_affine": bool,
    "smooth_ref": typing.NotRequired[float | None],
    "smooth_float": typing.NotRequired[float | None],
    "num_levels": typing.NotRequired[float | None],
    "first_levels": typing.NotRequired[float | None],
    "use_nifti_origin": bool,
    "percent_block": typing.NotRequired[float | None],
    "percent_inlier": typing.NotRequired[float | None],
})


class RegAladinOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RegAladinParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_affine_file: OutputPathType
    """File containing the output affine transformation"""


def reg_aladin_params(
    reference_image: InputPathType,
    floating_image: InputPathType,
    symmetric: bool = False,
    output_affine: str | None = None,
    rigid_only: bool = False,
    direct_affine: bool = False,
    smooth_ref: float | None = None,
    smooth_float: float | None = None,
    num_levels: float | None = None,
    first_levels: float | None = None,
    use_nifti_origin: bool = False,
    percent_block: float | None = None,
    percent_inlier: float | None = None,
) -> RegAladinParametersTagged:
    """
    Build parameters.
    
    Args:
        reference_image: Filename of the reference (target) image.
        floating_image: Filename of the floating (source) image.
        symmetric: Uses symmetric version of the algorithm.
        output_affine: Filename which contains the output affine transformation.
        rigid_only: To perform a rigid registration only.
        direct_affine: Directly optimize 12 DoF affine.
        smooth_ref: Smooth the reference image using the specified sigma (mm).
        smooth_float: Smooth the floating image using the specified sigma (mm).
        num_levels: Number of levels to perform.
        first_levels: Only perform the first levels.
        use_nifti_origin: Use the NIFTI header origins to initialize the\
            translation.
        percent_block: Percentage of block to use.
        percent_inlier: Percentage of inlier for the LTS.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "niftyreg/reg_aladin",
        "reference_image": reference_image,
        "floating_image": floating_image,
        "symmetric": symmetric,
        "rigid_only": rigid_only,
        "direct_affine": direct_affine,
        "use_nifti_origin": use_nifti_origin,
    }
    if output_affine is not None:
        params["output_affine"] = output_affine
    if smooth_ref is not None:
        params["smooth_ref"] = smooth_ref
    if smooth_float is not None:
        params["smooth_float"] = smooth_float
    if num_levels is not None:
        params["num_levels"] = num_levels
    if first_levels is not None:
        params["first_levels"] = first_levels
    if percent_block is not None:
        params["percent_block"] = percent_block
    if percent_inlier is not None:
        params["percent_inlier"] = percent_inlier
    return params


def reg_aladin_cargs(
    params: RegAladinParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("reg_aladin")
    cargs.extend([
        "-ref",
        execution.input_file(params.get("reference_image", None))
    ])
    cargs.extend([
        "-flo",
        execution.input_file(params.get("floating_image", None))
    ])
    if params.get("symmetric", False):
        cargs.append("-sym")
    if params.get("output_affine", None) is not None:
        cargs.extend([
            "-aff",
            params.get("output_affine", None)
        ])
    if params.get("rigid_only", False):
        cargs.append("-rigOnly")
    if params.get("direct_affine", False):
        cargs.append("-affDirect")
    if params.get("smooth_ref", None) is not None:
        cargs.extend([
            "-smooR",
            str(params.get("smooth_ref", None))
        ])
    if params.get("smooth_float", None) is not None:
        cargs.extend([
            "-smooF",
            str(params.get("smooth_float", None))
        ])
    if params.get("num_levels", None) is not None:
        cargs.extend([
            "-ln",
            str(params.get("num_levels", None))
        ])
    if params.get("first_levels", None) is not None:
        cargs.extend([
            "-lp",
            str(params.get("first_levels", None))
        ])
    if params.get("use_nifti_origin", False):
        cargs.append("-nac")
    if params.get("percent_block", None) is not None:
        cargs.extend([
            "-%v",
            str(params.get("percent_block", None))
        ])
    if params.get("percent_inlier", None) is not None:
        cargs.extend([
            "-%i",
            str(params.get("percent_inlier", None))
        ])
    return cargs


def reg_aladin_outputs(
    params: RegAladinParameters,
    execution: Execution,
) -> RegAladinOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RegAladinOutputs(
        root=execution.output_file("."),
        output_affine_file=execution.output_file("outputAffine.txt"),
    )
    return ret


def reg_aladin_execute(
    params: RegAladinParameters,
    runner: Runner | None = None,
) -> RegAladinOutputs:
    """
    reg_aladin
    
    Block Matching algorithm for global registration based on "Reconstructing a
    3D structure from serial histological sections", Image and Vision Computing,
    2001.
    
    Author: NiftyReg Developers
    
    URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegAladinOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REG_ALADIN_METADATA)
    params = execution.params(params)
    cargs = reg_aladin_cargs(params, execution)
    ret = reg_aladin_outputs(params, execution)
    execution.run(cargs)
    return ret


def reg_aladin(
    reference_image: InputPathType,
    floating_image: InputPathType,
    symmetric: bool = False,
    output_affine: str | None = None,
    rigid_only: bool = False,
    direct_affine: bool = False,
    smooth_ref: float | None = None,
    smooth_float: float | None = None,
    num_levels: float | None = None,
    first_levels: float | None = None,
    use_nifti_origin: bool = False,
    percent_block: float | None = None,
    percent_inlier: float | None = None,
    runner: Runner | None = None,
) -> RegAladinOutputs:
    """
    reg_aladin
    
    Block Matching algorithm for global registration based on "Reconstructing a
    3D structure from serial histological sections", Image and Vision Computing,
    2001.
    
    Author: NiftyReg Developers
    
    URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
    Args:
        reference_image: Filename of the reference (target) image.
        floating_image: Filename of the floating (source) image.
        symmetric: Uses symmetric version of the algorithm.
        output_affine: Filename which contains the output affine transformation.
        rigid_only: To perform a rigid registration only.
        direct_affine: Directly optimize 12 DoF affine.
        smooth_ref: Smooth the reference image using the specified sigma (mm).
        smooth_float: Smooth the floating image using the specified sigma (mm).
        num_levels: Number of levels to perform.
        first_levels: Only perform the first levels.
        use_nifti_origin: Use the NIFTI header origins to initialize the\
            translation.
        percent_block: Percentage of block to use.
        percent_inlier: Percentage of inlier for the LTS.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegAladinOutputs`).
    """
    params = reg_aladin_params(
        reference_image=reference_image,
        floating_image=floating_image,
        symmetric=symmetric,
        output_affine=output_affine,
        rigid_only=rigid_only,
        direct_affine=direct_affine,
        smooth_ref=smooth_ref,
        smooth_float=smooth_float,
        num_levels=num_levels,
        first_levels=first_levels,
        use_nifti_origin=use_nifti_origin,
        percent_block=percent_block,
        percent_inlier=percent_inlier,
    )
    return reg_aladin_execute(params, runner)


__all__ = [
    "REG_ALADIN_METADATA",
    "RegAladinOutputs",
    "reg_aladin",
    "reg_aladin_execute",
    "reg_aladin_params",
]
