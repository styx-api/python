# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

REG_AVERAGE_METADATA = Metadata(
    id="1d5e61e347f021aec87b7bdad49904096693401e.boutiques",
    name="reg_average",
    package="niftyreg",
    container_image_tag="vnmd/niftyreg_1.4.0:20220819",
)


RegAverageParameters = typing.TypedDict('RegAverageParameters', {
    "@type": typing.NotRequired[typing.Literal["niftyreg/reg_average"]],
    "output_file": str,
    "input_files": list[InputPathType],
})
RegAverageParametersTagged = typing.TypedDict('RegAverageParametersTagged', {
    "@type": typing.Literal["niftyreg/reg_average"],
    "output_file": str,
    "input_files": list[InputPathType],
})


class RegAverageOutputs(typing.NamedTuple):
    """
    Output object returned when calling `RegAverageParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file_location: OutputPathType
    """The averaged output file (image or affine transformation)"""


def reg_average_params(
    output_file: str,
    input_files: list[InputPathType],
) -> RegAverageParametersTagged:
    """
    Build parameters.
    
    Args:
        output_file: Filename of the output image or affine transformation.
        input_files: Input file names (images or affine matrices) to be\
            averaged.
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "niftyreg/reg_average",
        "output_file": output_file,
        "input_files": input_files,
    }
    return params


def reg_average_cargs(
    params: RegAverageParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("reg_average")
    cargs.append(params.get("output_file", None))
    cargs.extend([execution.input_file(f) for f in params.get("input_files", None)])
    return cargs


def reg_average_outputs(
    params: RegAverageParameters,
    execution: Execution,
) -> RegAverageOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = RegAverageOutputs(
        root=execution.output_file("."),
        output_file_location=execution.output_file(params.get("output_file", None)),
    )
    return ret


def reg_average_execute(
    params: RegAverageParameters,
    runner: Runner | None = None,
) -> RegAverageOutputs:
    """
    reg_average
    
    Command line program to average either images or affine transformations.
    
    Author: NiftyReg Developers
    
    URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegAverageOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(REG_AVERAGE_METADATA)
    params = execution.params(params)
    cargs = reg_average_cargs(params, execution)
    ret = reg_average_outputs(params, execution)
    execution.run(cargs)
    return ret


def reg_average(
    output_file: str,
    input_files: list[InputPathType],
    runner: Runner | None = None,
) -> RegAverageOutputs:
    """
    reg_average
    
    Command line program to average either images or affine transformations.
    
    Author: NiftyReg Developers
    
    URL: http://cmictig.cs.ucl.ac.uk/wiki/index.php/NiftyReg
    
    Args:
        output_file: Filename of the output image or affine transformation.
        input_files: Input file names (images or affine matrices) to be\
            averaged.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `RegAverageOutputs`).
    """
    params = reg_average_params(
        output_file=output_file,
        input_files=input_files,
    )
    return reg_average_execute(params, runner)


__all__ = [
    "REG_AVERAGE_METADATA",
    "RegAverageOutputs",
    "reg_average",
    "reg_average_execute",
    "reg_average_params",
]
