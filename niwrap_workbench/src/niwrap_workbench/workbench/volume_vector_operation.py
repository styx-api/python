# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *

VOLUME_VECTOR_OPERATION_METADATA = Metadata(
    id="627385804ad049aa609edba2efb31867d3112b21.boutiques",
    name="volume-vector-operation",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


VolumeVectorOperationParameters = typing.TypedDict('VolumeVectorOperationParameters', {
    "@type": typing.NotRequired[typing.Literal["workbench/volume-vector-operation"]],
    "vectors_a": InputPathType,
    "vectors_b": InputPathType,
    "operation": str,
    "volume_out": str,
    "opt_normalize_a": bool,
    "opt_normalize_b": bool,
    "opt_normalize_output": bool,
    "opt_magnitude": bool,
})
VolumeVectorOperationParametersTagged = typing.TypedDict('VolumeVectorOperationParametersTagged', {
    "@type": typing.Literal["workbench/volume-vector-operation"],
    "vectors_a": InputPathType,
    "vectors_b": InputPathType,
    "operation": str,
    "volume_out": str,
    "opt_normalize_a": bool,
    "opt_normalize_b": bool,
    "opt_normalize_output": bool,
    "opt_magnitude": bool,
})


class VolumeVectorOperationOutputs(typing.NamedTuple):
    """
    Output object returned when calling `VolumeVectorOperationParameters(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_out: OutputPathType
    """the output file"""


def volume_vector_operation_params(
    vectors_a: InputPathType,
    vectors_b: InputPathType,
    operation: str,
    volume_out: str,
    opt_normalize_a: bool = False,
    opt_normalize_b: bool = False,
    opt_normalize_output: bool = False,
    opt_magnitude: bool = False,
) -> VolumeVectorOperationParametersTagged:
    """
    Build parameters.
    
    Args:
        vectors_a: first vector input file.
        vectors_b: second vector input file.
        operation: what vector operation to do.
        volume_out: the output file.
        opt_normalize_a: normalize vectors of first input.
        opt_normalize_b: normalize vectors of second input.
        opt_normalize_output: normalize output vectors (not valid for dot\
            product).
        opt_magnitude: output the magnitude of the result (not valid for dot\
            product).
    Returns:
        Parameter dictionary
    """
    params = {
        "@type": "workbench/volume-vector-operation",
        "vectors_a": vectors_a,
        "vectors_b": vectors_b,
        "operation": operation,
        "volume_out": volume_out,
        "opt_normalize_a": opt_normalize_a,
        "opt_normalize_b": opt_normalize_b,
        "opt_normalize_output": opt_normalize_output,
        "opt_magnitude": opt_magnitude,
    }
    return params


def volume_vector_operation_cargs(
    params: VolumeVectorOperationParameters,
    execution: Execution,
) -> list[str]:
    """
    Build command-line arguments from parameters.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Command-line arguments.
    """
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-vector-operation")
    cargs.append(execution.input_file(params.get("vectors_a", None)))
    cargs.append(execution.input_file(params.get("vectors_b", None)))
    cargs.append(params.get("operation", None))
    cargs.append(params.get("volume_out", None))
    if params.get("opt_normalize_a", False):
        cargs.append("-normalize-a")
    if params.get("opt_normalize_b", False):
        cargs.append("-normalize-b")
    if params.get("opt_normalize_output", False):
        cargs.append("-normalize-output")
    if params.get("opt_magnitude", False):
        cargs.append("-magnitude")
    return cargs


def volume_vector_operation_outputs(
    params: VolumeVectorOperationParameters,
    execution: Execution,
) -> VolumeVectorOperationOutputs:
    """
    Build outputs object containing output file paths and possibly stdout/stderr.
    
    Args:
        params: The parameters.
        execution: The execution object for resolving input paths.
    Returns:
        Outputs object.
    """
    ret = VolumeVectorOperationOutputs(
        root=execution.output_file("."),
        volume_out=execution.output_file(params.get("volume_out", None)),
    )
    return ret


def volume_vector_operation_execute(
    params: VolumeVectorOperationParameters,
    runner: Runner | None = None,
) -> VolumeVectorOperationOutputs:
    """
    volume-vector-operation
    
    Do a vector operation on volume files.
    
    Does a vector operation on two volume files (that must have a multiple of 3
    subvolumes). Either of the inputs may have multiple vectors (more than 3
    subvolumes), but not both (at least one must have exactly 3 subvolumes). The
    -magnitude and -normalize-output options may not be specified together, or
    with the DOT operation. The <operation> parameter must be one of the
    following:
    
    DOT
    CROSS
    ADD
    SUBTRACT.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        params: The parameters.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VolumeVectorOperationOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_VECTOR_OPERATION_METADATA)
    params = execution.params(params)
    cargs = volume_vector_operation_cargs(params, execution)
    ret = volume_vector_operation_outputs(params, execution)
    execution.run(cargs)
    return ret


def volume_vector_operation(
    vectors_a: InputPathType,
    vectors_b: InputPathType,
    operation: str,
    volume_out: str,
    opt_normalize_a: bool = False,
    opt_normalize_b: bool = False,
    opt_normalize_output: bool = False,
    opt_magnitude: bool = False,
    runner: Runner | None = None,
) -> VolumeVectorOperationOutputs:
    """
    volume-vector-operation
    
    Do a vector operation on volume files.
    
    Does a vector operation on two volume files (that must have a multiple of 3
    subvolumes). Either of the inputs may have multiple vectors (more than 3
    subvolumes), but not both (at least one must have exactly 3 subvolumes). The
    -magnitude and -normalize-output options may not be specified together, or
    with the DOT operation. The <operation> parameter must be one of the
    following:
    
    DOT
    CROSS
    ADD
    SUBTRACT.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        vectors_a: first vector input file.
        vectors_b: second vector input file.
        operation: what vector operation to do.
        volume_out: the output file.
        opt_normalize_a: normalize vectors of first input.
        opt_normalize_b: normalize vectors of second input.
        opt_normalize_output: normalize output vectors (not valid for dot\
            product).
        opt_magnitude: output the magnitude of the result (not valid for dot\
            product).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VolumeVectorOperationOutputs`).
    """
    params = volume_vector_operation_params(
        vectors_a=vectors_a,
        vectors_b=vectors_b,
        operation=operation,
        volume_out=volume_out,
        opt_normalize_a=opt_normalize_a,
        opt_normalize_b=opt_normalize_b,
        opt_normalize_output=opt_normalize_output,
        opt_magnitude=opt_magnitude,
    )
    return volume_vector_operation_execute(params, runner)


__all__ = [
    "VOLUME_VECTOR_OPERATION_METADATA",
    "VolumeVectorOperationOutputs",
    "volume_vector_operation",
    "volume_vector_operation_execute",
    "volume_vector_operation_params",
]
